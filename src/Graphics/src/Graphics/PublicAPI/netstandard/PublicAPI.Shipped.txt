#nullable enable
~abstract Microsoft.Maui.Graphics.AbstractCanvas<TState>.ClipPath(Microsoft.Maui.Graphics.PathF path, Microsoft.Maui.Graphics.WindingMode windingMode = Microsoft.Maui.Graphics.WindingMode.NonZero) -> void
~abstract Microsoft.Maui.Graphics.AbstractCanvas<TState>.DrawImage(Microsoft.Maui.Graphics.IImage image, float x, float y, float width, float height) -> void
~abstract Microsoft.Maui.Graphics.AbstractCanvas<TState>.DrawString(string value, float x, float y, float width, float height, Microsoft.Maui.Graphics.HorizontalAlignment horizontalAlignment, Microsoft.Maui.Graphics.VerticalAlignment verticalAlignment, Microsoft.Maui.Graphics.TextFlow textFlow = Microsoft.Maui.Graphics.TextFlow.ClipBounds, float lineSpacingAdjustment = 0) -> void
~abstract Microsoft.Maui.Graphics.AbstractCanvas<TState>.DrawString(string value, float x, float y, Microsoft.Maui.Graphics.HorizontalAlignment horizontalAlignment) -> void
~abstract Microsoft.Maui.Graphics.AbstractCanvas<TState>.DrawText(Microsoft.Maui.Graphics.Text.IAttributedText value, float x, float y, float width, float height) -> void
~abstract Microsoft.Maui.Graphics.AbstractCanvas<TState>.FillColor.set -> void
~abstract Microsoft.Maui.Graphics.AbstractCanvas<TState>.FillPath(Microsoft.Maui.Graphics.PathF path, Microsoft.Maui.Graphics.WindingMode windingMode) -> void
~abstract Microsoft.Maui.Graphics.AbstractCanvas<TState>.Font.set -> void
~abstract Microsoft.Maui.Graphics.AbstractCanvas<TState>.FontColor.set -> void
~abstract Microsoft.Maui.Graphics.AbstractCanvas<TState>.PlatformDrawPath(Microsoft.Maui.Graphics.PathF path) -> void
~abstract Microsoft.Maui.Graphics.AbstractCanvas<TState>.PlatformSetStrokeDashPattern(float[] strokePattern, float strokeDashOffset, float strokeSize) -> void
~abstract Microsoft.Maui.Graphics.AbstractCanvas<TState>.SetFillPaint(Microsoft.Maui.Graphics.Paint paint, Microsoft.Maui.Graphics.RectF rectangle) -> void
~abstract Microsoft.Maui.Graphics.AbstractCanvas<TState>.SetShadow(Microsoft.Maui.Graphics.SizeF offset, float blur, Microsoft.Maui.Graphics.Color color) -> void
~abstract Microsoft.Maui.Graphics.AbstractCanvas<TState>.StrokeColor.set -> void
~abstract Microsoft.Maui.Graphics.AbstractPattern.Draw(Microsoft.Maui.Graphics.ICanvas canvas) -> void
~abstract Microsoft.Maui.Graphics.BitmapExportContext.Canvas.get -> Microsoft.Maui.Graphics.ICanvas
~abstract Microsoft.Maui.Graphics.BitmapExportContext.Image.get -> Microsoft.Maui.Graphics.IImage
~abstract Microsoft.Maui.Graphics.BitmapExportContext.WriteToStream(System.IO.Stream stream) -> void
~abstract Microsoft.Maui.Graphics.Text.AbstractAttributedText.Runs.get -> System.Collections.Generic.IReadOnlyList<Microsoft.Maui.Graphics.Text.IAttributedTextRun>
~abstract Microsoft.Maui.Graphics.Text.AbstractAttributedText.Text.get -> string
~Microsoft.Maui.Graphics.AbstractCanvas<TState>
~Microsoft.Maui.Graphics.AbstractCanvas<TState>.AbstractCanvas(Microsoft.Maui.Graphics.ICanvasStateService<TState> stateService, Microsoft.Maui.Graphics.IStringSizeService stringSizeService) -> void
~Microsoft.Maui.Graphics.AbstractCanvas<TState>.CurrentState.get -> TState
~Microsoft.Maui.Graphics.AbstractCanvas<TState>.DrawPath(Microsoft.Maui.Graphics.PathF path) -> void
~Microsoft.Maui.Graphics.AbstractCanvas<TState>.GetStringSize(string aString, Microsoft.Maui.Graphics.IFont font, float aFontSize, Microsoft.Maui.Graphics.HorizontalAlignment aHorizontalAlignment, Microsoft.Maui.Graphics.VerticalAlignment aVerticalAlignment) -> Microsoft.Maui.Graphics.SizeF
~Microsoft.Maui.Graphics.AbstractCanvas<TState>.GetStringSize(string value, Microsoft.Maui.Graphics.IFont font, float fontSize) -> Microsoft.Maui.Graphics.SizeF
~Microsoft.Maui.Graphics.AbstractCanvas<TState>.StrokeDashPattern.set -> void
~Microsoft.Maui.Graphics.CanvasState.CanvasState(Microsoft.Maui.Graphics.CanvasState prototype) -> void
~Microsoft.Maui.Graphics.CanvasState.StrokeDashPattern.get -> float[]
~Microsoft.Maui.Graphics.CanvasState.StrokeDashPattern.set -> void
~Microsoft.Maui.Graphics.Color.AddLuminosity(float delta) -> Microsoft.Maui.Graphics.Color
~Microsoft.Maui.Graphics.Color.AsPaint() -> Microsoft.Maui.Graphics.Paint
~Microsoft.Maui.Graphics.Color.GetComplementary() -> Microsoft.Maui.Graphics.Color
~Microsoft.Maui.Graphics.Color.MultiplyAlpha(float multiplyBy) -> Microsoft.Maui.Graphics.Color
~Microsoft.Maui.Graphics.Color.ToArgbHex(bool includeAlpha = false) -> string
~Microsoft.Maui.Graphics.Color.ToHex() -> string
~Microsoft.Maui.Graphics.Color.ToHex(bool includeAlpha) -> string
~Microsoft.Maui.Graphics.Color.ToRgbaHex(bool includeAlpha = false) -> string
~Microsoft.Maui.Graphics.Color.WithAlpha(float alpha) -> Microsoft.Maui.Graphics.Color
~Microsoft.Maui.Graphics.Color.WithHue(float hue) -> Microsoft.Maui.Graphics.Color
~Microsoft.Maui.Graphics.Color.WithLuminosity(float luminosity) -> Microsoft.Maui.Graphics.Color
~Microsoft.Maui.Graphics.Color.WithSaturation(float saturation) -> Microsoft.Maui.Graphics.Color
~Microsoft.Maui.Graphics.Font.Equals(Microsoft.Maui.Graphics.IFont other) -> bool
~Microsoft.Maui.Graphics.Font.Font(string name, int weight = 400, Microsoft.Maui.Graphics.FontStyleType styleType = Microsoft.Maui.Graphics.FontStyleType.Normal) -> void
~Microsoft.Maui.Graphics.Font.Name.get -> string
~Microsoft.Maui.Graphics.GradientPaint.AddOffset(float offset, Microsoft.Maui.Graphics.Color color) -> void
~Microsoft.Maui.Graphics.GradientPaint.BlendStartAndEndColors() -> Microsoft.Maui.Graphics.Color
~Microsoft.Maui.Graphics.GradientPaint.BlendStartAndEndColors(Microsoft.Maui.Graphics.Color startColor, Microsoft.Maui.Graphics.Color endColor, float factor) -> Microsoft.Maui.Graphics.Color
~Microsoft.Maui.Graphics.GradientPaint.EndColor.get -> Microsoft.Maui.Graphics.Color
~Microsoft.Maui.Graphics.GradientPaint.EndColor.set -> void
~Microsoft.Maui.Graphics.GradientPaint.GetColorAt(float offset) -> Microsoft.Maui.Graphics.Color
~Microsoft.Maui.Graphics.GradientPaint.GetSortedStops() -> Microsoft.Maui.Graphics.PaintGradientStop[]
~Microsoft.Maui.Graphics.GradientPaint.GradientPaint(Microsoft.Maui.Graphics.GradientPaint source) -> void
~Microsoft.Maui.Graphics.GradientPaint.GradientStops.get -> Microsoft.Maui.Graphics.PaintGradientStop[]
~Microsoft.Maui.Graphics.GradientPaint.GradientStops.set -> void
~Microsoft.Maui.Graphics.GradientPaint.SetGradientStops(float[] offsets, Microsoft.Maui.Graphics.Color[] colors) -> void
~Microsoft.Maui.Graphics.GradientPaint.StartColor.get -> Microsoft.Maui.Graphics.Color
~Microsoft.Maui.Graphics.GradientPaint.StartColor.set -> void
~Microsoft.Maui.Graphics.IBitmapExportService.CreateContext(int width, int height, float displayScale = 1) -> Microsoft.Maui.Graphics.BitmapExportContext
~Microsoft.Maui.Graphics.ICanvas.ClipPath(Microsoft.Maui.Graphics.PathF path, Microsoft.Maui.Graphics.WindingMode windingMode = Microsoft.Maui.Graphics.WindingMode.NonZero) -> void
~Microsoft.Maui.Graphics.ICanvas.DrawImage(Microsoft.Maui.Graphics.IImage image, float x, float y, float width, float height) -> void
~Microsoft.Maui.Graphics.ICanvas.DrawPath(Microsoft.Maui.Graphics.PathF path) -> void
~Microsoft.Maui.Graphics.ICanvas.DrawString(string value, float x, float y, float width, float height, Microsoft.Maui.Graphics.HorizontalAlignment horizontalAlignment, Microsoft.Maui.Graphics.VerticalAlignment verticalAlignment, Microsoft.Maui.Graphics.TextFlow textFlow = Microsoft.Maui.Graphics.TextFlow.ClipBounds, float lineSpacingAdjustment = 0) -> void
~Microsoft.Maui.Graphics.ICanvas.DrawString(string value, float x, float y, Microsoft.Maui.Graphics.HorizontalAlignment horizontalAlignment) -> void
~Microsoft.Maui.Graphics.ICanvas.DrawText(Microsoft.Maui.Graphics.Text.IAttributedText value, float x, float y, float width, float height) -> void
~Microsoft.Maui.Graphics.ICanvas.FillColor.set -> void
~Microsoft.Maui.Graphics.ICanvas.FillPath(Microsoft.Maui.Graphics.PathF path, Microsoft.Maui.Graphics.WindingMode windingMode) -> void
~Microsoft.Maui.Graphics.ICanvas.Font.set -> void
~Microsoft.Maui.Graphics.ICanvas.FontColor.set -> void
~Microsoft.Maui.Graphics.ICanvas.GetStringSize(string value, Microsoft.Maui.Graphics.IFont font, float fontSize, Microsoft.Maui.Graphics.HorizontalAlignment horizontalAlignment, Microsoft.Maui.Graphics.VerticalAlignment verticalAlignment) -> Microsoft.Maui.Graphics.SizeF
~Microsoft.Maui.Graphics.ICanvas.GetStringSize(string value, Microsoft.Maui.Graphics.IFont font, float fontSize) -> Microsoft.Maui.Graphics.SizeF
~Microsoft.Maui.Graphics.ICanvas.SetFillPaint(Microsoft.Maui.Graphics.Paint paint, Microsoft.Maui.Graphics.RectF rectangle) -> void
~Microsoft.Maui.Graphics.ICanvas.SetShadow(Microsoft.Maui.Graphics.SizeF offset, float blur, Microsoft.Maui.Graphics.Color color) -> void
~Microsoft.Maui.Graphics.ICanvas.StrokeColor.set -> void
~Microsoft.Maui.Graphics.ICanvas.StrokeDashPattern.set -> void
~Microsoft.Maui.Graphics.ICanvasStateService<TState>
~Microsoft.Maui.Graphics.ICanvasStateService<TState>.CreateCopy(TState prototype) -> TState
~Microsoft.Maui.Graphics.ICanvasStateService<TState>.CreateNew(object context) -> TState
~Microsoft.Maui.Graphics.IDrawable.Draw(Microsoft.Maui.Graphics.ICanvas canvas, Microsoft.Maui.Graphics.RectF dirtyRect) -> void
~Microsoft.Maui.Graphics.IFont.Name.get -> string
~Microsoft.Maui.Graphics.IImage.Downsize(float maxWidth, float maxHeight, bool disposeOriginal = false) -> Microsoft.Maui.Graphics.IImage
~Microsoft.Maui.Graphics.IImage.Downsize(float maxWidthOrHeight, bool disposeOriginal = false) -> Microsoft.Maui.Graphics.IImage
~Microsoft.Maui.Graphics.IImage.Resize(float width, float height, Microsoft.Maui.Graphics.ResizeMode resizeMode = Microsoft.Maui.Graphics.ResizeMode.Fit, bool disposeOriginal = false) -> Microsoft.Maui.Graphics.IImage
~Microsoft.Maui.Graphics.IImage.Save(System.IO.Stream stream, Microsoft.Maui.Graphics.ImageFormat format = Microsoft.Maui.Graphics.ImageFormat.Png, float quality = 1) -> void
~Microsoft.Maui.Graphics.IImage.SaveAsync(System.IO.Stream stream, Microsoft.Maui.Graphics.ImageFormat format = Microsoft.Maui.Graphics.ImageFormat.Png, float quality = 1) -> System.Threading.Tasks.Task
~Microsoft.Maui.Graphics.IImage.ToPlatformImage() -> Microsoft.Maui.Graphics.IImage
~Microsoft.Maui.Graphics.IImageLoadingService.FromStream(System.IO.Stream stream, Microsoft.Maui.Graphics.ImageFormat format = Microsoft.Maui.Graphics.ImageFormat.Png) -> Microsoft.Maui.Graphics.IImage
~Microsoft.Maui.Graphics.ImagePaint.Image.get -> Microsoft.Maui.Graphics.IImage
~Microsoft.Maui.Graphics.ImagePaint.Image.set -> void
~Microsoft.Maui.Graphics.Insets.Insets(Microsoft.Maui.Graphics.Insets insets) -> void
~Microsoft.Maui.Graphics.Insets.ToParsableString() -> string
~Microsoft.Maui.Graphics.InsetsF.InsetsF(Microsoft.Maui.Graphics.InsetsF insets) -> void
~Microsoft.Maui.Graphics.InsetsF.ToParsableString() -> string
~Microsoft.Maui.Graphics.IPattern.Draw(Microsoft.Maui.Graphics.ICanvas canvas) -> void
~Microsoft.Maui.Graphics.IPdfPage.Save(System.IO.Stream stream) -> void
~Microsoft.Maui.Graphics.IPdfPage.SaveAsync(System.IO.Stream stream) -> System.Threading.Tasks.Task
~Microsoft.Maui.Graphics.IPdfRenderService.CreatePage(System.IO.Stream stream, int pageNumber = -1) -> Microsoft.Maui.Graphics.IPdfPage
~Microsoft.Maui.Graphics.IPicture.Draw(Microsoft.Maui.Graphics.ICanvas canvas) -> void
~Microsoft.Maui.Graphics.IPictureReader.Read(byte[] data) -> Microsoft.Maui.Graphics.IPicture
~Microsoft.Maui.Graphics.IPictureWriter.Save(Microsoft.Maui.Graphics.IPicture picture, System.IO.Stream stream) -> void
~Microsoft.Maui.Graphics.IPictureWriter.SaveAsync(Microsoft.Maui.Graphics.IPicture picture, System.IO.Stream stream) -> System.Threading.Tasks.Task
~Microsoft.Maui.Graphics.IStringSizeService.GetStringSize(string value, Microsoft.Maui.Graphics.IFont font, float fontSize, Microsoft.Maui.Graphics.HorizontalAlignment horizontalAlignment, Microsoft.Maui.Graphics.VerticalAlignment verticalAlignment) -> Microsoft.Maui.Graphics.SizeF
~Microsoft.Maui.Graphics.IStringSizeService.GetStringSize(string value, Microsoft.Maui.Graphics.IFont font, float fontSize) -> Microsoft.Maui.Graphics.SizeF
~Microsoft.Maui.Graphics.ITextAttributes.Font.get -> Microsoft.Maui.Graphics.IFont
~Microsoft.Maui.Graphics.ITextAttributes.Font.set -> void
~Microsoft.Maui.Graphics.ITextAttributes.TextFontColor.get -> Microsoft.Maui.Graphics.Color
~Microsoft.Maui.Graphics.ITextAttributes.TextFontColor.set -> void
~Microsoft.Maui.Graphics.LinearGradientPaint.LinearGradientPaint(Microsoft.Maui.Graphics.GradientPaint gradientPaint) -> void
~Microsoft.Maui.Graphics.LinearGradientPaint.LinearGradientPaint(Microsoft.Maui.Graphics.PaintGradientStop[] gradientStops, Microsoft.Maui.Graphics.Point startPoint, Microsoft.Maui.Graphics.Point endPoint) -> void
~Microsoft.Maui.Graphics.LinearGradientPaint.LinearGradientPaint(Microsoft.Maui.Graphics.PaintGradientStop[] gradientStops) -> void
~Microsoft.Maui.Graphics.Paint.BackgroundColor.get -> Microsoft.Maui.Graphics.Color
~Microsoft.Maui.Graphics.Paint.BackgroundColor.set -> void
~Microsoft.Maui.Graphics.Paint.ForegroundColor.get -> Microsoft.Maui.Graphics.Color
~Microsoft.Maui.Graphics.Paint.ForegroundColor.set -> void
~Microsoft.Maui.Graphics.PaintGradientStop.Color.get -> Microsoft.Maui.Graphics.Color
~Microsoft.Maui.Graphics.PaintGradientStop.Color.set -> void
~Microsoft.Maui.Graphics.PaintGradientStop.CompareTo(Microsoft.Maui.Graphics.PaintGradientStop obj) -> int
~Microsoft.Maui.Graphics.PaintGradientStop.PaintGradientStop(float offset, Microsoft.Maui.Graphics.Color color) -> void
~Microsoft.Maui.Graphics.PaintGradientStop.PaintGradientStop(Microsoft.Maui.Graphics.PaintGradientStop source) -> void
~Microsoft.Maui.Graphics.PaintPattern.Draw(Microsoft.Maui.Graphics.ICanvas canvas) -> void
~Microsoft.Maui.Graphics.PaintPattern.Paint.get -> Microsoft.Maui.Graphics.Paint
~Microsoft.Maui.Graphics.PaintPattern.Paint.set -> void
~Microsoft.Maui.Graphics.PaintPattern.PaintPattern(Microsoft.Maui.Graphics.IPattern pattern) -> void
~Microsoft.Maui.Graphics.PaintPattern.Wrapped.get -> Microsoft.Maui.Graphics.IPattern
~Microsoft.Maui.Graphics.PathBuilder.BuildPath(string pathAsString) -> Microsoft.Maui.Graphics.PathF
~Microsoft.Maui.Graphics.PathF.AddArc(float x1, float y1, float x2, float y2, float startAngle, float endAngle, bool clockwise) -> Microsoft.Maui.Graphics.PathF
~Microsoft.Maui.Graphics.PathF.AddArc(Microsoft.Maui.Graphics.PointF topLeft, Microsoft.Maui.Graphics.PointF bottomRight, float startAngle, float endAngle, bool clockwise) -> Microsoft.Maui.Graphics.PathF
~Microsoft.Maui.Graphics.PathF.CurveTo(float c1X, float c1Y, float c2X, float c2Y, float x, float y) -> Microsoft.Maui.Graphics.PathF
~Microsoft.Maui.Graphics.PathF.CurveTo(Microsoft.Maui.Graphics.PointF controlPoint1, Microsoft.Maui.Graphics.PointF controlPoint2, Microsoft.Maui.Graphics.PointF point) -> Microsoft.Maui.Graphics.PathF
~Microsoft.Maui.Graphics.PathF.Equals(object obj, float epsilon) -> bool
~Microsoft.Maui.Graphics.PathF.GetFlattenedPath(float flatness = 0.001, bool includeSubPaths = false) -> Microsoft.Maui.Graphics.PathF
~Microsoft.Maui.Graphics.PathF.GetPointsForSegment(int segmentIndex) -> Microsoft.Maui.Graphics.PointF[]
~Microsoft.Maui.Graphics.PathF.InsertCurveTo(Microsoft.Maui.Graphics.PointF controlPoint1, Microsoft.Maui.Graphics.PointF controlPoint2, Microsoft.Maui.Graphics.PointF point, int index) -> Microsoft.Maui.Graphics.PathF
~Microsoft.Maui.Graphics.PathF.InsertLineTo(Microsoft.Maui.Graphics.PointF point, int index) -> Microsoft.Maui.Graphics.PathF
~Microsoft.Maui.Graphics.PathF.InsertQuadTo(Microsoft.Maui.Graphics.PointF controlPoint, Microsoft.Maui.Graphics.PointF point, int index) -> Microsoft.Maui.Graphics.PathF
~Microsoft.Maui.Graphics.PathF.LineTo(float x, float y) -> Microsoft.Maui.Graphics.PathF
~Microsoft.Maui.Graphics.PathF.LineTo(Microsoft.Maui.Graphics.PointF point) -> Microsoft.Maui.Graphics.PathF
~Microsoft.Maui.Graphics.PathF.MoveTo(float x, float y) -> Microsoft.Maui.Graphics.PathF
~Microsoft.Maui.Graphics.PathF.MoveTo(Microsoft.Maui.Graphics.PointF point) -> Microsoft.Maui.Graphics.PathF
~Microsoft.Maui.Graphics.PathF.PathF(Microsoft.Maui.Graphics.PathF path) -> void
~Microsoft.Maui.Graphics.PathF.PlatformPath.get -> object
~Microsoft.Maui.Graphics.PathF.PlatformPath.set -> void
~Microsoft.Maui.Graphics.PathF.Points.get -> System.Collections.Generic.IEnumerable<Microsoft.Maui.Graphics.PointF>
~Microsoft.Maui.Graphics.PathF.QuadTo(float cx, float cy, float x, float y) -> Microsoft.Maui.Graphics.PathF
~Microsoft.Maui.Graphics.PathF.QuadTo(Microsoft.Maui.Graphics.PointF controlPoint, Microsoft.Maui.Graphics.PointF point) -> Microsoft.Maui.Graphics.PathF
~Microsoft.Maui.Graphics.PathF.Reverse() -> Microsoft.Maui.Graphics.PathF
~Microsoft.Maui.Graphics.PathF.Rotate(float angleAsDegrees, Microsoft.Maui.Graphics.PointF pivot) -> Microsoft.Maui.Graphics.PathF
~Microsoft.Maui.Graphics.PathF.SegmentTypes.get -> System.Collections.Generic.IEnumerable<Microsoft.Maui.Graphics.PathOperation>
~Microsoft.Maui.Graphics.PathF.Separate() -> System.Collections.Generic.List<Microsoft.Maui.Graphics.PathF>
~Microsoft.Maui.Graphics.PatternPaint.Pattern.get -> Microsoft.Maui.Graphics.IPattern
~Microsoft.Maui.Graphics.PatternPaint.Pattern.set -> void
~Microsoft.Maui.Graphics.PictureCanvas.ClipPath(Microsoft.Maui.Graphics.PathF path, Microsoft.Maui.Graphics.WindingMode windingMode = Microsoft.Maui.Graphics.WindingMode.NonZero) -> void
~Microsoft.Maui.Graphics.PictureCanvas.DrawImage(Microsoft.Maui.Graphics.IImage image, float x, float y, float width, float height) -> void
~Microsoft.Maui.Graphics.PictureCanvas.DrawPath(Microsoft.Maui.Graphics.PathF path) -> void
~Microsoft.Maui.Graphics.PictureCanvas.DrawString(string value, float x, float y, float width, float height, Microsoft.Maui.Graphics.HorizontalAlignment horizontalAlignment, Microsoft.Maui.Graphics.VerticalAlignment verticalAlignment, Microsoft.Maui.Graphics.TextFlow textFlow = Microsoft.Maui.Graphics.TextFlow.ClipBounds, float lineSpacingAdjustment = 0) -> void
~Microsoft.Maui.Graphics.PictureCanvas.DrawString(string value, float x, float y, Microsoft.Maui.Graphics.HorizontalAlignment horizontalAlignment) -> void
~Microsoft.Maui.Graphics.PictureCanvas.DrawText(Microsoft.Maui.Graphics.Text.IAttributedText value, float x, float y, float width, float height) -> void
~Microsoft.Maui.Graphics.PictureCanvas.FillColor.set -> void
~Microsoft.Maui.Graphics.PictureCanvas.FillPath(Microsoft.Maui.Graphics.PathF path, Microsoft.Maui.Graphics.WindingMode windingMode) -> void
~Microsoft.Maui.Graphics.PictureCanvas.Font.set -> void
~Microsoft.Maui.Graphics.PictureCanvas.FontColor.set -> void
~Microsoft.Maui.Graphics.PictureCanvas.GetStringSize(string value, Microsoft.Maui.Graphics.IFont font, float fontSize, Microsoft.Maui.Graphics.HorizontalAlignment horizontalAlignment, Microsoft.Maui.Graphics.VerticalAlignment verticalAlignment) -> Microsoft.Maui.Graphics.SizeF
~Microsoft.Maui.Graphics.PictureCanvas.GetStringSize(string value, Microsoft.Maui.Graphics.IFont font, float fontSize) -> Microsoft.Maui.Graphics.SizeF
~Microsoft.Maui.Graphics.PictureCanvas.Picture.get -> Microsoft.Maui.Graphics.IPicture
~Microsoft.Maui.Graphics.PictureCanvas.SetFillPaint(Microsoft.Maui.Graphics.Paint paint, Microsoft.Maui.Graphics.PointF point1, Microsoft.Maui.Graphics.PointF point2) -> void
~Microsoft.Maui.Graphics.PictureCanvas.SetFillPaint(Microsoft.Maui.Graphics.Paint paint, Microsoft.Maui.Graphics.RectF rectangle) -> void
~Microsoft.Maui.Graphics.PictureCanvas.SetShadow(Microsoft.Maui.Graphics.SizeF offset, float blur, Microsoft.Maui.Graphics.Color color) -> void
~Microsoft.Maui.Graphics.PictureCanvas.StrokeColor.set -> void
~Microsoft.Maui.Graphics.PictureCanvas.StrokeDashPattern.set -> void
~Microsoft.Maui.Graphics.PicturePattern.PicturePattern(Microsoft.Maui.Graphics.IPicture picture, float stepX, float stepY) -> void
~Microsoft.Maui.Graphics.PicturePattern.PicturePattern(Microsoft.Maui.Graphics.IPicture picture) -> void
~Microsoft.Maui.Graphics.Platform.PlatformImage.Bytes.get -> byte[]
~Microsoft.Maui.Graphics.Platform.PlatformImage.Downsize(float maxWidth, float maxHeight, bool disposeOriginal = false) -> Microsoft.Maui.Graphics.IImage
~Microsoft.Maui.Graphics.Platform.PlatformImage.Downsize(float maxWidthOrHeight, bool disposeOriginal = false) -> Microsoft.Maui.Graphics.IImage
~Microsoft.Maui.Graphics.Platform.PlatformImage.Draw(Microsoft.Maui.Graphics.ICanvas canvas, Microsoft.Maui.Graphics.RectF dirtyRect) -> void
~Microsoft.Maui.Graphics.Platform.PlatformImage.PlatformImage(byte[] bytes, Microsoft.Maui.Graphics.ImageFormat originalFormat = Microsoft.Maui.Graphics.ImageFormat.Png) -> void
~Microsoft.Maui.Graphics.Platform.PlatformImage.Resize(float width, float height, Microsoft.Maui.Graphics.ResizeMode resizeMode = Microsoft.Maui.Graphics.ResizeMode.Fit, bool disposeOriginal = false) -> Microsoft.Maui.Graphics.IImage
~Microsoft.Maui.Graphics.Platform.PlatformImage.Save(System.IO.Stream stream, Microsoft.Maui.Graphics.ImageFormat format = Microsoft.Maui.Graphics.ImageFormat.Png, float quality = 1) -> void
~Microsoft.Maui.Graphics.Platform.PlatformImage.SaveAsync(System.IO.Stream stream, Microsoft.Maui.Graphics.ImageFormat format = Microsoft.Maui.Graphics.ImageFormat.Png, float quality = 1) -> System.Threading.Tasks.Task
~Microsoft.Maui.Graphics.Platform.PlatformImage.ToPlatformImage() -> Microsoft.Maui.Graphics.IImage
~Microsoft.Maui.Graphics.Point.Equals(object o, double epsilon) -> bool
~Microsoft.Maui.Graphics.PointF.Equals(object o, float epsilon) -> bool
~Microsoft.Maui.Graphics.RadialGradientPaint.RadialGradientPaint(Microsoft.Maui.Graphics.GradientPaint gradientPaint) -> void
~Microsoft.Maui.Graphics.RadialGradientPaint.RadialGradientPaint(Microsoft.Maui.Graphics.PaintGradientStop[] gradientStops, Microsoft.Maui.Graphics.Point center, double radius) -> void
~Microsoft.Maui.Graphics.RadialGradientPaint.RadialGradientPaint(Microsoft.Maui.Graphics.PaintGradientStop[] gradientStops) -> void
~Microsoft.Maui.Graphics.ScalingCanvas.ClipPath(Microsoft.Maui.Graphics.PathF path, Microsoft.Maui.Graphics.WindingMode windingMode = Microsoft.Maui.Graphics.WindingMode.NonZero) -> void
~Microsoft.Maui.Graphics.ScalingCanvas.DrawImage(Microsoft.Maui.Graphics.IImage image, float x, float y, float width, float height) -> void
~Microsoft.Maui.Graphics.ScalingCanvas.DrawPath(Microsoft.Maui.Graphics.PathF path) -> void
~Microsoft.Maui.Graphics.ScalingCanvas.DrawString(string value, float x, float y, float width, float height, Microsoft.Maui.Graphics.HorizontalAlignment horizontalAlignment, Microsoft.Maui.Graphics.VerticalAlignment verticalAlignment, Microsoft.Maui.Graphics.TextFlow textFlow = Microsoft.Maui.Graphics.TextFlow.ClipBounds, float lineSpacingAdjustment = 0) -> void
~Microsoft.Maui.Graphics.ScalingCanvas.DrawString(string value, float x, float y, Microsoft.Maui.Graphics.HorizontalAlignment horizontalAlignment) -> void
~Microsoft.Maui.Graphics.ScalingCanvas.DrawText(Microsoft.Maui.Graphics.Text.IAttributedText value, float x, float y, float width, float height) -> void
~Microsoft.Maui.Graphics.ScalingCanvas.FillColor.set -> void
~Microsoft.Maui.Graphics.ScalingCanvas.FillPath(Microsoft.Maui.Graphics.PathF path, Microsoft.Maui.Graphics.WindingMode windingMode) -> void
~Microsoft.Maui.Graphics.ScalingCanvas.Font.set -> void
~Microsoft.Maui.Graphics.ScalingCanvas.FontColor.set -> void
~Microsoft.Maui.Graphics.ScalingCanvas.GetStringSize(string value, Microsoft.Maui.Graphics.IFont font, float fontSize, Microsoft.Maui.Graphics.HorizontalAlignment horizontalAlignment, Microsoft.Maui.Graphics.VerticalAlignment verticalAlignment) -> Microsoft.Maui.Graphics.SizeF
~Microsoft.Maui.Graphics.ScalingCanvas.GetStringSize(string value, Microsoft.Maui.Graphics.IFont font, float fontSize) -> Microsoft.Maui.Graphics.SizeF
~Microsoft.Maui.Graphics.ScalingCanvas.ParentCanvas.get -> Microsoft.Maui.Graphics.ICanvas
~Microsoft.Maui.Graphics.ScalingCanvas.ScalingCanvas(Microsoft.Maui.Graphics.ICanvas wrapped) -> void
~Microsoft.Maui.Graphics.ScalingCanvas.SetFillPaint(Microsoft.Maui.Graphics.Paint paint, Microsoft.Maui.Graphics.RectF rectangle) -> void
~Microsoft.Maui.Graphics.ScalingCanvas.SetShadow(Microsoft.Maui.Graphics.SizeF offset, float blur, Microsoft.Maui.Graphics.Color color) -> void
~Microsoft.Maui.Graphics.ScalingCanvas.StrokeColor.set -> void
~Microsoft.Maui.Graphics.ScalingCanvas.StrokeDashPattern.set -> void
~Microsoft.Maui.Graphics.ScalingCanvas.Wrapped.get -> object
~Microsoft.Maui.Graphics.SolidPaint.Color.get -> Microsoft.Maui.Graphics.Color
~Microsoft.Maui.Graphics.SolidPaint.Color.set -> void
~Microsoft.Maui.Graphics.SolidPaint.SolidPaint(Microsoft.Maui.Graphics.Color color) -> void
~Microsoft.Maui.Graphics.StandardPicture.Draw(Microsoft.Maui.Graphics.ICanvas canvas) -> void
~Microsoft.Maui.Graphics.StandardPicture.Hash.get -> string
~Microsoft.Maui.Graphics.StandardPicture.Hash.set -> void
~Microsoft.Maui.Graphics.StandardPicture.StandardPicture(float x, float y, float width, float height, Microsoft.Maui.Graphics.DrawingCommand[] commands, string hash = null) -> void
~Microsoft.Maui.Graphics.StandardTextAttributes.Font.get -> Microsoft.Maui.Graphics.IFont
~Microsoft.Maui.Graphics.StandardTextAttributes.Font.set -> void
~Microsoft.Maui.Graphics.StandardTextAttributes.TextFontColor.get -> Microsoft.Maui.Graphics.Color
~Microsoft.Maui.Graphics.StandardTextAttributes.TextFontColor.set -> void
~Microsoft.Maui.Graphics.Text.AttributedText.AttributedText(string text, System.Collections.Generic.IReadOnlyList<Microsoft.Maui.Graphics.Text.IAttributedTextRun> runs, bool optimal = false) -> void
~Microsoft.Maui.Graphics.Text.AttributedTextBlock.AttributedTextBlock(string text, Microsoft.Maui.Graphics.Text.ITextAttributes attributes) -> void
~Microsoft.Maui.Graphics.Text.AttributedTextBlock.Attributes.get -> Microsoft.Maui.Graphics.Text.ITextAttributes
~Microsoft.Maui.Graphics.Text.AttributedTextBlock.Text.get -> string
~Microsoft.Maui.Graphics.Text.AttributedTextRun.AttributedTextRun(int start, int length, Microsoft.Maui.Graphics.Text.ITextAttributes attributes) -> void
~Microsoft.Maui.Graphics.Text.AttributedTextRun.Attributes.get -> Microsoft.Maui.Graphics.Text.ITextAttributes
~Microsoft.Maui.Graphics.Text.AttributedTextRunComparer.Compare(Microsoft.Maui.Graphics.Text.IAttributedTextRun first, Microsoft.Maui.Graphics.Text.IAttributedTextRun second) -> int
~Microsoft.Maui.Graphics.Text.CountingWriter.CountingWriter(System.IO.TextWriter writer) -> void
~Microsoft.Maui.Graphics.Text.IAttributedText.Runs.get -> System.Collections.Generic.IReadOnlyList<Microsoft.Maui.Graphics.Text.IAttributedTextRun>
~Microsoft.Maui.Graphics.Text.IAttributedText.Text.get -> string
~Microsoft.Maui.Graphics.Text.IAttributedTextRun.Attributes.get -> Microsoft.Maui.Graphics.Text.ITextAttributes
~Microsoft.Maui.Graphics.Text.MutableAttributedText.AddRun(Microsoft.Maui.Graphics.Text.IAttributedTextRun run) -> void
~Microsoft.Maui.Graphics.Text.MutableAttributedText.MutableAttributedText(string text) -> void
~Microsoft.Maui.Graphics.Text.TextAttributes.TextAttributes(System.Collections.Generic.IDictionary<Microsoft.Maui.Graphics.Text.TextAttribute, string> dictionary) -> void
~Microsoft.Maui.Graphics.Text.TextAttributes.TextAttributes(System.Collections.Generic.IReadOnlyDictionary<Microsoft.Maui.Graphics.Text.TextAttribute, string> first, System.Collections.Generic.IReadOnlyDictionary<Microsoft.Maui.Graphics.Text.TextAttribute, string> second) -> void
~Microsoft.Maui.Graphics.Text.XmlAttributedTextReader.Read(string text) -> Microsoft.Maui.Graphics.Text.IAttributedText
~Microsoft.Maui.Graphics.Text.XmlAttributedTextReader.Read(System.IO.TextReader reader) -> Microsoft.Maui.Graphics.Text.IAttributedText
~Microsoft.Maui.Graphics.Text.XmlAttributedTextWriter.Write(Microsoft.Maui.Graphics.Text.IAttributedText attributedText, System.IO.TextWriter writer) -> void
~Microsoft.Maui.Graphics.Text.XmlAttributedTextWriter.Write(Microsoft.Maui.Graphics.Text.IAttributedText text) -> string
~Microsoft.Maui.Graphics.XmlnsPrefixAttribute.Prefix.get -> string
~Microsoft.Maui.Graphics.XmlnsPrefixAttribute.XmlNamespace.get -> string
~Microsoft.Maui.Graphics.XmlnsPrefixAttribute.XmlnsPrefixAttribute(string xmlNamespace, string prefix) -> void
~override Microsoft.Maui.Graphics.Color.Equals(object obj) -> bool
~override Microsoft.Maui.Graphics.Color.ToString() -> string
~override Microsoft.Maui.Graphics.Converters.ColorTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Type sourceType) -> bool
~override Microsoft.Maui.Graphics.Converters.ColorTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Type destinationType) -> bool
~override Microsoft.Maui.Graphics.Converters.ColorTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object fromValue) -> object
~override Microsoft.Maui.Graphics.Converters.ColorTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, System.Type destinationType) -> object
~override Microsoft.Maui.Graphics.Converters.ColorTypeConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext context) -> System.ComponentModel.TypeConverter.StandardValuesCollection
~override Microsoft.Maui.Graphics.Converters.ColorTypeConverter.GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext context) -> bool
~override Microsoft.Maui.Graphics.Converters.ColorTypeConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext context) -> bool
~override Microsoft.Maui.Graphics.Converters.PointFTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Type sourceType) -> bool
~override Microsoft.Maui.Graphics.Converters.PointFTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Type destinationType) -> bool
~override Microsoft.Maui.Graphics.Converters.PointFTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value) -> object
~override Microsoft.Maui.Graphics.Converters.PointFTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, System.Type destinationType) -> object
~override Microsoft.Maui.Graphics.Converters.PointTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Type sourceType) -> bool
~override Microsoft.Maui.Graphics.Converters.PointTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Type destinationType) -> bool
~override Microsoft.Maui.Graphics.Converters.PointTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value) -> object
~override Microsoft.Maui.Graphics.Converters.PointTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, System.Type destinationType) -> object
~override Microsoft.Maui.Graphics.Converters.RectFTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Type sourceType) -> bool
~override Microsoft.Maui.Graphics.Converters.RectFTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Type destinationType) -> bool
~override Microsoft.Maui.Graphics.Converters.RectFTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value) -> object
~override Microsoft.Maui.Graphics.Converters.RectFTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, System.Type destinationType) -> object
~override Microsoft.Maui.Graphics.Converters.RectTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Type sourceType) -> bool
~override Microsoft.Maui.Graphics.Converters.RectTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Type destinationType) -> bool
~override Microsoft.Maui.Graphics.Converters.RectTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value) -> object
~override Microsoft.Maui.Graphics.Converters.RectTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, System.Type destinationType) -> object
~override Microsoft.Maui.Graphics.Converters.SizeFTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Type sourceType) -> bool
~override Microsoft.Maui.Graphics.Converters.SizeFTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Type destinationType) -> bool
~override Microsoft.Maui.Graphics.Converters.SizeFTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value) -> object
~override Microsoft.Maui.Graphics.Converters.SizeFTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, System.Type destinationType) -> object
~override Microsoft.Maui.Graphics.Converters.SizeTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Type sourceType) -> bool
~override Microsoft.Maui.Graphics.Converters.SizeTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Type destinationType) -> bool
~override Microsoft.Maui.Graphics.Converters.SizeTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value) -> object
~override Microsoft.Maui.Graphics.Converters.SizeTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, System.Type destinationType) -> object
~override Microsoft.Maui.Graphics.Font.Equals(object obj) -> bool
~override Microsoft.Maui.Graphics.GradientPaint.ToString() -> string
~override Microsoft.Maui.Graphics.Insets.Equals(object obj) -> bool
~override Microsoft.Maui.Graphics.Insets.ToString() -> string
~override Microsoft.Maui.Graphics.InsetsF.Equals(object obj) -> bool
~override Microsoft.Maui.Graphics.InsetsF.ToString() -> string
~override Microsoft.Maui.Graphics.PathF.Equals(object obj) -> bool
~override Microsoft.Maui.Graphics.PicturePattern.Draw(Microsoft.Maui.Graphics.ICanvas canvas) -> void
~override Microsoft.Maui.Graphics.Point.Equals(object o) -> bool
~override Microsoft.Maui.Graphics.Point.ToString() -> string
~override Microsoft.Maui.Graphics.PointF.Equals(object o) -> bool
~override Microsoft.Maui.Graphics.PointF.ToString() -> string
~override Microsoft.Maui.Graphics.Rect.Equals(object obj) -> bool
~override Microsoft.Maui.Graphics.Rect.ToString() -> string
~override Microsoft.Maui.Graphics.RectF.Equals(object obj) -> bool
~override Microsoft.Maui.Graphics.RectF.ToString() -> string
~override Microsoft.Maui.Graphics.Size.Equals(object obj) -> bool
~override Microsoft.Maui.Graphics.Size.ToString() -> string
~override Microsoft.Maui.Graphics.SizeF.Equals(object obj) -> bool
~override Microsoft.Maui.Graphics.SizeF.ToString() -> string
~override Microsoft.Maui.Graphics.SolidPaint.ToString() -> string
~override Microsoft.Maui.Graphics.Text.AttributedText.Runs.get -> System.Collections.Generic.IReadOnlyList<Microsoft.Maui.Graphics.Text.IAttributedTextRun>
~override Microsoft.Maui.Graphics.Text.AttributedText.Text.get -> string
~override Microsoft.Maui.Graphics.Text.AttributedTextBlock.ToString() -> string
~override Microsoft.Maui.Graphics.Text.AttributedTextRun.ToString() -> string
~override Microsoft.Maui.Graphics.Text.CountingWriter.Encoding.get -> System.Text.Encoding
~override Microsoft.Maui.Graphics.Text.CountingWriter.ToString() -> string
~override Microsoft.Maui.Graphics.Text.MutableAttributedText.Runs.get -> System.Collections.Generic.IReadOnlyList<Microsoft.Maui.Graphics.Text.IAttributedTextRun>
~override Microsoft.Maui.Graphics.Text.MutableAttributedText.Text.get -> string
~static Microsoft.Maui.Graphics.BitmapExportContextExtensions.WriteToFile(this Microsoft.Maui.Graphics.BitmapExportContext exportContext, string filename) -> void
~static Microsoft.Maui.Graphics.CanvasExtensions.ClipPath(this Microsoft.Maui.Graphics.ICanvas target, Microsoft.Maui.Graphics.PathF path, Microsoft.Maui.Graphics.WindingMode windingMode = Microsoft.Maui.Graphics.WindingMode.NonZero) -> void
~static Microsoft.Maui.Graphics.CanvasExtensions.ClipRectangle(this Microsoft.Maui.Graphics.ICanvas target, Microsoft.Maui.Graphics.Rect rect) -> void
~static Microsoft.Maui.Graphics.CanvasExtensions.ClipRectangle(this Microsoft.Maui.Graphics.ICanvas target, Microsoft.Maui.Graphics.RectF rect) -> void
~static Microsoft.Maui.Graphics.CanvasExtensions.DrawArc(this Microsoft.Maui.Graphics.ICanvas canvas, Microsoft.Maui.Graphics.Rect bounds, float startAngle, float endAngle, bool clockwise, bool closed) -> void
~static Microsoft.Maui.Graphics.CanvasExtensions.DrawArc(this Microsoft.Maui.Graphics.ICanvas canvas, Microsoft.Maui.Graphics.RectF bounds, float startAngle, float endAngle, bool clockwise, bool closed) -> void
~static Microsoft.Maui.Graphics.CanvasExtensions.DrawCircle(this Microsoft.Maui.Graphics.ICanvas target, float centerX, float centerY, float radius) -> void
~static Microsoft.Maui.Graphics.CanvasExtensions.DrawCircle(this Microsoft.Maui.Graphics.ICanvas target, Microsoft.Maui.Graphics.Point center, double radius) -> void
~static Microsoft.Maui.Graphics.CanvasExtensions.DrawCircle(this Microsoft.Maui.Graphics.ICanvas target, Microsoft.Maui.Graphics.PointF center, float radius) -> void
~static Microsoft.Maui.Graphics.CanvasExtensions.DrawEllipse(this Microsoft.Maui.Graphics.ICanvas target, Microsoft.Maui.Graphics.Rect rect) -> void
~static Microsoft.Maui.Graphics.CanvasExtensions.DrawEllipse(this Microsoft.Maui.Graphics.ICanvas target, Microsoft.Maui.Graphics.RectF rect) -> void
~static Microsoft.Maui.Graphics.CanvasExtensions.DrawLine(this Microsoft.Maui.Graphics.ICanvas target, Microsoft.Maui.Graphics.PointF point1, Microsoft.Maui.Graphics.PointF point2) -> void
~static Microsoft.Maui.Graphics.CanvasExtensions.DrawPath(this Microsoft.Maui.Graphics.ICanvas target, Microsoft.Maui.Graphics.PathF path) -> void
~static Microsoft.Maui.Graphics.CanvasExtensions.DrawRectangle(this Microsoft.Maui.Graphics.ICanvas target, Microsoft.Maui.Graphics.Rect rect) -> void
~static Microsoft.Maui.Graphics.CanvasExtensions.DrawRectangle(this Microsoft.Maui.Graphics.ICanvas target, Microsoft.Maui.Graphics.RectF rect) -> void
~static Microsoft.Maui.Graphics.CanvasExtensions.DrawRoundedRectangle(this Microsoft.Maui.Graphics.ICanvas target, float x, float y, float width, float height, float topLeftCornerRadius, float topRightCornerRadius, float bottomLeftCornerRadius, float bottomRightCornerRadius) -> void
~static Microsoft.Maui.Graphics.CanvasExtensions.DrawRoundedRectangle(this Microsoft.Maui.Graphics.ICanvas target, Microsoft.Maui.Graphics.Rect rect, double cornerRadius) -> void
~static Microsoft.Maui.Graphics.CanvasExtensions.DrawRoundedRectangle(this Microsoft.Maui.Graphics.ICanvas target, Microsoft.Maui.Graphics.Rect rect, double topLeftCornerRadius, double topRightCornerRadius, double bottomLeftCornerRadius, double bottomRightCornerRadius) -> void
~static Microsoft.Maui.Graphics.CanvasExtensions.DrawRoundedRectangle(this Microsoft.Maui.Graphics.ICanvas target, Microsoft.Maui.Graphics.RectF rect, float cornerRadius) -> void
~static Microsoft.Maui.Graphics.CanvasExtensions.DrawRoundedRectangle(this Microsoft.Maui.Graphics.ICanvas target, Microsoft.Maui.Graphics.RectF rect, float topLeftCornerRadius, float topRightCornerRadius, float bottomLeftCornerRadius, float bottomRightCornerRadius) -> void
~static Microsoft.Maui.Graphics.CanvasExtensions.DrawRoundedRectangle(this Microsoft.Maui.Graphics.ICanvas target, Microsoft.Maui.Graphics.RectF rect, float xRadius, float yRadius) -> void
~static Microsoft.Maui.Graphics.CanvasExtensions.DrawString(this Microsoft.Maui.Graphics.ICanvas target, string value, Microsoft.Maui.Graphics.Rect bounds, Microsoft.Maui.Graphics.HorizontalAlignment horizontalAlignment, Microsoft.Maui.Graphics.VerticalAlignment verticalAlignment, Microsoft.Maui.Graphics.TextFlow textFlow = Microsoft.Maui.Graphics.TextFlow.ClipBounds, float lineSpacingAdjustment = 0) -> void
~static Microsoft.Maui.Graphics.CanvasExtensions.DrawString(this Microsoft.Maui.Graphics.ICanvas target, string value, Microsoft.Maui.Graphics.RectF bounds, Microsoft.Maui.Graphics.HorizontalAlignment horizontalAlignment, Microsoft.Maui.Graphics.VerticalAlignment verticalAlignment, Microsoft.Maui.Graphics.TextFlow textFlow = Microsoft.Maui.Graphics.TextFlow.ClipBounds, float lineSpacingAdjustment = 0) -> void
~static Microsoft.Maui.Graphics.CanvasExtensions.EnableDefaultShadow(this Microsoft.Maui.Graphics.ICanvas canvas, float zoom = 1) -> void
~static Microsoft.Maui.Graphics.CanvasExtensions.FillArc(this Microsoft.Maui.Graphics.ICanvas canvas, float x, float y, float width, float height, float startAngle, float endAngle, Microsoft.Maui.Graphics.Paint paint, bool clockwise) -> void
~static Microsoft.Maui.Graphics.CanvasExtensions.FillArc(this Microsoft.Maui.Graphics.ICanvas canvas, Microsoft.Maui.Graphics.Rect bounds, float startAngle, float endAngle, bool clockwise) -> void
~static Microsoft.Maui.Graphics.CanvasExtensions.FillArc(this Microsoft.Maui.Graphics.ICanvas canvas, Microsoft.Maui.Graphics.RectF bounds, float startAngle, float endAngle, bool clockwise) -> void
~static Microsoft.Maui.Graphics.CanvasExtensions.FillCircle(this Microsoft.Maui.Graphics.ICanvas target, float centerX, float centerY, float radius) -> void
~static Microsoft.Maui.Graphics.CanvasExtensions.FillCircle(this Microsoft.Maui.Graphics.ICanvas target, Microsoft.Maui.Graphics.Point center, double radius) -> void
~static Microsoft.Maui.Graphics.CanvasExtensions.FillCircle(this Microsoft.Maui.Graphics.ICanvas target, Microsoft.Maui.Graphics.PointF center, float radius) -> void
~static Microsoft.Maui.Graphics.CanvasExtensions.FillEllipse(this Microsoft.Maui.Graphics.ICanvas target, Microsoft.Maui.Graphics.Rect rect) -> void
~static Microsoft.Maui.Graphics.CanvasExtensions.FillEllipse(this Microsoft.Maui.Graphics.ICanvas target, Microsoft.Maui.Graphics.RectF rect) -> void
~static Microsoft.Maui.Graphics.CanvasExtensions.FillPath(this Microsoft.Maui.Graphics.ICanvas target, Microsoft.Maui.Graphics.PathF path, Microsoft.Maui.Graphics.WindingMode windingMode) -> void
~static Microsoft.Maui.Graphics.CanvasExtensions.FillPath(this Microsoft.Maui.Graphics.ICanvas target, Microsoft.Maui.Graphics.PathF path) -> void
~static Microsoft.Maui.Graphics.CanvasExtensions.FillRectangle(this Microsoft.Maui.Graphics.ICanvas target, Microsoft.Maui.Graphics.Rect rect) -> void
~static Microsoft.Maui.Graphics.CanvasExtensions.FillRectangle(this Microsoft.Maui.Graphics.ICanvas target, Microsoft.Maui.Graphics.RectF rect) -> void
~static Microsoft.Maui.Graphics.CanvasExtensions.FillRoundedRectangle(this Microsoft.Maui.Graphics.ICanvas target, float x, float y, float width, float height, float topLeftCornerRadius, float topRightCornerRadius, float bottomLeftCornerRadius, float bottomRightCornerRadius) -> void
~static Microsoft.Maui.Graphics.CanvasExtensions.FillRoundedRectangle(this Microsoft.Maui.Graphics.ICanvas target, Microsoft.Maui.Graphics.Rect rect, double cornerRadius) -> void
~static Microsoft.Maui.Graphics.CanvasExtensions.FillRoundedRectangle(this Microsoft.Maui.Graphics.ICanvas target, Microsoft.Maui.Graphics.Rect rect, double topLeftCornerRadius, double topRightCornerRadius, double bottomLeftCornerRadius, double bottomRightCornerRadius) -> void
~static Microsoft.Maui.Graphics.CanvasExtensions.FillRoundedRectangle(this Microsoft.Maui.Graphics.ICanvas target, Microsoft.Maui.Graphics.RectF rect, float cornerRadius) -> void
~static Microsoft.Maui.Graphics.CanvasExtensions.FillRoundedRectangle(this Microsoft.Maui.Graphics.ICanvas target, Microsoft.Maui.Graphics.RectF rect, float topLeftCornerRadius, float topRightCornerRadius, float bottomLeftCornerRadius, float bottomRightCornerRadius) -> void
~static Microsoft.Maui.Graphics.CanvasExtensions.FillRoundedRectangle(this Microsoft.Maui.Graphics.ICanvas target, Microsoft.Maui.Graphics.RectF rect, float xRadius, float yRadius) -> void
~static Microsoft.Maui.Graphics.CanvasExtensions.ResetStroke(this Microsoft.Maui.Graphics.ICanvas canvas) -> void
~static Microsoft.Maui.Graphics.CanvasExtensions.SetFillPaint(this Microsoft.Maui.Graphics.ICanvas target, Microsoft.Maui.Graphics.Paint paint, Microsoft.Maui.Graphics.Point point1, Microsoft.Maui.Graphics.Point point2) -> void
~static Microsoft.Maui.Graphics.CanvasExtensions.SetFillPaint(this Microsoft.Maui.Graphics.ICanvas target, Microsoft.Maui.Graphics.Paint paint, Microsoft.Maui.Graphics.PointF point1, Microsoft.Maui.Graphics.PointF point2) -> void
~static Microsoft.Maui.Graphics.CanvasExtensions.SetFillPaint(this Microsoft.Maui.Graphics.ICanvas target, Microsoft.Maui.Graphics.Paint paint, Microsoft.Maui.Graphics.Rect rectangle) -> void
~static Microsoft.Maui.Graphics.CanvasExtensions.SetFillPaint(this Microsoft.Maui.Graphics.ICanvas target, Microsoft.Maui.Graphics.Paint paint, Microsoft.Maui.Graphics.RectF rectangle) -> void
~static Microsoft.Maui.Graphics.CanvasExtensions.SetFillPattern(this Microsoft.Maui.Graphics.ICanvas target, Microsoft.Maui.Graphics.IPattern pattern, Microsoft.Maui.Graphics.Color foregroundColor) -> void
~static Microsoft.Maui.Graphics.CanvasExtensions.SetFillPattern(this Microsoft.Maui.Graphics.ICanvas target, Microsoft.Maui.Graphics.IPattern pattern) -> void
~static Microsoft.Maui.Graphics.CanvasExtensions.SubtractFromClip(this Microsoft.Maui.Graphics.ICanvas target, Microsoft.Maui.Graphics.Rect rect) -> void
~static Microsoft.Maui.Graphics.CanvasExtensions.SubtractFromClip(this Microsoft.Maui.Graphics.ICanvas target, Microsoft.Maui.Graphics.RectF rect) -> void
~static Microsoft.Maui.Graphics.Color.FromArgb(string colorAsHex) -> Microsoft.Maui.Graphics.Color
~static Microsoft.Maui.Graphics.Color.FromHex(string colorAsArgbHex) -> Microsoft.Maui.Graphics.Color
~static Microsoft.Maui.Graphics.Color.FromHsla(double h, double s, double l, double a = 1) -> Microsoft.Maui.Graphics.Color
~static Microsoft.Maui.Graphics.Color.FromHsla(float h, float s, float l, float a = 1) -> Microsoft.Maui.Graphics.Color
~static Microsoft.Maui.Graphics.Color.FromHsv(float h, float s, float v) -> Microsoft.Maui.Graphics.Color
~static Microsoft.Maui.Graphics.Color.FromHsv(int h, int s, int v) -> Microsoft.Maui.Graphics.Color
~static Microsoft.Maui.Graphics.Color.FromHsva(float h, float s, float v, float a) -> Microsoft.Maui.Graphics.Color
~static Microsoft.Maui.Graphics.Color.FromHsva(int h, int s, int v, int a) -> Microsoft.Maui.Graphics.Color
~static Microsoft.Maui.Graphics.Color.FromInt(int argb) -> Microsoft.Maui.Graphics.Color
~static Microsoft.Maui.Graphics.Color.FromRgb(byte red, byte green, byte blue) -> Microsoft.Maui.Graphics.Color
~static Microsoft.Maui.Graphics.Color.FromRgb(double red, double green, double blue) -> Microsoft.Maui.Graphics.Color
~static Microsoft.Maui.Graphics.Color.FromRgb(float red, float green, float blue) -> Microsoft.Maui.Graphics.Color
~static Microsoft.Maui.Graphics.Color.FromRgb(int red, int green, int blue) -> Microsoft.Maui.Graphics.Color
~static Microsoft.Maui.Graphics.Color.FromRgba(byte red, byte green, byte blue, byte alpha) -> Microsoft.Maui.Graphics.Color
~static Microsoft.Maui.Graphics.Color.FromRgba(double r, double g, double b, double a) -> Microsoft.Maui.Graphics.Color
~static Microsoft.Maui.Graphics.Color.FromRgba(float r, float g, float b, float a) -> Microsoft.Maui.Graphics.Color
~static Microsoft.Maui.Graphics.Color.FromRgba(int red, int green, int blue, int alpha) -> Microsoft.Maui.Graphics.Color
~static Microsoft.Maui.Graphics.Color.FromRgba(string colorAsHex) -> Microsoft.Maui.Graphics.Color
~static Microsoft.Maui.Graphics.Color.FromUint(uint argb) -> Microsoft.Maui.Graphics.Color
~static Microsoft.Maui.Graphics.Color.implicit operator Microsoft.Maui.Graphics.Color(System.Numerics.Vector4 color) -> Microsoft.Maui.Graphics.Color
~static Microsoft.Maui.Graphics.Color.Parse(string value) -> Microsoft.Maui.Graphics.Color
~static Microsoft.Maui.Graphics.Color.TryParse(string value, out Microsoft.Maui.Graphics.Color color) -> bool
~static Microsoft.Maui.Graphics.IFontExtensions.GetSvgStyle(this Microsoft.Maui.Graphics.IFont font) -> string
~static Microsoft.Maui.Graphics.IFontExtensions.GetSvgWeight(this Microsoft.Maui.Graphics.IFont font) -> string
~static Microsoft.Maui.Graphics.ImageExtensions.AsBase64(this Microsoft.Maui.Graphics.IImage target, Microsoft.Maui.Graphics.ImageFormat format = Microsoft.Maui.Graphics.ImageFormat.Png, float quality = 1) -> string
~static Microsoft.Maui.Graphics.ImageExtensions.AsBytes(this Microsoft.Maui.Graphics.IImage target, Microsoft.Maui.Graphics.ImageFormat format = Microsoft.Maui.Graphics.ImageFormat.Png, float quality = 1) -> byte[]
~static Microsoft.Maui.Graphics.ImageExtensions.AsBytesAsync(this Microsoft.Maui.Graphics.IImage target, Microsoft.Maui.Graphics.ImageFormat format = Microsoft.Maui.Graphics.ImageFormat.Png, float quality = 1) -> System.Threading.Tasks.Task<byte[]>
~static Microsoft.Maui.Graphics.ImageExtensions.AsPaint(this Microsoft.Maui.Graphics.IImage target) -> Microsoft.Maui.Graphics.Paint
~static Microsoft.Maui.Graphics.ImageExtensions.AsStream(this Microsoft.Maui.Graphics.IImage target, Microsoft.Maui.Graphics.ImageFormat format = Microsoft.Maui.Graphics.ImageFormat.Png, float quality = 1) -> System.IO.Stream
~static Microsoft.Maui.Graphics.ImageExtensions.SetFillImage(this Microsoft.Maui.Graphics.ICanvas canvas, Microsoft.Maui.Graphics.IImage image) -> void
~static Microsoft.Maui.Graphics.ImageLoadingServiceExtensions.FromBytes(this Microsoft.Maui.Graphics.IImageLoadingService target, byte[] bytes) -> Microsoft.Maui.Graphics.IImage
~static Microsoft.Maui.Graphics.Insets.Parse(string value) -> Microsoft.Maui.Graphics.Insets
~static Microsoft.Maui.Graphics.InsetsF.Parse(string value) -> Microsoft.Maui.Graphics.InsetsF
~static Microsoft.Maui.Graphics.PathArcExtensions.DrawArc(this Microsoft.Maui.Graphics.PathF aPath, float x, float y, float startAngle, float arc, float radius, float yRadius, float xAxisRotation) -> void
~static Microsoft.Maui.Graphics.PathArcExtensions.SVGArcTo(this Microsoft.Maui.Graphics.PathF aTarget, float rx, float ry, float angle, bool largeArcFlag, bool sweepFlag, float x, float y, float lastPointX, float lastPointY) -> void
~static Microsoft.Maui.Graphics.PathBuilder.Build(string definition) -> Microsoft.Maui.Graphics.PathF
~static Microsoft.Maui.Graphics.PathBuilder.ParseFloat(string value) -> float
~static Microsoft.Maui.Graphics.PathExtensions.AsScaledPath(this Microsoft.Maui.Graphics.PathF target, float scale) -> Microsoft.Maui.Graphics.PathF
~static Microsoft.Maui.Graphics.PathExtensions.AsScaledPath(this Microsoft.Maui.Graphics.PathF target, float xScale, float yScale) -> Microsoft.Maui.Graphics.PathF
~static Microsoft.Maui.Graphics.PathExtensions.ToDefinitionString(this Microsoft.Maui.Graphics.PathF path, float ppu = 1) -> string
~static Microsoft.Maui.Graphics.PatternExtensions.AsPaint(this Microsoft.Maui.Graphics.IPattern target, Microsoft.Maui.Graphics.Color foregroundColor) -> Microsoft.Maui.Graphics.Paint
~static Microsoft.Maui.Graphics.PatternExtensions.AsPaint(this Microsoft.Maui.Graphics.IPattern target) -> Microsoft.Maui.Graphics.Paint
~static Microsoft.Maui.Graphics.PdfPageExtensions.AsBase64(this Microsoft.Maui.Graphics.IPdfPage target) -> string
~static Microsoft.Maui.Graphics.PdfPageExtensions.AsBytes(this Microsoft.Maui.Graphics.IPdfPage target) -> byte[]
~static Microsoft.Maui.Graphics.PdfPageExtensions.AsBytesAsync(this Microsoft.Maui.Graphics.IPdfPage target) -> System.Threading.Tasks.Task<byte[]>
~static Microsoft.Maui.Graphics.PdfPageExtensions.AsStream(this Microsoft.Maui.Graphics.IPdfPage target) -> System.IO.Stream
~static Microsoft.Maui.Graphics.PictureExtensions.GetBounds(this Microsoft.Maui.Graphics.IPicture target) -> Microsoft.Maui.Graphics.RectF
~static Microsoft.Maui.Graphics.PictureReaderExtensions.Read(this Microsoft.Maui.Graphics.IPictureReader target, System.IO.Stream stream, string hash = null) -> Microsoft.Maui.Graphics.IPicture
~static Microsoft.Maui.Graphics.PictureReaderExtensions.ReadAsync(this Microsoft.Maui.Graphics.IPictureReader target, System.IO.Stream stream, string hash = null) -> System.Threading.Tasks.Task<Microsoft.Maui.Graphics.IPicture>
~static Microsoft.Maui.Graphics.PictureWriterExtensions.SaveAsBase64(this Microsoft.Maui.Graphics.IPictureWriter target, Microsoft.Maui.Graphics.IPicture picture) -> string
~static Microsoft.Maui.Graphics.PictureWriterExtensions.SaveAsBytes(this Microsoft.Maui.Graphics.IPictureWriter target, Microsoft.Maui.Graphics.IPicture picture) -> byte[]
~static Microsoft.Maui.Graphics.PictureWriterExtensions.SaveAsBytesAsync(this Microsoft.Maui.Graphics.IPictureWriter target, Microsoft.Maui.Graphics.IPicture picture) -> System.Threading.Tasks.Task<byte[]>
~static Microsoft.Maui.Graphics.PictureWriterExtensions.SaveAsStream(this Microsoft.Maui.Graphics.IPictureWriter target, Microsoft.Maui.Graphics.IPicture picture) -> System.IO.Stream
~static Microsoft.Maui.Graphics.Platform.PlatformImage.FromStream(System.IO.Stream stream, Microsoft.Maui.Graphics.ImageFormat format = Microsoft.Maui.Graphics.ImageFormat.Png) -> Microsoft.Maui.Graphics.IImage
~static Microsoft.Maui.Graphics.Point.TryParse(string value, out Microsoft.Maui.Graphics.Point point) -> bool
~static Microsoft.Maui.Graphics.PointF.TryParse(string value, out Microsoft.Maui.Graphics.PointF pointF) -> bool
~static Microsoft.Maui.Graphics.Rect.TryParse(string value, out Microsoft.Maui.Graphics.Rect rectangle) -> bool
~static Microsoft.Maui.Graphics.RectF.TryParse(string value, out Microsoft.Maui.Graphics.RectF rectangleF) -> bool
~static Microsoft.Maui.Graphics.Size.TryParse(string value, out Microsoft.Maui.Graphics.Size size) -> bool
~static Microsoft.Maui.Graphics.SizeF.TryParse(string value, out Microsoft.Maui.Graphics.SizeF sizeF) -> bool
~static Microsoft.Maui.Graphics.Text.AttributedTextExtensions.CreateBlocks(this Microsoft.Maui.Graphics.Text.IAttributedText text) -> System.Collections.Generic.IList<Microsoft.Maui.Graphics.Text.AttributedTextBlock>
~static Microsoft.Maui.Graphics.Text.AttributedTextExtensions.CreateParagraphRun(this Microsoft.Maui.Graphics.Text.IAttributedText text, int start, int length, System.Collections.Generic.IList<Microsoft.Maui.Graphics.Text.IAttributedTextRun> runs, int startIndexForSearch = 0) -> int
~static Microsoft.Maui.Graphics.Text.AttributedTextExtensions.CreateParagraphs(this Microsoft.Maui.Graphics.Text.IAttributedText attributedText) -> System.Collections.Generic.IReadOnlyList<Microsoft.Maui.Graphics.Text.IAttributedText>
~static Microsoft.Maui.Graphics.Text.AttributedTextExtensions.Optimize(this Microsoft.Maui.Graphics.Text.IAttributedText attributedText) -> Microsoft.Maui.Graphics.Text.IAttributedText
~static Microsoft.Maui.Graphics.Text.AttributedTextRunExtensions.CalculatedIntersections(this Microsoft.Maui.Graphics.Text.IAttributedTextRun first, Microsoft.Maui.Graphics.Text.IAttributedTextRun second) -> System.Collections.Generic.IList<Microsoft.Maui.Graphics.Text.IAttributedTextRun>
~static Microsoft.Maui.Graphics.Text.AttributedTextRunExtensions.GetEnd(this Microsoft.Maui.Graphics.Text.IAttributedTextRun run) -> int
~static Microsoft.Maui.Graphics.Text.AttributedTextRunExtensions.Intersects(this Microsoft.Maui.Graphics.Text.IAttributedTextRun first, int start, int length) -> bool
~static Microsoft.Maui.Graphics.Text.AttributedTextRunExtensions.Intersects(this Microsoft.Maui.Graphics.Text.IAttributedTextRun first, Microsoft.Maui.Graphics.Text.IAttributedTextRun second) -> bool
~static Microsoft.Maui.Graphics.Text.AttributedTextRunExtensions.IntersectsExactly(this Microsoft.Maui.Graphics.Text.IAttributedTextRun first, int start, int length) -> bool
~static Microsoft.Maui.Graphics.Text.AttributedTextRunExtensions.IntersectsExactly(this Microsoft.Maui.Graphics.Text.IAttributedTextRun first, Microsoft.Maui.Graphics.Text.IAttributedTextRun second) -> bool
~static Microsoft.Maui.Graphics.Text.AttributedTextRunExtensions.Optimize(this System.Collections.Generic.List<Microsoft.Maui.Graphics.Text.IAttributedTextRun> runs, int textLength) -> void
~static Microsoft.Maui.Graphics.Text.TextAttributeExtensions.GetBackgroundColor(this Microsoft.Maui.Graphics.Text.ITextAttributes attributes) -> string
~static Microsoft.Maui.Graphics.Text.TextAttributeExtensions.GetBold(this Microsoft.Maui.Graphics.Text.ITextAttributes attributes) -> bool
~static Microsoft.Maui.Graphics.Text.TextAttributeExtensions.GetFontName(this Microsoft.Maui.Graphics.Text.ITextAttributes attributes) -> string
~static Microsoft.Maui.Graphics.Text.TextAttributeExtensions.GetFontSize(this Microsoft.Maui.Graphics.Text.ITextAttributes attributes, float? fontSize = null) -> float
~static Microsoft.Maui.Graphics.Text.TextAttributeExtensions.GetForegroundColor(this Microsoft.Maui.Graphics.Text.ITextAttributes attributes) -> string
~static Microsoft.Maui.Graphics.Text.TextAttributeExtensions.GetItalic(this Microsoft.Maui.Graphics.Text.ITextAttributes attributes) -> bool
~static Microsoft.Maui.Graphics.Text.TextAttributeExtensions.GetMarker(this Microsoft.Maui.Graphics.Text.ITextAttributes attributes) -> Microsoft.Maui.Graphics.Text.MarkerType
~static Microsoft.Maui.Graphics.Text.TextAttributeExtensions.GetStrikethrough(this Microsoft.Maui.Graphics.Text.ITextAttributes attributes) -> bool
~static Microsoft.Maui.Graphics.Text.TextAttributeExtensions.GetSubscript(this Microsoft.Maui.Graphics.Text.ITextAttributes attributes) -> bool
~static Microsoft.Maui.Graphics.Text.TextAttributeExtensions.GetSuperscript(this Microsoft.Maui.Graphics.Text.ITextAttributes attributes) -> bool
~static Microsoft.Maui.Graphics.Text.TextAttributeExtensions.GetUnderline(this Microsoft.Maui.Graphics.Text.ITextAttributes attributes) -> bool
~static Microsoft.Maui.Graphics.Text.TextAttributeExtensions.GetUnorderedList(this Microsoft.Maui.Graphics.Text.ITextAttributes attributes) -> bool
~static Microsoft.Maui.Graphics.Text.TextAttributeExtensions.SetBackgroundColor(this System.Collections.Generic.Dictionary<Microsoft.Maui.Graphics.Text.TextAttribute, string> attributes, string value) -> void
~static Microsoft.Maui.Graphics.Text.TextAttributeExtensions.SetBold(this System.Collections.Generic.Dictionary<Microsoft.Maui.Graphics.Text.TextAttribute, string> attributes, bool value) -> void
~static Microsoft.Maui.Graphics.Text.TextAttributeExtensions.SetFontName(this System.Collections.Generic.Dictionary<Microsoft.Maui.Graphics.Text.TextAttribute, string> attributes, string value) -> void
~static Microsoft.Maui.Graphics.Text.TextAttributeExtensions.SetFontSize(this System.Collections.Generic.Dictionary<Microsoft.Maui.Graphics.Text.TextAttribute, string> attributes, float value) -> void
~static Microsoft.Maui.Graphics.Text.TextAttributeExtensions.SetForegroundColor(this System.Collections.Generic.Dictionary<Microsoft.Maui.Graphics.Text.TextAttribute, string> attributes, string value) -> void
~static Microsoft.Maui.Graphics.Text.TextAttributeExtensions.SetItalic(this System.Collections.Generic.Dictionary<Microsoft.Maui.Graphics.Text.TextAttribute, string> attributes, bool value) -> void
~static Microsoft.Maui.Graphics.Text.TextAttributeExtensions.SetMarker(this System.Collections.Generic.Dictionary<Microsoft.Maui.Graphics.Text.TextAttribute, string> attributes, Microsoft.Maui.Graphics.Text.MarkerType value) -> void
~static Microsoft.Maui.Graphics.Text.TextAttributeExtensions.SetStrikethrough(this System.Collections.Generic.Dictionary<Microsoft.Maui.Graphics.Text.TextAttribute, string> attributes, bool value) -> void
~static Microsoft.Maui.Graphics.Text.TextAttributeExtensions.SetSubscript(this System.Collections.Generic.Dictionary<Microsoft.Maui.Graphics.Text.TextAttribute, string> attributes, bool value) -> void
~static Microsoft.Maui.Graphics.Text.TextAttributeExtensions.SetSuperscript(this System.Collections.Generic.Dictionary<Microsoft.Maui.Graphics.Text.TextAttribute, string> attributes, bool value) -> void
~static Microsoft.Maui.Graphics.Text.TextAttributeExtensions.SetUnderline(this System.Collections.Generic.Dictionary<Microsoft.Maui.Graphics.Text.TextAttribute, string> attributes, bool value) -> void
~static Microsoft.Maui.Graphics.Text.TextAttributeExtensions.SetUnorderedList(this System.Collections.Generic.Dictionary<Microsoft.Maui.Graphics.Text.TextAttribute, string> attributes, bool value) -> void
~static Microsoft.Maui.Graphics.Text.TextAttributeExtensions.Union(this System.Collections.Generic.IReadOnlyDictionary<Microsoft.Maui.Graphics.Text.TextAttribute, string> first, System.Collections.Generic.IReadOnlyDictionary<Microsoft.Maui.Graphics.Text.TextAttribute, string> second) -> Microsoft.Maui.Graphics.Text.ITextAttributes
~static Microsoft.Maui.Graphics.Text.TextAttributesExtensions.GetAttribute(this Microsoft.Maui.Graphics.Text.ITextAttributes attributes, Microsoft.Maui.Graphics.Text.TextAttribute type, string defaultValue = null) -> string
~static Microsoft.Maui.Graphics.Text.TextAttributesExtensions.GetBoolAttribute(this Microsoft.Maui.Graphics.Text.ITextAttributes attributes, Microsoft.Maui.Graphics.Text.TextAttribute type, bool defaultValue = false) -> bool
~static Microsoft.Maui.Graphics.Text.TextAttributesExtensions.GetEnumAttribute<T>(this Microsoft.Maui.Graphics.Text.ITextAttributes attributes, Microsoft.Maui.Graphics.Text.TextAttribute type, T defaultValue) -> T
~static Microsoft.Maui.Graphics.Text.TextAttributesExtensions.GetFloatAttribute(this Microsoft.Maui.Graphics.Text.ITextAttributes attributes, Microsoft.Maui.Graphics.Text.TextAttribute type, float defaultValue) -> float
~static Microsoft.Maui.Graphics.Text.TextAttributesExtensions.GetIntAttribute(this Microsoft.Maui.Graphics.Text.ITextAttributes attributes, Microsoft.Maui.Graphics.Text.TextAttribute type, int defaultValue) -> int
~static Microsoft.Maui.Graphics.Text.TextAttributesExtensions.RemoveAttribute(this System.Collections.Generic.Dictionary<Microsoft.Maui.Graphics.Text.TextAttribute, string> attributes, Microsoft.Maui.Graphics.Text.TextAttribute type) -> void
~static Microsoft.Maui.Graphics.Text.TextAttributesExtensions.SetAttribute(this System.Collections.Generic.Dictionary<Microsoft.Maui.Graphics.Text.TextAttribute, string> attributes, Microsoft.Maui.Graphics.Text.TextAttribute type, string value) -> void
~static Microsoft.Maui.Graphics.Text.TextAttributesExtensions.SetBoolAttribute(this System.Collections.Generic.Dictionary<Microsoft.Maui.Graphics.Text.TextAttribute, string> attributes, Microsoft.Maui.Graphics.Text.TextAttribute type, bool value, bool defaultValue = false) -> void
~static Microsoft.Maui.Graphics.Text.TextAttributesExtensions.SetEnumAttribute<T>(this System.Collections.Generic.Dictionary<Microsoft.Maui.Graphics.Text.TextAttribute, string> attributes, Microsoft.Maui.Graphics.Text.TextAttribute type, T value, T defaultValue) -> void
~static Microsoft.Maui.Graphics.Text.TextAttributesExtensions.SetFloatAttribute(this System.Collections.Generic.Dictionary<Microsoft.Maui.Graphics.Text.TextAttribute, string> attributes, Microsoft.Maui.Graphics.Text.TextAttribute type, float value, float defaultValue) -> void
~static Microsoft.Maui.Graphics.Text.TextAttributesExtensions.SetIntAttribute(this System.Collections.Generic.Dictionary<Microsoft.Maui.Graphics.Text.TextAttribute, string> attributes, Microsoft.Maui.Graphics.Text.TextAttribute type, int value, int defaultValue) -> void
~static Microsoft.Maui.Graphics.Text.TextColors.Parse(this string color) -> float[]
~static Microsoft.Maui.Graphics.Text.TextColors.ParseAsInts(this string color) -> int[]
~static Microsoft.Maui.Graphics.Text.TextColors.StandardColors -> System.Collections.Generic.Dictionary<string, string>
~static readonly Microsoft.Maui.Graphics.CanvasDefaults.DefaultShadowColor -> Microsoft.Maui.Graphics.Color
~static readonly Microsoft.Maui.Graphics.Colors.AliceBlue -> Microsoft.Maui.Graphics.Color
~static readonly Microsoft.Maui.Graphics.Colors.AntiqueWhite -> Microsoft.Maui.Graphics.Color
~static readonly Microsoft.Maui.Graphics.Colors.Aqua -> Microsoft.Maui.Graphics.Color
~static readonly Microsoft.Maui.Graphics.Colors.Aquamarine -> Microsoft.Maui.Graphics.Color
~static readonly Microsoft.Maui.Graphics.Colors.Azure -> Microsoft.Maui.Graphics.Color
~static readonly Microsoft.Maui.Graphics.Colors.Beige -> Microsoft.Maui.Graphics.Color
~static readonly Microsoft.Maui.Graphics.Colors.Bisque -> Microsoft.Maui.Graphics.Color
~static readonly Microsoft.Maui.Graphics.Colors.Black -> Microsoft.Maui.Graphics.Color
~static readonly Microsoft.Maui.Graphics.Colors.BlanchedAlmond -> Microsoft.Maui.Graphics.Color
~static readonly Microsoft.Maui.Graphics.Colors.Blue -> Microsoft.Maui.Graphics.Color
~static readonly Microsoft.Maui.Graphics.Colors.BlueViolet -> Microsoft.Maui.Graphics.Color
~static readonly Microsoft.Maui.Graphics.Colors.Brown -> Microsoft.Maui.Graphics.Color
~static readonly Microsoft.Maui.Graphics.Colors.BurlyWood -> Microsoft.Maui.Graphics.Color
~static readonly Microsoft.Maui.Graphics.Colors.CadetBlue -> Microsoft.Maui.Graphics.Color
~static readonly Microsoft.Maui.Graphics.Colors.Chartreuse -> Microsoft.Maui.Graphics.Color
~static readonly Microsoft.Maui.Graphics.Colors.Chocolate -> Microsoft.Maui.Graphics.Color
~static readonly Microsoft.Maui.Graphics.Colors.Coral -> Microsoft.Maui.Graphics.Color
~static readonly Microsoft.Maui.Graphics.Colors.CornflowerBlue -> Microsoft.Maui.Graphics.Color
~static readonly Microsoft.Maui.Graphics.Colors.Cornsilk -> Microsoft.Maui.Graphics.Color
~static readonly Microsoft.Maui.Graphics.Colors.Crimson -> Microsoft.Maui.Graphics.Color
~static readonly Microsoft.Maui.Graphics.Colors.Cyan -> Microsoft.Maui.Graphics.Color
~static readonly Microsoft.Maui.Graphics.Colors.DarkBlue -> Microsoft.Maui.Graphics.Color
~static readonly Microsoft.Maui.Graphics.Colors.DarkCyan -> Microsoft.Maui.Graphics.Color
~static readonly Microsoft.Maui.Graphics.Colors.DarkGoldenrod -> Microsoft.Maui.Graphics.Color
~static readonly Microsoft.Maui.Graphics.Colors.DarkGray -> Microsoft.Maui.Graphics.Color
~static readonly Microsoft.Maui.Graphics.Colors.DarkGreen -> Microsoft.Maui.Graphics.Color
~static readonly Microsoft.Maui.Graphics.Colors.DarkGrey -> Microsoft.Maui.Graphics.Color
~static readonly Microsoft.Maui.Graphics.Colors.DarkKhaki -> Microsoft.Maui.Graphics.Color
~static readonly Microsoft.Maui.Graphics.Colors.DarkMagenta -> Microsoft.Maui.Graphics.Color
~static readonly Microsoft.Maui.Graphics.Colors.DarkOliveGreen -> Microsoft.Maui.Graphics.Color
~static readonly Microsoft.Maui.Graphics.Colors.DarkOrange -> Microsoft.Maui.Graphics.Color
~static readonly Microsoft.Maui.Graphics.Colors.DarkOrchid -> Microsoft.Maui.Graphics.Color
~static readonly Microsoft.Maui.Graphics.Colors.DarkRed -> Microsoft.Maui.Graphics.Color
~static readonly Microsoft.Maui.Graphics.Colors.DarkSalmon -> Microsoft.Maui.Graphics.Color
~static readonly Microsoft.Maui.Graphics.Colors.DarkSeaGreen -> Microsoft.Maui.Graphics.Color
~static readonly Microsoft.Maui.Graphics.Colors.DarkSlateBlue -> Microsoft.Maui.Graphics.Color
~static readonly Microsoft.Maui.Graphics.Colors.DarkSlateGray -> Microsoft.Maui.Graphics.Color
~static readonly Microsoft.Maui.Graphics.Colors.DarkSlateGrey -> Microsoft.Maui.Graphics.Color
~static readonly Microsoft.Maui.Graphics.Colors.DarkTurquoise -> Microsoft.Maui.Graphics.Color
~static readonly Microsoft.Maui.Graphics.Colors.DarkViolet -> Microsoft.Maui.Graphics.Color
~static readonly Microsoft.Maui.Graphics.Colors.DeepPink -> Microsoft.Maui.Graphics.Color
~static readonly Microsoft.Maui.Graphics.Colors.DeepSkyBlue -> Microsoft.Maui.Graphics.Color
~static readonly Microsoft.Maui.Graphics.Colors.DimGray -> Microsoft.Maui.Graphics.Color
~static readonly Microsoft.Maui.Graphics.Colors.DimGrey -> Microsoft.Maui.Graphics.Color
~static readonly Microsoft.Maui.Graphics.Colors.DodgerBlue -> Microsoft.Maui.Graphics.Color
~static readonly Microsoft.Maui.Graphics.Colors.Firebrick -> Microsoft.Maui.Graphics.Color
~static readonly Microsoft.Maui.Graphics.Colors.FloralWhite -> Microsoft.Maui.Graphics.Color
~static readonly Microsoft.Maui.Graphics.Colors.ForestGreen -> Microsoft.Maui.Graphics.Color
~static readonly Microsoft.Maui.Graphics.Colors.Fuchsia -> Microsoft.Maui.Graphics.Color
~static readonly Microsoft.Maui.Graphics.Colors.Gainsboro -> Microsoft.Maui.Graphics.Color
~static readonly Microsoft.Maui.Graphics.Colors.GhostWhite -> Microsoft.Maui.Graphics.Color
~static readonly Microsoft.Maui.Graphics.Colors.Gold -> Microsoft.Maui.Graphics.Color
~static readonly Microsoft.Maui.Graphics.Colors.Goldenrod -> Microsoft.Maui.Graphics.Color
~static readonly Microsoft.Maui.Graphics.Colors.Gray -> Microsoft.Maui.Graphics.Color
~static readonly Microsoft.Maui.Graphics.Colors.Green -> Microsoft.Maui.Graphics.Color
~static readonly Microsoft.Maui.Graphics.Colors.GreenYellow -> Microsoft.Maui.Graphics.Color
~static readonly Microsoft.Maui.Graphics.Colors.Grey -> Microsoft.Maui.Graphics.Color
~static readonly Microsoft.Maui.Graphics.Colors.Honeydew -> Microsoft.Maui.Graphics.Color
~static readonly Microsoft.Maui.Graphics.Colors.HotPink -> Microsoft.Maui.Graphics.Color
~static readonly Microsoft.Maui.Graphics.Colors.IndianRed -> Microsoft.Maui.Graphics.Color
~static readonly Microsoft.Maui.Graphics.Colors.Indigo -> Microsoft.Maui.Graphics.Color
~static readonly Microsoft.Maui.Graphics.Colors.Ivory -> Microsoft.Maui.Graphics.Color
~static readonly Microsoft.Maui.Graphics.Colors.Khaki -> Microsoft.Maui.Graphics.Color
~static readonly Microsoft.Maui.Graphics.Colors.Lavender -> Microsoft.Maui.Graphics.Color
~static readonly Microsoft.Maui.Graphics.Colors.LavenderBlush -> Microsoft.Maui.Graphics.Color
~static readonly Microsoft.Maui.Graphics.Colors.LawnGreen -> Microsoft.Maui.Graphics.Color
~static readonly Microsoft.Maui.Graphics.Colors.LemonChiffon -> Microsoft.Maui.Graphics.Color
~static readonly Microsoft.Maui.Graphics.Colors.LightBlue -> Microsoft.Maui.Graphics.Color
~static readonly Microsoft.Maui.Graphics.Colors.LightCoral -> Microsoft.Maui.Graphics.Color
~static readonly Microsoft.Maui.Graphics.Colors.LightCyan -> Microsoft.Maui.Graphics.Color
~static readonly Microsoft.Maui.Graphics.Colors.LightGoldenrodYellow -> Microsoft.Maui.Graphics.Color
~static readonly Microsoft.Maui.Graphics.Colors.LightGray -> Microsoft.Maui.Graphics.Color
~static readonly Microsoft.Maui.Graphics.Colors.LightGreen -> Microsoft.Maui.Graphics.Color
~static readonly Microsoft.Maui.Graphics.Colors.LightGrey -> Microsoft.Maui.Graphics.Color
~static readonly Microsoft.Maui.Graphics.Colors.LightPink -> Microsoft.Maui.Graphics.Color
~static readonly Microsoft.Maui.Graphics.Colors.LightSalmon -> Microsoft.Maui.Graphics.Color
~static readonly Microsoft.Maui.Graphics.Colors.LightSeaGreen -> Microsoft.Maui.Graphics.Color
~static readonly Microsoft.Maui.Graphics.Colors.LightSkyBlue -> Microsoft.Maui.Graphics.Color
~static readonly Microsoft.Maui.Graphics.Colors.LightSlateGray -> Microsoft.Maui.Graphics.Color
~static readonly Microsoft.Maui.Graphics.Colors.LightSlateGrey -> Microsoft.Maui.Graphics.Color
~static readonly Microsoft.Maui.Graphics.Colors.LightSteelBlue -> Microsoft.Maui.Graphics.Color
~static readonly Microsoft.Maui.Graphics.Colors.LightYellow -> Microsoft.Maui.Graphics.Color
~static readonly Microsoft.Maui.Graphics.Colors.Lime -> Microsoft.Maui.Graphics.Color
~static readonly Microsoft.Maui.Graphics.Colors.LimeGreen -> Microsoft.Maui.Graphics.Color
~static readonly Microsoft.Maui.Graphics.Colors.Linen -> Microsoft.Maui.Graphics.Color
~static readonly Microsoft.Maui.Graphics.Colors.Magenta -> Microsoft.Maui.Graphics.Color
~static readonly Microsoft.Maui.Graphics.Colors.Maroon -> Microsoft.Maui.Graphics.Color
~static readonly Microsoft.Maui.Graphics.Colors.MediumAquamarine -> Microsoft.Maui.Graphics.Color
~static readonly Microsoft.Maui.Graphics.Colors.MediumBlue -> Microsoft.Maui.Graphics.Color
~static readonly Microsoft.Maui.Graphics.Colors.MediumOrchid -> Microsoft.Maui.Graphics.Color
~static readonly Microsoft.Maui.Graphics.Colors.MediumPurple -> Microsoft.Maui.Graphics.Color
~static readonly Microsoft.Maui.Graphics.Colors.MediumSeaGreen -> Microsoft.Maui.Graphics.Color
~static readonly Microsoft.Maui.Graphics.Colors.MediumSlateBlue -> Microsoft.Maui.Graphics.Color
~static readonly Microsoft.Maui.Graphics.Colors.MediumSpringGreen -> Microsoft.Maui.Graphics.Color
~static readonly Microsoft.Maui.Graphics.Colors.MediumTurquoise -> Microsoft.Maui.Graphics.Color
~static readonly Microsoft.Maui.Graphics.Colors.MediumVioletRed -> Microsoft.Maui.Graphics.Color
~static readonly Microsoft.Maui.Graphics.Colors.MidnightBlue -> Microsoft.Maui.Graphics.Color
~static readonly Microsoft.Maui.Graphics.Colors.MintCream -> Microsoft.Maui.Graphics.Color
~static readonly Microsoft.Maui.Graphics.Colors.MistyRose -> Microsoft.Maui.Graphics.Color
~static readonly Microsoft.Maui.Graphics.Colors.Moccasin -> Microsoft.Maui.Graphics.Color
~static readonly Microsoft.Maui.Graphics.Colors.NavajoWhite -> Microsoft.Maui.Graphics.Color
~static readonly Microsoft.Maui.Graphics.Colors.Navy -> Microsoft.Maui.Graphics.Color
~static readonly Microsoft.Maui.Graphics.Colors.OldLace -> Microsoft.Maui.Graphics.Color
~static readonly Microsoft.Maui.Graphics.Colors.Olive -> Microsoft.Maui.Graphics.Color
~static readonly Microsoft.Maui.Graphics.Colors.OliveDrab -> Microsoft.Maui.Graphics.Color
~static readonly Microsoft.Maui.Graphics.Colors.Orange -> Microsoft.Maui.Graphics.Color
~static readonly Microsoft.Maui.Graphics.Colors.OrangeRed -> Microsoft.Maui.Graphics.Color
~static readonly Microsoft.Maui.Graphics.Colors.Orchid -> Microsoft.Maui.Graphics.Color
~static readonly Microsoft.Maui.Graphics.Colors.PaleGoldenrod -> Microsoft.Maui.Graphics.Color
~static readonly Microsoft.Maui.Graphics.Colors.PaleGreen -> Microsoft.Maui.Graphics.Color
~static readonly Microsoft.Maui.Graphics.Colors.PaleTurquoise -> Microsoft.Maui.Graphics.Color
~static readonly Microsoft.Maui.Graphics.Colors.PaleVioletRed -> Microsoft.Maui.Graphics.Color
~static readonly Microsoft.Maui.Graphics.Colors.PapayaWhip -> Microsoft.Maui.Graphics.Color
~static readonly Microsoft.Maui.Graphics.Colors.PeachPuff -> Microsoft.Maui.Graphics.Color
~static readonly Microsoft.Maui.Graphics.Colors.Peru -> Microsoft.Maui.Graphics.Color
~static readonly Microsoft.Maui.Graphics.Colors.Pink -> Microsoft.Maui.Graphics.Color
~static readonly Microsoft.Maui.Graphics.Colors.Plum -> Microsoft.Maui.Graphics.Color
~static readonly Microsoft.Maui.Graphics.Colors.PowderBlue -> Microsoft.Maui.Graphics.Color
~static readonly Microsoft.Maui.Graphics.Colors.Purple -> Microsoft.Maui.Graphics.Color
~static readonly Microsoft.Maui.Graphics.Colors.Red -> Microsoft.Maui.Graphics.Color
~static readonly Microsoft.Maui.Graphics.Colors.RosyBrown -> Microsoft.Maui.Graphics.Color
~static readonly Microsoft.Maui.Graphics.Colors.RoyalBlue -> Microsoft.Maui.Graphics.Color
~static readonly Microsoft.Maui.Graphics.Colors.SaddleBrown -> Microsoft.Maui.Graphics.Color
~static readonly Microsoft.Maui.Graphics.Colors.Salmon -> Microsoft.Maui.Graphics.Color
~static readonly Microsoft.Maui.Graphics.Colors.SandyBrown -> Microsoft.Maui.Graphics.Color
~static readonly Microsoft.Maui.Graphics.Colors.SeaGreen -> Microsoft.Maui.Graphics.Color
~static readonly Microsoft.Maui.Graphics.Colors.SeaShell -> Microsoft.Maui.Graphics.Color
~static readonly Microsoft.Maui.Graphics.Colors.Sienna -> Microsoft.Maui.Graphics.Color
~static readonly Microsoft.Maui.Graphics.Colors.Silver -> Microsoft.Maui.Graphics.Color
~static readonly Microsoft.Maui.Graphics.Colors.SkyBlue -> Microsoft.Maui.Graphics.Color
~static readonly Microsoft.Maui.Graphics.Colors.SlateBlue -> Microsoft.Maui.Graphics.Color
~static readonly Microsoft.Maui.Graphics.Colors.SlateGray -> Microsoft.Maui.Graphics.Color
~static readonly Microsoft.Maui.Graphics.Colors.SlateGrey -> Microsoft.Maui.Graphics.Color
~static readonly Microsoft.Maui.Graphics.Colors.Snow -> Microsoft.Maui.Graphics.Color
~static readonly Microsoft.Maui.Graphics.Colors.SpringGreen -> Microsoft.Maui.Graphics.Color
~static readonly Microsoft.Maui.Graphics.Colors.SteelBlue -> Microsoft.Maui.Graphics.Color
~static readonly Microsoft.Maui.Graphics.Colors.Tan -> Microsoft.Maui.Graphics.Color
~static readonly Microsoft.Maui.Graphics.Colors.Teal -> Microsoft.Maui.Graphics.Color
~static readonly Microsoft.Maui.Graphics.Colors.Thistle -> Microsoft.Maui.Graphics.Color
~static readonly Microsoft.Maui.Graphics.Colors.Tomato -> Microsoft.Maui.Graphics.Color
~static readonly Microsoft.Maui.Graphics.Colors.Transparent -> Microsoft.Maui.Graphics.Color
~static readonly Microsoft.Maui.Graphics.Colors.Turquoise -> Microsoft.Maui.Graphics.Color
~static readonly Microsoft.Maui.Graphics.Colors.Violet -> Microsoft.Maui.Graphics.Color
~static readonly Microsoft.Maui.Graphics.Colors.Wheat -> Microsoft.Maui.Graphics.Color
~static readonly Microsoft.Maui.Graphics.Colors.White -> Microsoft.Maui.Graphics.Color
~static readonly Microsoft.Maui.Graphics.Colors.WhiteSmoke -> Microsoft.Maui.Graphics.Color
~static readonly Microsoft.Maui.Graphics.Colors.Yellow -> Microsoft.Maui.Graphics.Color
~static readonly Microsoft.Maui.Graphics.Colors.YellowGreen -> Microsoft.Maui.Graphics.Color
~static readonly Microsoft.Maui.Graphics.Text.AttributedTextRunComparer.Instance -> Microsoft.Maui.Graphics.Text.AttributedTextRunComparer
~virtual Microsoft.Maui.Graphics.AbstractCanvas<TState>.StateRestored(TState state) -> void
abstract Microsoft.Maui.Graphics.AbstractCanvas<TState>.Alpha.set -> void
abstract Microsoft.Maui.Graphics.AbstractCanvas<TState>.Antialias.set -> void
abstract Microsoft.Maui.Graphics.AbstractCanvas<TState>.BlendMode.set -> void
abstract Microsoft.Maui.Graphics.AbstractCanvas<TState>.ClipRectangle(float x, float y, float width, float height) -> void
abstract Microsoft.Maui.Graphics.AbstractCanvas<TState>.FillArc(float x, float y, float width, float height, float startAngle, float endAngle, bool clockwise) -> void
abstract Microsoft.Maui.Graphics.AbstractCanvas<TState>.FillEllipse(float x, float y, float width, float height) -> void
abstract Microsoft.Maui.Graphics.AbstractCanvas<TState>.FillRectangle(float x, float y, float width, float height) -> void
abstract Microsoft.Maui.Graphics.AbstractCanvas<TState>.FillRoundedRectangle(float x, float y, float width, float height, float cornerRadius) -> void
abstract Microsoft.Maui.Graphics.AbstractCanvas<TState>.FontSize.set -> void
abstract Microsoft.Maui.Graphics.AbstractCanvas<TState>.MiterLimit.set -> void
abstract Microsoft.Maui.Graphics.AbstractCanvas<TState>.PlatformConcatenateTransform(System.Numerics.Matrix3x2 transform) -> void
abstract Microsoft.Maui.Graphics.AbstractCanvas<TState>.PlatformDrawArc(float x, float y, float width, float height, float startAngle, float endAngle, bool clockwise, bool closed) -> void
abstract Microsoft.Maui.Graphics.AbstractCanvas<TState>.PlatformDrawEllipse(float x, float y, float width, float height) -> void
abstract Microsoft.Maui.Graphics.AbstractCanvas<TState>.PlatformDrawLine(float x1, float y1, float x2, float y2) -> void
abstract Microsoft.Maui.Graphics.AbstractCanvas<TState>.PlatformDrawRectangle(float x, float y, float width, float height) -> void
abstract Microsoft.Maui.Graphics.AbstractCanvas<TState>.PlatformDrawRoundedRectangle(float x, float y, float width, float height, float cornerRadius) -> void
abstract Microsoft.Maui.Graphics.AbstractCanvas<TState>.PlatformRotate(float degrees, float radians, float x, float y) -> void
abstract Microsoft.Maui.Graphics.AbstractCanvas<TState>.PlatformRotate(float degrees, float radians) -> void
abstract Microsoft.Maui.Graphics.AbstractCanvas<TState>.PlatformScale(float fx, float fy) -> void
abstract Microsoft.Maui.Graphics.AbstractCanvas<TState>.PlatformStrokeSize.set -> void
abstract Microsoft.Maui.Graphics.AbstractCanvas<TState>.PlatformTranslate(float tx, float ty) -> void
abstract Microsoft.Maui.Graphics.AbstractCanvas<TState>.StrokeLineCap.set -> void
abstract Microsoft.Maui.Graphics.AbstractCanvas<TState>.StrokeLineJoin.set -> void
abstract Microsoft.Maui.Graphics.AbstractCanvas<TState>.SubtractFromClip(float x, float y, float width, float height) -> void
const Microsoft.Maui.Graphics.CanvasDefaults.DefaultMiterLimit = 10 -> float
const Microsoft.Maui.Graphics.CanvasDefaults.DefaultShadowBlur = 5 -> float
const Microsoft.Maui.Graphics.FontWeights.Black = 900 -> int
const Microsoft.Maui.Graphics.FontWeights.Bold = 700 -> int
const Microsoft.Maui.Graphics.FontWeights.Default = -1 -> int
const Microsoft.Maui.Graphics.FontWeights.DemiBold = 600 -> int
const Microsoft.Maui.Graphics.FontWeights.ExtraBlack = 950 -> int
const Microsoft.Maui.Graphics.FontWeights.ExtraBold = 800 -> int
const Microsoft.Maui.Graphics.FontWeights.ExtraLight = 200 -> int
const Microsoft.Maui.Graphics.FontWeights.Heavy = 900 -> int
const Microsoft.Maui.Graphics.FontWeights.Light = 300 -> int
const Microsoft.Maui.Graphics.FontWeights.Medium = 500 -> int
const Microsoft.Maui.Graphics.FontWeights.Normal = 400 -> int
const Microsoft.Maui.Graphics.FontWeights.Regular = 400 -> int
const Microsoft.Maui.Graphics.FontWeights.SemiBold = 600 -> int
const Microsoft.Maui.Graphics.FontWeights.SemiLight = 400 -> int
const Microsoft.Maui.Graphics.FontWeights.Thin = 100 -> int
const Microsoft.Maui.Graphics.FontWeights.UltraBlack = 950 -> int
const Microsoft.Maui.Graphics.FontWeights.UltraBold = 800 -> int
const Microsoft.Maui.Graphics.FontWeights.UltraLight = 200 -> int
const Microsoft.Maui.Graphics.GeometryUtil.Epsilon = 1E-10 -> float
const Microsoft.Maui.Graphics.Text.TextAttributeExtensions.DefaultFontSize = 12 -> float
Microsoft.Maui.Graphics.AbstractCanvas<TState>.AssignedStrokeLimit.get -> float
Microsoft.Maui.Graphics.AbstractCanvas<TState>.ConcatenateTransform(System.Numerics.Matrix3x2 transform) -> void
Microsoft.Maui.Graphics.AbstractCanvas<TState>.DrawArc(float x, float y, float width, float height, float startAngle, float endAngle, bool clockwise, bool closed) -> void
Microsoft.Maui.Graphics.AbstractCanvas<TState>.DrawEllipse(float x, float y, float width, float height) -> void
Microsoft.Maui.Graphics.AbstractCanvas<TState>.DrawLine(float x1, float y1, float x2, float y2) -> void
Microsoft.Maui.Graphics.AbstractCanvas<TState>.DrawRectangle(float x, float y, float width, float height) -> void
Microsoft.Maui.Graphics.AbstractCanvas<TState>.DrawRoundedRectangle(float x, float y, float width, float height, float cornerRadius) -> void
Microsoft.Maui.Graphics.AbstractCanvas<TState>.LimitStrokeScaling.set -> void
Microsoft.Maui.Graphics.AbstractCanvas<TState>.LimitStrokeScalingEnabled.get -> bool
Microsoft.Maui.Graphics.AbstractCanvas<TState>.Rotate(float degrees, float x, float y) -> void
Microsoft.Maui.Graphics.AbstractCanvas<TState>.Rotate(float degrees) -> void
Microsoft.Maui.Graphics.AbstractCanvas<TState>.Scale(float fx, float fy) -> void
Microsoft.Maui.Graphics.AbstractCanvas<TState>.StrokeDashOffset.set -> void
Microsoft.Maui.Graphics.AbstractCanvas<TState>.StrokeLimit.set -> void
Microsoft.Maui.Graphics.AbstractCanvas<TState>.StrokeSize.set -> void
Microsoft.Maui.Graphics.AbstractCanvas<TState>.Translate(float tx, float ty) -> void
Microsoft.Maui.Graphics.AbstractPattern
Microsoft.Maui.Graphics.AbstractPattern.AbstractPattern(float stepSize) -> void
Microsoft.Maui.Graphics.AbstractPattern.AbstractPattern(float width, float height, float stepX, float stepY) -> void
Microsoft.Maui.Graphics.AbstractPattern.AbstractPattern(float width, float height) -> void
Microsoft.Maui.Graphics.AbstractPattern.Height.get -> float
Microsoft.Maui.Graphics.AbstractPattern.StepX.get -> float
Microsoft.Maui.Graphics.AbstractPattern.StepY.get -> float
Microsoft.Maui.Graphics.AbstractPattern.Width.get -> float
Microsoft.Maui.Graphics.BitmapExportContext
Microsoft.Maui.Graphics.BitmapExportContext.BitmapExportContext(int width, int height, float dpi) -> void
Microsoft.Maui.Graphics.BitmapExportContext.Dpi.get -> float
Microsoft.Maui.Graphics.BitmapExportContext.Height.get -> int
Microsoft.Maui.Graphics.BitmapExportContext.Width.get -> int
Microsoft.Maui.Graphics.BitmapExportContextExtensions
Microsoft.Maui.Graphics.BlendMode
Microsoft.Maui.Graphics.BlendMode.Clear = 16 -> Microsoft.Maui.Graphics.BlendMode
Microsoft.Maui.Graphics.BlendMode.Color = 14 -> Microsoft.Maui.Graphics.BlendMode
Microsoft.Maui.Graphics.BlendMode.ColorBurn = 7 -> Microsoft.Maui.Graphics.BlendMode
Microsoft.Maui.Graphics.BlendMode.ColorDodge = 6 -> Microsoft.Maui.Graphics.BlendMode
Microsoft.Maui.Graphics.BlendMode.Copy = 17 -> Microsoft.Maui.Graphics.BlendMode
Microsoft.Maui.Graphics.BlendMode.Darken = 4 -> Microsoft.Maui.Graphics.BlendMode
Microsoft.Maui.Graphics.BlendMode.DestinationAtop = 24 -> Microsoft.Maui.Graphics.BlendMode
Microsoft.Maui.Graphics.BlendMode.DestinationIn = 22 -> Microsoft.Maui.Graphics.BlendMode
Microsoft.Maui.Graphics.BlendMode.DestinationOut = 23 -> Microsoft.Maui.Graphics.BlendMode
Microsoft.Maui.Graphics.BlendMode.DestinationOver = 21 -> Microsoft.Maui.Graphics.BlendMode
Microsoft.Maui.Graphics.BlendMode.Difference = 10 -> Microsoft.Maui.Graphics.BlendMode
Microsoft.Maui.Graphics.BlendMode.Exclusion = 11 -> Microsoft.Maui.Graphics.BlendMode
Microsoft.Maui.Graphics.BlendMode.HardLight = 9 -> Microsoft.Maui.Graphics.BlendMode
Microsoft.Maui.Graphics.BlendMode.Hue = 12 -> Microsoft.Maui.Graphics.BlendMode
Microsoft.Maui.Graphics.BlendMode.Lighten = 5 -> Microsoft.Maui.Graphics.BlendMode
Microsoft.Maui.Graphics.BlendMode.Luminosity = 15 -> Microsoft.Maui.Graphics.BlendMode
Microsoft.Maui.Graphics.BlendMode.Multiply = 1 -> Microsoft.Maui.Graphics.BlendMode
Microsoft.Maui.Graphics.BlendMode.Normal = 0 -> Microsoft.Maui.Graphics.BlendMode
Microsoft.Maui.Graphics.BlendMode.Overlay = 3 -> Microsoft.Maui.Graphics.BlendMode
Microsoft.Maui.Graphics.BlendMode.PlusDarker = 26 -> Microsoft.Maui.Graphics.BlendMode
Microsoft.Maui.Graphics.BlendMode.PlusLighter = 27 -> Microsoft.Maui.Graphics.BlendMode
Microsoft.Maui.Graphics.BlendMode.Saturation = 13 -> Microsoft.Maui.Graphics.BlendMode
Microsoft.Maui.Graphics.BlendMode.Screen = 2 -> Microsoft.Maui.Graphics.BlendMode
Microsoft.Maui.Graphics.BlendMode.SoftLight = 8 -> Microsoft.Maui.Graphics.BlendMode
Microsoft.Maui.Graphics.BlendMode.SourceAtop = 20 -> Microsoft.Maui.Graphics.BlendMode
Microsoft.Maui.Graphics.BlendMode.SourceIn = 18 -> Microsoft.Maui.Graphics.BlendMode
Microsoft.Maui.Graphics.BlendMode.SourceOut = 19 -> Microsoft.Maui.Graphics.BlendMode
Microsoft.Maui.Graphics.BlendMode.Xor = 25 -> Microsoft.Maui.Graphics.BlendMode
Microsoft.Maui.Graphics.CanvasDefaults
Microsoft.Maui.Graphics.CanvasExtensions
Microsoft.Maui.Graphics.CanvasState
Microsoft.Maui.Graphics.CanvasState.CanvasState() -> void
Microsoft.Maui.Graphics.CanvasState.Scale.get -> float
Microsoft.Maui.Graphics.CanvasState.ScaleX.get -> float
Microsoft.Maui.Graphics.CanvasState.ScaleY.get -> float
Microsoft.Maui.Graphics.CanvasState.StrokeDashOffset.get -> float
Microsoft.Maui.Graphics.CanvasState.StrokeDashOffset.set -> void
Microsoft.Maui.Graphics.CanvasState.StrokeSize.get -> float
Microsoft.Maui.Graphics.CanvasState.StrokeSize.set -> void
Microsoft.Maui.Graphics.CanvasState.Transform.get -> System.Numerics.Matrix3x2
Microsoft.Maui.Graphics.CanvasState.Transform.set -> void
Microsoft.Maui.Graphics.Color
Microsoft.Maui.Graphics.Color.Color() -> void
Microsoft.Maui.Graphics.Color.Color(byte red, byte green, byte blue, byte alpha) -> void
Microsoft.Maui.Graphics.Color.Color(byte red, byte green, byte blue) -> void
Microsoft.Maui.Graphics.Color.Color(float gray) -> void
Microsoft.Maui.Graphics.Color.Color(float red, float green, float blue, float alpha) -> void
Microsoft.Maui.Graphics.Color.Color(float red, float green, float blue) -> void
Microsoft.Maui.Graphics.Color.Color(int red, int green, int blue, int alpha) -> void
Microsoft.Maui.Graphics.Color.Color(int red, int green, int blue) -> void
Microsoft.Maui.Graphics.Color.Color(System.Numerics.Vector4 color) -> void
Microsoft.Maui.Graphics.Color.GetHue() -> float
Microsoft.Maui.Graphics.Color.GetLuminosity() -> float
Microsoft.Maui.Graphics.Color.GetSaturation() -> float
Microsoft.Maui.Graphics.Color.ToHsl(out float h, out float s, out float l) -> void
Microsoft.Maui.Graphics.Color.ToInt() -> int
Microsoft.Maui.Graphics.Color.ToRgb(out byte r, out byte g, out byte b) -> void
Microsoft.Maui.Graphics.Color.ToRgba(out byte r, out byte g, out byte b, out byte a) -> void
Microsoft.Maui.Graphics.Color.ToUint() -> uint
Microsoft.Maui.Graphics.Colors
Microsoft.Maui.Graphics.Converters.ColorTypeConverter
Microsoft.Maui.Graphics.Converters.ColorTypeConverter.ColorTypeConverter() -> void
Microsoft.Maui.Graphics.Converters.PointFTypeConverter
Microsoft.Maui.Graphics.Converters.PointFTypeConverter.PointFTypeConverter() -> void
Microsoft.Maui.Graphics.Converters.PointTypeConverter
Microsoft.Maui.Graphics.Converters.PointTypeConverter.PointTypeConverter() -> void
Microsoft.Maui.Graphics.Converters.RectFTypeConverter
Microsoft.Maui.Graphics.Converters.RectFTypeConverter.RectFTypeConverter() -> void
Microsoft.Maui.Graphics.Converters.RectTypeConverter
Microsoft.Maui.Graphics.Converters.RectTypeConverter.RectTypeConverter() -> void
Microsoft.Maui.Graphics.Converters.SizeFTypeConverter
Microsoft.Maui.Graphics.Converters.SizeFTypeConverter.SizeFTypeConverter() -> void
Microsoft.Maui.Graphics.Converters.SizeTypeConverter
Microsoft.Maui.Graphics.Converters.SizeTypeConverter.SizeTypeConverter() -> void
Microsoft.Maui.Graphics.DrawingCommand
Microsoft.Maui.Graphics.Font
Microsoft.Maui.Graphics.Font.Font() -> void
Microsoft.Maui.Graphics.Font.IsDefault.get -> bool
Microsoft.Maui.Graphics.Font.StyleType.get -> Microsoft.Maui.Graphics.FontStyleType
Microsoft.Maui.Graphics.Font.Weight.get -> int
Microsoft.Maui.Graphics.FontSource
Microsoft.Maui.Graphics.FontSource.Equals(Microsoft.Maui.Graphics.FontSource other) -> bool
Microsoft.Maui.Graphics.FontSource.FontSource() -> void
Microsoft.Maui.Graphics.FontSource.FontSource(string! filename, int weight = 400, Microsoft.Maui.Graphics.FontStyleType fontStyleType = Microsoft.Maui.Graphics.FontStyleType.Normal) -> void
Microsoft.Maui.Graphics.FontStyleType
Microsoft.Maui.Graphics.FontStyleType.Italic = 1 -> Microsoft.Maui.Graphics.FontStyleType
Microsoft.Maui.Graphics.FontStyleType.Normal = 0 -> Microsoft.Maui.Graphics.FontStyleType
Microsoft.Maui.Graphics.FontStyleType.Oblique = 2 -> Microsoft.Maui.Graphics.FontStyleType
Microsoft.Maui.Graphics.FontWeights
Microsoft.Maui.Graphics.GeometryUtil
Microsoft.Maui.Graphics.GradientPaint
Microsoft.Maui.Graphics.GradientPaint.AddOffset(float offset) -> void
Microsoft.Maui.Graphics.GradientPaint.EndColorIndex.get -> int
Microsoft.Maui.Graphics.GradientPaint.GradientPaint() -> void
Microsoft.Maui.Graphics.GradientPaint.RemoveOffset(int index) -> void
Microsoft.Maui.Graphics.GradientPaint.StartColorIndex.get -> int
Microsoft.Maui.Graphics.HorizontalAlignment
Microsoft.Maui.Graphics.HorizontalAlignment.Center = 1 -> Microsoft.Maui.Graphics.HorizontalAlignment
Microsoft.Maui.Graphics.HorizontalAlignment.Justified = 3 -> Microsoft.Maui.Graphics.HorizontalAlignment
Microsoft.Maui.Graphics.HorizontalAlignment.Left = 0 -> Microsoft.Maui.Graphics.HorizontalAlignment
Microsoft.Maui.Graphics.HorizontalAlignment.Right = 2 -> Microsoft.Maui.Graphics.HorizontalAlignment
Microsoft.Maui.Graphics.IBitmapExportService
Microsoft.Maui.Graphics.IBlurrableCanvas
Microsoft.Maui.Graphics.IBlurrableCanvas.SetBlur(float blurRadius) -> void
Microsoft.Maui.Graphics.ICanvas
Microsoft.Maui.Graphics.ICanvas.Alpha.set -> void
Microsoft.Maui.Graphics.ICanvas.Antialias.set -> void
Microsoft.Maui.Graphics.ICanvas.BlendMode.set -> void
Microsoft.Maui.Graphics.ICanvas.ClipRectangle(float x, float y, float width, float height) -> void
Microsoft.Maui.Graphics.ICanvas.ConcatenateTransform(System.Numerics.Matrix3x2 transform) -> void
Microsoft.Maui.Graphics.ICanvas.DisplayScale.get -> float
Microsoft.Maui.Graphics.ICanvas.DisplayScale.set -> void
Microsoft.Maui.Graphics.ICanvas.DrawArc(float x, float y, float width, float height, float startAngle, float endAngle, bool clockwise, bool closed) -> void
Microsoft.Maui.Graphics.ICanvas.DrawEllipse(float x, float y, float width, float height) -> void
Microsoft.Maui.Graphics.ICanvas.DrawLine(float x1, float y1, float x2, float y2) -> void
Microsoft.Maui.Graphics.ICanvas.DrawRectangle(float x, float y, float width, float height) -> void
Microsoft.Maui.Graphics.ICanvas.DrawRoundedRectangle(float x, float y, float width, float height, float cornerRadius) -> void
Microsoft.Maui.Graphics.ICanvas.FillArc(float x, float y, float width, float height, float startAngle, float endAngle, bool clockwise) -> void
Microsoft.Maui.Graphics.ICanvas.FillEllipse(float x, float y, float width, float height) -> void
Microsoft.Maui.Graphics.ICanvas.FillRectangle(float x, float y, float width, float height) -> void
Microsoft.Maui.Graphics.ICanvas.FillRoundedRectangle(float x, float y, float width, float height, float cornerRadius) -> void
Microsoft.Maui.Graphics.ICanvas.FontSize.set -> void
Microsoft.Maui.Graphics.ICanvas.MiterLimit.set -> void
Microsoft.Maui.Graphics.ICanvas.ResetState() -> void
Microsoft.Maui.Graphics.ICanvas.RestoreState() -> bool
Microsoft.Maui.Graphics.ICanvas.Rotate(float degrees, float x, float y) -> void
Microsoft.Maui.Graphics.ICanvas.Rotate(float degrees) -> void
Microsoft.Maui.Graphics.ICanvas.SaveState() -> void
Microsoft.Maui.Graphics.ICanvas.Scale(float sx, float sy) -> void
Microsoft.Maui.Graphics.ICanvas.StrokeDashOffset.set -> void
Microsoft.Maui.Graphics.ICanvas.StrokeLineCap.set -> void
Microsoft.Maui.Graphics.ICanvas.StrokeLineJoin.set -> void
Microsoft.Maui.Graphics.ICanvas.StrokeSize.set -> void
Microsoft.Maui.Graphics.ICanvas.SubtractFromClip(float x, float y, float width, float height) -> void
Microsoft.Maui.Graphics.ICanvas.Translate(float tx, float ty) -> void
Microsoft.Maui.Graphics.IDrawable
Microsoft.Maui.Graphics.IFont
Microsoft.Maui.Graphics.IFont.StyleType.get -> Microsoft.Maui.Graphics.FontStyleType
Microsoft.Maui.Graphics.IFont.Weight.get -> int
Microsoft.Maui.Graphics.IFontExtensions
Microsoft.Maui.Graphics.IImage
Microsoft.Maui.Graphics.IImage.Height.get -> float
Microsoft.Maui.Graphics.IImage.Width.get -> float
Microsoft.Maui.Graphics.IImageLoadingService
Microsoft.Maui.Graphics.ImageExtensions
Microsoft.Maui.Graphics.ImageFormat
Microsoft.Maui.Graphics.ImageFormat.Bmp = 4 -> Microsoft.Maui.Graphics.ImageFormat
Microsoft.Maui.Graphics.ImageFormat.Gif = 2 -> Microsoft.Maui.Graphics.ImageFormat
Microsoft.Maui.Graphics.ImageFormat.Jpeg = 1 -> Microsoft.Maui.Graphics.ImageFormat
Microsoft.Maui.Graphics.ImageFormat.Png = 0 -> Microsoft.Maui.Graphics.ImageFormat
Microsoft.Maui.Graphics.ImageFormat.Tiff = 3 -> Microsoft.Maui.Graphics.ImageFormat
Microsoft.Maui.Graphics.ImageLoadingServiceExtensions
Microsoft.Maui.Graphics.ImagePaint
Microsoft.Maui.Graphics.ImagePaint.ImagePaint() -> void
Microsoft.Maui.Graphics.Insets
Microsoft.Maui.Graphics.Insets.AllValuesAreEqualTo(double value) -> bool
Microsoft.Maui.Graphics.Insets.Bottom.get -> double
Microsoft.Maui.Graphics.Insets.Bottom.set -> void
Microsoft.Maui.Graphics.Insets.Horizontal.get -> double
Microsoft.Maui.Graphics.Insets.Insets(double top, double left, double bottom, double right) -> void
Microsoft.Maui.Graphics.Insets.Left.get -> double
Microsoft.Maui.Graphics.Insets.Left.set -> void
Microsoft.Maui.Graphics.Insets.Right.get -> double
Microsoft.Maui.Graphics.Insets.Right.set -> void
Microsoft.Maui.Graphics.Insets.Top.get -> double
Microsoft.Maui.Graphics.Insets.Top.set -> void
Microsoft.Maui.Graphics.Insets.Vertical.get -> double
Microsoft.Maui.Graphics.InsetsF
Microsoft.Maui.Graphics.InsetsF.AllValuesAreEqualTo(float value) -> bool
Microsoft.Maui.Graphics.InsetsF.Bottom.get -> float
Microsoft.Maui.Graphics.InsetsF.Bottom.set -> void
Microsoft.Maui.Graphics.InsetsF.Horizontal.get -> float
Microsoft.Maui.Graphics.InsetsF.InsetsF(float top, float left, float bottom, float right) -> void
Microsoft.Maui.Graphics.InsetsF.Left.get -> float
Microsoft.Maui.Graphics.InsetsF.Left.set -> void
Microsoft.Maui.Graphics.InsetsF.Right.get -> float
Microsoft.Maui.Graphics.InsetsF.Right.set -> void
Microsoft.Maui.Graphics.InsetsF.Top.get -> float
Microsoft.Maui.Graphics.InsetsF.Top.set -> void
Microsoft.Maui.Graphics.InsetsF.Vertical.get -> float
Microsoft.Maui.Graphics.IPattern
Microsoft.Maui.Graphics.IPattern.Height.get -> float
Microsoft.Maui.Graphics.IPattern.StepX.get -> float
Microsoft.Maui.Graphics.IPattern.StepY.get -> float
Microsoft.Maui.Graphics.IPattern.Width.get -> float
Microsoft.Maui.Graphics.IPdfPage
Microsoft.Maui.Graphics.IPdfPage.Height.get -> float
Microsoft.Maui.Graphics.IPdfPage.PageNumber.get -> int
Microsoft.Maui.Graphics.IPdfPage.Width.get -> float
Microsoft.Maui.Graphics.IPdfRenderService
Microsoft.Maui.Graphics.IPicture
Microsoft.Maui.Graphics.IPicture.Height.get -> float
Microsoft.Maui.Graphics.IPicture.Width.get -> float
Microsoft.Maui.Graphics.IPicture.X.get -> float
Microsoft.Maui.Graphics.IPicture.Y.get -> float
Microsoft.Maui.Graphics.IPictureReader
Microsoft.Maui.Graphics.IPictureWriter
Microsoft.Maui.Graphics.IPlatformFonts
Microsoft.Maui.Graphics.IPlatformFonts.Default.get -> Microsoft.Maui.Graphics.IFont!
Microsoft.Maui.Graphics.IPlatformFonts.DefaultBold.get -> Microsoft.Maui.Graphics.IFont!
Microsoft.Maui.Graphics.IPlatformFonts.Get(Microsoft.Maui.Graphics.IFont! font) -> object!
Microsoft.Maui.Graphics.IPlatformFonts.Get(string! alias, int weight = 400, Microsoft.Maui.Graphics.FontStyleType fontStyleType = Microsoft.Maui.Graphics.FontStyleType.Normal) -> object!
Microsoft.Maui.Graphics.IPlatformFonts.Register(string! alias, params Microsoft.Maui.Graphics.FontSource[]! sources) -> void
Microsoft.Maui.Graphics.IStringSizeService
Microsoft.Maui.Graphics.ITextAttributes
Microsoft.Maui.Graphics.ITextAttributes.FontSize.get -> float
Microsoft.Maui.Graphics.ITextAttributes.FontSize.set -> void
Microsoft.Maui.Graphics.ITextAttributes.HorizontalAlignment.get -> Microsoft.Maui.Graphics.HorizontalAlignment
Microsoft.Maui.Graphics.ITextAttributes.HorizontalAlignment.set -> void
Microsoft.Maui.Graphics.ITextAttributes.Margin.get -> float
Microsoft.Maui.Graphics.ITextAttributes.Margin.set -> void
Microsoft.Maui.Graphics.ITextAttributes.VerticalAlignment.get -> Microsoft.Maui.Graphics.VerticalAlignment
Microsoft.Maui.Graphics.ITextAttributes.VerticalAlignment.set -> void
Microsoft.Maui.Graphics.LayoutLine
Microsoft.Maui.Graphics.LinearGradientPaint
Microsoft.Maui.Graphics.LinearGradientPaint.EndPoint.get -> Microsoft.Maui.Graphics.Point
Microsoft.Maui.Graphics.LinearGradientPaint.EndPoint.set -> void
Microsoft.Maui.Graphics.LinearGradientPaint.LinearGradientPaint() -> void
Microsoft.Maui.Graphics.LinearGradientPaint.LinearGradientPaint(Microsoft.Maui.Graphics.Point startPoint, Microsoft.Maui.Graphics.Point endPoint) -> void
Microsoft.Maui.Graphics.LinearGradientPaint.StartPoint.get -> Microsoft.Maui.Graphics.Point
Microsoft.Maui.Graphics.LinearGradientPaint.StartPoint.set -> void
Microsoft.Maui.Graphics.LineCap
Microsoft.Maui.Graphics.LineCap.Butt = 0 -> Microsoft.Maui.Graphics.LineCap
Microsoft.Maui.Graphics.LineCap.Round = 1 -> Microsoft.Maui.Graphics.LineCap
Microsoft.Maui.Graphics.LineCap.Square = 2 -> Microsoft.Maui.Graphics.LineCap
Microsoft.Maui.Graphics.LineJoin
Microsoft.Maui.Graphics.LineJoin.Bevel = 2 -> Microsoft.Maui.Graphics.LineJoin
Microsoft.Maui.Graphics.LineJoin.Miter = 0 -> Microsoft.Maui.Graphics.LineJoin
Microsoft.Maui.Graphics.LineJoin.Round = 1 -> Microsoft.Maui.Graphics.LineJoin
Microsoft.Maui.Graphics.Paint
Microsoft.Maui.Graphics.Paint.Paint() -> void
Microsoft.Maui.Graphics.PaintGradientStop
Microsoft.Maui.Graphics.PaintGradientStop.Offset.get -> float
Microsoft.Maui.Graphics.PaintGradientStop.Offset.set -> void
Microsoft.Maui.Graphics.PaintPattern
Microsoft.Maui.Graphics.PaintPattern.Height.get -> float
Microsoft.Maui.Graphics.PaintPattern.StepX.get -> float
Microsoft.Maui.Graphics.PaintPattern.StepY.get -> float
Microsoft.Maui.Graphics.PaintPattern.Width.get -> float
Microsoft.Maui.Graphics.PathArcExtensions
Microsoft.Maui.Graphics.PathBuilder
Microsoft.Maui.Graphics.PathBuilder.PathBuilder() -> void
Microsoft.Maui.Graphics.PathExtensions
Microsoft.Maui.Graphics.PathF
Microsoft.Maui.Graphics.PathF.AppendCircle(float cx, float cy, float r) -> void
Microsoft.Maui.Graphics.PathF.AppendCircle(Microsoft.Maui.Graphics.PointF center, float r) -> void
Microsoft.Maui.Graphics.PathF.AppendEllipse(float x, float y, float w, float h) -> void
Microsoft.Maui.Graphics.PathF.AppendEllipse(Microsoft.Maui.Graphics.RectF rect) -> void
Microsoft.Maui.Graphics.PathF.AppendRectangle(float x, float y, float w, float h, bool includeLast = false) -> void
Microsoft.Maui.Graphics.PathF.AppendRectangle(Microsoft.Maui.Graphics.RectF rect, bool includeLast = false) -> void
Microsoft.Maui.Graphics.PathF.AppendRoundedRectangle(float x, float y, float w, float h, float cornerRadius, bool includeLast = false) -> void
Microsoft.Maui.Graphics.PathF.AppendRoundedRectangle(float x, float y, float w, float h, float topLeftCornerRadius, float topRightCornerRadius, float bottomLeftCornerRadius, float bottomRightCornerRadius, bool includeLast = false) -> void
Microsoft.Maui.Graphics.PathF.AppendRoundedRectangle(Microsoft.Maui.Graphics.RectF rect, float cornerRadius, bool includeLast = false) -> void
Microsoft.Maui.Graphics.PathF.AppendRoundedRectangle(Microsoft.Maui.Graphics.RectF rect, float topLeftCornerRadius, float topRightCornerRadius, float bottomLeftCornerRadius, float bottomRightCornerRadius, bool includeLast = false) -> void
Microsoft.Maui.Graphics.PathF.AppendRoundedRectangle(Microsoft.Maui.Graphics.RectF rect, float xCornerRadius, float yCornerRadius) -> void
Microsoft.Maui.Graphics.PathF.Bounds.get -> Microsoft.Maui.Graphics.RectF
Microsoft.Maui.Graphics.PathF.Close() -> void
Microsoft.Maui.Graphics.PathF.Closed.get -> bool
Microsoft.Maui.Graphics.PathF.Count.get -> int
Microsoft.Maui.Graphics.PathF.Dispose() -> void
Microsoft.Maui.Graphics.PathF.FirstPoint.get -> Microsoft.Maui.Graphics.PointF
Microsoft.Maui.Graphics.PathF.GetArcAngle(int aIndex) -> float
Microsoft.Maui.Graphics.PathF.GetArcClockwise(int aIndex) -> bool
Microsoft.Maui.Graphics.PathF.GetBoundsByFlattening(float flatness = 0.001) -> Microsoft.Maui.Graphics.RectF
Microsoft.Maui.Graphics.PathF.GetRotatedPoint(int pointIndex, Microsoft.Maui.Graphics.PointF pivotPoint, float angle) -> Microsoft.Maui.Graphics.PointF
Microsoft.Maui.Graphics.PathF.GetSegmentForPoint(int pointIndex) -> int
Microsoft.Maui.Graphics.PathF.GetSegmentInfo(int segmentIndex, out int pointIndex, out int arcAngleIndex, out int arcClockwiseIndex) -> Microsoft.Maui.Graphics.PathOperation
Microsoft.Maui.Graphics.PathF.GetSegmentPointIndex(int index) -> int
Microsoft.Maui.Graphics.PathF.GetSegmentType(int aIndex) -> Microsoft.Maui.Graphics.PathOperation
Microsoft.Maui.Graphics.PathF.Invalidate() -> void
Microsoft.Maui.Graphics.PathF.IsSubPathClosed(int subPathIndex) -> bool
Microsoft.Maui.Graphics.PathF.LastPoint.get -> Microsoft.Maui.Graphics.PointF
Microsoft.Maui.Graphics.PathF.LastPointIndex.get -> int
Microsoft.Maui.Graphics.PathF.Move(float x, float y) -> void
Microsoft.Maui.Graphics.PathF.MovePoint(int index, float dx, float dy) -> void
Microsoft.Maui.Graphics.PathF.Open() -> void
Microsoft.Maui.Graphics.PathF.OperationCount.get -> int
Microsoft.Maui.Graphics.PathF.PathF() -> void
Microsoft.Maui.Graphics.PathF.PathF(float x, float y) -> void
Microsoft.Maui.Graphics.PathF.PathF(Microsoft.Maui.Graphics.PointF point) -> void
Microsoft.Maui.Graphics.PathF.RemoveAllSegmentsAfter(int segmentIndex) -> void
Microsoft.Maui.Graphics.PathF.RemoveSegment(int segmentIndex) -> void
Microsoft.Maui.Graphics.PathF.SegmentCountExcludingOpenAndClose.get -> int
Microsoft.Maui.Graphics.PathF.SetArcAngle(int aIndex, float aValue) -> void
Microsoft.Maui.Graphics.PathF.SetArcClockwise(int aIndex, bool aValue) -> void
Microsoft.Maui.Graphics.PathF.SetPoint(int index, float x, float y) -> void
Microsoft.Maui.Graphics.PathF.SetPoint(int index, Microsoft.Maui.Graphics.PointF point) -> void
Microsoft.Maui.Graphics.PathF.SubPathCount.get -> int
Microsoft.Maui.Graphics.PathF.this[int index].get -> Microsoft.Maui.Graphics.PointF
Microsoft.Maui.Graphics.PathF.Transform(System.Numerics.Matrix3x2 transform) -> void
Microsoft.Maui.Graphics.PathOperation
Microsoft.Maui.Graphics.PathOperation.Arc = 4 -> Microsoft.Maui.Graphics.PathOperation
Microsoft.Maui.Graphics.PathOperation.Close = 5 -> Microsoft.Maui.Graphics.PathOperation
Microsoft.Maui.Graphics.PathOperation.Cubic = 3 -> Microsoft.Maui.Graphics.PathOperation
Microsoft.Maui.Graphics.PathOperation.Line = 1 -> Microsoft.Maui.Graphics.PathOperation
Microsoft.Maui.Graphics.PathOperation.Move = 0 -> Microsoft.Maui.Graphics.PathOperation
Microsoft.Maui.Graphics.PathOperation.Quad = 2 -> Microsoft.Maui.Graphics.PathOperation
Microsoft.Maui.Graphics.PatternExtensions
Microsoft.Maui.Graphics.PatternPaint
Microsoft.Maui.Graphics.PatternPaint.PatternPaint() -> void
Microsoft.Maui.Graphics.PdfPageExtensions
Microsoft.Maui.Graphics.PictureCanvas
Microsoft.Maui.Graphics.PictureCanvas.Alpha.set -> void
Microsoft.Maui.Graphics.PictureCanvas.Antialias.set -> void
Microsoft.Maui.Graphics.PictureCanvas.BlendMode.set -> void
Microsoft.Maui.Graphics.PictureCanvas.ClipRectangle(float x, float y, float width, float height) -> void
Microsoft.Maui.Graphics.PictureCanvas.ConcatenateTransform(System.Numerics.Matrix3x2 transform) -> void
Microsoft.Maui.Graphics.PictureCanvas.DisplayScale.get -> float
Microsoft.Maui.Graphics.PictureCanvas.DisplayScale.set -> void
Microsoft.Maui.Graphics.PictureCanvas.Dispose() -> void
Microsoft.Maui.Graphics.PictureCanvas.DrawArc(float x, float y, float width, float height, float startAngle, float endAngle, bool clockwise, bool closed) -> void
Microsoft.Maui.Graphics.PictureCanvas.DrawEllipse(float x, float y, float width, float height) -> void
Microsoft.Maui.Graphics.PictureCanvas.DrawLine(float x1, float y1, float x2, float y2) -> void
Microsoft.Maui.Graphics.PictureCanvas.DrawRectangle(float x, float y, float width, float height) -> void
Microsoft.Maui.Graphics.PictureCanvas.DrawRoundedRectangle(float x, float y, float width, float height, float cornerRadius) -> void
Microsoft.Maui.Graphics.PictureCanvas.FillArc(float x, float y, float width, float height, float startAngle, float endAngle, bool clockwise) -> void
Microsoft.Maui.Graphics.PictureCanvas.FillEllipse(float x, float y, float width, float height) -> void
Microsoft.Maui.Graphics.PictureCanvas.FillRectangle(float x, float y, float width, float height) -> void
Microsoft.Maui.Graphics.PictureCanvas.FillRoundedRectangle(float x, float y, float width, float height, float cornerRadius) -> void
Microsoft.Maui.Graphics.PictureCanvas.FontSize.set -> void
Microsoft.Maui.Graphics.PictureCanvas.MiterLimit.set -> void
Microsoft.Maui.Graphics.PictureCanvas.PictureCanvas(float x, float y, float width, float height) -> void
Microsoft.Maui.Graphics.PictureCanvas.ResetState() -> void
Microsoft.Maui.Graphics.PictureCanvas.RestoreState() -> bool
Microsoft.Maui.Graphics.PictureCanvas.Rotate(float degrees, float x, float y) -> void
Microsoft.Maui.Graphics.PictureCanvas.Rotate(float degrees) -> void
Microsoft.Maui.Graphics.PictureCanvas.SaveState() -> void
Microsoft.Maui.Graphics.PictureCanvas.Scale(float sx, float sy) -> void
Microsoft.Maui.Graphics.PictureCanvas.StrokeDashOffset.set -> void
Microsoft.Maui.Graphics.PictureCanvas.StrokeLineCap.set -> void
Microsoft.Maui.Graphics.PictureCanvas.StrokeLineJoin.set -> void
Microsoft.Maui.Graphics.PictureCanvas.StrokeSize.set -> void
Microsoft.Maui.Graphics.PictureCanvas.SubtractFromClip(float x, float y, float width, float height) -> void
Microsoft.Maui.Graphics.PictureCanvas.Translate(float tx, float ty) -> void
Microsoft.Maui.Graphics.PictureCommand
Microsoft.Maui.Graphics.PictureCommand.Alpha = 71 -> Microsoft.Maui.Graphics.PictureCommand
Microsoft.Maui.Graphics.PictureCommand.BlendMode = 72 -> Microsoft.Maui.Graphics.PictureCommand
Microsoft.Maui.Graphics.PictureCommand.BoldSystemFont = 111 -> Microsoft.Maui.Graphics.PictureCommand
Microsoft.Maui.Graphics.PictureCommand.ClipPath = 81 -> Microsoft.Maui.Graphics.PictureCommand
Microsoft.Maui.Graphics.PictureCommand.ClipRectangle = 82 -> Microsoft.Maui.Graphics.PictureCommand
Microsoft.Maui.Graphics.PictureCommand.ConcatenateTransform = 64 -> Microsoft.Maui.Graphics.PictureCommand
Microsoft.Maui.Graphics.PictureCommand.DrawArc = 6 -> Microsoft.Maui.Graphics.PictureCommand
Microsoft.Maui.Graphics.PictureCommand.DrawEllipse = 3 -> Microsoft.Maui.Graphics.PictureCommand
Microsoft.Maui.Graphics.PictureCommand.DrawImage = 5 -> Microsoft.Maui.Graphics.PictureCommand
Microsoft.Maui.Graphics.PictureCommand.DrawLine = 0 -> Microsoft.Maui.Graphics.PictureCommand
Microsoft.Maui.Graphics.PictureCommand.DrawPath = 4 -> Microsoft.Maui.Graphics.PictureCommand
Microsoft.Maui.Graphics.PictureCommand.DrawPdfPage = 7 -> Microsoft.Maui.Graphics.PictureCommand
Microsoft.Maui.Graphics.PictureCommand.DrawRectangle = 1 -> Microsoft.Maui.Graphics.PictureCommand
Microsoft.Maui.Graphics.PictureCommand.DrawRoundedRectangle = 2 -> Microsoft.Maui.Graphics.PictureCommand
Microsoft.Maui.Graphics.PictureCommand.DrawStringAtPoint = 20 -> Microsoft.Maui.Graphics.PictureCommand
Microsoft.Maui.Graphics.PictureCommand.DrawStringInPath = 22 -> Microsoft.Maui.Graphics.PictureCommand
Microsoft.Maui.Graphics.PictureCommand.DrawStringInRect = 21 -> Microsoft.Maui.Graphics.PictureCommand
Microsoft.Maui.Graphics.PictureCommand.DrawTextInRect = 25 -> Microsoft.Maui.Graphics.PictureCommand
Microsoft.Maui.Graphics.PictureCommand.FillArc = 14 -> Microsoft.Maui.Graphics.PictureCommand
Microsoft.Maui.Graphics.PictureCommand.FillColor = 40 -> Microsoft.Maui.Graphics.PictureCommand
Microsoft.Maui.Graphics.PictureCommand.FillEllipse = 12 -> Microsoft.Maui.Graphics.PictureCommand
Microsoft.Maui.Graphics.PictureCommand.FillPaint = 41 -> Microsoft.Maui.Graphics.PictureCommand
Microsoft.Maui.Graphics.PictureCommand.FillPath = 13 -> Microsoft.Maui.Graphics.PictureCommand
Microsoft.Maui.Graphics.PictureCommand.FillPath2 = 15 -> Microsoft.Maui.Graphics.PictureCommand
Microsoft.Maui.Graphics.PictureCommand.FillRectangle = 10 -> Microsoft.Maui.Graphics.PictureCommand
Microsoft.Maui.Graphics.PictureCommand.FillRoundedRectangle = 11 -> Microsoft.Maui.Graphics.PictureCommand
Microsoft.Maui.Graphics.PictureCommand.FontColor = 50 -> Microsoft.Maui.Graphics.PictureCommand
Microsoft.Maui.Graphics.PictureCommand.FontName = 51 -> Microsoft.Maui.Graphics.PictureCommand
Microsoft.Maui.Graphics.PictureCommand.FontSize = 52 -> Microsoft.Maui.Graphics.PictureCommand
Microsoft.Maui.Graphics.PictureCommand.LimitStrokeScaling = 37 -> Microsoft.Maui.Graphics.PictureCommand
Microsoft.Maui.Graphics.PictureCommand.ResetState = 102 -> Microsoft.Maui.Graphics.PictureCommand
Microsoft.Maui.Graphics.PictureCommand.RestoreState = 101 -> Microsoft.Maui.Graphics.PictureCommand
Microsoft.Maui.Graphics.PictureCommand.Rotate = 62 -> Microsoft.Maui.Graphics.PictureCommand
Microsoft.Maui.Graphics.PictureCommand.RotateAtPoint = 63 -> Microsoft.Maui.Graphics.PictureCommand
Microsoft.Maui.Graphics.PictureCommand.SaveState = 100 -> Microsoft.Maui.Graphics.PictureCommand
Microsoft.Maui.Graphics.PictureCommand.Scale = 60 -> Microsoft.Maui.Graphics.PictureCommand
Microsoft.Maui.Graphics.PictureCommand.Shadow = 70 -> Microsoft.Maui.Graphics.PictureCommand
Microsoft.Maui.Graphics.PictureCommand.StrokeBrush = 39 -> Microsoft.Maui.Graphics.PictureCommand
Microsoft.Maui.Graphics.PictureCommand.StrokeColor = 31 -> Microsoft.Maui.Graphics.PictureCommand
Microsoft.Maui.Graphics.PictureCommand.StrokeDashPattern = 32 -> Microsoft.Maui.Graphics.PictureCommand
Microsoft.Maui.Graphics.PictureCommand.StrokeLimit = 38 -> Microsoft.Maui.Graphics.PictureCommand
Microsoft.Maui.Graphics.PictureCommand.StrokeLineCap = 33 -> Microsoft.Maui.Graphics.PictureCommand
Microsoft.Maui.Graphics.PictureCommand.StrokeLineJoin = 34 -> Microsoft.Maui.Graphics.PictureCommand
Microsoft.Maui.Graphics.PictureCommand.StrokeLocation = 35 -> Microsoft.Maui.Graphics.PictureCommand
Microsoft.Maui.Graphics.PictureCommand.StrokeMiterLimit = 36 -> Microsoft.Maui.Graphics.PictureCommand
Microsoft.Maui.Graphics.PictureCommand.StrokeSize = 30 -> Microsoft.Maui.Graphics.PictureCommand
Microsoft.Maui.Graphics.PictureCommand.SubtractFromClip = 80 -> Microsoft.Maui.Graphics.PictureCommand
Microsoft.Maui.Graphics.PictureCommand.SubtractPathFromClip = 83 -> Microsoft.Maui.Graphics.PictureCommand
Microsoft.Maui.Graphics.PictureCommand.SystemFont = 110 -> Microsoft.Maui.Graphics.PictureCommand
Microsoft.Maui.Graphics.PictureCommand.Translate = 61 -> Microsoft.Maui.Graphics.PictureCommand
Microsoft.Maui.Graphics.PictureExtensions
Microsoft.Maui.Graphics.PicturePattern
Microsoft.Maui.Graphics.PictureReaderExtensions
Microsoft.Maui.Graphics.PictureWriterExtensions
Microsoft.Maui.Graphics.Platform.PlatformImage
Microsoft.Maui.Graphics.Platform.PlatformImage.Dispose() -> void
Microsoft.Maui.Graphics.Platform.PlatformImage.Height.get -> float
Microsoft.Maui.Graphics.Platform.PlatformImage.Width.get -> float
Microsoft.Maui.Graphics.Point
Microsoft.Maui.Graphics.Point.Deconstruct(out double x, out double y) -> void
Microsoft.Maui.Graphics.Point.Distance(Microsoft.Maui.Graphics.Point other) -> double
Microsoft.Maui.Graphics.Point.IsEmpty.get -> bool
Microsoft.Maui.Graphics.Point.Offset(double dx, double dy) -> Microsoft.Maui.Graphics.Point
Microsoft.Maui.Graphics.Point.Point() -> void
Microsoft.Maui.Graphics.Point.Point(double x, double y) -> void
Microsoft.Maui.Graphics.Point.Point(Microsoft.Maui.Graphics.Size sz) -> void
Microsoft.Maui.Graphics.Point.Point(Microsoft.Maui.Graphics.SizeF sz) -> void
Microsoft.Maui.Graphics.Point.Point(System.Numerics.Vector2 v) -> void
Microsoft.Maui.Graphics.Point.Round() -> Microsoft.Maui.Graphics.Point
Microsoft.Maui.Graphics.Point.X.get -> double
Microsoft.Maui.Graphics.Point.X.set -> void
Microsoft.Maui.Graphics.Point.Y.get -> double
Microsoft.Maui.Graphics.Point.Y.set -> void
Microsoft.Maui.Graphics.PointF
Microsoft.Maui.Graphics.PointF.Deconstruct(out float x, out float y) -> void
Microsoft.Maui.Graphics.PointF.Distance(Microsoft.Maui.Graphics.PointF other) -> float
Microsoft.Maui.Graphics.PointF.IsEmpty.get -> bool
Microsoft.Maui.Graphics.PointF.Offset(float dx, float dy) -> Microsoft.Maui.Graphics.PointF
Microsoft.Maui.Graphics.PointF.PointF() -> void
Microsoft.Maui.Graphics.PointF.PointF(float x, float y) -> void
Microsoft.Maui.Graphics.PointF.PointF(Microsoft.Maui.Graphics.SizeF sz) -> void
Microsoft.Maui.Graphics.PointF.PointF(System.Numerics.Vector2 v) -> void
Microsoft.Maui.Graphics.PointF.Round() -> Microsoft.Maui.Graphics.PointF
Microsoft.Maui.Graphics.PointF.TransformBy(in System.Numerics.Matrix3x2 transform) -> Microsoft.Maui.Graphics.PointF
Microsoft.Maui.Graphics.PointF.X.get -> float
Microsoft.Maui.Graphics.PointF.X.set -> void
Microsoft.Maui.Graphics.PointF.Y.get -> float
Microsoft.Maui.Graphics.PointF.Y.set -> void
Microsoft.Maui.Graphics.RadialGradientPaint
Microsoft.Maui.Graphics.RadialGradientPaint.Center.get -> Microsoft.Maui.Graphics.Point
Microsoft.Maui.Graphics.RadialGradientPaint.Center.set -> void
Microsoft.Maui.Graphics.RadialGradientPaint.RadialGradientPaint() -> void
Microsoft.Maui.Graphics.RadialGradientPaint.RadialGradientPaint(Microsoft.Maui.Graphics.Point center, double radius) -> void
Microsoft.Maui.Graphics.RadialGradientPaint.Radius.get -> double
Microsoft.Maui.Graphics.RadialGradientPaint.Radius.set -> void
Microsoft.Maui.Graphics.Rect
Microsoft.Maui.Graphics.Rect.Bottom.get -> double
Microsoft.Maui.Graphics.Rect.Bottom.set -> void
Microsoft.Maui.Graphics.Rect.Center.get -> Microsoft.Maui.Graphics.Point
Microsoft.Maui.Graphics.Rect.Contains(double x, double y) -> bool
Microsoft.Maui.Graphics.Rect.Contains(Microsoft.Maui.Graphics.Point pt) -> bool
Microsoft.Maui.Graphics.Rect.Contains(Microsoft.Maui.Graphics.Rect rect) -> bool
Microsoft.Maui.Graphics.Rect.Deconstruct(out double x, out double y, out double width, out double height) -> void
Microsoft.Maui.Graphics.Rect.Equals(Microsoft.Maui.Graphics.Rect other) -> bool
Microsoft.Maui.Graphics.Rect.Height.get -> double
Microsoft.Maui.Graphics.Rect.Height.set -> void
Microsoft.Maui.Graphics.Rect.Inflate(double width, double height) -> Microsoft.Maui.Graphics.Rect
Microsoft.Maui.Graphics.Rect.Inflate(Microsoft.Maui.Graphics.Size sz) -> Microsoft.Maui.Graphics.Rect
Microsoft.Maui.Graphics.Rect.Intersect(Microsoft.Maui.Graphics.Rect r) -> Microsoft.Maui.Graphics.Rect
Microsoft.Maui.Graphics.Rect.IntersectsWith(Microsoft.Maui.Graphics.Rect r) -> bool
Microsoft.Maui.Graphics.Rect.IsEmpty.get -> bool
Microsoft.Maui.Graphics.Rect.Left.get -> double
Microsoft.Maui.Graphics.Rect.Left.set -> void
Microsoft.Maui.Graphics.Rect.Location.get -> Microsoft.Maui.Graphics.Point
Microsoft.Maui.Graphics.Rect.Location.set -> void
Microsoft.Maui.Graphics.Rect.Offset(double dx, double dy) -> Microsoft.Maui.Graphics.Rect
Microsoft.Maui.Graphics.Rect.Offset(Microsoft.Maui.Graphics.Point dr) -> Microsoft.Maui.Graphics.Rect
Microsoft.Maui.Graphics.Rect.Rect() -> void
Microsoft.Maui.Graphics.Rect.Rect(double x, double y, double width, double height) -> void
Microsoft.Maui.Graphics.Rect.Rect(Microsoft.Maui.Graphics.Point loc, Microsoft.Maui.Graphics.Size sz) -> void
Microsoft.Maui.Graphics.Rect.Right.get -> double
Microsoft.Maui.Graphics.Rect.Right.set -> void
Microsoft.Maui.Graphics.Rect.Round() -> Microsoft.Maui.Graphics.Rect
Microsoft.Maui.Graphics.Rect.Size.get -> Microsoft.Maui.Graphics.Size
Microsoft.Maui.Graphics.Rect.Size.set -> void
Microsoft.Maui.Graphics.Rect.Top.get -> double
Microsoft.Maui.Graphics.Rect.Top.set -> void
Microsoft.Maui.Graphics.Rect.Union(Microsoft.Maui.Graphics.Rect r) -> Microsoft.Maui.Graphics.Rect
Microsoft.Maui.Graphics.Rect.Width.get -> double
Microsoft.Maui.Graphics.Rect.Width.set -> void
Microsoft.Maui.Graphics.Rect.X.get -> double
Microsoft.Maui.Graphics.Rect.X.set -> void
Microsoft.Maui.Graphics.Rect.Y.get -> double
Microsoft.Maui.Graphics.Rect.Y.set -> void
Microsoft.Maui.Graphics.RectF
Microsoft.Maui.Graphics.RectF.Bottom.get -> float
Microsoft.Maui.Graphics.RectF.Bottom.set -> void
Microsoft.Maui.Graphics.RectF.Center.get -> Microsoft.Maui.Graphics.PointF
Microsoft.Maui.Graphics.RectF.Contains(float x, float y) -> bool
Microsoft.Maui.Graphics.RectF.Contains(Microsoft.Maui.Graphics.PointF pt) -> bool
Microsoft.Maui.Graphics.RectF.Contains(Microsoft.Maui.Graphics.RectF rect) -> bool
Microsoft.Maui.Graphics.RectF.Deconstruct(out float x, out float y, out float width, out float height) -> void
Microsoft.Maui.Graphics.RectF.Equals(Microsoft.Maui.Graphics.RectF other) -> bool
Microsoft.Maui.Graphics.RectF.Height.get -> float
Microsoft.Maui.Graphics.RectF.Height.set -> void
Microsoft.Maui.Graphics.RectF.Inflate(float width, float height) -> Microsoft.Maui.Graphics.RectF
Microsoft.Maui.Graphics.RectF.Inflate(Microsoft.Maui.Graphics.SizeF sz) -> Microsoft.Maui.Graphics.RectF
Microsoft.Maui.Graphics.RectF.Intersect(Microsoft.Maui.Graphics.RectF r) -> Microsoft.Maui.Graphics.RectF
Microsoft.Maui.Graphics.RectF.IntersectsWith(Microsoft.Maui.Graphics.RectF r) -> bool
Microsoft.Maui.Graphics.RectF.IsEmpty.get -> bool
Microsoft.Maui.Graphics.RectF.Left.get -> float
Microsoft.Maui.Graphics.RectF.Left.set -> void
Microsoft.Maui.Graphics.RectF.Location.get -> Microsoft.Maui.Graphics.PointF
Microsoft.Maui.Graphics.RectF.Location.set -> void
Microsoft.Maui.Graphics.RectF.Offset(float dx, float dy) -> Microsoft.Maui.Graphics.RectF
Microsoft.Maui.Graphics.RectF.Offset(Microsoft.Maui.Graphics.PointF dr) -> Microsoft.Maui.Graphics.RectF
Microsoft.Maui.Graphics.RectF.RectF() -> void
Microsoft.Maui.Graphics.RectF.RectF(float x, float y, float width, float height) -> void
Microsoft.Maui.Graphics.RectF.RectF(Microsoft.Maui.Graphics.PointF loc, Microsoft.Maui.Graphics.SizeF sz) -> void
Microsoft.Maui.Graphics.RectF.Right.get -> float
Microsoft.Maui.Graphics.RectF.Right.set -> void
Microsoft.Maui.Graphics.RectF.Round() -> Microsoft.Maui.Graphics.RectF
Microsoft.Maui.Graphics.RectF.Size.get -> Microsoft.Maui.Graphics.SizeF
Microsoft.Maui.Graphics.RectF.Size.set -> void
Microsoft.Maui.Graphics.RectF.Top.get -> float
Microsoft.Maui.Graphics.RectF.Top.set -> void
Microsoft.Maui.Graphics.RectF.Union(Microsoft.Maui.Graphics.RectF r) -> Microsoft.Maui.Graphics.RectF
Microsoft.Maui.Graphics.RectF.Width.get -> float
Microsoft.Maui.Graphics.RectF.Width.set -> void
Microsoft.Maui.Graphics.RectF.X.get -> float
Microsoft.Maui.Graphics.RectF.X.set -> void
Microsoft.Maui.Graphics.RectF.Y.get -> float
Microsoft.Maui.Graphics.RectF.Y.set -> void
Microsoft.Maui.Graphics.ResizeMode
Microsoft.Maui.Graphics.ResizeMode.Bleed = 1 -> Microsoft.Maui.Graphics.ResizeMode
Microsoft.Maui.Graphics.ResizeMode.Fit = 0 -> Microsoft.Maui.Graphics.ResizeMode
Microsoft.Maui.Graphics.ResizeMode.Stretch = 2 -> Microsoft.Maui.Graphics.ResizeMode
Microsoft.Maui.Graphics.ScalingCanvas
Microsoft.Maui.Graphics.ScalingCanvas.Alpha.set -> void
Microsoft.Maui.Graphics.ScalingCanvas.Antialias.set -> void
Microsoft.Maui.Graphics.ScalingCanvas.BlendMode.set -> void
Microsoft.Maui.Graphics.ScalingCanvas.ClipRectangle(float x, float y, float width, float height) -> void
Microsoft.Maui.Graphics.ScalingCanvas.ConcatenateTransform(System.Numerics.Matrix3x2 transform) -> void
Microsoft.Maui.Graphics.ScalingCanvas.DisplayScale.get -> float
Microsoft.Maui.Graphics.ScalingCanvas.DisplayScale.set -> void
Microsoft.Maui.Graphics.ScalingCanvas.DrawArc(float x, float y, float width, float height, float startAngle, float endAngle, bool clockwise, bool closed) -> void
Microsoft.Maui.Graphics.ScalingCanvas.DrawEllipse(float x, float y, float width, float height) -> void
Microsoft.Maui.Graphics.ScalingCanvas.DrawLine(float x1, float y1, float x2, float y2) -> void
Microsoft.Maui.Graphics.ScalingCanvas.DrawRectangle(float x, float y, float width, float height) -> void
Microsoft.Maui.Graphics.ScalingCanvas.DrawRoundedRectangle(float x, float y, float width, float height, float cornerRadius) -> void
Microsoft.Maui.Graphics.ScalingCanvas.FillArc(float x, float y, float width, float height, float startAngle, float endAngle, bool clockwise) -> void
Microsoft.Maui.Graphics.ScalingCanvas.FillEllipse(float x, float y, float width, float height) -> void
Microsoft.Maui.Graphics.ScalingCanvas.FillRectangle(float x, float y, float width, float height) -> void
Microsoft.Maui.Graphics.ScalingCanvas.FillRoundedRectangle(float x, float y, float width, float height, float cornerRadius) -> void
Microsoft.Maui.Graphics.ScalingCanvas.FontSize.set -> void
Microsoft.Maui.Graphics.ScalingCanvas.GetScale() -> float
Microsoft.Maui.Graphics.ScalingCanvas.MiterLimit.set -> void
Microsoft.Maui.Graphics.ScalingCanvas.ResetState() -> void
Microsoft.Maui.Graphics.ScalingCanvas.RestoreState() -> bool
Microsoft.Maui.Graphics.ScalingCanvas.Rotate(float degrees, float x, float y) -> void
Microsoft.Maui.Graphics.ScalingCanvas.Rotate(float degrees) -> void
Microsoft.Maui.Graphics.ScalingCanvas.SaveState() -> void
Microsoft.Maui.Graphics.ScalingCanvas.Scale(float sx, float sy) -> void
Microsoft.Maui.Graphics.ScalingCanvas.SetBlur(float blurRadius) -> void
Microsoft.Maui.Graphics.ScalingCanvas.StrokeDashOffset.set -> void
Microsoft.Maui.Graphics.ScalingCanvas.StrokeLineCap.set -> void
Microsoft.Maui.Graphics.ScalingCanvas.StrokeLineJoin.set -> void
Microsoft.Maui.Graphics.ScalingCanvas.StrokeSize.set -> void
Microsoft.Maui.Graphics.ScalingCanvas.SubtractFromClip(float x1, float y1, float x2, float y2) -> void
Microsoft.Maui.Graphics.ScalingCanvas.Translate(float tx, float ty) -> void
Microsoft.Maui.Graphics.Size
Microsoft.Maui.Graphics.Size.Deconstruct(out double width, out double height) -> void
Microsoft.Maui.Graphics.Size.Equals(Microsoft.Maui.Graphics.Size other) -> bool
Microsoft.Maui.Graphics.Size.Height.get -> double
Microsoft.Maui.Graphics.Size.Height.set -> void
Microsoft.Maui.Graphics.Size.IsZero.get -> bool
Microsoft.Maui.Graphics.Size.Size() -> void
Microsoft.Maui.Graphics.Size.Size(double size = 0) -> void
Microsoft.Maui.Graphics.Size.Size(double width, double height) -> void
Microsoft.Maui.Graphics.Size.Size(System.Numerics.Vector2 vector) -> void
Microsoft.Maui.Graphics.Size.Width.get -> double
Microsoft.Maui.Graphics.Size.Width.set -> void
Microsoft.Maui.Graphics.SizeF
Microsoft.Maui.Graphics.SizeF.Deconstruct(out float width, out float height) -> void
Microsoft.Maui.Graphics.SizeF.Equals(Microsoft.Maui.Graphics.SizeF other) -> bool
Microsoft.Maui.Graphics.SizeF.Height.get -> float
Microsoft.Maui.Graphics.SizeF.Height.set -> void
Microsoft.Maui.Graphics.SizeF.IsZero.get -> bool
Microsoft.Maui.Graphics.SizeF.SizeF() -> void
Microsoft.Maui.Graphics.SizeF.SizeF(float size = 0) -> void
Microsoft.Maui.Graphics.SizeF.SizeF(float width, float height) -> void
Microsoft.Maui.Graphics.SizeF.SizeF(System.Numerics.Vector2 vector) -> void
Microsoft.Maui.Graphics.SizeF.TransformNormalBy(in System.Numerics.Matrix3x2 transform) -> Microsoft.Maui.Graphics.SizeF
Microsoft.Maui.Graphics.SizeF.Width.get -> float
Microsoft.Maui.Graphics.SizeF.Width.set -> void
Microsoft.Maui.Graphics.SolidPaint
Microsoft.Maui.Graphics.SolidPaint.SolidPaint() -> void
Microsoft.Maui.Graphics.StandardPicture
Microsoft.Maui.Graphics.StandardPicture.Height.get -> float
Microsoft.Maui.Graphics.StandardPicture.Width.get -> float
Microsoft.Maui.Graphics.StandardPicture.X.get -> float
Microsoft.Maui.Graphics.StandardPicture.Y.get -> float
Microsoft.Maui.Graphics.StandardTextAttributes
Microsoft.Maui.Graphics.StandardTextAttributes.FontSize.get -> float
Microsoft.Maui.Graphics.StandardTextAttributes.FontSize.set -> void
Microsoft.Maui.Graphics.StandardTextAttributes.HorizontalAlignment.get -> Microsoft.Maui.Graphics.HorizontalAlignment
Microsoft.Maui.Graphics.StandardTextAttributes.HorizontalAlignment.set -> void
Microsoft.Maui.Graphics.StandardTextAttributes.Margin.get -> float
Microsoft.Maui.Graphics.StandardTextAttributes.Margin.set -> void
Microsoft.Maui.Graphics.StandardTextAttributes.StandardTextAttributes() -> void
Microsoft.Maui.Graphics.StandardTextAttributes.VerticalAlignment.get -> Microsoft.Maui.Graphics.VerticalAlignment
Microsoft.Maui.Graphics.StandardTextAttributes.VerticalAlignment.set -> void
Microsoft.Maui.Graphics.Text.AbstractAttributedText
Microsoft.Maui.Graphics.Text.AbstractAttributedText.AbstractAttributedText() -> void
Microsoft.Maui.Graphics.Text.AbstractAttributedText.Optimal.get -> bool
Microsoft.Maui.Graphics.Text.AbstractAttributedText.Optimal.set -> void
Microsoft.Maui.Graphics.Text.AttributedText
Microsoft.Maui.Graphics.Text.AttributedTextBlock
Microsoft.Maui.Graphics.Text.AttributedTextExtensions
Microsoft.Maui.Graphics.Text.AttributedTextRun
Microsoft.Maui.Graphics.Text.AttributedTextRun.Length.get -> int
Microsoft.Maui.Graphics.Text.AttributedTextRun.Start.get -> int
Microsoft.Maui.Graphics.Text.AttributedTextRunComparer
Microsoft.Maui.Graphics.Text.AttributedTextRunComparer.AttributedTextRunComparer() -> void
Microsoft.Maui.Graphics.Text.AttributedTextRunExtensions
Microsoft.Maui.Graphics.Text.CountingWriter
Microsoft.Maui.Graphics.Text.CountingWriter.Count.get -> int
Microsoft.Maui.Graphics.Text.IAttributedText
Microsoft.Maui.Graphics.Text.IAttributedTextRun
Microsoft.Maui.Graphics.Text.IAttributedTextRun.Length.get -> int
Microsoft.Maui.Graphics.Text.IAttributedTextRun.Start.get -> int
Microsoft.Maui.Graphics.Text.ITextAttributes
Microsoft.Maui.Graphics.Text.MarkerType
Microsoft.Maui.Graphics.Text.MarkerType.ClosedCircle = 0 -> Microsoft.Maui.Graphics.Text.MarkerType
Microsoft.Maui.Graphics.Text.MarkerType.Hyphen = 2 -> Microsoft.Maui.Graphics.Text.MarkerType
Microsoft.Maui.Graphics.Text.MarkerType.OpenCircle = 1 -> Microsoft.Maui.Graphics.Text.MarkerType
Microsoft.Maui.Graphics.Text.MutableAttributedText
Microsoft.Maui.Graphics.Text.TextAttribute
Microsoft.Maui.Graphics.Text.TextAttribute.Background = 9 -> Microsoft.Maui.Graphics.Text.TextAttribute
Microsoft.Maui.Graphics.Text.TextAttribute.Bold = 2 -> Microsoft.Maui.Graphics.Text.TextAttribute
Microsoft.Maui.Graphics.Text.TextAttribute.Color = 8 -> Microsoft.Maui.Graphics.Text.TextAttribute
Microsoft.Maui.Graphics.Text.TextAttribute.FontName = 0 -> Microsoft.Maui.Graphics.Text.TextAttribute
Microsoft.Maui.Graphics.Text.TextAttribute.FontSize = 1 -> Microsoft.Maui.Graphics.Text.TextAttribute
Microsoft.Maui.Graphics.Text.TextAttribute.Italic = 3 -> Microsoft.Maui.Graphics.Text.TextAttribute
Microsoft.Maui.Graphics.Text.TextAttribute.Marker = 11 -> Microsoft.Maui.Graphics.Text.TextAttribute
Microsoft.Maui.Graphics.Text.TextAttribute.Strikethrough = 5 -> Microsoft.Maui.Graphics.Text.TextAttribute
Microsoft.Maui.Graphics.Text.TextAttribute.Subscript = 6 -> Microsoft.Maui.Graphics.Text.TextAttribute
Microsoft.Maui.Graphics.Text.TextAttribute.Superscript = 7 -> Microsoft.Maui.Graphics.Text.TextAttribute
Microsoft.Maui.Graphics.Text.TextAttribute.Underline = 4 -> Microsoft.Maui.Graphics.Text.TextAttribute
Microsoft.Maui.Graphics.Text.TextAttribute.UnorderedList = 10 -> Microsoft.Maui.Graphics.Text.TextAttribute
Microsoft.Maui.Graphics.Text.TextAttributeExtensions
Microsoft.Maui.Graphics.Text.TextAttributes
Microsoft.Maui.Graphics.Text.TextAttributes.TextAttributes() -> void
Microsoft.Maui.Graphics.Text.TextAttributesExtensions
Microsoft.Maui.Graphics.Text.TextColors
Microsoft.Maui.Graphics.Text.XmlAttributedTextReader
Microsoft.Maui.Graphics.Text.XmlAttributedTextReader.ElementEnded() -> void
Microsoft.Maui.Graphics.Text.XmlAttributedTextReader.ElementStarted() -> void
Microsoft.Maui.Graphics.Text.XmlAttributedTextReader.XmlAttributedTextReader() -> void
Microsoft.Maui.Graphics.Text.XmlAttributedTextWriter
Microsoft.Maui.Graphics.Text.XmlAttributedTextWriter.XmlAttributedTextWriter() -> void
Microsoft.Maui.Graphics.TextFlow
Microsoft.Maui.Graphics.TextFlow.ClipBounds = 0 -> Microsoft.Maui.Graphics.TextFlow
Microsoft.Maui.Graphics.TextFlow.OverflowBounds = 1 -> Microsoft.Maui.Graphics.TextFlow
Microsoft.Maui.Graphics.VerticalAlignment
Microsoft.Maui.Graphics.VerticalAlignment.Bottom = 2 -> Microsoft.Maui.Graphics.VerticalAlignment
Microsoft.Maui.Graphics.VerticalAlignment.Center = 1 -> Microsoft.Maui.Graphics.VerticalAlignment
Microsoft.Maui.Graphics.VerticalAlignment.Top = 0 -> Microsoft.Maui.Graphics.VerticalAlignment
Microsoft.Maui.Graphics.WindingMode
Microsoft.Maui.Graphics.WindingMode.EvenOdd = 1 -> Microsoft.Maui.Graphics.WindingMode
Microsoft.Maui.Graphics.WindingMode.NonZero = 0 -> Microsoft.Maui.Graphics.WindingMode
Microsoft.Maui.Graphics.XmlnsPrefixAttribute
override Microsoft.Maui.Graphics.Color.GetHashCode() -> int
override Microsoft.Maui.Graphics.Font.GetHashCode() -> int
override Microsoft.Maui.Graphics.FontSource.Equals(object? obj) -> bool
override Microsoft.Maui.Graphics.FontSource.GetHashCode() -> int
override Microsoft.Maui.Graphics.GradientPaint.IsTransparent.get -> bool
override Microsoft.Maui.Graphics.ImagePaint.IsTransparent.get -> bool
override Microsoft.Maui.Graphics.Insets.GetHashCode() -> int
override Microsoft.Maui.Graphics.InsetsF.GetHashCode() -> int
override Microsoft.Maui.Graphics.PathF.GetHashCode() -> int
override Microsoft.Maui.Graphics.PatternPaint.IsTransparent.get -> bool
override Microsoft.Maui.Graphics.Point.GetHashCode() -> int
override Microsoft.Maui.Graphics.PointF.GetHashCode() -> int
override Microsoft.Maui.Graphics.Rect.GetHashCode() -> int
override Microsoft.Maui.Graphics.RectF.GetHashCode() -> int
override Microsoft.Maui.Graphics.Size.GetHashCode() -> int
override Microsoft.Maui.Graphics.SizeF.GetHashCode() -> int
override Microsoft.Maui.Graphics.SolidPaint.IsTransparent.get -> bool
override Microsoft.Maui.Graphics.Text.CountingWriter.Write(char value) -> void
readonly Microsoft.Maui.Graphics.Color.Alpha -> float
readonly Microsoft.Maui.Graphics.Color.Blue -> float
readonly Microsoft.Maui.Graphics.Color.Green -> float
readonly Microsoft.Maui.Graphics.Color.Red -> float
readonly Microsoft.Maui.Graphics.FontSource.FontStyleType -> Microsoft.Maui.Graphics.FontStyleType
readonly Microsoft.Maui.Graphics.FontSource.Name -> string!
readonly Microsoft.Maui.Graphics.FontSource.Weight -> int
static Microsoft.Maui.Graphics.CanvasState.GetLengthScale(System.Numerics.Matrix3x2 matrix) -> float
static Microsoft.Maui.Graphics.Font.Default.get -> Microsoft.Maui.Graphics.Font
static Microsoft.Maui.Graphics.Font.DefaultBold.get -> Microsoft.Maui.Graphics.Font
static Microsoft.Maui.Graphics.Font.operator !=(Microsoft.Maui.Graphics.Font left, Microsoft.Maui.Graphics.Font right) -> bool
static Microsoft.Maui.Graphics.Font.operator ==(Microsoft.Maui.Graphics.Font left, Microsoft.Maui.Graphics.Font right) -> bool
static Microsoft.Maui.Graphics.FontSource.operator !=(Microsoft.Maui.Graphics.FontSource left, Microsoft.Maui.Graphics.FontSource right) -> bool
static Microsoft.Maui.Graphics.FontSource.operator ==(Microsoft.Maui.Graphics.FontSource left, Microsoft.Maui.Graphics.FontSource right) -> bool
static Microsoft.Maui.Graphics.GeometryUtil.DegreesToRadians(double angle) -> double
static Microsoft.Maui.Graphics.GeometryUtil.DegreesToRadians(float angle) -> float
static Microsoft.Maui.Graphics.GeometryUtil.EllipseAngleToPoint(float x, float y, float width, float height, float angleInDegrees) -> Microsoft.Maui.Graphics.PointF
static Microsoft.Maui.Graphics.GeometryUtil.GetAngleAsDegrees(float x1, float y1, float x2, float y2) -> float
static Microsoft.Maui.Graphics.GeometryUtil.GetDistance(float x1, float y1, float x2, float y2) -> float
static Microsoft.Maui.Graphics.GeometryUtil.GetFactor(float aMin, float aMax, float aValue) -> float
static Microsoft.Maui.Graphics.GeometryUtil.GetLinearValue(float aMin, float aMax, float aFactor) -> float
static Microsoft.Maui.Graphics.GeometryUtil.GetOppositePoint(Microsoft.Maui.Graphics.PointF pivot, Microsoft.Maui.Graphics.PointF oppositePoint) -> Microsoft.Maui.Graphics.PointF
static Microsoft.Maui.Graphics.GeometryUtil.GetSweep(float angle1, float angle2, bool clockwise) -> float
static Microsoft.Maui.Graphics.GeometryUtil.IsLineIntersectingLine(float x0, float y0, float x1, float y1, float x2, float y2, float x3, float y3) -> bool
static Microsoft.Maui.Graphics.GeometryUtil.PolarToPoint(float angleInRadians, float fx, float fy) -> Microsoft.Maui.Graphics.PointF
static Microsoft.Maui.Graphics.GeometryUtil.RadiansToDegrees(double angle) -> double
static Microsoft.Maui.Graphics.GeometryUtil.RadiansToDegrees(float angle) -> float
static Microsoft.Maui.Graphics.GeometryUtil.RotatePoint(Microsoft.Maui.Graphics.PointF center, Microsoft.Maui.Graphics.PointF point, float angle) -> Microsoft.Maui.Graphics.PointF
static Microsoft.Maui.Graphics.GeometryUtil.RotatePoint(Microsoft.Maui.Graphics.PointF point, float angle) -> Microsoft.Maui.Graphics.PointF
static Microsoft.Maui.Graphics.Point.explicit operator Microsoft.Maui.Graphics.Size(Microsoft.Maui.Graphics.Point pt) -> Microsoft.Maui.Graphics.Size
static Microsoft.Maui.Graphics.Point.implicit operator Microsoft.Maui.Graphics.Point(System.Numerics.Vector2 v) -> Microsoft.Maui.Graphics.Point
static Microsoft.Maui.Graphics.Point.implicit operator Microsoft.Maui.Graphics.PointF(Microsoft.Maui.Graphics.Point p) -> Microsoft.Maui.Graphics.PointF
static Microsoft.Maui.Graphics.Point.operator -(Microsoft.Maui.Graphics.Point pt, Microsoft.Maui.Graphics.SizeF sz) -> Microsoft.Maui.Graphics.Point
static Microsoft.Maui.Graphics.Point.operator -(Microsoft.Maui.Graphics.Point ptA, Microsoft.Maui.Graphics.Point ptB) -> Microsoft.Maui.Graphics.Size
static Microsoft.Maui.Graphics.Point.operator !=(Microsoft.Maui.Graphics.Point ptA, Microsoft.Maui.Graphics.Point ptB) -> bool
static Microsoft.Maui.Graphics.Point.operator +(Microsoft.Maui.Graphics.Point pt, Microsoft.Maui.Graphics.SizeF sz) -> Microsoft.Maui.Graphics.Point
static Microsoft.Maui.Graphics.Point.operator ==(Microsoft.Maui.Graphics.Point ptA, Microsoft.Maui.Graphics.Point ptB) -> bool
static Microsoft.Maui.Graphics.Point.Zero -> Microsoft.Maui.Graphics.Point
static Microsoft.Maui.Graphics.PointF.explicit operator Microsoft.Maui.Graphics.SizeF(Microsoft.Maui.Graphics.PointF pt) -> Microsoft.Maui.Graphics.SizeF
static Microsoft.Maui.Graphics.PointF.explicit operator System.Numerics.Vector2(Microsoft.Maui.Graphics.PointF p) -> System.Numerics.Vector2
static Microsoft.Maui.Graphics.PointF.implicit operator Microsoft.Maui.Graphics.Point(Microsoft.Maui.Graphics.PointF p) -> Microsoft.Maui.Graphics.Point
static Microsoft.Maui.Graphics.PointF.implicit operator Microsoft.Maui.Graphics.PointF(System.Numerics.Vector2 v) -> Microsoft.Maui.Graphics.PointF
static Microsoft.Maui.Graphics.PointF.operator -(Microsoft.Maui.Graphics.PointF pt, Microsoft.Maui.Graphics.SizeF sz) -> Microsoft.Maui.Graphics.PointF
static Microsoft.Maui.Graphics.PointF.operator -(Microsoft.Maui.Graphics.PointF ptA, Microsoft.Maui.Graphics.PointF ptB) -> Microsoft.Maui.Graphics.SizeF
static Microsoft.Maui.Graphics.PointF.operator !=(Microsoft.Maui.Graphics.PointF ptA, Microsoft.Maui.Graphics.PointF ptB) -> bool
static Microsoft.Maui.Graphics.PointF.operator +(Microsoft.Maui.Graphics.PointF pt, Microsoft.Maui.Graphics.SizeF sz) -> Microsoft.Maui.Graphics.PointF
static Microsoft.Maui.Graphics.PointF.operator ==(Microsoft.Maui.Graphics.PointF ptA, Microsoft.Maui.Graphics.PointF ptB) -> bool
static Microsoft.Maui.Graphics.Rect.FromLTRB(double left, double top, double right, double bottom) -> Microsoft.Maui.Graphics.Rect
static Microsoft.Maui.Graphics.Rect.implicit operator Microsoft.Maui.Graphics.RectF(Microsoft.Maui.Graphics.Rect rect) -> Microsoft.Maui.Graphics.RectF
static Microsoft.Maui.Graphics.Rect.Intersect(Microsoft.Maui.Graphics.Rect r1, Microsoft.Maui.Graphics.Rect r2) -> Microsoft.Maui.Graphics.Rect
static Microsoft.Maui.Graphics.Rect.operator !=(Microsoft.Maui.Graphics.Rect r1, Microsoft.Maui.Graphics.Rect r2) -> bool
static Microsoft.Maui.Graphics.Rect.operator ==(Microsoft.Maui.Graphics.Rect r1, Microsoft.Maui.Graphics.Rect r2) -> bool
static Microsoft.Maui.Graphics.Rect.Union(Microsoft.Maui.Graphics.Rect r1, Microsoft.Maui.Graphics.Rect r2) -> Microsoft.Maui.Graphics.Rect
static Microsoft.Maui.Graphics.Rect.Zero -> Microsoft.Maui.Graphics.Rect
static Microsoft.Maui.Graphics.RectF.FromLTRB(float left, float top, float right, float bottom) -> Microsoft.Maui.Graphics.RectF
static Microsoft.Maui.Graphics.RectF.implicit operator Microsoft.Maui.Graphics.Rect(Microsoft.Maui.Graphics.RectF rect) -> Microsoft.Maui.Graphics.Rect
static Microsoft.Maui.Graphics.RectF.Intersect(Microsoft.Maui.Graphics.RectF r1, Microsoft.Maui.Graphics.RectF r2) -> Microsoft.Maui.Graphics.RectF
static Microsoft.Maui.Graphics.RectF.operator !=(Microsoft.Maui.Graphics.RectF r1, Microsoft.Maui.Graphics.RectF r2) -> bool
static Microsoft.Maui.Graphics.RectF.operator ==(Microsoft.Maui.Graphics.RectF r1, Microsoft.Maui.Graphics.RectF r2) -> bool
static Microsoft.Maui.Graphics.RectF.Union(Microsoft.Maui.Graphics.RectF r1, Microsoft.Maui.Graphics.RectF r2) -> Microsoft.Maui.Graphics.RectF
static Microsoft.Maui.Graphics.RectF.Zero -> Microsoft.Maui.Graphics.RectF
static Microsoft.Maui.Graphics.Size.explicit operator Microsoft.Maui.Graphics.Point(Microsoft.Maui.Graphics.Size size) -> Microsoft.Maui.Graphics.Point
static Microsoft.Maui.Graphics.Size.implicit operator Microsoft.Maui.Graphics.SizeF(Microsoft.Maui.Graphics.Size s) -> Microsoft.Maui.Graphics.SizeF
static Microsoft.Maui.Graphics.Size.operator -(Microsoft.Maui.Graphics.Size s1, Microsoft.Maui.Graphics.Size s2) -> Microsoft.Maui.Graphics.Size
static Microsoft.Maui.Graphics.Size.operator !=(Microsoft.Maui.Graphics.Size s1, Microsoft.Maui.Graphics.Size s2) -> bool
static Microsoft.Maui.Graphics.Size.operator *(Microsoft.Maui.Graphics.Size s1, double value) -> Microsoft.Maui.Graphics.Size
static Microsoft.Maui.Graphics.Size.operator /(Microsoft.Maui.Graphics.Size s1, double value) -> Microsoft.Maui.Graphics.Size
static Microsoft.Maui.Graphics.Size.operator +(Microsoft.Maui.Graphics.Size s1, Microsoft.Maui.Graphics.Size s2) -> Microsoft.Maui.Graphics.Size
static Microsoft.Maui.Graphics.Size.operator ==(Microsoft.Maui.Graphics.Size s1, Microsoft.Maui.Graphics.Size s2) -> bool
static Microsoft.Maui.Graphics.SizeF.explicit operator Microsoft.Maui.Graphics.PointF(Microsoft.Maui.Graphics.SizeF size) -> Microsoft.Maui.Graphics.PointF
static Microsoft.Maui.Graphics.SizeF.explicit operator Microsoft.Maui.Graphics.SizeF(System.Numerics.Vector2 size) -> Microsoft.Maui.Graphics.SizeF
static Microsoft.Maui.Graphics.SizeF.explicit operator System.Numerics.Vector2(Microsoft.Maui.Graphics.SizeF size) -> System.Numerics.Vector2
static Microsoft.Maui.Graphics.SizeF.implicit operator Microsoft.Maui.Graphics.Size(Microsoft.Maui.Graphics.SizeF s) -> Microsoft.Maui.Graphics.Size
static Microsoft.Maui.Graphics.SizeF.operator -(Microsoft.Maui.Graphics.SizeF s1, Microsoft.Maui.Graphics.SizeF s2) -> Microsoft.Maui.Graphics.SizeF
static Microsoft.Maui.Graphics.SizeF.operator !=(Microsoft.Maui.Graphics.SizeF s1, Microsoft.Maui.Graphics.SizeF s2) -> bool
static Microsoft.Maui.Graphics.SizeF.operator *(Microsoft.Maui.Graphics.SizeF s1, float value) -> Microsoft.Maui.Graphics.SizeF
static Microsoft.Maui.Graphics.SizeF.operator /(Microsoft.Maui.Graphics.SizeF s1, float value) -> Microsoft.Maui.Graphics.SizeF
static Microsoft.Maui.Graphics.SizeF.operator +(Microsoft.Maui.Graphics.SizeF s1, Microsoft.Maui.Graphics.SizeF s2) -> Microsoft.Maui.Graphics.SizeF
static Microsoft.Maui.Graphics.SizeF.operator ==(Microsoft.Maui.Graphics.SizeF s1, Microsoft.Maui.Graphics.SizeF s2) -> bool
static readonly Microsoft.Maui.Graphics.CanvasDefaults.DefaultShadowOffset -> Microsoft.Maui.Graphics.SizeF
static readonly Microsoft.Maui.Graphics.PointF.Zero -> Microsoft.Maui.Graphics.PointF
static readonly Microsoft.Maui.Graphics.Size.Zero -> Microsoft.Maui.Graphics.Size
static readonly Microsoft.Maui.Graphics.SizeF.Zero -> Microsoft.Maui.Graphics.SizeF
virtual Microsoft.Maui.Graphics.AbstractCanvas<TState>.DisplayScale.get -> float
virtual Microsoft.Maui.Graphics.AbstractCanvas<TState>.DisplayScale.set -> void
virtual Microsoft.Maui.Graphics.AbstractCanvas<TState>.Dispose() -> void
virtual Microsoft.Maui.Graphics.AbstractCanvas<TState>.ResetState() -> void
virtual Microsoft.Maui.Graphics.AbstractCanvas<TState>.RestoreState() -> bool
virtual Microsoft.Maui.Graphics.AbstractCanvas<TState>.SaveState() -> void
virtual Microsoft.Maui.Graphics.BitmapExportContext.Dispose() -> void
virtual Microsoft.Maui.Graphics.CanvasState.Dispose() -> void
virtual Microsoft.Maui.Graphics.CanvasState.TransformChanged() -> void
virtual Microsoft.Maui.Graphics.Paint.IsTransparent.get -> bool
