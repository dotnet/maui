<Type Name="BindableObject" FullName="Microsoft.Maui.Controls.BindableObject">
  <TypeSignature Language="C#" Value="public abstract class BindableObject : System.ComponentModel.INotifyPropertyChanged, Microsoft.Maui.Controls.Internals.IDynamicResourceHandler" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit BindableObject extends System.Object implements class System.ComponentModel.INotifyPropertyChanged, class Microsoft.Maui.Controls.Internals.IDynamicResourceHandler" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Maui.Controls.BindableObject" />
  <TypeSignature Language="F#" Value="type BindableObject = class&#xA;    interface INotifyPropertyChanged&#xA;    interface IDynamicResourceHandler" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Maui.Controls.Core</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
    <AssemblyVersion>1.1.0.0</AssemblyVersion>
    <AssemblyVersion>1.2.0.0</AssemblyVersion>
    <AssemblyVersion>1.3.0.0</AssemblyVersion>
    <AssemblyVersion>1.4.0.0</AssemblyVersion>
    <AssemblyVersion>1.5.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.ComponentModel.INotifyPropertyChanged</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Microsoft.Maui.Controls.Internals.IDynamicResourceHandler</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>Provides a mechanism by which application developers can propagate changes that are made to data in one object to another, by enabling validation, type coercion, and an event system. <see cref="T:Microsoft.Maui.Controls.BindableProperty" />.</summary>
    <remarks>
      <para>The <see cref="T:Microsoft.Maui.Controls.BindableObject" /> class provides a data storage mechanism that enables the application developer to synchronize data between objects in response to changes, for example, between the View and View Model in the MVVM design pattern. All of the visual elements in the <see cref="N:Microsoft.Maui.Controls" /> namespace inherit from <see cref="T:Microsoft.Maui.Controls.BindableObject" /> class, so they can all be used to bind the data behind their user interface elements to View Models that are supplied by the application developer.</para>
      <example>
        <para>To bind the data behind a property in a <see cref="T:Microsoft.Maui.Controls.BindableObject" />, typically a view, to a property in the View Model, application developers should do the following.</para>
        <para> First, the developer creates a pair of properties on the view, one of which is a <see cref="T:Microsoft.Maui.Controls.BindableProperty" />, and the other of which is a property of whatever type is required. In the code below, <c>MockBindableObject</c> stands in for what would typically be a user interface object in production code. Application developers should note the use of <see cref="M:Microsoft.Maui.Controls.BindableObject.SetValue(Microsoft.Maui.Controls.BindableProperty,System.Object)" /> and <see cref="M:Microsoft.Maui.Controls.BindableObject.GetValue(Microsoft.Maui.Controls.BindableProperty)" /> to get and set the value on the bound property; The property of the desired type provides the interface that the target of the bound property will implement.</para>
        <code lang="csharp lang-csharp"><![CDATA[
class MockBindableObject : BindableObject
{
    // App developers should use the method below in production code for 
    // better performance
    public static readonly BindableProperty BoundNameProperty =
         BindableProperty.Create ("Foo", typeof (string),
                                  typeof (MockBindableObject),
                                  default(string));
    
    // App developers should use the method below during development for
    // design-time error checking as the codebase evolves.
    // public static readonly BindableProperty FooProperty 
    //     = BindableProperty.Create<MockBindableObject, string> (
    //         o => o.Foo, default (string)
    //     );
    
    public string BoundName
    {
        get { return (string) GetValue (BoundNameProperty); }
        set { SetValue (BoundNameProperty, value); }
    }
}
    ]]></code>
        <para>Second, the developer creates the implementation for the bound property in a class that implements the <see cref="T:System.ComponentModel.INotifyPropertyChanged" /> interface. In the MVVM design pattern, this is typically done by the View Model. Application developers should implement the <see cref="T:System.ComponentModel.INotifyPropertyChanged" /> interface on classes that they want to use as View Models. In the example below, app developers should take note of the idiomatic way that the <c>Name</c> property is implemented to, first, ensure that the property actually changed and return if it did not, and only then assign the value and call the <see cref="M:Microsoft.Maui.Controls.BindableObject.OnPropertyChanged(System.String)" /> method. Additionally, the <c>Name</c> property in the example below merely wraps the <c>name</c> field. In practice, the application developer may choose a different model in which to store application data.</para>
        <code lang="csharp lang-csharp"><![CDATA[
class MockViewModel : INotifyPropertyChanged
{
    string name;
    
    public string Name
    {
        get { return name; }
        set
        {
            // OnPropertyChanged should not be called if the property value
            // does not change.
            if (name == value)
                return;
            name = value;
            OnPropertyChanged ();
        }
    }
    
    public event PropertyChangedEventHandler PropertyChanged;
    
    void OnPropertyChanged (string propertyName = null)
    {
        PropertyChangedEventHandler handler = PropertyChanged;
        if (handler != null)
            handler (this, new PropertyChangedEventArgs (propertyName));
    }
}]]></code>
        <para>Third, and finally, the application developer binds an instance of a BindableObject to an instance that implements INotifyPropertyChanged. In the vocabulary of the MVVM design pattern, this is "binding an instance of the View to an instance of a View Model." Once this step is complete, changes in the data are propagated between the View and View Model in a way that is determined by the value of the <see cref="T:Microsoft.Maui.Controls.BindingMode" /> enumeration, if any, that was passed during the binding step.</para>
        <para>The code below, when included in a project that reference the classes above, creates an instance of both <c>MockBindable</c> and <c>MockViewModel</c>, performs some intitialization, sets the binding, and then demonstrates a one-way binding. The code below runs without throwing an exception.</para>
        <code lang="csharp lang-csharp"><![CDATA[
public static void OneWayDemo ()
{
    var view = new MockBindableObject ();
    var viewModel = new MockViewModel ();
    
    // Pre-load the ViewModel, for demonstration purposes
    viewModel.Name = "Testing";
    
    // Create a one-way (default) binding
    view.SetBinding (MockBindableObject.BoundNameProperty, new Binding ("Name"));
    
    // App developers should only set the binding context after all
    // calls to SetBinding() have been made, for performance reasons.
    view.BindingContext = viewModel;
    
    // In a one way binding, the ViewModel value will be used to update
    // the values in the View during initialization
    if (view.BoundName != "Testing")
        throw new Exception ();
    
    view.BoundName = "gnitseT";
    
    // in a one way binding, changes to the View will NOT update the ViewModel
    if (viewModel.Name == "gnitseT")
        throw new Exception ();
}]]></code>
      </example>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected BindableObject ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Maui.Controls.BindableObject.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
        <AssemblyVersion>1.4.0.0</AssemblyVersion>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyName>Microsoft.Maui.Controls.Core</AssemblyName>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initializes a new instance of the BindableObject class.</summary>
        <remarks>The <see cref="T:Microsoft.Maui.Controls.BindableObject" /> class is abstract, and this constructor is protected. It is invoked by child constructors.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ApplyBindings">
      <MemberSignature Language="C#" Value="protected void ApplyBindings ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void ApplyBindings() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Maui.Controls.BindableObject.ApplyBindings" />
      <MemberSignature Language="F#" Value="member this.ApplyBindings : unit -&gt; unit" Usage="bindableObject.ApplyBindings " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyName>Microsoft.Maui.Controls.Core</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Apply the bindings to <see cref="P:Microsoft.Maui.Controls.BindableObject.BindingContext" />.</summary>
      </Docs>
    </Member>
    <Member MemberName="BindingContext">
      <MemberSignature Language="C#" Value="public object BindingContext { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object BindingContext" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Maui.Controls.BindableObject.BindingContext" />
      <MemberSignature Language="F#" Value="member this.BindingContext : obj with get, set" Usage="Microsoft.Maui.Controls.BindableObject.BindingContext" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
        <AssemblyVersion>1.4.0.0</AssemblyVersion>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyName>Microsoft.Maui.Controls.Core</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets object that contains the properties that will be targeted by the bound properties that belong to this <see cref="T:Microsoft.Maui.Controls.BindableObject" />.</summary>
        <value>An <see cref="T:System.Object" /> that contains the properties that will be targeted by the bound properties that belong to this <see cref="T:Microsoft.Maui.Controls.BindableObject" />. This is a bindable property.</value>
        <remarks>
          Typically, the runtime performance is better if  <see cref="P:Microsoft.Maui.Controls.BindableObject.BindingContext" /> is set after all calls to <see cref="M:Microsoft.Maui.Controls.BindableObject.SetBinding(Microsoft.Maui.Controls.BindableProperty,Microsoft.Maui.Controls.BindingBase)" /> have been made.
          <para>The following example shows how to apply a BindingContext and a Binding to a Label (inherits from BindableObject):</para>
          <example>
            <code lang="csharp lang-csharp"><![CDATA[
var label = new Label ();
label.SetBinding (Label.TextProperty, "Name");
label.BindingContext = new {
    Name = "John Doe",
    Company = "Xamarin"
};

Debug.WriteLine (label.Text); // prints "John Doe"
        ]]></code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BindingContextChanged">
      <MemberSignature Language="C#" Value="public event EventHandler BindingContextChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler BindingContextChanged" />
      <MemberSignature Language="DocId" Value="E:Microsoft.Maui.Controls.BindableObject.BindingContextChanged" />
      <MemberSignature Language="F#" Value="member this.BindingContextChanged : EventHandler " Usage="member this.BindingContextChanged : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
        <AssemblyVersion>1.4.0.0</AssemblyVersion>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyName>Microsoft.Maui.Controls.Core</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Raised whenever the <see cref="P:Microsoft.Maui.Controls.BindableObject.BindingContext" /> property changes.</summary>
      </Docs>
    </Member>
    <Member MemberName="BindingContextProperty">
      <MemberSignature Language="C#" Value="public static readonly Microsoft.Maui.Controls.BindableProperty BindingContextProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class Microsoft.Maui.Controls.BindableProperty BindingContextProperty" />
      <MemberSignature Language="DocId" Value="F:Microsoft.Maui.Controls.BindableObject.BindingContextProperty" />
      <MemberSignature Language="F#" Value=" staticval mutable BindingContextProperty : Microsoft.Maui.Controls.BindableProperty" Usage="Microsoft.Maui.Controls.BindableObject.BindingContextProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
        <AssemblyVersion>1.4.0.0</AssemblyVersion>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyName>Microsoft.Maui.Controls.Core</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Maui.Controls.BindableProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Implements the bound property whose interface is provided by the <see cref="P:Microsoft.Maui.Controls.BindableObject.BindingContext" /> property.</summary>
        <remarks>
          Typically, the runtime performance is better if  <see cref="P:Microsoft.Maui.Controls.BindableObject.BindingContext" /> is set after all calls to <see cref="M:Microsoft.Maui.Controls.BindableObject.SetBinding(Microsoft.Maui.Controls.BindableProperty,Microsoft.Maui.Controls.BindingBase)" /> have been made.
          <para>The following example shows how to set a binding to the BindingContext:</para>
          <example>
            <code lang="csharp lang-csharp"><![CDATA[
class PersonView : ContentView 
{
  public PersonView ()
  {
    var label = new Label ();
    label.SetBinding (Label.TextProperty, "Name");
    Content = label;
  }
}
    
var stack = new StackLayout {
  Orientation = StackOrientation.Vertical,  
};
    
var jane = new PersonView ();
jane.SetBinding (BindableObject.BindingContext, "Jane");
stack.Children.Add (jane);
    
var john = new PersonView ();
john.SetBinding (BindableObject.BindingContext, "John");
stack.Children.Add (john);
    
stack.BindingContext = new {Jane = new {Name = "Jane Doe"}, John = new {Name = "John Doe"}};
        ]]></code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ClearValue">
      <MemberSignature Language="C#" Value="public void ClearValue (Microsoft.Maui.Controls.BindableProperty property);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ClearValue(class Microsoft.Maui.Controls.BindableProperty property) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Maui.Controls.BindableObject.ClearValue(Microsoft.Maui.Controls.BindableProperty)" />
      <MemberSignature Language="F#" Value="member this.ClearValue : Microsoft.Maui.Controls.BindableProperty -&gt; unit" Usage="bindableObject.ClearValue property" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
        <AssemblyVersion>1.4.0.0</AssemblyVersion>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyName>Microsoft.Maui.Controls.Core</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="property" Type="Microsoft.Maui.Controls.BindableProperty" />
      </Parameters>
      <Docs>
        <param name="property">The BindableProperty to clear.</param>
        <summary>Clears any value set by <see cref="M:Microsoft.Maui.Controls.BindableObject.SetValue*" /> for <paramref name="property" />.</summary>
        <remarks>
          <para>Calling this method on a readonly property will result in an InvalidOperationException.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ClearValue">
      <MemberSignature Language="C#" Value="public void ClearValue (Microsoft.Maui.Controls.BindablePropertyKey propertyKey);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ClearValue(class Microsoft.Maui.Controls.BindablePropertyKey propertyKey) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Maui.Controls.BindableObject.ClearValue(Microsoft.Maui.Controls.BindablePropertyKey)" />
      <MemberSignature Language="F#" Value="member this.ClearValue : Microsoft.Maui.Controls.BindablePropertyKey -&gt; unit" Usage="bindableObject.ClearValue propertyKey" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
        <AssemblyVersion>1.4.0.0</AssemblyVersion>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyName>Microsoft.Maui.Controls.Core</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyKey" Type="Microsoft.Maui.Controls.BindablePropertyKey" />
      </Parameters>
      <Docs>
        <param name="propertyKey">The BindablePropertyKey that identifies the <see cref="T:Microsoft.Maui.Controls.BindableProperty" /> to clear.</param>
        <summary>Clears any value set by <see cref="M:Microsoft.Maui.Controls.BindableObject.SetValue*" /> for the property that is identified by <paramref name="propertyKey" />.</summary>
        <remarks>
          <para>Calling this method on a readonly property will result in an InvalidOperationException.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CoerceValue">
      <MemberSignature Language="C#" Value="public void CoerceValue (Microsoft.Maui.Controls.BindableProperty property);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CoerceValue(class Microsoft.Maui.Controls.BindableProperty property) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Maui.Controls.BindableObject.CoerceValue(Microsoft.Maui.Controls.BindableProperty)" />
      <MemberSignature Language="F#" Value="member this.CoerceValue : Microsoft.Maui.Controls.BindableProperty -&gt; unit" Usage="bindableObject.CoerceValue property" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Maui.Controls.Core</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="property" Type="Microsoft.Maui.Controls.BindableProperty" />
      </Parameters>
      <Docs>
        <param name="property">To be added.</param>
      </Docs>
    </Member>
    <Member MemberName="CoerceValue">
      <MemberSignature Language="C#" Value="public void CoerceValue (Microsoft.Maui.Controls.BindablePropertyKey propertyKey);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CoerceValue(class Microsoft.Maui.Controls.BindablePropertyKey propertyKey) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Maui.Controls.BindableObject.CoerceValue(Microsoft.Maui.Controls.BindablePropertyKey)" />
      <MemberSignature Language="F#" Value="member this.CoerceValue : Microsoft.Maui.Controls.BindablePropertyKey -&gt; unit" Usage="bindableObject.CoerceValue propertyKey" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Maui.Controls.Core</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyKey" Type="Microsoft.Maui.Controls.BindablePropertyKey" />
      </Parameters>
      <Docs>
        <param name="propertyKey">To be added.</param>
      </Docs>
    </Member>
    <Member MemberName="Dispatcher">
      <MemberSignature Language="C#" Value="public virtual Microsoft.Maui.Controls.IDispatcher Dispatcher { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Maui.Controls.IDispatcher Dispatcher" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Maui.Controls.BindableObject.Dispatcher" />
      <MemberSignature Language="F#" Value="member this.Dispatcher : Microsoft.Maui.Controls.IDispatcher" Usage="Microsoft.Maui.Controls.BindableObject.Dispatcher" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Maui.Controls.Core</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Maui.Controls.IDispatcher</ReturnType>
      </ReturnValue>
      <Docs>
      </Docs>
    </Member>
    <Member MemberName="GetValue">
      <MemberSignature Language="C#" Value="public object GetValue (Microsoft.Maui.Controls.BindableProperty property);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object GetValue(class Microsoft.Maui.Controls.BindableProperty property) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Maui.Controls.BindableObject.GetValue(Microsoft.Maui.Controls.BindableProperty)" />
      <MemberSignature Language="F#" Value="member this.GetValue : Microsoft.Maui.Controls.BindableProperty -&gt; obj" Usage="bindableObject.GetValue property" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
        <AssemblyVersion>1.4.0.0</AssemblyVersion>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyName>Microsoft.Maui.Controls.Core</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="property" Type="Microsoft.Maui.Controls.BindableProperty" />
      </Parameters>
      <Docs>
        <param name="property">The BindableProperty for which to get the value.</param>
        <summary>Returns the value that is contained in the BindableProperty.</summary>
        <returns>The value that is contained in the <see cref="T:Microsoft.Maui.Controls.BindableProperty" />.</returns>
        <remarks>
          <para>
            <see cref="M:Microsoft.Maui.Controls.BindableObject.GetValue(Microsoft.Maui.Controls.BindableProperty)" /> and <see cref="M:Microsoft.Maui.Controls.BindableObject.SetValue*" /> are used to access the values of properties that are implemented by a <see cref="T:Microsoft.Maui.Controls.BindableProperty" />. That is, application developers typically provide an interface for a bound property by defining <see langword="public" /> property whose <see langword="get" /> accessor casts  the result of <see cref="M:Microsoft.Maui.Controls.BindableObject.GetValue(Microsoft.Maui.Controls.BindableProperty)" /> to the appropriate type and returns it, and whose <see langword="set" /> accessor uses <see cref="M:Microsoft.Maui.Controls.BindableObject.SetValue*" /> to set the value on the correct property. Application developers should perform no other steps in the public property that defines the interface of the bound property.</para>
          <example>
            <para>The following example shows how to create a bindable property interface for an implementation that will be provided in the target property when the binding is made at run time.</para>
            <code lang="csharp lang-csharp"><![CDATA[
class MyBindable : BindableObject
{
  public static readonly BindableProperty MyProperty = 
    BindableProperty.Create<MyBindable, string> (w => w.My, default(string));
    
  public string My {
    get { return (string)GetValue (MyProperty); }
    set { SetValue (MyProperty, value); } 
  }
}
        ]]></code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetValues">
      <MemberSignature Language="C#" Value="public object[] GetValues (Microsoft.Maui.Controls.BindableProperty property0, Microsoft.Maui.Controls.BindableProperty property1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object[] GetValues(class Microsoft.Maui.Controls.BindableProperty property0, class Microsoft.Maui.Controls.BindableProperty property1) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Maui.Controls.BindableObject.GetValues(Microsoft.Maui.Controls.BindableProperty,Microsoft.Maui.Controls.BindableProperty)" />
      <MemberSignature Language="F#" Value="member this.GetValues : Microsoft.Maui.Controls.BindableProperty * Microsoft.Maui.Controls.BindableProperty -&gt; obj[]" Usage="bindableObject.GetValues (property0, property1)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyName>Microsoft.Maui.Controls.Core</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("GetValues is obsolete as of 4.0.0. Please use GetValue instead.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="property0" Type="Microsoft.Maui.Controls.BindableProperty" />
        <Parameter Name="property1" Type="Microsoft.Maui.Controls.BindableProperty" />
      </Parameters>
      <Docs>
        <param name="property0">For internal use by the Microsoft.Maui.Controls platform.</param>
        <param name="property1">For internal use by the Microsoft.Maui.Controls platform.</param>
        <summary>For internal use by the Microsoft.Maui.Controls platform.</summary>
        <returns>For internal use by the Microsoft.Maui.Controls platform.</returns>
      </Docs>
    </Member>
    <Member MemberName="GetValues">
      <MemberSignature Language="C#" Value="public object[] GetValues (Microsoft.Maui.Controls.BindableProperty property0, Microsoft.Maui.Controls.BindableProperty property1, Microsoft.Maui.Controls.BindableProperty property2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object[] GetValues(class Microsoft.Maui.Controls.BindableProperty property0, class Microsoft.Maui.Controls.BindableProperty property1, class Microsoft.Maui.Controls.BindableProperty property2) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Maui.Controls.BindableObject.GetValues(Microsoft.Maui.Controls.BindableProperty,Microsoft.Maui.Controls.BindableProperty,Microsoft.Maui.Controls.BindableProperty)" />
      <MemberSignature Language="F#" Value="member this.GetValues : Microsoft.Maui.Controls.BindableProperty * Microsoft.Maui.Controls.BindableProperty * Microsoft.Maui.Controls.BindableProperty -&gt; obj[]" Usage="bindableObject.GetValues (property0, property1, property2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyName>Microsoft.Maui.Controls.Core</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("GetValues is obsolete as of 4.0.0. Please use GetValue instead.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="property0" Type="Microsoft.Maui.Controls.BindableProperty" />
        <Parameter Name="property1" Type="Microsoft.Maui.Controls.BindableProperty" />
        <Parameter Name="property2" Type="Microsoft.Maui.Controls.BindableProperty" />
      </Parameters>
      <Docs>
        <param name="property0">For internal use by the Microsoft.Maui.Controls platform.</param>
        <param name="property1">For internal use by the Microsoft.Maui.Controls platform.</param>
        <param name="property2">For internal use by the Microsoft.Maui.Controls platform.</param>
        <summary>For internal use by the Microsoft.Maui.Controls platform.</summary>
        <returns>For internal use by the Microsoft.Maui.Controls platform.</returns>
      </Docs>
    </Member>
    <Member MemberName="IsSet">
      <MemberSignature Language="C#" Value="public bool IsSet (Microsoft.Maui.Controls.BindableProperty targetProperty);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsSet(class Microsoft.Maui.Controls.BindableProperty targetProperty) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Maui.Controls.BindableObject.IsSet(Microsoft.Maui.Controls.BindableProperty)" />
      <MemberSignature Language="F#" Value="member this.IsSet : Microsoft.Maui.Controls.BindableProperty -&gt; bool" Usage="bindableObject.IsSet targetProperty" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Maui.Controls.Core</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="targetProperty" Type="Microsoft.Maui.Controls.BindableProperty" />
      </Parameters>
      <Docs>
        <param name="targetProperty">The property to check.</param>
        <summary>Returns <see langword="true" /> if the target property exists and has been set.</summary>
        <returns>
          <see langword="true" /> if the target property exists and has been set. If the property has not been set, returns <see langword="false" />. If the <paramref name="targetProperty" /> is null, an <c>ArgumentNullException</c> is thrown.</returns>
      </Docs>
    </Member>
    <Member MemberName="OnBindingContextChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnBindingContextChanged ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnBindingContextChanged() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Maui.Controls.BindableObject.OnBindingContextChanged" />
      <MemberSignature Language="F#" Value="abstract member OnBindingContextChanged : unit -&gt; unit&#xA;override this.OnBindingContextChanged : unit -&gt; unit" Usage="bindableObject.OnBindingContextChanged " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
        <AssemblyVersion>1.4.0.0</AssemblyVersion>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyName>Microsoft.Maui.Controls.Core</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Override this method to execute an action when the BindingContext changes.</summary>
      </Docs>
    </Member>
    <Member MemberName="OnPropertyChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnPropertyChanged (string propertyName = default);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPropertyChanged(string propertyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Maui.Controls.BindableObject.OnPropertyChanged(System.String)" />
      <MemberSignature Language="F#" Value="abstract member OnPropertyChanged : string -&gt; unit&#xA;override this.OnPropertyChanged : string -&gt; unit" Usage="bindableObject.OnPropertyChanged propertyName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
        <AssemblyVersion>1.4.0.0</AssemblyVersion>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyName>Microsoft.Maui.Controls.Core</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String">
          <Attributes>
            <Attribute>
              <AttributeName>System.Runtime.CompilerServices.CallerMemberName</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="propertyName">The name of the property that changed.</param>
        <summary>Call this method from a child class to notify that a change happened on a property.</summary>
        <remarks>
          <para>A <see cref="T:Microsoft.Maui.Controls.BindableProperty" /> triggers this by itself. An inheritor only needs to call this for properties without <see cref="T:Microsoft.Maui.Controls.BindableProperty" /> as the backend store.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnPropertyChanging">
      <MemberSignature Language="C#" Value="protected virtual void OnPropertyChanging (string propertyName = default);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPropertyChanging(string propertyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Maui.Controls.BindableObject.OnPropertyChanging(System.String)" />
      <MemberSignature Language="F#" Value="abstract member OnPropertyChanging : string -&gt; unit&#xA;override this.OnPropertyChanging : string -&gt; unit" Usage="bindableObject.OnPropertyChanging propertyName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
        <AssemblyVersion>1.4.0.0</AssemblyVersion>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyName>Microsoft.Maui.Controls.Core</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String">
          <Attributes>
            <Attribute>
              <AttributeName>System.Runtime.CompilerServices.CallerMemberName</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="propertyName">The name of the property that is changing.</param>
        <summary>Call this method from a child class to notify that a change is going to happen on a property.</summary>
        <remarks>A <see cref="T:Microsoft.Maui.Controls.BindableProperty" /> triggers this by itself. An inheritor only needs to call this for properties without <see cref="T:Microsoft.Maui.Controls.BindableProperty" /> as the backend store.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PropertyChanged">
      <MemberSignature Language="C#" Value="public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.ComponentModel.PropertyChangedEventHandler PropertyChanged" />
      <MemberSignature Language="DocId" Value="E:Microsoft.Maui.Controls.BindableObject.PropertyChanged" />
      <MemberSignature Language="F#" Value="member this.PropertyChanged : System.ComponentModel.PropertyChangedEventHandler " Usage="member this.PropertyChanged : System.ComponentModel.PropertyChangedEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
        <AssemblyVersion>1.4.0.0</AssemblyVersion>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyName>Microsoft.Maui.Controls.Core</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.PropertyChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Raised when a property has changed.</summary>
      </Docs>
    </Member>
    <Member MemberName="PropertyChanging">
      <MemberSignature Language="C#" Value="public event Microsoft.Maui.Controls.PropertyChangingEventHandler PropertyChanging;" />
      <MemberSignature Language="ILAsm" Value=".event class Microsoft.Maui.Controls.PropertyChangingEventHandler PropertyChanging" />
      <MemberSignature Language="DocId" Value="E:Microsoft.Maui.Controls.BindableObject.PropertyChanging" />
      <MemberSignature Language="F#" Value="member this.PropertyChanging : Microsoft.Maui.Controls.PropertyChangingEventHandler " Usage="member this.PropertyChanging : Microsoft.Maui.Controls.PropertyChangingEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
        <AssemblyVersion>1.4.0.0</AssemblyVersion>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyName>Microsoft.Maui.Controls.Core</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Maui.Controls.PropertyChangingEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Raised when a property is about to change.</summary>
      </Docs>
    </Member>
    <Member MemberName="RemoveBinding">
      <MemberSignature Language="C#" Value="public void RemoveBinding (Microsoft.Maui.Controls.BindableProperty property);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RemoveBinding(class Microsoft.Maui.Controls.BindableProperty property) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Maui.Controls.BindableObject.RemoveBinding(Microsoft.Maui.Controls.BindableProperty)" />
      <MemberSignature Language="F#" Value="member this.RemoveBinding : Microsoft.Maui.Controls.BindableProperty -&gt; unit" Usage="bindableObject.RemoveBinding property" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
        <AssemblyVersion>1.4.0.0</AssemblyVersion>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyName>Microsoft.Maui.Controls.Core</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="property" Type="Microsoft.Maui.Controls.BindableProperty" />
      </Parameters>
      <Docs>
        <param name="property">The BindableProperty from which to remove bindings.</param>
        <summary>Removes a previously set binding.</summary>
        <remarks>
          <para>This method succeeds even if <paramref name="property" /> is not bound.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetBinding">
      <MemberSignature Language="C#" Value="public void SetBinding (Microsoft.Maui.Controls.BindableProperty targetProperty, Microsoft.Maui.Controls.BindingBase binding);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetBinding(class Microsoft.Maui.Controls.BindableProperty targetProperty, class Microsoft.Maui.Controls.BindingBase binding) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Maui.Controls.BindableObject.SetBinding(Microsoft.Maui.Controls.BindableProperty,Microsoft.Maui.Controls.BindingBase)" />
      <MemberSignature Language="F#" Value="member this.SetBinding : Microsoft.Maui.Controls.BindableProperty * Microsoft.Maui.Controls.BindingBase -&gt; unit" Usage="bindableObject.SetBinding (targetProperty, binding)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
        <AssemblyVersion>1.4.0.0</AssemblyVersion>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyName>Microsoft.Maui.Controls.Core</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="targetProperty" Type="Microsoft.Maui.Controls.BindableProperty" />
        <Parameter Name="binding" Type="Microsoft.Maui.Controls.BindingBase" />
      </Parameters>
      <Docs>
        <param name="targetProperty">The BindableProperty on which to set a binding.</param>
        <param name="binding">The binding to set.</param>
        <summary>Assigns a binding to a property.</summary>
        <remarks>
          <para>The following example shows how to set a binding to a property:</para>
          <example>
            <code lang="csharp lang-csharp"><![CDATA[
var label = new Label ();
label.SetBinding (Label.TextProperty, new Binding ("Name"));
label.BindingContext = new {
    Name = "John Doe",
    Company = "Xamarin"
};

Debug.WriteLine (label.Text); // prints "John Doe"
        ]]></code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetInheritedBindingContext">
      <MemberSignature Language="C#" Value="public static void SetInheritedBindingContext (Microsoft.Maui.Controls.BindableObject bindable, object value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetInheritedBindingContext(class Microsoft.Maui.Controls.BindableObject bindable, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Maui.Controls.BindableObject.SetInheritedBindingContext(Microsoft.Maui.Controls.BindableObject,System.Object)" />
      <MemberSignature Language="F#" Value="static member SetInheritedBindingContext : Microsoft.Maui.Controls.BindableObject * obj -&gt; unit" Usage="Microsoft.Maui.Controls.BindableObject.SetInheritedBindingContext (bindable, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
        <AssemblyVersion>1.4.0.0</AssemblyVersion>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyName>Microsoft.Maui.Controls.Core</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bindable" Type="Microsoft.Maui.Controls.BindableObject" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="bindable">The object on which to set the inherited binding context.</param>
        <param name="value">The inherited context to set.</param>
        <summary>Sets the inherited context to a nested element.</summary>
      </Docs>
    </Member>
    <Member MemberName="SetValue">
      <MemberSignature Language="C#" Value="public void SetValue (Microsoft.Maui.Controls.BindableProperty property, object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetValue(class Microsoft.Maui.Controls.BindableProperty property, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Maui.Controls.BindableObject.SetValue(Microsoft.Maui.Controls.BindableProperty,System.Object)" />
      <MemberSignature Language="F#" Value="member this.SetValue : Microsoft.Maui.Controls.BindableProperty * obj -&gt; unit" Usage="bindableObject.SetValue (property, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
        <AssemblyVersion>1.4.0.0</AssemblyVersion>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyName>Microsoft.Maui.Controls.Core</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="property" Type="Microsoft.Maui.Controls.BindableProperty" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="property">The BindableProperty on which to assign a value.</param>
        <param name="value">The value to set.</param>
        <summary>Sets the value of the specified property.</summary>
        <remarks>
          <para>
            <see cref="M:Microsoft.Maui.Controls.BindableObject.GetValue(Microsoft.Maui.Controls.BindableProperty)" /> and <see cref="M:Microsoft.Maui.Controls.BindableObject.SetValue*" /> are used to access the values of properties that are implemented by a <see cref="T:Microsoft.Maui.Controls.BindableProperty" />. That is, application developers typically provide an interface for a bound property by defining <see langword="public" /> property whose <see langword="get" /> accessor casts  the result of <see cref="M:Microsoft.Maui.Controls.BindableObject.GetValue(Microsoft.Maui.Controls.BindableProperty)" /> to the appropriate type and returns it, and whose <see langword="set" /> accessor uses <see cref="M:Microsoft.Maui.Controls.BindableObject.SetValue*" /> to set the value on the correct property. Application developers should perform no other steps in the public property that defines the interface of the bound property.</para>
          <example>
            <para>The following example shows how to create a bindable property interface for an implementation that will be provided in the target property when the binding is made at run time.</para>
            <code lang="csharp lang-csharp"><![CDATA[
class MyBindable : BindableObject
{
    public static readonly BindableProperty MyProperty = 
      BindableProperty.Create<MyBindable, string> (w => w.My, default(string));
    
    public string My {
      get { return (string)GetValue (MyProperty); }
      set { SetValue (MyProperty, value); } 
    }
}
          ]]></code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetValue">
      <MemberSignature Language="C#" Value="public void SetValue (Microsoft.Maui.Controls.BindablePropertyKey propertyKey, object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetValue(class Microsoft.Maui.Controls.BindablePropertyKey propertyKey, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Maui.Controls.BindableObject.SetValue(Microsoft.Maui.Controls.BindablePropertyKey,System.Object)" />
      <MemberSignature Language="F#" Value="member this.SetValue : Microsoft.Maui.Controls.BindablePropertyKey * obj -&gt; unit" Usage="bindableObject.SetValue (propertyKey, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
        <AssemblyVersion>1.4.0.0</AssemblyVersion>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyName>Microsoft.Maui.Controls.Core</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyKey" Type="Microsoft.Maui.Controls.BindablePropertyKey" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="propertyKey">The BindablePropertyKey on which to assign a value.</param>
        <param name="value">The value to set.</param>
        <summary>Sets the value of the propertyKey.</summary>
        <remarks>
          <para>This method and <see cref="T:Microsoft.Maui.Controls.BindablePropertyKey" /> are useful to implement BindableProperties with limited write access. The write access is limited to the scope of the BindablePropertyKey.</para>
          <para>The following example shows how to declare a BindableProperty with "internal" write access.</para>
          <example>
            <code lang="csharp lang-csharp"><![CDATA[
class MyBindable : BindableObject
{
  internal static readonly BindablePropertyKey MyPropertyKey = 
    BindableProperty.CreateReadOnly<MyBindable, string> (w => w.My, default(string));
  public static readonly BindableProperty MyProperty = MyPropertyKey.BindableProperty;
    
  public string My {
    get { return (string)GetValue (MyProperty); }
    internal set { SetValue (MyPropertyKey, value); } 
  }
}
        ]]></code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetValueCore">
      <MemberSignature Language="C#" Value="public void SetValueCore (Microsoft.Maui.Controls.BindableProperty property, object value, Microsoft.Maui.Controls.Internals.SetValueFlags attributes = Microsoft.Maui.Controls.Internals.SetValueFlags.None);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetValueCore(class Microsoft.Maui.Controls.BindableProperty property, object value, valuetype Microsoft.Maui.Controls.Internals.SetValueFlags attributes) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Maui.Controls.BindableObject.SetValueCore(Microsoft.Maui.Controls.BindableProperty,System.Object,Microsoft.Maui.Controls.Internals.SetValueFlags)" />
      <MemberSignature Language="F#" Value="member this.SetValueCore : Microsoft.Maui.Controls.BindableProperty * obj * Microsoft.Maui.Controls.Internals.SetValueFlags -&gt; unit" Usage="bindableObject.SetValueCore (property, value, attributes)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyName>Microsoft.Maui.Controls.Core</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="property" Type="Microsoft.Maui.Controls.BindableProperty" />
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="attributes" Type="Microsoft.Maui.Controls.Internals.SetValueFlags" />
      </Parameters>
      <Docs>
        <param name="property">For internal use by the Microsoft.Maui.Controls platform.</param>
        <param name="value">For internal use by the Microsoft.Maui.Controls platform.</param>
        <param name="attributes">For internal use by the Microsoft.Maui.Controls platform.</param>
        <summary>For internal use by the Microsoft.Maui.Controls platform.</summary>
      </Docs>
    </Member>
    <Member MemberName="UnapplyBindings">
      <MemberSignature Language="C#" Value="protected void UnapplyBindings ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void UnapplyBindings() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Maui.Controls.BindableObject.UnapplyBindings" />
      <MemberSignature Language="F#" Value="member this.UnapplyBindings : unit -&gt; unit" Usage="bindableObject.UnapplyBindings " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
        <AssemblyVersion>1.4.0.0</AssemblyVersion>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyName>Microsoft.Maui.Controls.Core</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Unapplies all previously set bindings.</summary>
        <remarks>
          <para>This method removes all current bindings from the current context.</para>
          Changing a bound property requires that the binding count for a bound property must be 0. The <see cref="M:Microsoft.Maui.Controls.BindableObject.UnapplyBindings" /> method merely decrements the count, and does not remove all bindings everywhere.
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Microsoft.Maui.Controls.Internals.IDynamicResourceHandler.SetDynamicResource">
      <MemberSignature Language="C#" Value="void IDynamicResourceHandler.SetDynamicResource (Microsoft.Maui.Controls.BindableProperty property, string key);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void Microsoft.Maui.Controls.Internals.IDynamicResourceHandler.SetDynamicResource(class Microsoft.Maui.Controls.BindableProperty property, string key) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Maui.Controls.BindableObject.Xamarin#Forms#Internals#IDynamicResourceHandler#SetDynamicResource(Microsoft.Maui.Controls.BindableProperty,System.String)" />
      <MemberSignature Language="F#" Value="abstract member Microsoft.Maui.Controls.Internals.IDynamicResourceHandler.SetDynamicResource : Microsoft.Maui.Controls.BindableProperty * string -&gt; unit&#xA;override this.Microsoft.Maui.Controls.Internals.IDynamicResourceHandler.SetDynamicResource : Microsoft.Maui.Controls.BindableProperty * string -&gt; unit" Usage="bindableObject.Microsoft.Maui.Controls.Internals.IDynamicResourceHandler.SetDynamicResource (property, key)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.Maui.Controls.Internals.IDynamicResourceHandler.SetDynamicResource(Microsoft.Maui.Controls.BindableProperty,System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyName>Microsoft.Maui.Controls.Core</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="property" Type="Microsoft.Maui.Controls.BindableProperty" />
        <Parameter Name="key" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="property">For internal use by the Microsoft.Maui.Controls platform.</param>
        <param name="key">For internal use by the Microsoft.Maui.Controls platform.</param>
        <summary>For internal use by the Microsoft.Maui.Controls platform.</summary>
      </Docs>
    </Member>
  </Members>
</Type>
