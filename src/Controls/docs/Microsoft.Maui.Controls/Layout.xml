<Type Name="Layout" FullName="Microsoft.Maui.Controls.Layout">
  <TypeSignature Language="C#" Value="public abstract class Layout : Microsoft.Maui.Controls.View, Microsoft.Maui.Controls.ILayout, Microsoft.Maui.Controls.ILayoutController" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit Layout extends Microsoft.Maui.Controls.View implements class Microsoft.Maui.Controls.ILayout, class Microsoft.Maui.Controls.ILayoutController" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Maui.Controls.Layout" />
  <TypeSignature Language="F#" Value="type Layout = class&#xA;    inherit View&#xA;    interface ILayout&#xA;    interface ILayoutController" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Maui.Controls.Core</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
    <AssemblyVersion>1.1.0.0</AssemblyVersion>
    <AssemblyVersion>1.2.0.0</AssemblyVersion>
    <AssemblyVersion>1.3.0.0</AssemblyVersion>
    <AssemblyVersion>1.3.5.0</AssemblyVersion>
    <AssemblyVersion>1.4.0.0</AssemblyVersion>
    <AssemblyVersion>1.5.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Microsoft.Maui.Controls.View</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>Microsoft.Maui.Controls.ILayout</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Microsoft.Maui.Controls.ILayoutController</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
      <para>Provides the base class for all Layout elements. Use Layout elements to position and size child elements in Microsoft.Maui.Controls applications.</para>
    </summary>
    <remarks>
      <para>Subtypes of <see cref="T:Microsoft.Maui.Controls.Layout" /> include <see cref="T:Microsoft.Maui.Controls.ContentView" />, <see cref="T:Microsoft.Maui.Controls.ScrollView" />, and <see cref="T:Microsoft.Maui.Controls.Layout" />, as shown in the following diagram.</para>
      <para>The <see cref="P:Microsoft.Maui.Controls.Layout.Children" /> property of <see cref="T:Microsoft.Maui.Controls.Layout" /> contains a list of children of the parameterized type <c>T</c>, which must be a type of <see cref="T:Microsoft.Maui.Controls.View" />. Since <see cref="T:Microsoft.Maui.Controls.Layout" /> is itself a subclass of <see cref="T:Microsoft.Maui.Controls.View" />, this allows <see cref="T:Microsoft.Maui.Controls.Layout" />s to hold sub-layouts, scrolling regions, &amp; etc.</para>
    </remarks>
    <altmember cref="T:Microsoft.Maui.Controls.ContentView" />
    <altmember cref="T:Microsoft.Maui.Controls.Layout" />
    <altmember cref="T:Microsoft.Maui.Controls.ScrollView" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected Layout ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Maui.Controls.Layout.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
        <AssemblyVersion>1.4.0.0</AssemblyVersion>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyName>Microsoft.Maui.Controls.Core</AssemblyName>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Intitializes a new <see cref="T:Microsoft.Maui.Controls.Layout" /> instance.</summary>
      </Docs>
    </Member>
    <Member MemberName="CascadeInputTransparent">
      <MemberSignature Language="C#" Value="public bool CascadeInputTransparent { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CascadeInputTransparent" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Maui.Controls.Layout.CascadeInputTransparent" />
      <MemberSignature Language="F#" Value="member this.CascadeInputTransparent : bool with get, set" Usage="Microsoft.Maui.Controls.Layout.CascadeInputTransparent" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Maui.Controls.Core</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value that controls whether child elements inherit the input transparency of <see langword="this" /> layout when the tranparency is <see langword="true" />.</summary>
        <value>
          <see langword="true" /> to cause child elements to inherit the input transparency of <see langword="this" /> layout, when <see langword="this" /> layout's <see cref="P:Microsoft.Maui.Controls.VisualElement.InputTransparent" /> is true. <see langword="false" /> to cause child elements to ignore the input tranparency of <see langword="this" /> layout.</value>
      </Docs>
    </Member>
    <Member MemberName="CascadeInputTransparentProperty">
      <MemberSignature Language="C#" Value="public static readonly Microsoft.Maui.Controls.BindableProperty CascadeInputTransparentProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class Microsoft.Maui.Controls.BindableProperty CascadeInputTransparentProperty" />
      <MemberSignature Language="DocId" Value="F:Microsoft.Maui.Controls.Layout.CascadeInputTransparentProperty" />
      <MemberSignature Language="F#" Value=" staticval mutable CascadeInputTransparentProperty : Microsoft.Maui.Controls.BindableProperty" Usage="Microsoft.Maui.Controls.Layout.CascadeInputTransparentProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Maui.Controls.Core</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Maui.Controls.BindableProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Backing store for the <see cref="P:Microsoft.Maui.Controls.Layout.CascadeInputTransparent" /> property.</summary>
      </Docs>
    </Member>
    <Member MemberName="Children">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IReadOnlyList&lt;Microsoft.Maui.Controls.Element&gt; Children { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IReadOnlyList`1&lt;class Microsoft.Maui.Controls.Element&gt; Children" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Maui.Controls.Layout.Children" />
      <MemberSignature Language="F#" Value="member this.Children : System.Collections.Generic.IReadOnlyList&lt;Microsoft.Maui.Controls.Element&gt;" Usage="Microsoft.Maui.Controls.Layout.Children" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:Microsoft.Maui.Controls.ILayoutController.Children</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyName>Microsoft.Maui.Controls.Core</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IReadOnlyList&lt;Microsoft.Maui.Controls.Element&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>For internal use by the Microsoft.Maui.Controls platform.</summary>
      </Docs>
    </Member>
    <Member MemberName="ForceLayout">
      <MemberSignature Language="C#" Value="public void ForceLayout ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ForceLayout() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Maui.Controls.Layout.ForceLayout" />
      <MemberSignature Language="F#" Value="member this.ForceLayout : unit -&gt; unit" Usage="layout.ForceLayout " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
        <AssemblyVersion>1.4.0.0</AssemblyVersion>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyName>Microsoft.Maui.Controls.Core</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Forces a layout cycle on the element and all of its descendants.</summary>
        <remarks>
          <para>Calling ForceLayout frequently can have negative impacts on performance.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetSizeRequest">
      <MemberSignature Language="C#" Value="public override sealed Microsoft.Maui.SizeRequest GetSizeRequest (double widthConstraint, double heightConstraint);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance valuetype Microsoft.Maui.SizeRequest GetSizeRequest(float64 widthConstraint, float64 heightConstraint) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Maui.Controls.Layout.GetSizeRequest(System.Double,System.Double)" />
      <MemberSignature Language="F#" Value="override this.GetSizeRequest : double * double -&gt; Microsoft.Maui.SizeRequest" Usage="layout.GetSizeRequest (widthConstraint, heightConstraint)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
        <AssemblyVersion>1.4.0.0</AssemblyVersion>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyName>Microsoft.Maui.Controls.Core</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("OnSizeRequest is obsolete as of version 2.2.0. Please use OnMeasure instead.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Maui.SizeRequest</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="widthConstraint" Type="System.Double" />
        <Parameter Name="heightConstraint" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="widthConstraint">The available width that a parent Layout can allocate to a child. Value will be between 0 and double.PositiveInfinity.</param>
        <param name="heightConstraint">The available height that a parent Layout can allocate to a child. Value will be between 0 and double.PositiveInfinity.</param>
        <summary>Returns the <see cref="T:Microsoft.Maui.SizeRequest" /> of the Layout. Calling this method begins the measure pass of a layout cycle.</summary>
        <returns>A <see cref="T:Microsoft.Maui.SizeRequest" /> which contains a requested size and a minimum size.</returns>
        <remarks>
          <para>
            Calling GetSizeRequest causes a measure pass to occur for the subtree of elements it is called on. It is ideal to only call GetSizeRequest when needed as excessive calls can negatively impact the performance of the app. Overriding GetSizeRequest should only be done if the developer wants to ignore Width/HeightRequest. More likely a subclass would wish to override <see cref="M:Microsoft.Maui.Controls.VisualElement.OnSizeRequest(System.Double,System.Double)" />.
            </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InvalidateLayout">
      <MemberSignature Language="C#" Value="protected virtual void InvalidateLayout ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void InvalidateLayout() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Maui.Controls.Layout.InvalidateLayout" />
      <MemberSignature Language="F#" Value="abstract member InvalidateLayout : unit -&gt; unit&#xA;override this.InvalidateLayout : unit -&gt; unit" Usage="layout.InvalidateLayout " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
        <AssemblyVersion>1.4.0.0</AssemblyVersion>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyName>Microsoft.Maui.Controls.Core</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Invalidates the current layout.</summary>
        <remarks>Calling this method will invalidate the measure and triggers a new layout cycle.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsClippedToBounds">
      <MemberSignature Language="C#" Value="public bool IsClippedToBounds { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsClippedToBounds" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Maui.Controls.Layout.IsClippedToBounds" />
      <MemberSignature Language="F#" Value="member this.IsClippedToBounds : bool with get, set" Usage="Microsoft.Maui.Controls.Layout.IsClippedToBounds" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
        <AssemblyVersion>1.4.0.0</AssemblyVersion>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyName>Microsoft.Maui.Controls.Core</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value which determines if the Layout should clip its children to its bounds.</summary>
        <value>
          <see langword="true" /> if the Layout is clipped; otherwise, <see langword="false" />. The default value is <see langword="false" />.</value>
      </Docs>
    </Member>
    <Member MemberName="IsClippedToBoundsProperty">
      <MemberSignature Language="C#" Value="public static readonly Microsoft.Maui.Controls.BindableProperty IsClippedToBoundsProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class Microsoft.Maui.Controls.BindableProperty IsClippedToBoundsProperty" />
      <MemberSignature Language="DocId" Value="F:Microsoft.Maui.Controls.Layout.IsClippedToBoundsProperty" />
      <MemberSignature Language="F#" Value=" staticval mutable IsClippedToBoundsProperty : Microsoft.Maui.Controls.BindableProperty" Usage="Microsoft.Maui.Controls.Layout.IsClippedToBoundsProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
        <AssemblyVersion>1.4.0.0</AssemblyVersion>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyName>Microsoft.Maui.Controls.Core</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Maui.Controls.BindableProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies the <see cref="P:Microsoft.Maui.Controls.Layout.IsClippedToBounds" /> bindable property.</summary>
      </Docs>
    </Member>
    <Member MemberName="LayoutChanged">
      <MemberSignature Language="C#" Value="public event EventHandler LayoutChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler LayoutChanged" />
      <MemberSignature Language="DocId" Value="E:Microsoft.Maui.Controls.Layout.LayoutChanged" />
      <MemberSignature Language="F#" Value="member this.LayoutChanged : EventHandler " Usage="member this.LayoutChanged : System.EventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:Microsoft.Maui.Controls.ILayout.LayoutChanged</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
        <AssemblyVersion>1.4.0.0</AssemblyVersion>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyName>Microsoft.Maui.Controls.Core</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs at the end of a layout cycle if any of the child element's <see cref="P:Microsoft.Maui.Controls.VisualElement.Bounds" /> have changed.</summary>
        <remarks>
          <para>Developers wishing to implement animations may wish to begin them at the end of a LayoutChanged event.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LayoutChildIntoBoundingRegion">
      <MemberSignature Language="C#" Value="public static void LayoutChildIntoBoundingRegion (Microsoft.Maui.Controls.VisualElement child, Microsoft.Maui.Controls.Shapes.Rectangle region);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void LayoutChildIntoBoundingRegion(class Microsoft.Maui.Controls.VisualElement child, valuetype Microsoft.Maui.Controls.Shapes.Rectangle region) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Maui.Controls.Layout.LayoutChildIntoBoundingRegion(Microsoft.Maui.Controls.VisualElement,Microsoft.Maui.Controls.Shapes.Rectangle)" />
      <MemberSignature Language="F#" Value="static member LayoutChildIntoBoundingRegion : Microsoft.Maui.Controls.VisualElement * Microsoft.Maui.Controls.Shapes.Rectangle -&gt; unit" Usage="Microsoft.Maui.Controls.Layout.LayoutChildIntoBoundingRegion (child, region)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
        <AssemblyVersion>1.4.0.0</AssemblyVersion>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyName>Microsoft.Maui.Controls.Core</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="child" Type="Microsoft.Maui.Controls.VisualElement" />
        <Parameter Name="region" Type="Microsoft.Maui.Controls.Shapes.Rectangle" />
      </Parameters>
      <Docs>
        <param name="child">The child element to be positioned.</param>
        <param name="region">The bounding region in which the child should be positioned.</param>
        <summary>Positions a child element into a bounding region while respecting the child elements <see cref="P:Microsoft.Maui.Controls.View.HorizontalOptions" /> and <see cref="P:Microsoft.Maui.Controls.View.VerticalOptions" />.</summary>
        <remarks>This method is called in the layout cycle after the general regions for each child have been calculated. This method will handle positioning the element relative to the bounding region given if the bounding region given is larger than the child's desired size.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LayoutChildren">
      <MemberSignature Language="C#" Value="protected abstract void LayoutChildren (double x, double y, double width, double height);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void LayoutChildren(float64 x, float64 y, float64 width, float64 height) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Maui.Controls.Layout.LayoutChildren(System.Double,System.Double,System.Double,System.Double)" />
      <MemberSignature Language="F#" Value="abstract member LayoutChildren : double * double * double * double -&gt; unit" Usage="layout.LayoutChildren (x, y, width, height)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
        <AssemblyVersion>1.4.0.0</AssemblyVersion>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyName>Microsoft.Maui.Controls.Core</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Double" />
        <Parameter Name="y" Type="System.Double" />
        <Parameter Name="width" Type="System.Double" />
        <Parameter Name="height" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="x">A value representing the x coordinate of the child region bounding box.</param>
        <param name="y">A value representing the y coordinate of the child region bounding box.</param>
        <param name="width">A value representing the width of the child region bounding box.</param>
        <param name="height">A value representing the height of the child region bounding box.</param>
        <summary>Positions and sizes the children of a Layout.</summary>
        <remarks>Implementors wishing to change the default behavior of a Layout should override this method. It is suggested to still call the base method and modify its calculated results.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LowerChild">
      <MemberSignature Language="C#" Value="public void LowerChild (Microsoft.Maui.Controls.View view);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void LowerChild(class Microsoft.Maui.Controls.View view) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Maui.Controls.Layout.LowerChild(Microsoft.Maui.Controls.View)" />
      <MemberSignature Language="F#" Value="member this.LowerChild : Microsoft.Maui.Controls.View -&gt; unit" Usage="layout.LowerChild view" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
        <AssemblyVersion>1.4.0.0</AssemblyVersion>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyName>Microsoft.Maui.Controls.Core</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="view" Type="Microsoft.Maui.Controls.View" />
      </Parameters>
      <Docs>
        <param name="view">The view to lower in the visual stack.</param>
        <summary>Sends a child to the back of the visual stack.</summary>
        <remarks>Children are internally stored in visual stack order. This means that raising or lowering a child also changes the order in which the children are enumerated.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnChildMeasureInvalidated">
      <MemberSignature Language="C#" Value="protected virtual void OnChildMeasureInvalidated ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnChildMeasureInvalidated() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Maui.Controls.Layout.OnChildMeasureInvalidated" />
      <MemberSignature Language="F#" Value="abstract member OnChildMeasureInvalidated : unit -&gt; unit&#xA;override this.OnChildMeasureInvalidated : unit -&gt; unit" Usage="layout.OnChildMeasureInvalidated " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
        <AssemblyVersion>1.4.0.0</AssemblyVersion>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyName>Microsoft.Maui.Controls.Core</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Invoked whenever a child of the layout has emitted <see cref="E:Microsoft.Maui.Controls.VisualElement.MeasureInvalidated" />. Implement this method to add class handling for this event.</summary>
      </Docs>
    </Member>
    <Member MemberName="OnChildMeasureInvalidated">
      <MemberSignature Language="C#" Value="protected void OnChildMeasureInvalidated (object sender, EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void OnChildMeasureInvalidated(object sender, class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Maui.Controls.Layout.OnChildMeasureInvalidated(System.Object,System.EventArgs)" />
      <MemberSignature Language="F#" Value="member this.OnChildMeasureInvalidated : obj * EventArgs -&gt; unit" Usage="layout.OnChildMeasureInvalidated (sender, e)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
        <AssemblyVersion>1.4.0.0</AssemblyVersion>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyName>Microsoft.Maui.Controls.Core</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sender" Type="System.Object" />
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="sender">The child element whose preferred size changed.</param>
        <param name="e">The event data.</param>
        <summary>Invoked whenever a child of the layout has emitted <see cref="E:Microsoft.Maui.Controls.VisualElement.MeasureInvalidated" />. Implement this method to add class handling for this event.</summary>
        <remarks>This method has a default implementation and and application developers must call the base implementation.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnSizeAllocated">
      <MemberSignature Language="C#" Value="protected override void OnSizeAllocated (double width, double height);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnSizeAllocated(float64 width, float64 height) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Maui.Controls.Layout.OnSizeAllocated(System.Double,System.Double)" />
      <MemberSignature Language="F#" Value="override this.OnSizeAllocated : double * double -&gt; unit" Usage="layout.OnSizeAllocated (width, height)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
        <AssemblyVersion>1.4.0.0</AssemblyVersion>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyName>Microsoft.Maui.Controls.Core</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="width" Type="System.Double" />
        <Parameter Name="height" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="width">The new width of the element.</param>
        <param name="height">The new height of the element.</param>
        <summary>This method is called when the size of the element is set during a layout cycle. This method is called directly before the <see cref="E:Microsoft.Maui.Controls.VisualElement.SizeChanged" /> event is emitted. Implement this method to add class handling for this event.</summary>
        <remarks>This method has a default implementation which triggers the layout cycle of the Layout to begin.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Padding">
      <MemberSignature Language="C#" Value="publicMicrosoft.Maui.Thickness Padding { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetypeMicrosoft.Maui.Thickness Padding" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Maui.Controls.Layout.Padding" />
      <MemberSignature Language="F#" Value="member this.Padding :Microsoft.Maui.Thickness with get, set" Usage="Microsoft.Maui.Controls.Layout.Padding" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
        <AssemblyVersion>1.4.0.0</AssemblyVersion>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyName>Microsoft.Maui.Controls.Core</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Maui.Thickness</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the inner padding of the Layout.</summary>
        <value>The Thickness values for the layout. The default value is a Thickness with all values set to 0.</value>
        <remarks>
          <para>
            The padding is the space between the bounds of a layout and the bounding region into which its children should be arranged into.
          </para>
          <para>
              The following example shows setting the padding of a Layout to inset its children.
              </para>
          <example>
            <code lang="csharp lang-csharp"><![CDATA[
  var stackLayout = new StackLayout {
    Padding = new Thickness (10, 10, 10, 20),
    Children = {
      new Label {Text = "Hello"},
      new Label {Text = "World"}
    }
  }
              ]]></code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PaddingProperty">
      <MemberSignature Language="C#" Value="public static readonly Microsoft.Maui.Controls.BindableProperty PaddingProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class Microsoft.Maui.Controls.BindableProperty PaddingProperty" />
      <MemberSignature Language="DocId" Value="F:Microsoft.Maui.Controls.Layout.PaddingProperty" />
      <MemberSignature Language="F#" Value=" staticval mutable PaddingProperty : Microsoft.Maui.Controls.BindableProperty" Usage="Microsoft.Maui.Controls.Layout.PaddingProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
        <AssemblyVersion>1.4.0.0</AssemblyVersion>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyName>Microsoft.Maui.Controls.Core</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Maui.Controls.BindableProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies the Padding bindable property.</summary>
      </Docs>
    </Member>
    <Member MemberName="RaiseChild">
      <MemberSignature Language="C#" Value="public void RaiseChild (Microsoft.Maui.Controls.View view);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RaiseChild(class Microsoft.Maui.Controls.View view) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Maui.Controls.Layout.RaiseChild(Microsoft.Maui.Controls.View)" />
      <MemberSignature Language="F#" Value="member this.RaiseChild : Microsoft.Maui.Controls.View -&gt; unit" Usage="layout.RaiseChild view" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
        <AssemblyVersion>1.4.0.0</AssemblyVersion>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyName>Microsoft.Maui.Controls.Core</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="view" Type="Microsoft.Maui.Controls.View" />
      </Parameters>
      <Docs>
        <param name="view">The view to raise in the visual stack.</param>
        <summary>Sends a child to the front of the visual stack.</summary>
        <remarks>Children are internally stored in visual stack order. This means that raising or lowering a child also changes the order in which they are enumerated.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ResolveLayoutChanges">
      <MemberSignature Language="C#" Value="public void ResolveLayoutChanges ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ResolveLayoutChanges() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Maui.Controls.Layout.ResolveLayoutChanges" />
      <MemberSignature Language="F#" Value="member this.ResolveLayoutChanges : unit -&gt; unit" Usage="layout.ResolveLayoutChanges " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Maui.Controls.Core</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
      </Docs>
    </Member>
    <Member MemberName="ShouldInvalidateOnChildAdded">
      <MemberSignature Language="C#" Value="protected virtual bool ShouldInvalidateOnChildAdded (Microsoft.Maui.Controls.View child);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool ShouldInvalidateOnChildAdded(class Microsoft.Maui.Controls.View child) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Maui.Controls.Layout.ShouldInvalidateOnChildAdded(Microsoft.Maui.Controls.View)" />
      <MemberSignature Language="F#" Value="abstract member ShouldInvalidateOnChildAdded : Microsoft.Maui.Controls.View -&gt; bool&#xA;override this.ShouldInvalidateOnChildAdded : Microsoft.Maui.Controls.View -&gt; bool" Usage="layout.ShouldInvalidateOnChildAdded child" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
        <AssemblyVersion>1.4.0.0</AssemblyVersion>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyName>Microsoft.Maui.Controls.Core</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="child" Type="Microsoft.Maui.Controls.View" />
      </Parameters>
      <Docs>
        <param name="child">The child for which to specify whether or not to track invalidation.</param>
        <summary>When implemented, should return <see langword="true" /> if <paramref name="child" /> should call <see cref="M:Microsoft.Maui.Controls.VisualElement.InvalidateMeasure" />, and to return <see langword="false" /> if it should not.</summary>
      </Docs>
    </Member>
    <Member MemberName="ShouldInvalidateOnChildRemoved">
      <MemberSignature Language="C#" Value="protected virtual bool ShouldInvalidateOnChildRemoved (Microsoft.Maui.Controls.View child);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool ShouldInvalidateOnChildRemoved(class Microsoft.Maui.Controls.View child) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Maui.Controls.Layout.ShouldInvalidateOnChildRemoved(Microsoft.Maui.Controls.View)" />
      <MemberSignature Language="F#" Value="abstract member ShouldInvalidateOnChildRemoved : Microsoft.Maui.Controls.View -&gt; bool&#xA;override this.ShouldInvalidateOnChildRemoved : Microsoft.Maui.Controls.View -&gt; bool" Usage="layout.ShouldInvalidateOnChildRemoved child" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
        <AssemblyVersion>1.4.0.0</AssemblyVersion>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyName>Microsoft.Maui.Controls.Core</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="child" Type="Microsoft.Maui.Controls.View" />
      </Parameters>
      <Docs>
        <param name="child">The child for which to specify whether or not to track invalidation.</param>
        <summary>When implemented, should return <see langword="true" /> if <paramref name="child" /> should call <see cref="M:Microsoft.Maui.Controls.VisualElement.InvalidateMeasure" /> when it is removed, and to return <see langword="false" /> if it should not.</summary>
      </Docs>
    </Member>
    <Member MemberName="UpdateChildrenLayout">
      <MemberSignature Language="C#" Value="protected void UpdateChildrenLayout ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void UpdateChildrenLayout() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Maui.Controls.Layout.UpdateChildrenLayout" />
      <MemberSignature Language="F#" Value="member this.UpdateChildrenLayout : unit -&gt; unit" Usage="layout.UpdateChildrenLayout " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
        <AssemblyVersion>1.4.0.0</AssemblyVersion>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyName>Microsoft.Maui.Controls.Core</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Instructs the layout to relayout all of its children.</summary>
        <remarks>This method starts a new layout cycle for the layout. Invoking this method frequently can negatively impact performance.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
