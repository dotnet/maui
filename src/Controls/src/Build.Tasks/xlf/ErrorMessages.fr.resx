<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AdderMissing" xml:space="preserve">
    <value>Aucune méthode Add() définie sur "{0}{1}".</value>
    <comment>0 is type name, 1 is property name</comment>
  </data>
  <data name="BindingIndexerEmpty" xml:space="preserve">
    <value>Liaison : l'indexeur ne contient pas d'arguments.</value>
  </data>
  <data name="BindingIndexerNotClosed" xml:space="preserve">
    <value>Liaison : l'indexeur ne contient pas de crochet fermant.</value>
  </data>
  <data name="BindingIndexerParse" xml:space="preserve">
    <value>Liaison : "{0}" ne peut pas être analysé en tant qu'index pour "{1}".</value>
    <comment>0 is indexer value, 1 is property name</comment>
  </data>
  <data name="BindingIndexerTypeUnsupported" xml:space="preserve">
    <value>Liaison : type d'index d'indexeur non pris en charge : "{0}".</value>
    <comment>0 is indexer type name</comment>
  </data>
  <data name="BindingWithoutDataType" xml:space="preserve">
    <value>Si x:DataType est spécifié, la liaison peut être compilée pour améliorer les performances d’exécution. Pour plus d’informations, consultez https://learn.microsoft.com/dotnet/maui/fundamentals/data-binding/compiled-bindings.</value>
  </data>
  <data name="BindingWithNullDataType" xml:space="preserve">
    <value>Si x:DataType n’est pas explicitement null, la liaison peut être compilée pour améliorer les performances d’exécution. Pour plus d’informations, consultez https://learn.microsoft.com/dotnet/maui/fundamentals/data-binding/compiled-bindings.</value>
  </data>
  <data name="BindingWithXDataTypeFromOuterScope" xml:space="preserve">
    <value>La compilation de la liaison peut être incorrecte car l’annotation x:DataType provient d’une étendue externe. Assurez-vous d’annoter tous les éléments XAML de DataTemplate avec le x:DataType correspondant. Pour plus d’informations, consultez https://learn.microsoft.com/dotnet/maui/fundamentals/data-binding/compiled-bindings.</value>
  </data>
  <data name="BindingWithSourceCompilationSkipped" xml:space="preserve">
    <value>La liaison n’a pas été compilée car elle contient une propriété Source explicitement définie et la compilation des liaisons avec Source n’est pas activée. Envisagez d’activer cette optimisation en définissant &lt;MauiEnableXamlCBindingWithSourceCompilation&gt;true&lt;/MauiEnableXamlCBindingWithSourceCompilation&gt; dans votre fichier de projet et assurez-vous que le type x:DataType correspondant est spécifié pour cette liaison. Pour plus d’informations, consultez https://learn.microsoft.com/dotnet/maui/fundamentals/data-binding/compiled-bindings.</value>
  </data>
  <data name="BindingPropertyNotFound" xml:space="preserve">
    <value>Liaison : propriété "{0}" introuvable sur "{1}".</value>
    <comment>0 is property name, 1 is type name</comment>
  </data>
  <data name="BPMissingGetter" xml:space="preserve">
    <value>Il manque une méthode "public static Get{0}" ou un getter de propriété d'instance publique pour la propriété jointe "{1}.{0}Property".</value>
    <comment>0 is BindableProperty name, 1 is the declaring type</comment>
  </data>
  <data name="BPName" xml:space="preserve">
    <value>Le nom du BindableProperty {0} ne finit pas par "Property".</value>
    <comment>0 is BindableProperty name</comment>
  </data>
  <data name="ConstructorDefaultMissing" xml:space="preserve">
    <value>Constructeur par défaut manquant pour "{0}".</value>
    <comment>0 is type name</comment>
  </data>
  <data name="ConstructorXArgsMissing" xml:space="preserve">
    <value>Constructeur manquant pour "{0}" avec un x:Arguments correspondant.</value>
    <comment>0 is type name</comment>
  </data>
  <data name="ContentPropertyAttributeMissing" xml:space="preserve">
    <value>Impossible de définir le contenu de "{0}", car il n'a pas d'attribut [ContentProperty].</value>
    <comment>0 is type name</comment>
  </data>
  <data name="Conversion" xml:space="preserve">
    <value>Impossible de convertir la valeur "{0}" en "{1}".</value>
    <comment>0 is a value, 1 is a type</comment>
  </data>
  <data name="EnumValueMissing" xml:space="preserve">
    <value>Valeur enum introuvable pour "{0}".</value>
    <comment>0 is enum value</comment>
  </data>
  <data name="InvalidXaml" xml:space="preserve">
    <value>Extrait XAML "{0}" non valide.</value>
    <comment>0 is the invalid xaml snippet</comment>
  </data>
  <data name="MarkupNotClosed" xml:space="preserve">
    <value>Expression de balise non fermée.</value>
  </data>
  <data name="MarkupParsingFailed" xml:space="preserve">
    <value>Erreur durant l'analyse de l'expression de balise.</value>
  </data>
  <data name="MemberResolution" xml:space="preserve">
    <value>Propriété, BindableProperty ou événement introuvable pour "{0}", ou type incompatible entre la valeur et la propriété.</value>
    <comment>0 is member name</comment>
  </data>
  <data name="MethodStaticMissing" xml:space="preserve">
    <value>Méthode statique introuvable pour "{0}::{1} ({2})".</value>
    <comment>0 is type name, 1 is methodname, 2 is type arg list</comment>
  </data>
  <data name="MissingEventHandler" xml:space="preserve">
    <value>Impossible de localiser un EventHandler "{0}" avec une signature correcte dans le type "{1}".</value>
    <comment>0 is the handler name, 1 is the declaring type</comment>
  </data>
  <data name="NamescopeDuplicate" xml:space="preserve">
    <value>Un élément nommé "{0}" existe déjà dans ce NameScope.</value>
    <comment>0 is the duplicated key</comment>
  </data>
  <data name="ObsoleteProperty" xml:space="preserve">
    <value>Property, Property setter ou BindableProperty « {0} » est obsolète.</value>
  </data>
  <data name="PropertyMissing" xml:space="preserve">
    <value>Propriété obligatoire "{0}" manquante sur "{1}".</value>
    <comment>0 is a property name, 1 is a type</comment>
  </data>
  <data name="PropertyResolution" xml:space="preserve">
    <value>Impossible de résoudre la propriété "{0}" sur le type "{1} (propriété manquante ou accesseurs manquants)".</value>
    <comment>0 is a property name, 1 is a type name</comment>
  </data>
  <data name="ResourceDictDuplicateKey" xml:space="preserve">
    <value>"Une ressource avec la clé "{0}" est déjà présente dans ResourceDictionary.</value>
    <comment>0 is key name</comment>
  </data>
  <data name="ResourceDictMissingKey" xml:space="preserve">
    <value>Les ressources de ResourceDictionary nécessitent un attribut x:Key.</value>
  </data>
  <data name="ResourceMissing" xml:space="preserve">
    <value>Ressource "{0}" introuvable.</value>
    <comment>0 is a resourceId</comment>
  </data>
  <data name="SByteEnums" xml:space="preserve">
    <value>Les enums à valeurs multiples sont non valides sur les types enum sbyte.</value>
  </data>
  <data name="StyleSheetNoSourceOrContent" xml:space="preserve">
    <value>StyleSheet nécessite Source ou un contenu.</value>
  </data>
  <data name="StyleSheetSourceNotALiteral" xml:space="preserve">
    <value>La propriété Source n'est pas un littéral de chaîne.</value>
  </data>
  <data name="StyleSheetSourceOrContent" xml:space="preserve">
    <value>StyleSheet ne peut pas avoir à la fois une Source et un contenu.</value>
  </data>
  <data name="StyleSheetStyleNotALiteral" xml:space="preserve">
    <value>La propriété Style ou le contenu n'est pas un littéral de chaîne.</value>
  </data>
  <data name="TypeResolution" xml:space="preserve">
    <value>Impossible de résoudre le type "{0}".</value>
    <comment>0 is a type name</comment>
  </data>
  <data name="XDataTypeSyntax" xml:space="preserve">
    <value>x:DataType attend un littéral de chaîne, une balise {{x:Type}} ou {{x:Null}}.</value>
  </data>
  <data name="UnattributedMarkupType" xml:space="preserve">
    <value>Si elle n’en requiert aucun, vous pouvez attribuer l’extension de balisage « {0} » avec [RequireService] ou [AcceptEmptyServiceProvider].</value>
    <comment>0 is type name</comment>
  </data>
  <data name="XmlnsUndeclared" xml:space="preserve">
    <value>Préfixe xmlns non déclaré "{0}".</value>
    <comment>0 is the xmlns prefix</comment>
  </data>
  <data name="XStaticResolution" xml:space="preserve">
    <value>x:Static : impossible de localiser un champ statique public (ou interne et accessible), une propriété statique, une valeur const ou une valeur enum portant le nom "{0}" dans "{1}".</value>
    <comment>0 is membername, 1 is type name</comment>
  </data>
  <data name="XStaticSyntax" xml:space="preserve">
    <value>La syntaxe de x:Static est "[Member=][prefix:]typeName.staticMemberName".</value>
  </data>
  <data name="XKeyNotLiteral" xml:space="preserve">
    <value>x:Key attend un littéral de chaîne.</value>
  </data>
  <data name="StaticResourceSyntax" xml:space="preserve">
    <value>Une clé est requise dans {StaticResource}.</value>
  </data>
</root>