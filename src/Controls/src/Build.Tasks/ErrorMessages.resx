<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AdderMissing" xml:space="preserve">
    <value>No Add() method defined on "{0}{1}".</value>
    <comment>0 is type name, 1 is property name</comment>
  </data>
  <data name="BindingIndexerEmpty" xml:space="preserve">
    <value>Binding: Indexer did not contain arguments.</value>
  </data>
  <data name="BindingIndexerNotClosed" xml:space="preserve">
    <value>Binding: Indexer did not contain closing bracket.</value>
  </data>
  <data name="BindingIndexerParse" xml:space="preserve">
    <value>Binding: "{0}" cannot be parsed as an index for a "{1}".</value>
    <comment>0 is indexer value, 1 is property name</comment>
  </data>
  <data name="BindingIndexerTypeUnsupported" xml:space="preserve">
    <value>Binding: Unsupported indexer index type: "{0}".</value>
    <comment>0 is indexer type name</comment>
  </data>
  <data name="BindingWithoutDataType" xml:space="preserve">
    <value>Binding could be compiled to improve runtime performance if x:DataType is specified. See https://learn.microsoft.com/dotnet/maui/fundamentals/data-binding/compiled-bindings for more information.</value>
  </data>
  <data name="BindingWithNullDataType" xml:space="preserve">
    <value>Binding could be compiled to improve runtime performance if x:DataType is not explicitly null. See https://learn.microsoft.com/dotnet/maui/fundamentals/data-binding/compiled-bindings for more information.</value>
  </data>
  <data name="BindingWithXDataTypeFromOuterScope" xml:space="preserve">
    <value>Binding might be compiled incorrectly since the x:DataType annotation comes from an outer scope. Make sure you annotate all DataTemplate XAML elements with the correct x:DataType. See https://learn.microsoft.com/dotnet/maui/fundamentals/data-binding/compiled-bindings for more information.</value>
  </data>
  <data name="BindingWithSourceCompilationSkipped" xml:space="preserve">
    <value>Binding was not compiled because it has an explicitly set Source property and compilation of bindings with Source is not enabled. Consider enabling this optimization by setting the &lt;MauiEnableXamlCBindingWithSourceCompilation&gt;true&lt;/MauiEnableXamlCBindingWithSourceCompilation&gt; in your project file and make sure the correct x:DataType is specified for this binding. See https://learn.microsoft.com/dotnet/maui/fundamentals/data-binding/compiled-bindings for more information.</value>
  </data>
  <data name="BindingPropertyNotFound" xml:space="preserve">
    <value>Binding: Property "{0}" not found on "{1}".</value>
    <comment>0 is property name, 1 is type name</comment>
  </data>
  <data name="BPMissingGetter" xml:space="preserve">
    <value>Missing a "public static Get{0}" method or a public instance property getter for the attached property "{1}.{0}Property".</value>
    <comment>0 is BindableProperty name, 1 is the declaring type</comment>
  </data>
  <data name="BPName" xml:space="preserve">
    <value>The name of the BindableProperty {0} does not end with "Property".</value>
    <comment>0 is BindableProperty name</comment>
  </data>
  <data name="ConstructorDefaultMissing" xml:space="preserve">
    <value>Missing default constructor for "{0}".</value>
    <comment>0 is type name</comment>
  </data>
  <data name="ConstructorXArgsMissing" xml:space="preserve">
    <value>Missing constructor for "{0}" with matching x:Arguments.</value>
    <comment>0 is type name</comment>
  </data>
  <data name="ContentPropertyAttributeMissing" xml:space="preserve">
    <value>Cannot set the content of "{0}" as it doesn't have a [ContentProperty] attribute.</value>
    <comment>0 is type name</comment>
  </data>
  <data name="Conversion" xml:space="preserve">
    <value>Cannot convert value "{0}" to "{1}".</value>
    <comment>0 is a value, 1 is a type</comment>
  </data>
  <data name="EnumValueMissing" xml:space="preserve">
    <value>Enum value not found for "{0}".</value>
    <comment>0 is enum value</comment>
  </data>
  <data name="InvalidXaml" xml:space="preserve">
    <value>Invalid Xaml "{0}".</value>
    <comment>0 is the invalid xaml snippet</comment>
  </data>
  <data name="MarkupNotClosed" xml:space="preserve">
    <value>Markup expression not closed.</value>
  </data>
  <data name="MarkupParsingFailed" xml:space="preserve">
    <value>Error while parsing markup expression.</value>
  </data>
  <data name="MemberResolution" xml:space="preserve">
    <value>No property, BindableProperty, or event found for "{0}", or mismatching type between value and property.</value>
    <comment>0 is member name</comment>
  </data>
  <data name="MethodStaticMissing" xml:space="preserve">
    <value>No static method found for "{0}::{1} ({2})".</value>
    <comment>0 is type name, 1 is methodname, 2 is type arg list</comment>
  </data>
  <data name="MissingEventHandler" xml:space="preserve">
    <value>EventHandler "{0}" with correct signature not found in type "{1}".</value>
    <comment>0 is the handler name, 1 is the declaring type</comment>
  </data>
  <data name="NamescopeDuplicate" xml:space="preserve">
    <value>An element with the name "{0}" already exists in this NameScope.</value>
    <comment>0 is the duplicated key</comment>
  </data>
  <data name="ObsoleteProperty" xml:space="preserve">
    <value>Property, Property setter or BindableProperty "{0}" is deprecated.</value>
  </data>  
  <data name="PropertyMissing" xml:space="preserve">
    <value>Missing mandatory property "{0}" on "{1}".</value>
    <comment>0 is a property name, 1 is a type</comment>
  </data>
  <data name="PropertyResolution" xml:space="preserve">
    <value>Cannot resolve property "{0}" on type "{1} (property missing or missing accessors)".</value>
    <comment>0 is a property name, 1 is a type name</comment>
  </data>
  <data name="ResourceDictDuplicateKey" xml:space="preserve">
    <value>"A resource with the key "{0}" is already present in the ResourceDictionary.</value>
    <comment>0 is key name</comment>
  </data>
  <data name="ResourceDictMissingKey" xml:space="preserve">
    <value>Resources in ResourceDictionary require a x:Key attribute.</value>
  </data>
  <data name="ResourceMissing" xml:space="preserve">
    <value>Resource "{0}" not found.</value>
    <comment>0 is a resourceId</comment>
  </data>
  <data name="SByteEnums" xml:space="preserve">
    <value>Multi-valued enums are not valid on sbyte enum types.</value>
  </data>
  <data name="StyleSheetNoSourceOrContent" xml:space="preserve">
    <value>StyleSheet require either a Source or a content.</value>
  </data>
  <data name="StyleSheetSourceNotALiteral" xml:space="preserve">
    <value>Source property is not a string literal.</value>
  </data>
  <data name="StyleSheetSourceOrContent" xml:space="preserve">
    <value>StyleSheet cannot have both a Source and a content.</value>
  </data>
  <data name="StyleSheetStyleNotALiteral" xml:space="preserve">
    <value>Style property or Content is not a string literal.</value>
  </data>
  <data name="TypeResolution" xml:space="preserve">
    <value>Cannot resolve type "{0}".</value>
    <comment>0 is a type name</comment>
  </data>
  <data name="XDataTypeSyntax" xml:space="preserve">
    <value>x:DataType expects a string literal, an {{x:Type}} markup or {{x:Null}}.</value>
  </data>
  <data name="UnattributedMarkupType" xml:space="preserve">
    <value>Consider attributing the markup extension "{0}" with [RequireService] or [AcceptEmptyServiceProvider] if it doesn't require any.</value>
    <comment>0 is type name</comment>
  </data>

  <data name="XmlnsUndeclared" xml:space="preserve">
    <value>Undeclared xmlns prefix "{0}".</value>
    <comment>0 is the xmlns prefix</comment>
  </data>
  <data name="XStaticResolution" xml:space="preserve">
    <value>x:Static: unable to find a public -- or accessible internal -- static field, static property, const or enum value named "{0}" in "{1}".</value>
    <comment>0 is membername, 1 is type name</comment>
  </data>
  <data name="XStaticSyntax" xml:space="preserve">
    <value>Syntax for x:Static is "[Member=][prefix:]typeName.staticMemberName".</value>
  </data>  
  <data name="XKeyNotLiteral" xml:space="preserve">
    <value>x:Key expects a string literal.</value>
  </data>
  <data name="StaticResourceSyntax" xml:space="preserve">
    <value>A key is required in {StaticResource}.</value>
  </data>  
</root>