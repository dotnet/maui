using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Diagnostics;
using System.Linq;
using System.Text;
using System.Threading;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.Text;

namespace Microsoft.Maui.Controls.SourceGen;

using static GeneratorHelpers;

[Generator(LanguageNames.CSharp)]
public class XmlnsDefinitionSourceGenerator : IIncrementalGenerator
{
	public void Initialize(IncrementalGeneratorInitializationContext initContext)
	{
		// Read the XmlnsDefinition items data file
		var xmlnsDefinitionDataProvider = initContext.AdditionalTextsProvider
			.Where(static file => file.Path.EndsWith(".xmlnsdefinitions", StringComparison.OrdinalIgnoreCase))
			.Select(static (file, cancellationToken) => ParseXmlnsDefinitionData(file, cancellationToken))
			.Where(static data => data.Length > 0)
			.WithTrackingName(TrackingNames.XmlnsDefinitionDataProvider);

		// Generate the assembly attributes
		initContext.RegisterSourceOutput(xmlnsDefinitionDataProvider, GenerateXmlnsDefinitionAttributes);
	}

	static ImmutableArray<XmlnsDefinitionData> ParseXmlnsDefinitionData(AdditionalText file, CancellationToken cancellationToken)
	{
		var text = file.GetText(cancellationToken);
		if (text == null)
			return ImmutableArray<XmlnsDefinitionData>.Empty;

		var lines = text.ToString().Split(new[] { '\r', '\n' }, StringSplitOptions.RemoveEmptyEntries);
		var definitions = ImmutableArray.CreateBuilder<XmlnsDefinitionData>();

		foreach (var line in lines)
		{
			var trimmedLine = line.Trim();
			if (string.IsNullOrEmpty(trimmedLine) || trimmedLine.StartsWith("#"))
				continue;

			var parts = trimmedLine.Split('|');
			if (parts.Length >= 1)
			{
				var clrNamespace = parts[0].Trim();
				var assemblyName = parts.Length > 1 ? parts[1].Trim() : null;
				
				if (!string.IsNullOrEmpty(clrNamespace))
				{
					definitions.Add(new XmlnsDefinitionData(clrNamespace, assemblyName));
				}
			}
		}

		return definitions.ToImmutable();
	}

	static void GenerateXmlnsDefinitionAttributes(SourceProductionContext context, ImmutableArray<XmlnsDefinitionData> definitions)
	{
		if (definitions.IsEmpty)
			return;

		var sb = new StringBuilder();
		sb.AppendLine(AutoGeneratedHeaderText);
		sb.AppendLine();
		sb.AppendLine("using Microsoft.Maui.Controls;");
		sb.AppendLine();

		const string globalXmlNamespace = "http://schemas.microsoft.com/dotnet/maui/global";

		foreach (var definition in definitions)
		{
			if (string.IsNullOrEmpty(definition.AssemblyName))
			{
				sb.AppendLine($"[assembly: XmlnsDefinition(\"{globalXmlNamespace}\", \"{definition.ClrNamespace}\")]");
			}
			else
			{
				sb.AppendLine($"[assembly: XmlnsDefinition(\"{globalXmlNamespace}\", \"{definition.ClrNamespace}\", AssemblyName = \"{definition.AssemblyName}\")]");
			}
		}

		context.AddSource("XmlnsDefinitionAttributes.g.cs", SourceText.From(sb.ToString(), Encoding.UTF8));
	}

	record XmlnsDefinitionData(string ClrNamespace, string? AssemblyName);
}