using System;
using System.Linq;
using Microsoft.CodeAnalysis;
using Microsoft.Maui.Controls.SourceGen;
using Microsoft.Maui.Controls.Xaml.UnitTests.SourceGen;
using NUnit.Framework;

namespace Microsoft.Maui.Controls.SourceGen.UnitTests;

[TestFixture]
public class QueryPropertyGeneratorTests
{
	private static void AssertGeneratedCode(string sourceCode, string expectedOutput)
	{
		var compilation = SourceGeneratorDriver.CreateMauiCompilation();
		compilation = compilation.AddSyntaxTrees(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxTree.ParseText(sourceCode));

		var result = SourceGeneratorDriver.RunGenerator<QueryPropertyGenerator>(compilation);

		Assert.That(result.Diagnostics, Is.Empty, "Generator should not produce diagnostics");
		Assert.That(result.GeneratedTrees.Length, Is.EqualTo(1), "Should generate exactly one file");

		var generatedSource = result.GeneratedTrees[0].ToString();
		Assert.That(generatedSource, Is.EqualTo(expectedOutput), "Generated source should match expected output exactly");
	}

	[Test]
	public void SingleStringProperty_GeneratesCorrectImplementation()
	{
		var sourceCode = @"
using Microsoft.Maui.Controls;

namespace MyApp
{
	[QueryProperty(nameof(Name), ""name"")]
	public partial class MyPage : ContentPage
	{
		public string Name { get; set; }
	}
}";

		var expectedOutput = @"
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a .NET MAUI source generator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable

using System;
using System.Collections.Generic;

namespace MyApp
{
	partial class MyPage : global::Microsoft.Maui.Controls.IQueryAttributable
	{
		/// <summary>
		/// Applies query attributes from navigation parameters.
		/// This method is generated by the QueryPropertyGenerator.
		/// </summary>
		void global::Microsoft.Maui.Controls.IQueryAttributable.ApplyQueryAttributes(global::System.Collections.Generic.IDictionary<string, object> query)
		{
			if (query == null)
				return;

			// Track which properties were set in previous navigation
			var previousKeys = _queryPropertyKeys ?? new global::System.Collections.Generic.HashSet<string>();
			_queryPropertyKeys = new global::System.Collections.Generic.HashSet<string>();

			if (query.TryGetValue(""name"", out var nameValue))
			{
				_queryPropertyKeys.Add(""name"");
				if (nameValue != null)
					Name = global::System.Net.WebUtility.UrlDecode(nameValue.ToString());
				else
					Name = null;
			}
			else if (previousKeys.Contains(""name""))
			{
				// Clear property if it was set before but not in current query
				Name = default;
			}

		}

		private global::System.Collections.Generic.HashSet<string>? _queryPropertyKeys;
	}
}
";

		AssertGeneratedCode(sourceCode, expectedOutput);
	}

	[Test]
	public void MultipleProperties_GeneratesCorrectImplementation()
	{
		var sourceCode = @"
using Microsoft.Maui.Controls;

namespace MyApp
{
	[QueryProperty(nameof(Name), ""name"")]
	[QueryProperty(nameof(Location), ""location"")]
	public partial class MyPage : ContentPage
	{
		public string Name { get; set; }
		public string Location { get; set; }
	}
}";

		var expectedOutput = @"
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a .NET MAUI source generator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable

using System;
using System.Collections.Generic;

namespace MyApp
{
	partial class MyPage : global::Microsoft.Maui.Controls.IQueryAttributable
	{
		/// <summary>
		/// Applies query attributes from navigation parameters.
		/// This method is generated by the QueryPropertyGenerator.
		/// </summary>
		void global::Microsoft.Maui.Controls.IQueryAttributable.ApplyQueryAttributes(global::System.Collections.Generic.IDictionary<string, object> query)
		{
			if (query == null)
				return;

			// Track which properties were set in previous navigation
			var previousKeys = _queryPropertyKeys ?? new global::System.Collections.Generic.HashSet<string>();
			_queryPropertyKeys = new global::System.Collections.Generic.HashSet<string>();

			if (query.TryGetValue(""name"", out var nameValue))
			{
				_queryPropertyKeys.Add(""name"");
				if (nameValue != null)
					Name = global::System.Net.WebUtility.UrlDecode(nameValue.ToString());
				else
					Name = null;
			}
			else if (previousKeys.Contains(""name""))
			{
				// Clear property if it was set before but not in current query
				Name = default;
			}

			if (query.TryGetValue(""location"", out var locationValue))
			{
				_queryPropertyKeys.Add(""location"");
				if (locationValue != null)
					Location = global::System.Net.WebUtility.UrlDecode(locationValue.ToString());
				else
					Location = null;
			}
			else if (previousKeys.Contains(""location""))
			{
				// Clear property if it was set before but not in current query
				Location = default;
			}

		}

		private global::System.Collections.Generic.HashSet<string>? _queryPropertyKeys;
	}
}
";

		AssertGeneratedCode(sourceCode, expectedOutput);
	}

	[Test]
	public void IntProperty_GeneratesTypeConversion()
	{
		var sourceCode = @"
using Microsoft.Maui.Controls;

namespace MyApp
{
	[QueryProperty(nameof(Count), ""count"")]
	public partial class MyPage : ContentPage
	{
		public int Count { get; set; }
	}
}";

		var expectedOutput = @"
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a .NET MAUI source generator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable

using System;
using System.Collections.Generic;

namespace MyApp
{
	partial class MyPage : global::Microsoft.Maui.Controls.IQueryAttributable
	{
		/// <summary>
		/// Applies query attributes from navigation parameters.
		/// This method is generated by the QueryPropertyGenerator.
		/// </summary>
		void global::Microsoft.Maui.Controls.IQueryAttributable.ApplyQueryAttributes(global::System.Collections.Generic.IDictionary<string, object> query)
		{
			if (query == null)
				return;

			// Track which properties were set in previous navigation
			var previousKeys = _queryPropertyKeys ?? new global::System.Collections.Generic.HashSet<string>();
			_queryPropertyKeys = new global::System.Collections.Generic.HashSet<string>();

			if (query.TryGetValue(""count"", out var countValue))
			{
				_queryPropertyKeys.Add(""count"");
				if (countValue != null)
				{
					var convertedValue = global::System.Convert.ChangeType(countValue, typeof(int));
					Count = (int)convertedValue;
				}
			}
			else if (previousKeys.Contains(""count""))
			{
				// Clear property if it was set before but not in current query
				// Property is not nullable, skipping clear
			}

		}

		private global::System.Collections.Generic.HashSet<string>? _queryPropertyKeys;
	}
}
";

		AssertGeneratedCode(sourceCode, expectedOutput);
	}

	[Test]
	public void DoubleProperty_GeneratesTypeConversion()
	{
		var sourceCode = @"
using Microsoft.Maui.Controls;

namespace MyApp
{
	[QueryProperty(nameof(Price), ""price"")]
	public partial class MyPage : ContentPage
	{
		public double Price { get; set; }
	}
}";

		var expectedOutput = @"
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a .NET MAUI source generator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable

using System;
using System.Collections.Generic;

namespace MyApp
{
	partial class MyPage : global::Microsoft.Maui.Controls.IQueryAttributable
	{
		/// <summary>
		/// Applies query attributes from navigation parameters.
		/// This method is generated by the QueryPropertyGenerator.
		/// </summary>
		void global::Microsoft.Maui.Controls.IQueryAttributable.ApplyQueryAttributes(global::System.Collections.Generic.IDictionary<string, object> query)
		{
			if (query == null)
				return;

			// Track which properties were set in previous navigation
			var previousKeys = _queryPropertyKeys ?? new global::System.Collections.Generic.HashSet<string>();
			_queryPropertyKeys = new global::System.Collections.Generic.HashSet<string>();

			if (query.TryGetValue(""price"", out var priceValue))
			{
				_queryPropertyKeys.Add(""price"");
				if (priceValue != null)
				{
					var convertedValue = global::System.Convert.ChangeType(priceValue, typeof(double));
					Price = (double)convertedValue;
				}
			}
			else if (previousKeys.Contains(""price""))
			{
				// Clear property if it was set before but not in current query
				// Property is not nullable, skipping clear
			}

		}

		private global::System.Collections.Generic.HashSet<string>? _queryPropertyKeys;
	}
}
";

		AssertGeneratedCode(sourceCode, expectedOutput);
	}

	[Test]
	public void BoolProperty_GeneratesTypeConversion()
	{
		var sourceCode = @"
using Microsoft.Maui.Controls;

namespace MyApp
{
	[QueryProperty(nameof(IsActive), ""active"")]
	public partial class MyPage : ContentPage
	{
		public bool IsActive { get; set; }
	}
}";

		var expectedOutput = @"
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a .NET MAUI source generator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable

using System;
using System.Collections.Generic;

namespace MyApp
{
	partial class MyPage : global::Microsoft.Maui.Controls.IQueryAttributable
	{
		/// <summary>
		/// Applies query attributes from navigation parameters.
		/// This method is generated by the QueryPropertyGenerator.
		/// </summary>
		void global::Microsoft.Maui.Controls.IQueryAttributable.ApplyQueryAttributes(global::System.Collections.Generic.IDictionary<string, object> query)
		{
			if (query == null)
				return;

			// Track which properties were set in previous navigation
			var previousKeys = _queryPropertyKeys ?? new global::System.Collections.Generic.HashSet<string>();
			_queryPropertyKeys = new global::System.Collections.Generic.HashSet<string>();

			if (query.TryGetValue(""active"", out var activeValue))
			{
				_queryPropertyKeys.Add(""active"");
				if (activeValue != null)
				{
					var convertedValue = global::System.Convert.ChangeType(activeValue, typeof(bool));
					IsActive = (bool)convertedValue;
				}
			}
			else if (previousKeys.Contains(""active""))
			{
				// Clear property if it was set before but not in current query
				// Property is not nullable, skipping clear
			}

		}

		private global::System.Collections.Generic.HashSet<string>? _queryPropertyKeys;
	}
}
";

		AssertGeneratedCode(sourceCode, expectedOutput);
	}

	[Test]
	public void MixedPropertyTypes_GeneratesCorrectImplementation()
	{
		var sourceCode = @"
using Microsoft.Maui.Controls;

namespace MyApp
{
	[QueryProperty(nameof(Name), ""name"")]
	[QueryProperty(nameof(Age), ""age"")]
	[QueryProperty(nameof(Price), ""price"")]
	public partial class MyPage : ContentPage
	{
		public string Name { get; set; }
		public int Age { get; set; }
		public double Price { get; set; }
	}
}";

		var expectedOutput = @"
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a .NET MAUI source generator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable

using System;
using System.Collections.Generic;

namespace MyApp
{
	partial class MyPage : global::Microsoft.Maui.Controls.IQueryAttributable
	{
		/// <summary>
		/// Applies query attributes from navigation parameters.
		/// This method is generated by the QueryPropertyGenerator.
		/// </summary>
		void global::Microsoft.Maui.Controls.IQueryAttributable.ApplyQueryAttributes(global::System.Collections.Generic.IDictionary<string, object> query)
		{
			if (query == null)
				return;

			// Track which properties were set in previous navigation
			var previousKeys = _queryPropertyKeys ?? new global::System.Collections.Generic.HashSet<string>();
			_queryPropertyKeys = new global::System.Collections.Generic.HashSet<string>();

			if (query.TryGetValue(""name"", out var nameValue))
			{
				_queryPropertyKeys.Add(""name"");
				if (nameValue != null)
					Name = global::System.Net.WebUtility.UrlDecode(nameValue.ToString());
				else
					Name = null;
			}
			else if (previousKeys.Contains(""name""))
			{
				// Clear property if it was set before but not in current query
				Name = default;
			}

			if (query.TryGetValue(""age"", out var ageValue))
			{
				_queryPropertyKeys.Add(""age"");
				if (ageValue != null)
				{
					var convertedValue = global::System.Convert.ChangeType(ageValue, typeof(int));
					Age = (int)convertedValue;
				}
			}
			else if (previousKeys.Contains(""age""))
			{
				// Clear property if it was set before but not in current query
				// Property is not nullable, skipping clear
			}

			if (query.TryGetValue(""price"", out var priceValue))
			{
				_queryPropertyKeys.Add(""price"");
				if (priceValue != null)
				{
					var convertedValue = global::System.Convert.ChangeType(priceValue, typeof(double));
					Price = (double)convertedValue;
				}
			}
			else if (previousKeys.Contains(""price""))
			{
				// Clear property if it was set before but not in current query
				// Property is not nullable, skipping clear
			}

		}

		private global::System.Collections.Generic.HashSet<string>? _queryPropertyKeys;
	}
}
";

		AssertGeneratedCode(sourceCode, expectedOutput);
	}

	[Test]
	public void NoQueryPropertyAttribute_GeneratesNothing()
	{
		var sourceCode = @"
using Microsoft.Maui.Controls;

namespace MyApp
{
	public partial class MyPage : ContentPage
	{
		public string Name { get; set; }
	}
}";

		var compilation = SourceGeneratorDriver.CreateMauiCompilation();
		compilation = compilation.AddSyntaxTrees(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxTree.ParseText(sourceCode));

		var result = SourceGeneratorDriver.RunGenerator<QueryPropertyGenerator>(compilation);

		Assert.That(result.Diagnostics, Is.Empty);
		Assert.That(result.GeneratedTrees.Length, Is.EqualTo(0));
	}

	[Test]
	public void DocumentationExample_BearDetailPage()
	{
		// Example from: https://learn.microsoft.com/en-us/dotnet/maui/fundamentals/shell/navigation
		var sourceCode = @"
using Microsoft.Maui.Controls;

namespace MyApp
{
	public class Animal
	{
		public string Name { get; set; }
	}

	[QueryProperty(nameof(Bear), ""Bear"")]
	public partial class BearDetailPage : ContentPage
	{
		Animal bear;
		public Animal Bear
		{
			get => bear;
			set
			{
				bear = value;
			}
		}

		public BearDetailPage()
		{
			BindingContext = this;
		}
	}
}";

		var compilation = SourceGeneratorDriver.CreateMauiCompilation();
		compilation = compilation.AddSyntaxTrees(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxTree.ParseText(sourceCode));

		var result = SourceGeneratorDriver.RunGenerator<QueryPropertyGenerator>(compilation);

		Assert.That(result.Diagnostics, Is.Empty, "Generator should not produce diagnostics");
		Assert.That(result.GeneratedTrees.Length, Is.EqualTo(1), "Should generate exactly one file");

		var generatedSource = result.GeneratedTrees[0].ToString();

		// Verify full generated output for documentation example
		var expectedOutput = @"
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a .NET MAUI source generator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable

using System;
using System.Collections.Generic;

namespace MyApp
{
	partial class BearDetailPage : global::Microsoft.Maui.Controls.IQueryAttributable
	{
		/// <summary>
		/// Applies query attributes from navigation parameters.
		/// This method is generated by the QueryPropertyGenerator.
		/// </summary>
		void global::Microsoft.Maui.Controls.IQueryAttributable.ApplyQueryAttributes(global::System.Collections.Generic.IDictionary<string, object> query)
		{
			if (query == null)
				return;

			// Track which properties were set in previous navigation
			var previousKeys = _queryPropertyKeys ?? new global::System.Collections.Generic.HashSet<string>();
			_queryPropertyKeys = new global::System.Collections.Generic.HashSet<string>();

			if (query.TryGetValue(""Bear"", out var BearValue))
			{
				_queryPropertyKeys.Add(""Bear"");
				if (BearValue != null)
				{
					var convertedValue = global::System.Convert.ChangeType(BearValue, typeof(global::MyApp.Animal));
					Bear = (global::MyApp.Animal)convertedValue;
				}
			}
			else if (previousKeys.Contains(""Bear""))
			{
				// Clear property if it was set before but not in current query
				// Property is not nullable, skipping clear
			}

		}

		private global::System.Collections.Generic.HashSet<string>? _queryPropertyKeys;
	}
}
";

		Assert.That(generatedSource, Is.EqualTo(expectedOutput), "Generated source should match expected output exactly");
	}

	[Test]
	public void DocumentationExample_ElephantDetailPage()
	{
		// Example from: https://learn.microsoft.com/en-us/dotnet/maui/fundamentals/shell/navigation
		var sourceCode = @"
using Microsoft.Maui.Controls;

namespace MyApp
{
	[QueryProperty(nameof(Name), ""name"")]
	[QueryProperty(nameof(Location), ""location"")]
	public partial class ElephantDetailPage : ContentPage
	{
		public string Name
		{
			set
			{
				// Custom logic
			}
		}

		public string Location
		{
			set
			{
				// Custom logic
			}
		}
	}
}";

		var compilation = SourceGeneratorDriver.CreateMauiCompilation();
		compilation = compilation.AddSyntaxTrees(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxTree.ParseText(sourceCode));

		var result = SourceGeneratorDriver.RunGenerator<QueryPropertyGenerator>(compilation);

		Assert.That(result.Diagnostics, Is.Empty, "Generator should not produce diagnostics");
		Assert.That(result.GeneratedTrees.Length, Is.EqualTo(1), "Should generate exactly one file");

		var generatedSource = result.GeneratedTrees[0].ToString();

		// Verify full generated output for documentation example
		var expectedOutput = @"
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a .NET MAUI source generator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable

using System;
using System.Collections.Generic;

namespace MyApp
{
	partial class ElephantDetailPage : global::Microsoft.Maui.Controls.IQueryAttributable
	{
		/// <summary>
		/// Applies query attributes from navigation parameters.
		/// This method is generated by the QueryPropertyGenerator.
		/// </summary>
		void global::Microsoft.Maui.Controls.IQueryAttributable.ApplyQueryAttributes(global::System.Collections.Generic.IDictionary<string, object> query)
		{
			if (query == null)
				return;

			// Track which properties were set in previous navigation
			var previousKeys = _queryPropertyKeys ?? new global::System.Collections.Generic.HashSet<string>();
			_queryPropertyKeys = new global::System.Collections.Generic.HashSet<string>();

			if (query.TryGetValue(""name"", out var nameValue))
			{
				_queryPropertyKeys.Add(""name"");
				if (nameValue != null)
					Name = global::System.Net.WebUtility.UrlDecode(nameValue.ToString());
				else
					Name = null;
			}
			else if (previousKeys.Contains(""name""))
			{
				// Clear property if it was set before but not in current query
				Name = default;
			}

			if (query.TryGetValue(""location"", out var locationValue))
			{
				_queryPropertyKeys.Add(""location"");
				if (locationValue != null)
					Location = global::System.Net.WebUtility.UrlDecode(locationValue.ToString());
				else
					Location = null;
			}
			else if (previousKeys.Contains(""location""))
			{
				// Clear property if it was set before but not in current query
				Location = default;
			}

		}

		private global::System.Collections.Generic.HashSet<string>? _queryPropertyKeys;
	}
}
";

		Assert.That(generatedSource, Is.EqualTo(expectedOutput), "Generated source should match expected output exactly");
	}

	[Test]
	public void PropertyNotFound_GeneratesNothing()
	{
		var sourceCode = @"
using Microsoft.Maui.Controls;

namespace MyApp
{
	[QueryProperty(""NonExistentProperty"", ""name"")]
	public partial class MyPage : ContentPage
	{
	}
}";

		var compilation = SourceGeneratorDriver.CreateMauiCompilation();
		compilation = compilation.AddSyntaxTrees(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxTree.ParseText(sourceCode));

		var result = SourceGeneratorDriver.RunGenerator<QueryPropertyGenerator>(compilation);

		// Should generate diagnostic for non-existent property
		Assert.That(result.Diagnostics, Is.Not.Empty, "Should produce diagnostic for non-existent property");
		Assert.That(result.Diagnostics.Any(d => d.Id == "MAUI1201"), Is.True, "Should produce MAUI1201 diagnostic");

		// Should not generate source for non-existent properties
		Assert.That(result.GeneratedTrees.Length, Is.EqualTo(0));
	}

	[Test]
	public void NullableStringProperty_GeneratesCorrectImplementation()
	{
		var sourceCode = @"
#nullable enable
using Microsoft.Maui.Controls;

namespace MyApp
{
	[QueryProperty(nameof(Name), ""name"")]
	public partial class MyPage : ContentPage
	{
		public string? Name { get; set; }
	}
}";

		var expectedOutput = @"
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a .NET MAUI source generator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable

using System;
using System.Collections.Generic;

namespace MyApp
{
	partial class MyPage : global::Microsoft.Maui.Controls.IQueryAttributable
	{
		/// <summary>
		/// Applies query attributes from navigation parameters.
		/// This method is generated by the QueryPropertyGenerator.
		/// </summary>
		void global::Microsoft.Maui.Controls.IQueryAttributable.ApplyQueryAttributes(global::System.Collections.Generic.IDictionary<string, object> query)
		{
			if (query == null)
				return;

			// Track which properties were set in previous navigation
			var previousKeys = _queryPropertyKeys ?? new global::System.Collections.Generic.HashSet<string>();
			_queryPropertyKeys = new global::System.Collections.Generic.HashSet<string>();

			if (query.TryGetValue(""name"", out var nameValue))
			{
				_queryPropertyKeys.Add(""name"");
				if (nameValue != null)
					Name = global::System.Net.WebUtility.UrlDecode(nameValue.ToString());
				else
					Name = null;
			}
			else if (previousKeys.Contains(""name""))
			{
				// Clear property if it was set before but not in current query
				Name = default;
			}

		}

		private global::System.Collections.Generic.HashSet<string>? _queryPropertyKeys;
	}
}
";

		AssertGeneratedCode(sourceCode, expectedOutput);
	}

	[Test]
	public void NullableIntProperty_GeneratesCorrectImplementation()
	{
		var sourceCode = @"
using Microsoft.Maui.Controls;

namespace MyApp
{
	[QueryProperty(nameof(Count), ""count"")]
	public partial class MyPage : ContentPage
	{
		public int? Count { get; set; }
	}
}";

		var expectedOutput = @"
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a .NET MAUI source generator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable

using System;
using System.Collections.Generic;

namespace MyApp
{
	partial class MyPage : global::Microsoft.Maui.Controls.IQueryAttributable
	{
		/// <summary>
		/// Applies query attributes from navigation parameters.
		/// This method is generated by the QueryPropertyGenerator.
		/// </summary>
		void global::Microsoft.Maui.Controls.IQueryAttributable.ApplyQueryAttributes(global::System.Collections.Generic.IDictionary<string, object> query)
		{
			if (query == null)
				return;

			// Track which properties were set in previous navigation
			var previousKeys = _queryPropertyKeys ?? new global::System.Collections.Generic.HashSet<string>();
			_queryPropertyKeys = new global::System.Collections.Generic.HashSet<string>();

			if (query.TryGetValue(""count"", out var countValue))
			{
				_queryPropertyKeys.Add(""count"");
				if (countValue != null)
				{
					var convertedValue = global::System.Convert.ChangeType(countValue, typeof(int?));
					Count = (int?)convertedValue;
				}
			}
			else if (previousKeys.Contains(""count""))
			{
				// Clear property if it was set before but not in current query
				Count = default;
			}

		}

		private global::System.Collections.Generic.HashSet<string>? _queryPropertyKeys;
	}
}
";

		AssertGeneratedCode(sourceCode, expectedOutput);
	}

	[Test]
	public void ClassWithoutNamespace_GeneratesCorrectImplementation()
	{
		var sourceCode = @"
using Microsoft.Maui.Controls;

[QueryProperty(nameof(Name), ""name"")]
public partial class MyPage : ContentPage
{
	public string Name { get; set; }
}";

		var expectedOutput = @"
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a .NET MAUI source generator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable

using System;
using System.Collections.Generic;

partial class MyPage : global::Microsoft.Maui.Controls.IQueryAttributable
{
	/// <summary>
	/// Applies query attributes from navigation parameters.
	/// This method is generated by the QueryPropertyGenerator.
	/// </summary>
	void global::Microsoft.Maui.Controls.IQueryAttributable.ApplyQueryAttributes(global::System.Collections.Generic.IDictionary<string, object> query)
	{
		if (query == null)
			return;

		// Track which properties were set in previous navigation
		var previousKeys = _queryPropertyKeys ?? new global::System.Collections.Generic.HashSet<string>();
		_queryPropertyKeys = new global::System.Collections.Generic.HashSet<string>();

		if (query.TryGetValue(""name"", out var nameValue))
		{
			_queryPropertyKeys.Add(""name"");
			if (nameValue != null)
				Name = global::System.Net.WebUtility.UrlDecode(nameValue.ToString());
			else
				Name = null;
		}
		else if (previousKeys.Contains(""name""))
		{
			// Clear property if it was set before but not in current query
			Name = default;
		}

	}

	private global::System.Collections.Generic.HashSet<string>? _queryPropertyKeys;
}
";

		AssertGeneratedCode(sourceCode, expectedOutput);
	}

	[Test]
	public void HandlesPropertyClearing()
	{
		var sourceCode = @"
using Microsoft.Maui.Controls;

namespace MyApp
{
	[QueryProperty(nameof(Name), ""name"")]
	public partial class MyPage : ContentPage
	{
		public string Name { get; set; }
	}
}";

		var expectedOutput = @"
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a .NET MAUI source generator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable

using System;
using System.Collections.Generic;

namespace MyApp
{
	partial class MyPage : global::Microsoft.Maui.Controls.IQueryAttributable
	{
		/// <summary>
		/// Applies query attributes from navigation parameters.
		/// This method is generated by the QueryPropertyGenerator.
		/// </summary>
		void global::Microsoft.Maui.Controls.IQueryAttributable.ApplyQueryAttributes(global::System.Collections.Generic.IDictionary<string, object> query)
		{
			if (query == null)
				return;

			// Track which properties were set in previous navigation
			var previousKeys = _queryPropertyKeys ?? new global::System.Collections.Generic.HashSet<string>();
			_queryPropertyKeys = new global::System.Collections.Generic.HashSet<string>();

			if (query.TryGetValue(""name"", out var nameValue))
			{
				_queryPropertyKeys.Add(""name"");
				if (nameValue != null)
					Name = global::System.Net.WebUtility.UrlDecode(nameValue.ToString());
				else
					Name = null;
			}
			else if (previousKeys.Contains(""name""))
			{
				// Clear property if it was set before but not in current query
				Name = default;
			}

		}

		private global::System.Collections.Generic.HashSet<string>? _queryPropertyKeys;
	}
}
";

		AssertGeneratedCode(sourceCode, expectedOutput);
	}

	[Test]
	public void GeneratedCode_CompilesSuccessfully()
	{
		var sourceCode = @"
using Microsoft.Maui.Controls;

namespace MyApp
{
	[QueryProperty(nameof(Name), ""name"")]
	public partial class TestPage : ContentPage
	{
		public string Name { get; set; }
	}
}";

		var compilation = SourceGeneratorDriver.CreateMauiCompilation();
		compilation = compilation.AddSyntaxTrees(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxTree.ParseText(sourceCode));

		var result = SourceGeneratorDriver.RunGenerator<QueryPropertyGenerator>(compilation);

		Assert.That(result.Diagnostics, Is.Empty, "Generator should not produce diagnostics");
		Assert.That(result.GeneratedTrees.Length, Is.EqualTo(1), "Should generate exactly one file");

		// Add the generated source to the compilation and verify it compiles
		compilation = compilation.AddSyntaxTrees(result.GeneratedTrees[0]);

		var compilationDiagnostics = compilation.GetDiagnostics();
		var errors = compilationDiagnostics.Where(d => d.Severity == Microsoft.CodeAnalysis.DiagnosticSeverity.Error).ToArray();

		Assert.That(errors, Is.Empty, $"Generated code should compile without errors. Errors: {string.Join(Environment.NewLine, errors.Select(e => e.ToString()))}");
	}
}
