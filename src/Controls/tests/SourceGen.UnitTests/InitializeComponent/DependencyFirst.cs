using System;
using System.IO;
using System.Linq;
using NUnit.Framework;

namespace Microsoft.Maui.Controls.SourceGen.UnitTests;

public class DependencyFirst : SourceGenXamlInitializeComponentTestBase
{
	[Test]
	public void InflateusingTreeOrder()
	{
		var xaml =
"""
<?xml version="1.0" encoding="UTF-8"?>
<ContentPage
	xmlns="http://schemas.microsoft.com/dotnet/2021/maui"
	xmlns:x="http://schemas.microsoft.com/winfx/2009/xaml"
	xmlns:local="clr-namespace:Test"
	x:Class="Test.TestPage">
	<ContentPage.Resources>
		<local:ReverseConverter x:Key="reverseConverter" />
	</ContentPage.Resources>
	<ListView>
		<ListView.ItemTemplate>
			<DataTemplate>
				<TextCell Text="{Binding ., Converter={StaticResource reverseConverter}}" />
			</DataTemplate>
		</ListView.ItemTemplate>
	</ListView>
</ContentPage>
<!--<ContentPage
	xmlns="http://schemas.microsoft.com/dotnet/2021/maui"
	xmlns:x="http://schemas.microsoft.com/winfx/2009/xaml"
	xmlns:local="clr-namespace:Test"
	x:Class="Test.TestPage"
	ServiceProvider="{local:Foo}"
	Title="Test Page"
	AType="{x:Type Label}"
	Grid.Row="3">
		<ContentPage.Resources>
			<Style TargetType="Button">
				<Setter Property="TextColor" Value="White"></Setter>
			</Style>
			<ResourceDictionary>
				<Color x:Key="red">Red</Color>
			</ResourceDictionary>
			<x:String x:Key="mystring">Hello</x:String>
			<Color x:Key="purple">Purple</Color>
			<Color x:Key="hotpink">HotPink</Color>
		</ContentPage.Resources>
		<StackLayout>
			<Button AutomationProperties.LabeledBy="label" x:Name="MyButton" Text="Hello MAUI!" Clicked="OnMyButtonClicked" Grid.Row="4" BackgroundColor="{StaticResource hotpink}" />
			<Label Text="{Binding Path=labeltext, ConverterParameter={StaticResource notpink}}" BackgroundColor="{StaticResource Primary}"/>

			<ListView x:Name="listView">
				<ListView.ItemsSource>
					<x:Array Type="{x:Type x:String}">
						<x:String>foo</x:String>
						<x:String>bar</x:String>
					</x:Array>
				</ListView.ItemsSource>
			</ListView>
		</StackLayout>
</ContentPage>-->
""";

		var code =
"""
using System;
using Microsoft.Maui.Controls;
using Microsoft.Maui.Controls.Xaml;

namespace Test;

public class ReverseConverter : IValueConverter
{
	public static ReverseConverter Instance = new ReverseConverter();

	public object Convert(object value, Type targetType, object parameter, System.Globalization.CultureInfo culture)
	{
		var s = value as string;
		if (s == null)
			return value;
		return new string(s.Reverse().ToArray());
	}

	public object ConvertBack(object value, Type targetType, object parameter, System.Globalization.CultureInfo culture)
	{
		var s = value as string;
		if (s == null)
			return value;
		return new string(s.Reverse().ToArray());
	}
}

[AcceptEmptyServiceProvider]
public class FooExtension : IMarkupExtension<IServiceProvider>
{
	public IServiceProvider ProvideValue(IServiceProvider serviceProvider)
	{
		return serviceProvider;
	}

	object IMarkupExtension.ProvideValue(IServiceProvider serviceProvider)
	{
		return (this as IMarkupExtension<IServiceProvider>).ProvideValue(serviceProvider);
	}
}

[XamlProcessing(XamlInflator.SourceGen)]
public partial class TestPage : ContentPage
{
	public TestPage()
	{
		InitializeComponent();
	}

	public Type AType { get; set; }
	public IServiceProvider ServiceProvider { get; set; }

	void OnMyButtonClicked(object sender, EventArgs e)
	{
		DisplayAlert("Clicked", "The button was clicked", "OK");
	}
}
""";

		var testXamlFilePath = Path.Combine(Environment.CurrentDirectory, "Test.xaml");
		var expected =
$$"""
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a .NET MAUI source generator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable

namespace Test;

[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Maui.Controls.SourceGen, Version=10.0.0.0, Culture=neutral, PublicKeyToken=null", "10.0.0.0")]
public partial class TestPage
{
	private partial void InitializeComponent()
	{
		var inflator = new TestPageInflator() { __root = this };
		this.ServiceProvider = (IServiceProvider)new global::Test.FooExtension().ProvideValue(null);
		this.SetValue(global::Microsoft.Maui.Controls.Page.TitleProperty, "Test Page");
		this.AType = (global::System.Type)typeof(global::Microsoft.Maui.Controls.Label);
		this.SetValue(global::Microsoft.Maui.Controls.Grid.RowProperty, 3);
		this.Resources.Add(inflator.resourceDictionary);
		this.Resources["mystring"] = "Hello";
		this.Resources["purple"] = global::Microsoft.Maui.Graphics.Colors.Purple;
		this.Resources["hotpink"] = global::Microsoft.Maui.Graphics.Colors.HotPink;
		this.SetValue(global::Microsoft.Maui.Controls.ContentPage.ContentProperty, inflator.stackLayout);

		this.MyButton = inflator.button;
		inflator.button.Clicked += OnMyButtonClicked;
		this.listView = inflator.listView;

	}
}

file ref struct TestPageInflator() {
	public required global::Test.TestPage __root { get; init; }

	
	[field: global::System.Diagnostics.CodeAnalysis.MaybeNull, global::System.Diagnostics.CodeAnalysis.AllowNull]
	public global::Microsoft.Maui.Controls.ResourceDictionary resourceDictionary  {
		get {
			if (field != null)
				return field;
			field = Create(ref this);
			SetProperties(field, ref this);
			return field;

			static global::Microsoft.Maui.Controls.ResourceDictionary Create(ref TestPageInflator inflator) {
				var resourceDictionary1 = new global::Microsoft.Maui.Controls.ResourceDictionary();
				return resourceDictionary1;
			}
			
			static void SetProperties(global::Microsoft.Maui.Controls.ResourceDictionary local, ref TestPageInflator inflator) {
				local["red"] = global::Microsoft.Maui.Graphics.Colors.Red;
			}
		}
	}

	
	[field: global::System.Diagnostics.CodeAnalysis.MaybeNull, global::System.Diagnostics.CodeAnalysis.AllowNull]
	public global::Microsoft.Maui.Controls.Button button  {
		get {
			if (field != null)
				return field;
			field = Create(ref this);
			SetProperties(field, ref this);
			return field;

			static global::Microsoft.Maui.Controls.Button Create(ref TestPageInflator inflator) {
				var button1 = new global::Microsoft.Maui.Controls.Button();
				return button1;
			}
			
			static void SetProperties(global::Microsoft.Maui.Controls.Button local, ref TestPageInflator inflator) {
				var xamlServiceProvider = new global::Microsoft.Maui.Controls.Xaml.Internals.XamlServiceProvider(inflator.__root);
				var iProvideValueTarget = new global::Microsoft.Maui.Controls.Xaml.Internals.SimpleValueTargetProvider(
					new object?[] {inflator.button, inflator.stackLayout, inflator.__root},
					Microsoft.Maui.Controls.AutomationProperties.LabeledByProperty,
					null,
					inflator.__root);
				xamlServiceProvider.Add(typeof(global::Microsoft.Maui.Controls.Xaml.IReferenceProvider), iProvideValueTarget);
				xamlServiceProvider.Add(typeof(global::Microsoft.Maui.Controls.Xaml.IProvideValueTarget), iProvideValueTarget);
				local.SetValue(global::Microsoft.Maui.Controls.AutomationProperties.LabeledByProperty, ((global::Microsoft.Maui.Controls.IExtendedTypeConverter)new global::Microsoft.Maui.Controls.ReferenceTypeConverter()).ConvertFromInvariantString("label", xamlServiceProvider) as global::Microsoft.Maui.Controls.VisualElement);
				local.SetValue(global::Microsoft.Maui.Controls.Button.TextProperty, "Hello MAUI!");
				local.SetValue(global::Microsoft.Maui.Controls.Grid.RowProperty, 4);
				local.SetValue(global::Microsoft.Maui.Controls.VisualElement.BackgroundColorProperty, global::Microsoft.Maui.Graphics.Colors.HotPink);
			}
		}
	}

	[field: global::System.Diagnostics.CodeAnalysis.MaybeNull, global::System.Diagnostics.CodeAnalysis.AllowNull]
	public object object0  {
		get {
			if (field != null)
				return field;
			return field = ProvideValue(ref this);

			static object ProvideValue(ref TestPageInflator inflator) {
				var staticResourceExtension = new global::Microsoft.Maui.Controls.Xaml.StaticResourceExtension();
				staticResourceExtension.Key = "notpink";
				var xamlServiceProvider1 = new global::Microsoft.Maui.Controls.Xaml.Internals.XamlServiceProvider(inflator.__root);
				var iProvideValueTarget1 = new global::Microsoft.Maui.Controls.Xaml.Internals.SimpleValueTargetProvider(
					new object?[] {inflator.label, inflator.stackLayout, inflator.__root},
					null,
					null,
					inflator.__root);
				xamlServiceProvider1.Add(typeof(global::Microsoft.Maui.Controls.Xaml.IReferenceProvider), iProvideValueTarget1);
				xamlServiceProvider1.Add(typeof(global::Microsoft.Maui.Controls.Xaml.IProvideValueTarget), iProvideValueTarget1);
				return (object)staticResourceExtension.ProvideValue(xamlServiceProvider1);
			}
		}
	}

	[field: global::System.Diagnostics.CodeAnalysis.MaybeNull, global::System.Diagnostics.CodeAnalysis.AllowNull]
	public object object1  {
		get {
			if (field != null)
				return field;
			return field = ProvideValue(ref this);

			static object ProvideValue(ref TestPageInflator inflator) {
				var staticResourceExtension1 = new global::Microsoft.Maui.Controls.Xaml.StaticResourceExtension();
				staticResourceExtension1.Key = "Primary";
				var xamlServiceProvider2 = new global::Microsoft.Maui.Controls.Xaml.Internals.XamlServiceProvider(inflator.__root);
				var iProvideValueTarget2 = new global::Microsoft.Maui.Controls.Xaml.Internals.SimpleValueTargetProvider(
					new object?[] {inflator.label, inflator.stackLayout, inflator.__root},
					Microsoft.Maui.Controls.VisualElement.BackgroundColorProperty,
					null,
					inflator.__root);
				xamlServiceProvider2.Add(typeof(global::Microsoft.Maui.Controls.Xaml.IReferenceProvider), iProvideValueTarget2);
				xamlServiceProvider2.Add(typeof(global::Microsoft.Maui.Controls.Xaml.IProvideValueTarget), iProvideValueTarget2);
				return (object)staticResourceExtension1.ProvideValue(xamlServiceProvider2);
			}
		}
	}

	
	[field: global::System.Diagnostics.CodeAnalysis.MaybeNull, global::System.Diagnostics.CodeAnalysis.AllowNull]
	public global::Microsoft.Maui.Controls.Label label  {
		get {
			if (field != null)
				return field;
			field = Create(ref this);
			SetProperties(field, ref this);
			return field;

			static global::Microsoft.Maui.Controls.Label Create(ref TestPageInflator inflator) {
				var label1 = new global::Microsoft.Maui.Controls.Label();
				return label1;
			}
			
			static void SetProperties(global::Microsoft.Maui.Controls.Label local, ref TestPageInflator inflator) {
				local.SetBinding(global::Microsoft.Maui.Controls.Label.TextProperty, new global::Microsoft.Maui.Controls.Binding("labeltext", converterParameter: inflator.object0) {});
				local.SetValue(global::Microsoft.Maui.Controls.VisualElement.BackgroundColorProperty, inflator.object1);
			}
		}
	}

	[field: global::System.Diagnostics.CodeAnalysis.MaybeNull, global::System.Diagnostics.CodeAnalysis.AllowNull]
	public string[] stringArray  {
		get {
			if (field != null)
				return field;
			return field = new string[] {
				"foo",
				"bar",
			};
		}
	}

	
	[field: global::System.Diagnostics.CodeAnalysis.MaybeNull, global::System.Diagnostics.CodeAnalysis.AllowNull]
	public global::Microsoft.Maui.Controls.ListView listView  {
		get {
			if (field != null)
				return field;
			field = Create(ref this);
			SetProperties(field, ref this);
			return field;

			static global::Microsoft.Maui.Controls.ListView Create(ref TestPageInflator inflator) {
				var listView1 = new global::Microsoft.Maui.Controls.ListView();
				return listView1;
			}
			
			static void SetProperties(global::Microsoft.Maui.Controls.ListView local, ref TestPageInflator inflator) {
				local.SetValue(global::Microsoft.Maui.Controls.ItemsView<global::Microsoft.Maui.Controls.Cell>.ItemsSourceProperty, inflator.stringArray);
			}
		}
	}

	
	[field: global::System.Diagnostics.CodeAnalysis.MaybeNull, global::System.Diagnostics.CodeAnalysis.AllowNull]
	public global::Microsoft.Maui.Controls.StackLayout stackLayout  {
		get {
			if (field != null)
				return field;
			field = Create(ref this);
			SetProperties(field, ref this);
			return field;

			static global::Microsoft.Maui.Controls.StackLayout Create(ref TestPageInflator inflator) {
				var stackLayout1 = new global::Microsoft.Maui.Controls.StackLayout();
				return stackLayout1;
			}
			
			static void SetProperties(global::Microsoft.Maui.Controls.StackLayout local, ref TestPageInflator inflator) {
				((global::System.Collections.Generic.ICollection<global::Microsoft.Maui.IView>)local.Children).Add((global::Microsoft.Maui.IView)inflator.button);
				((global::System.Collections.Generic.ICollection<global::Microsoft.Maui.IView>)local.Children).Add((global::Microsoft.Maui.IView)inflator.label);
				((global::System.Collections.Generic.ICollection<global::Microsoft.Maui.IView>)local.Children).Add((global::Microsoft.Maui.IView)inflator.listView);
			}
		}
	}

}


""";

		var (result, generated) = RunGenerator(xaml, code, treeOrder: true, dry: true);
		Assert.IsFalse(result.Diagnostics.Any());
		Assert.AreEqual(expected, generated);		 
	}
}
