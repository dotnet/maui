using System;
using System.IO;
using System.Linq;
using NUnit.Framework;

namespace Microsoft.Maui.Controls.SourceGen.UnitTests;

public class LazyOrder : SourceGenXamlInitializeComponentTestBase
{
	[Test]
	public void BasicCase()
	{
		var xaml =
"""
<?xml version="1.0" encoding="UTF-8"?>
<ContentPage
	xmlns="http://schemas.microsoft.com/dotnet/2021/maui"
	xmlns:x="http://schemas.microsoft.com/winfx/2009/xaml"
	x:Class="Test.TestPage"
	x:ClassModifier="Internal">
		<Button x:Name="MyButton" Text="Hello MAUI!" />
</ContentPage>
""";

		var code =
"""
using System;
using Microsoft.Maui.Controls;
using Microsoft.Maui.Controls.Xaml;

namespace Test;

partial class TestPage : ContentPage
{
	public TestPage()
	{
		InitializeComponent();
	}
}
""";

		var testXamlFilePath = Path.Combine(Environment.CurrentDirectory, "Test.xaml");
		var expected =
$$"""
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a .NET MAUI source generator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable

namespace Test;

[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Maui.Controls.SourceGen, Version=10.0.0.0, Culture=neutral, PublicKeyToken=null", "10.0.0.0")]
internal partial class TestPage
{
	private partial void InitializeComponent()
	{
		var inflator = new TestPageInflator() { __root = this };
#if !_MAUIXAML_SG_NAMESCOPE_DISABLE
		global::Microsoft.Maui.Controls.Internals.NameScope.SetNameScope(inflator.__root, inflator.iNameScope);
#endif
		this.SetValue(global::Microsoft.Maui.Controls.ContentPage.ContentProperty, inflator.button);

		this.MyButton = inflator.button;
	}
}

file ref struct TestPageInflator() {
	public required global::Test.TestPage __root { get; init; }
#if !_MAUIXAML_SG_NAMESCOPE_DISABLE
	public global::Microsoft.Maui.Controls.Internals.INameScope iNameScope = new global::Microsoft.Maui.Controls.Internals.NameScope();
#endif

	
	[field: global::System.Diagnostics.CodeAnalysis.MaybeNull, global::System.Diagnostics.CodeAnalysis.AllowNull]
	public global::Microsoft.Maui.Controls.Button button  {
		get {
			if (field != null)
				return field;
			field = Create(ref this);
			SetProperties(field, ref this);

			static global::Microsoft.Maui.Controls.Button Create(ref TestPageInflator inflator) {
				var button1 = new global::Microsoft.Maui.Controls.Button();
#if !_MAUIXAML_SG_NAMESCOPE_DISABLE
				button1.transientNamescope = inflator.iNameScope;
#endif
				return button1;
			}

			static void SetProperties(global::Microsoft.Maui.Controls.Button local, ref TestPageInflator inflator) {
#if !_MAUIXAML_SG_NAMESCOPE_DISABLE
				inflator.iNameScope.RegisterName("MyButton", inflator.button);
#endif
				local.SetValue(global::Microsoft.Maui.Controls.Button.TextProperty, "Hello MAUI!");
			}

			return field;
		}
	}
}

""";

		var (result, generated) = RunGenerator(xaml, code, treeOrder: true, dry: true);
		Assert.IsFalse(result.Diagnostics.Any());

		Assert.AreEqual(expected, generated);
	}

	[Test]
	public void XArray()
	{
		var xaml =
"""
<?xml version="1.0" encoding="UTF-8"?>
<ContentPage
	xmlns="http://schemas.microsoft.com/dotnet/2021/maui"
	xmlns:x="http://schemas.microsoft.com/winfx/2009/xaml"
	x:Class="Test.TestPage">
	<ListView x:Name="listView">
		<ListView.ItemsSource>
			<x:Array Type="{x:Type x:String}">
				<x:String>foo</x:String>
				<x:String>bar</x:String>
			</x:Array>
		</ListView.ItemsSource>
	</ListView>
</ContentPage>
""";

		var code =
"""
using System;
using Microsoft.Maui.Controls;
using Microsoft.Maui.Controls.Xaml;

namespace Test;

partial class TestPage : ContentPage
{
	public TestPage()
	{
		InitializeComponent();
	}
}
""";

		var testXamlFilePath = Path.Combine(Environment.CurrentDirectory, "Test.xaml");
		var expected =
$$"""
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a .NET MAUI source generator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable

namespace Test;

[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Maui.Controls.SourceGen, Version=10.0.0.0, Culture=neutral, PublicKeyToken=null", "10.0.0.0")]
public partial class TestPage
{
	private partial void InitializeComponent()
	{
		var inflator = new TestPageInflator() { __root = this };
#if !_MAUIXAML_SG_NAMESCOPE_DISABLE
		global::Microsoft.Maui.Controls.Internals.NameScope.SetNameScope(inflator.__root, inflator.iNameScope);
#endif
		this.SetValue(global::Microsoft.Maui.Controls.ContentPage.ContentProperty, inflator.listView);

		this.listView = inflator.listView;
	}
}

file ref struct TestPageInflator() {
	public required global::Test.TestPage __root { get; init; }
#if !_MAUIXAML_SG_NAMESCOPE_DISABLE
	public global::Microsoft.Maui.Controls.Internals.INameScope iNameScope = new global::Microsoft.Maui.Controls.Internals.NameScope();
#endif

	[field: global::System.Diagnostics.CodeAnalysis.MaybeNull, global::System.Diagnostics.CodeAnalysis.AllowNull]
	public string[] stringArray  {
		get {
			if (field != null)
				return field;
			return field = new string[] {
				"foo",
				"bar",
			};
		}
	}
	
	[field: global::System.Diagnostics.CodeAnalysis.MaybeNull, global::System.Diagnostics.CodeAnalysis.AllowNull]
	public global::Microsoft.Maui.Controls.ListView listView  {
		get {
			if (field != null)
				return field;
			field = Create(ref this);
			SetProperties(field, ref this);

			static global::Microsoft.Maui.Controls.ListView Create(ref TestPageInflator inflator) {
				var listView1 = new global::Microsoft.Maui.Controls.ListView();
#if !_MAUIXAML_SG_NAMESCOPE_DISABLE
				listView1.transientNamescope = inflator.iNameScope;
#endif
				return listView1;
			}

			static void SetProperties(global::Microsoft.Maui.Controls.ListView local, ref TestPageInflator inflator) {
#if !_MAUIXAML_SG_NAMESCOPE_DISABLE
				inflator.iNameScope.RegisterName("listView", inflator.listView);
#endif
				local.SetValue(global::Microsoft.Maui.Controls.ItemsView<global::Microsoft.Maui.Controls.Cell>.ItemsSourceProperty, inflator.stringArray);
			}

			return field;
		}
	}
}

""";

		var (result, generated) = RunGenerator(xaml, code, treeOrder: true, dry: true);
		Assert.IsFalse(result.Diagnostics.Any());

		Assert.AreEqual(expected, generated);
	}

	[Test]
	public void BindingAndConvertersAndResources()
	{
		var xaml =
"""
<?xml version="1.0" encoding="UTF-8"?>
<ContentPage
	xmlns="http://schemas.microsoft.com/dotnet/2021/maui"
	xmlns:x="http://schemas.microsoft.com/winfx/2009/xaml"
	x:Class="Test.TestPage">
	<ContentPage.Resources>
		<ResourceDictionary>
			<Color x:Key="red">Red</Color>
		</ResourceDictionary>
		<x:String x:Key="mystring">Hello</x:String>
		<Color x:Key="purple">Purple</Color>
		<Color x:Key="hotpink">HotPink</Color>
	</ContentPage.Resources>
	<StackLayout>
		
		<Label Text="{Binding Path=labeltext, ConverterParameter={StaticResource hotpink}}" BackgroundColor="{StaticResource purple}"/>
	</StackLayout>
</ContentPage>
""";

		var code =
"""
using System;
using Microsoft.Maui.Controls;
using Microsoft.Maui.Controls.Xaml;

namespace Test;

partial class TestPage : ContentPage
{
	public TestPage()
	{
		InitializeComponent();
	}
}
""";

		var testXamlFilePath = Path.Combine(Environment.CurrentDirectory, "Test.xaml");
		var expected =
$$"""
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a .NET MAUI source generator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable

namespace Test;

[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Maui.Controls.SourceGen, Version=10.0.0.0, Culture=neutral, PublicKeyToken=null", "10.0.0.0")]
public partial class TestPage
{
	private partial void InitializeComponent()
	{
		var inflator = new TestPageInflator() { __root = this };
#if !_MAUIXAML_SG_NAMESCOPE_DISABLE
		global::Microsoft.Maui.Controls.Internals.NameScope.SetNameScope(inflator.__root, inflator.iNameScope);
#endif
		this.Resources.Add(inflator.resourceDictionary);
		this.Resources["mystring"] = "Hello";
		this.Resources["purple"] = global::Microsoft.Maui.Graphics.Colors.Purple;
		this.Resources["hotpink"] = global::Microsoft.Maui.Graphics.Colors.HotPink;
		this.SetValue(global::Microsoft.Maui.Controls.ContentPage.ContentProperty, inflator.stackLayout);

	}
}

file ref struct TestPageInflator() {
	public required global::Test.TestPage __root { get; init; }
#if !_MAUIXAML_SG_NAMESCOPE_DISABLE
	public global::Microsoft.Maui.Controls.Internals.INameScope iNameScope = new global::Microsoft.Maui.Controls.Internals.NameScope();
#endif

	
	[field: global::System.Diagnostics.CodeAnalysis.MaybeNull, global::System.Diagnostics.CodeAnalysis.AllowNull]
	public global::Microsoft.Maui.Controls.ResourceDictionary resourceDictionary  {
		get {
			if (field != null)
				return field;
			field = Create(ref this);
			SetProperties(field, ref this);

			static global::Microsoft.Maui.Controls.ResourceDictionary Create(ref TestPageInflator inflator) {
				var resourceDictionary1 = new global::Microsoft.Maui.Controls.ResourceDictionary();
				return resourceDictionary1;
			}

			static void SetProperties(global::Microsoft.Maui.Controls.ResourceDictionary local, ref TestPageInflator inflator) {
				local["red"] = global::Microsoft.Maui.Graphics.Colors.Red;
			}

			return field;
		}
	}
	
	[field: global::System.Diagnostics.CodeAnalysis.MaybeNull, global::System.Diagnostics.CodeAnalysis.AllowNull]
	public global::Microsoft.Maui.Controls.Label label  {
		get {
			if (field != null)
				return field;
			field = Create(ref this);
			SetProperties(field, ref this);

			static global::Microsoft.Maui.Controls.Label Create(ref TestPageInflator inflator) {
				var label1 = new global::Microsoft.Maui.Controls.Label();
#if !_MAUIXAML_SG_NAMESCOPE_DISABLE
				label1.transientNamescope = inflator.iNameScope;
#endif
				return label1;
			}

			static void SetProperties(global::Microsoft.Maui.Controls.Label local, ref TestPageInflator inflator) {
				local.SetBinding(global::Microsoft.Maui.Controls.Label.TextProperty, new global::Microsoft.Maui.Controls.Binding("labeltext", converterParameter: global::Microsoft.Maui.Graphics.Colors.HotPink) {});
				local.SetValue(global::Microsoft.Maui.Controls.VisualElement.BackgroundColorProperty, global::Microsoft.Maui.Graphics.Colors.Purple);
			}

			return field;
		}
	}
	
	[field: global::System.Diagnostics.CodeAnalysis.MaybeNull, global::System.Diagnostics.CodeAnalysis.AllowNull]
	public global::Microsoft.Maui.Controls.StackLayout stackLayout  {
		get {
			if (field != null)
				return field;
			field = Create(ref this);
			SetProperties(field, ref this);

			static global::Microsoft.Maui.Controls.StackLayout Create(ref TestPageInflator inflator) {
				var stackLayout1 = new global::Microsoft.Maui.Controls.StackLayout();
#if !_MAUIXAML_SG_NAMESCOPE_DISABLE
				stackLayout1.transientNamescope = inflator.iNameScope;
#endif
				return stackLayout1;
			}

			static void SetProperties(global::Microsoft.Maui.Controls.StackLayout local, ref TestPageInflator inflator) {
				((global::System.Collections.Generic.ICollection<global::Microsoft.Maui.IView>)local.Children).Add((global::Microsoft.Maui.IView)inflator.label);
			}

			return field;
		}
	}
}

""";

		var (result, generated) = RunGenerator(xaml, code, treeOrder: true, dry: true);
		Assert.IsFalse(result.Diagnostics.Any());
		Assert.AreEqual(expected, generated);
	}
	[Test]

	public void StylesAndAppThemeBindingAndVSM()
	{
		var xaml =
"""
<?xml version="1.0" encoding="UTF-8"?>
<ContentPage
	xmlns="http://schemas.microsoft.com/dotnet/2021/maui"
	xmlns:x="http://schemas.microsoft.com/winfx/2009/xaml"
	x:Class="Test.TestPage">
	<ContentPage.Resources>
		<Color x:Key="Primary">#512BD4</Color>
        <Color x:Key="White">White</Color>
        <Style TargetType="Button">
            <Setter Property="TextColor" Value="{AppThemeBinding Light={StaticResource White}, Dark={StaticResource Primary}}" />
		</Style>
	</ContentPage.Resources>
</ContentPage>
""";

		var code =
"""
using System;
using Microsoft.Maui.Controls;
using Microsoft.Maui.Controls.Xaml;

namespace Test;

partial class TestPage : ContentPage
{
	public TestPage()
	{
		InitializeComponent();
	}
}
""";

		var testXamlFilePath = Path.Combine(Environment.CurrentDirectory, "Test.xaml");
		var expected =
$$$"""
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a .NET MAUI source generator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable

namespace Test;

[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Maui.Controls.SourceGen, Version=10.0.0.0, Culture=neutral, PublicKeyToken=null", "10.0.0.0")]
public partial class TestPage
{
	private partial void InitializeComponent()
	{
		var inflator = new TestPageInflator() { __root = this };
#if !_MAUIXAML_SG_NAMESCOPE_DISABLE
		global::Microsoft.Maui.Controls.Internals.NameScope.SetNameScope(inflator.__root, inflator.iNameScope);
#endif
		this.Resources["Primary"] = new global::Microsoft.Maui.Graphics.Color(0.31764707f, 0.16862746f, 0.83137256f, 1f) /* #512BD4 */;
		this.Resources["White"] = global::Microsoft.Maui.Graphics.Colors.White;
		this.Resources.Add(inflator.style);

	}
}

file ref struct TestPageInflator() {
	public required global::Test.TestPage __root { get; init; }
#if !_MAUIXAML_SG_NAMESCOPE_DISABLE
	public global::Microsoft.Maui.Controls.Internals.INameScope iNameScope = new global::Microsoft.Maui.Controls.Internals.NameScope();
#endif

	
	[field: global::System.Diagnostics.CodeAnalysis.MaybeNull, global::System.Diagnostics.CodeAnalysis.AllowNull]
	public global::Microsoft.Maui.Controls.Style style  {
		get {
			if (field != null)
				return field;
			field = Create(ref this);
			SetProperties(field, ref this);

			static global::Microsoft.Maui.Controls.Style Create(ref TestPageInflator inflator) {
				var style2 = new global::Microsoft.Maui.Controls.Style(typeof(global::Microsoft.Maui.Controls.Button));
				return style2;
			}

			static void SetProperties(global::Microsoft.Maui.Controls.Style local, ref TestPageInflator inflator) {
				((global::System.Collections.Generic.ICollection<global::Microsoft.Maui.Controls.Setter>)local.Setters).Add((global::Microsoft.Maui.Controls.Setter)new global::Microsoft.Maui.Controls.Setter {Property = global::Microsoft.Maui.Controls.Button.TextColorProperty, Value = new global::Microsoft.Maui.Controls.AppThemeBinding { Light = global::Microsoft.Maui.Graphics.Colors.White, Dark = new global::Microsoft.Maui.Graphics.Color(0.31764707f, 0.16862746f, 0.83137256f, 1f) /* #512BD4 */ }});
			}

			return field;
		}
	}
}

""";

		var (result, generated) = RunGenerator(xaml, code, treeOrder: true, dry: true);
		Assert.IsFalse(result.Diagnostics.Any());
		Assert.AreEqual(expected, generated);
	}

	[Test]
	public void CustomMarkupsAndConvertersAndEventHandlers()
	{
		var xaml =
"""
<?xml version="1.0" encoding="UTF-8"?>
<ContentPage
	xmlns="http://schemas.microsoft.com/dotnet/2021/maui"
	xmlns:x="http://schemas.microsoft.com/winfx/2009/xaml"
	xmlns:local="clr-namespace:Test"
	x:Class="Test.TestPage"
	EmptyServiceProvider="{local:Foo}"
	ServiceProvider="{local:Bar}">
	<ContentPage.Resources>
		<local:ReverseConverter x:Key="reverseConverter" />
	</ContentPage.Resources>
	<Button x:Name="MyButton" Text="{Binding Converter={StaticResource reverseConverter}}" Clicked="OnClicked" />
</ContentPage>
""";

		var code =
"""
using System;
using Microsoft.Maui.Controls;
using Microsoft.Maui.Controls.Xaml;

namespace Test;

partial class TestPage : ContentPage
{
	public TestPage()
	{
		InitializeComponent();
	}
	public IServiceProvider EmptyServiceProvider { get; set; }
	public IServiceProvider ServiceProvider { get; set; }

	void OnClicked(object sender, EventArgs e)
	{
		DisplayAlert("Clicked", "The button was clicked", "OK");
	}
}

public class ReverseConverter : IValueConverter
{
	public static ReverseConverter Instance = new ReverseConverter();

	public object Convert(object value, Type targetType, object parameter, System.Globalization.CultureInfo culture)
	{
		var s = value as string;
		if (s == null)
			return value;
		return new string(s.Reverse().ToArray());
	}

	public object ConvertBack(object value, Type targetType, object parameter, System.Globalization.CultureInfo culture)
	{
		var s = value as string;
		if (s == null)
			return value;
		return new string(s.Reverse().ToArray());
	}
}

[AcceptEmptyServiceProvider]
public class FooExtension : IMarkupExtension<IServiceProvider>
{
	public IServiceProvider ProvideValue(IServiceProvider serviceProvider)
	{
		return serviceProvider;
	}

	object IMarkupExtension.ProvideValue(IServiceProvider serviceProvider)
	{
		return (this as IMarkupExtension<IServiceProvider>).ProvideValue(serviceProvider);
	}
}

public class BarExtension : IMarkupExtension<IServiceProvider>
{
	public IServiceProvider ProvideValue(IServiceProvider serviceProvider)
	{
		return serviceProvider;
	}

	object IMarkupExtension.ProvideValue(IServiceProvider serviceProvider)
	{
		return (this as IMarkupExtension<IServiceProvider>).ProvideValue(serviceProvider);
	}
}

""";

		var testXamlFilePath = Path.Combine(Environment.CurrentDirectory, "Test.xaml");
		var expected =
$$"""
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a .NET MAUI source generator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable

namespace Test;

[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Maui.Controls.SourceGen, Version=10.0.0.0, Culture=neutral, PublicKeyToken=null", "10.0.0.0")]
public partial class TestPage
{
	private partial void InitializeComponent()
	{
		var inflator = new TestPageInflator() { __root = this };
#if !_MAUIXAML_SG_NAMESCOPE_DISABLE
		global::Microsoft.Maui.Controls.Internals.NameScope.SetNameScope(inflator.__root, inflator.iNameScope);
#endif
		this.EmptyServiceProvider = (IServiceProvider)new global::Test.FooExtension().ProvideValue(null);
		this.ServiceProvider = (IServiceProvider)inflator.iServiceProvider;
		this.Resources["reverseConverter"] = inflator.reverseConverter;
		this.SetValue(global::Microsoft.Maui.Controls.ContentPage.ContentProperty, inflator.button);

		this.MyButton = inflator.button;
		inflator.button.Clicked += OnClicked;
	}
}

file ref struct TestPageInflator() {
	public required global::Test.TestPage __root { get; init; }
#if !_MAUIXAML_SG_NAMESCOPE_DISABLE
	public global::Microsoft.Maui.Controls.Internals.INameScope iNameScope = new global::Microsoft.Maui.Controls.Internals.NameScope();
#endif

	[field: global::System.Diagnostics.CodeAnalysis.MaybeNull, global::System.Diagnostics.CodeAnalysis.AllowNull]
	public IServiceProvider iServiceProvider  {
		get {
			if (field != null)
				return field;
			return field = ProvideValue(ref this);

			static IServiceProvider ProvideValue(ref TestPageInflator inflator) {
				var barExtension = new global::Test.BarExtension();
				var xamlServiceProvider = new global::Microsoft.Maui.Controls.Xaml.Internals.XamlServiceProvider(inflator.__root);
				var iProvideValueTarget = new global::Microsoft.Maui.Controls.Xaml.Internals.SimpleValueTargetProvider(
					new object?[] {inflator.__root},
					typeof(global::Test.TestPage).GetProperty("ServiceProvider"),
					null,
					inflator.__root);
				xamlServiceProvider.Add(typeof(global::Microsoft.Maui.Controls.Xaml.IReferenceProvider), iProvideValueTarget);
				xamlServiceProvider.Add(typeof(global::Microsoft.Maui.Controls.Xaml.IProvideValueTarget), iProvideValueTarget);
				var xmlNamespaceResolver = new global::Microsoft.Maui.Controls.Xaml.Internals.XmlNamespaceResolver();
				xmlNamespaceResolver.Add("__f__", "http://schemas.microsoft.com/dotnet/2021/maui");
				xmlNamespaceResolver.Add("__g__", "http://schemas.microsoft.com/dotnet/maui/global");
				xmlNamespaceResolver.Add("", "http://schemas.microsoft.com/dotnet/2021/maui");
				xmlNamespaceResolver.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
				xmlNamespaceResolver.Add("local", "clr-namespace:Test");
				xamlServiceProvider.Add(typeof(global::Microsoft.Maui.Controls.Xaml.IXamlTypeResolver), new global::Microsoft.Maui.Controls.Xaml.Internals.XamlTypeResolver(xmlNamespaceResolver, typeof(global::Test.TestPage).Assembly));
				return (IServiceProvider)barExtension.ProvideValue(xamlServiceProvider);
			}
		}
	}
	
	[field: global::System.Diagnostics.CodeAnalysis.MaybeNull, global::System.Diagnostics.CodeAnalysis.AllowNull]
	public global::Test.ReverseConverter reverseConverter  {
		get {
			if (field != null)
				return field;
			field = Create(ref this);
			SetProperties(field, ref this);

			static global::Test.ReverseConverter Create(ref TestPageInflator inflator) {
				var reverseConverter1 = new global::Test.ReverseConverter();
				return reverseConverter1;
			}

			static void SetProperties(global::Test.ReverseConverter local, ref TestPageInflator inflator) {
			}

			return field;
		}
	}
	
	[field: global::System.Diagnostics.CodeAnalysis.MaybeNull, global::System.Diagnostics.CodeAnalysis.AllowNull]
	public global::Microsoft.Maui.Controls.Button button  {
		get {
			if (field != null)
				return field;
			field = Create(ref this);
			SetProperties(field, ref this);

			static global::Microsoft.Maui.Controls.Button Create(ref TestPageInflator inflator) {
				var button1 = new global::Microsoft.Maui.Controls.Button();
#if !_MAUIXAML_SG_NAMESCOPE_DISABLE
				button1.transientNamescope = inflator.iNameScope;
#endif
				return button1;
			}

			static void SetProperties(global::Microsoft.Maui.Controls.Button local, ref TestPageInflator inflator) {
#if !_MAUIXAML_SG_NAMESCOPE_DISABLE
				inflator.iNameScope.RegisterName("MyButton", inflator.button);
#endif
				local.SetBinding(global::Microsoft.Maui.Controls.Button.TextProperty, new global::Microsoft.Maui.Controls.Binding(".", converter: inflator.reverseConverter) {});
			}

			return field;
		}
	}
}

""";

		var (result, generated) = RunGenerator(xaml, code, treeOrder: true, dry: true);
		Assert.IsFalse(result.Diagnostics.Any());
		Assert.AreEqual(expected, generated);
	}

	[Test]
	public void ShouldNotFail()
	{
		var xaml =
"""
<?xml version="1.0" encoding="UTF-8"?>
<ContentPage
	xmlns="http://schemas.microsoft.com/dotnet/2021/maui"
	xmlns:x="http://schemas.microsoft.com/winfx/2009/xaml"
	xmlns:local="clr-namespace:Test"
	x:Class="Test.TestPage">
	<ContentPage.Resources>
		<local:ReverseConverter x:Key="reverseConverter" />
		<Style TargetType="Button">
			<Setter Property="TextColor" Value="White"></Setter>
		</Style>
	</ContentPage.Resources>
	<ListView>
		<ListView.ItemTemplate>
			<DataTemplate>
				<TextCell Text="{Binding ., Converter={StaticResource reverseConverter}}" />
			</DataTemplate>
		</ListView.ItemTemplate>
	</ListView>
</ContentPage>
<!--<ContentPage
	xmlns="http://schemas.microsoft.com/dotnet/2021/maui"
	xmlns:x="http://schemas.microsoft.com/winfx/2009/xaml"
	xmlns:local="clr-namespace:Test"
	x:Class="Test.TestPage"
	ServiceProvider="{local:Foo}"
	Title="Test Page"
	AType="{x:Type Label}"
	Grid.Row="3">
		<ContentPage.Resources>
			<Style TargetType="Button">
				<Setter Property="TextColor" Value="White"></Setter>
			</Style>
			<ResourceDictionary>
				<Color x:Key="red">Red</Color>
			</ResourceDictionary>
			<x:String x:Key="mystring">Hello</x:String>
			<Color x:Key="purple">Purple</Color>
			<Color x:Key="hotpink">HotPink</Color>
		</ContentPage.Resources>
		<StackLayout>
			<Button AutomationProperties.LabeledBy="label" x:Name="MyButton" Text="Hello MAUI!" Clicked="OnMyButtonClicked" Grid.Row="4" BackgroundColor="{StaticResource hotpink}" />
			<Label Text="{Binding Path=labeltext, ConverterParameter={StaticResource notpink}}" BackgroundColor="{StaticResource Primary}"/>

			<ListView x:Name="listView">
				<ListView.ItemsSource>
					<x:Array Type="{x:Type x:String}">
						<x:String>foo</x:String>
						<x:String>bar</x:String>
					</x:Array>
				</ListView.ItemsSource>
			</ListView>
		</StackLayout>
</ContentPage>-->
""";

		var code =
"""
using System;
using Microsoft.Maui.Controls;
using Microsoft.Maui.Controls.Xaml;

namespace Test;

public class ReverseConverter : IValueConverter
{
	public static ReverseConverter Instance = new ReverseConverter();

	public object Convert(object value, Type targetType, object parameter, System.Globalization.CultureInfo culture)
	{
		var s = value as string;
		if (s == null)
			return value;
		return new string(s.Reverse().ToArray());
	}

	public object ConvertBack(object value, Type targetType, object parameter, System.Globalization.CultureInfo culture)
	{
		var s = value as string;
		if (s == null)
			return value;
		return new string(s.Reverse().ToArray());
	}
}

[AcceptEmptyServiceProvider]
public class FooExtension : IMarkupExtension<IServiceProvider>
{
	public IServiceProvider ProvideValue(IServiceProvider serviceProvider)
	{
		return serviceProvider;
	}

	object IMarkupExtension.ProvideValue(IServiceProvider serviceProvider)
	{
		return (this as IMarkupExtension<IServiceProvider>).ProvideValue(serviceProvider);
	}
}

public partial class TestPage : ContentPage
{
	public TestPage()
	{
		InitializeComponent();
	}

	public Type AType { get; set; }
	public IServiceProvider ServiceProvider { get; set; }

	void OnMyButtonClicked(object sender, EventArgs e)
	{
		DisplayAlert("Clicked", "The button was clicked", "OK");
	}
}
""";
		var (result, _) = RunGenerator(xaml, code, treeOrder: true, dry: true);
		Assert.IsFalse(result.Diagnostics.Any());
	}
}
