using System;
using System.IO;
using System.Linq;
using Xunit;

namespace Microsoft.Maui.Controls.SourceGen.UnitTests;

public class CompiledBindings : SourceGenXamlInitializeComponentTestBase
{
	[Fact]
	public void CanDetectXDataType()
	{
		var xaml =
"""
<?xml version="1.0" encoding="UTF-8"?>
<ContentPage
	xmlns="http://schemas.microsoft.com/dotnet/2021/maui"
	xmlns:x="http://schemas.microsoft.com/winfx/2009/xaml"
	xmlns:test="clr-namespace:Test"
	x:Class="Test.TestPage"
	x:DataType="test:TestPage"
    Title="{Binding Foo.Bar.Title}"/>
""";

		var code =
"""
#nullable enable
using System;
using Microsoft.Maui.Controls;
using Microsoft.Maui.Controls.Xaml;

namespace Test;

[XamlProcessing(XamlInflator.SourceGen)]
public partial class TestPage : ContentPage
{
	public Foo Foo { get; set; } = new Foo { Bar = new Bar() };

	public TestPage()
	{
		InitializeComponent();
	}
}

public class Foo
{
	public Bar Bar { get; set; }
}

public struct Bar
{
	public string Title { get; set; } = "Title";
}
""";
		var testXamlFilePath = Path.Combine(Environment.CurrentDirectory, "Test.xaml");
		var expected = $$"""

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a .NET MAUI source generator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable

namespace Test;

[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Maui.Controls.SourceGen, Version=10.0.0.0, Culture=neutral, PublicKeyToken=null", "10.0.0.0")]
public partial class TestPage
{
	private partial void InitializeComponent()
	{
		var bindingExtension = new global::Microsoft.Maui.Controls.Xaml.BindingExtension();
		global::Microsoft.Maui.VisualDiagnostics.RegisterSourceInfo(bindingExtension!, new global::System.Uri(@"Test.xaml;assembly=SourceGeneratorDriver.Generated", global::System.UriKind.Relative), 8, 5);
		var __root = this;
		global::Microsoft.Maui.VisualDiagnostics.RegisterSourceInfo(__root!, new global::System.Uri(@"Test.xaml;assembly=SourceGeneratorDriver.Generated", global::System.UriKind.Relative), 2, 2);
#if !_MAUIXAML_SG_NAMESCOPE_DISABLE
		global::Microsoft.Maui.Controls.Internals.INameScope iNameScope = global::Microsoft.Maui.Controls.Internals.NameScope.GetNameScope(__root) ?? new global::Microsoft.Maui.Controls.Internals.NameScope();
#endif
#if !_MAUIXAML_SG_NAMESCOPE_DISABLE
		global::Microsoft.Maui.Controls.Internals.NameScope.SetNameScope(__root, iNameScope);
#endif
#line 8 "{{testXamlFilePath}}"
		bindingExtension.Path = "Foo.Bar.Title";
#line default
		var bindingBase = CreateTypedBindingFrom_bindingExtension(bindingExtension);
		if (global::Microsoft.Maui.VisualDiagnostics.GetSourceInfo(bindingBase!) == null)
			global::Microsoft.Maui.VisualDiagnostics.RegisterSourceInfo(bindingBase!, new global::System.Uri(@"Test.xaml;assembly=SourceGeneratorDriver.Generated", global::System.UriKind.Relative), 8, 5);
		__root.SetBinding(global::Microsoft.Maui.Controls.Page.TitleProperty, bindingBase);
		static global::Microsoft.Maui.Controls.BindingBase CreateTypedBindingFrom_bindingExtension(global::Microsoft.Maui.Controls.Xaml.BindingExtension extension)
{
	return Create(
		getter: static source => source.Foo.Bar.Title,
		extension.Mode,
		extension.Converter,
		extension.ConverterParameter,
		extension.StringFormat,
		extension.Source,
		extension.FallbackValue,
		extension.TargetNullValue);

	[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Maui.Controls.BindingSourceGen, Version=10.0.0.0, Culture=neutral, PublicKeyToken=null", "10.0.0.0")]
	static global::Microsoft.Maui.Controls.BindingBase Create(
		global::System.Func<global::Test.TestPage, string> getter,
		global::Microsoft.Maui.Controls.BindingMode mode = global::Microsoft.Maui.Controls.BindingMode.Default,
		global::Microsoft.Maui.Controls.IValueConverter? converter = null,
		object? converterParameter = null,
		string? stringFormat = null,
		object? source = null,
		object? fallbackValue = null,
		object? targetNullValue = null)
	{
		global::System.Action<global::Test.TestPage, string>? setter = null;
		if (ShouldUseSetter(mode))
		{
				setter = static (source, value) =>
				{
					if (source.Foo.Bar is {} p0)
					{
						p0.Title = value;
					}
				};
		}
		
		var binding = new global::Microsoft.Maui.Controls.Internals.TypedBinding<global::Test.TestPage, string>(
			getter: source => (getter(source), true),
			setter,
			handlers: new global::System.Tuple<global::System.Func<global::Test.TestPage, object?>, string>[]
			{
				new(static source => source, "Foo"),
				new(static source => source.Foo, "Bar"),
				new(static source => source.Foo.Bar, "Title"),
			})
		{
			Mode = mode,
			Converter = converter,
			ConverterParameter = converterParameter,
			StringFormat = stringFormat,
			Source = source,
			FallbackValue = fallbackValue,
			TargetNullValue = targetNullValue
		};
		
		return binding;
	}


	[global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
	static bool ShouldUseSetter(global::Microsoft.Maui.Controls.BindingMode mode)
		=> mode == global::Microsoft.Maui.Controls.BindingMode.OneWayToSource
			|| mode == global::Microsoft.Maui.Controls.BindingMode.TwoWay
			|| mode == global::Microsoft.Maui.Controls.BindingMode.Default;
}
		
	}
}

""";

		var (result, generated) = RunGenerator(xaml, code);
		Assert.False(result.Diagnostics.Any());
		Assert.Equal(expected, generated);
	}
}
