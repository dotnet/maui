using Microsoft.Maui.Controls.BindingSourceGen;
using Xunit;

namespace BindingSourceGen.UnitTests;
public class IntegrationTests
{
	[Fact]
	public void GenerateSimpleBinding()
	{
		var source = """
        using Microsoft.Maui.Controls;
        var label = new Label();
        label.SetBinding(Label.RotationProperty, static (string s) => s.Length);
        """;

		var result = SourceGenHelpers.Run(source);
		Assert.NotNull(result.Binding);

		var id = Math.Abs(result.Binding.Location.GetHashCode());

		AssertExtensions.AssertNoDiagnostics(result);
		AssertExtensions.CodeIsEqual(
			$$"""
            //------------------------------------------------------------------------------
            // <auto-generated>
            //     This code was generated by a .NET MAUI source generator.
            //
            //     Changes to this file may cause incorrect behavior and will be lost if
            //     the code is regenerated.
            // </auto-generated>
            //------------------------------------------------------------------------------
            #nullable enable

            namespace System.Runtime.CompilerServices
            {
                using System;
                using System.CodeDom.Compiler;

                {{BindingCodeWriter.GeneratedCodeAttribute}}
                [AttributeUsage(AttributeTargets.Method, AllowMultiple = true)]
                file sealed class InterceptsLocationAttribute : Attribute
                {
                    public InterceptsLocationAttribute(string filePath, int line, int column)
                    {
                        FilePath = filePath;
                        Line = line;
                        Column = column;
                    }

                    public string FilePath { get; }
                    public int Line { get; }
                    public int Column { get; }
                }
            }

            namespace Microsoft.Maui.Controls.Generated
            {
                using System;
                using System.CodeDom.Compiler;
                using System.Runtime.CompilerServices;
                using Microsoft.Maui.Controls.Internals;

                internal static partial class GeneratedBindingInterceptors
                {
            
                    {{BindingCodeWriter.GeneratedCodeAttribute}}
                    [InterceptsLocationAttribute(@"Path\To\Program.cs", 3, 7)]
                    public static void SetBinding{{id}}(
                        this BindableObject bindableObject,
                        BindableProperty bindableProperty,
                        Func<string, int> getter,
                        BindingMode mode = BindingMode.Default,
                        IValueConverter? converter = null,
                        object? converterParameter = null,
                        string? stringFormat = null,
                        object? source = null,
                        object? fallbackValue = null,
                        object? targetNullValue = null)
                    {
                        Action<string, int>? setter = null;
                        if (ShouldUseSetter(mode, bindableProperty))
                        {
                            throw new InvalidOperationException("Cannot set value on the source object.");
                        }

                        var binding = new TypedBinding<string, int>(
                            getter: source => (getter(source), true),
                            setter,
                            handlers: new Tuple<Func<string, object?>, string>[]
                            {
                                new(static source => source, "Length"),
                            })
                        {
                            Mode = mode,
                            Converter = converter,
                            ConverterParameter = converterParameter,
                            StringFormat = stringFormat,
                            Source = source,
                            FallbackValue = fallbackValue,
                            TargetNullValue = targetNullValue
                        };
                        bindableObject.SetBinding(bindableProperty, binding);
                    }
                }
            }
            """,
			result.GeneratedFiles["Path-To-Program.cs-GeneratedBindingInterceptors-3-7.g.cs"]);
	}

	[Fact]
	public void GenerateSimpleBindingCreate()
	{
		var source = """
        using Microsoft.Maui.Controls;
        var bindingBase = Binding.Create(static (string s) => s.Length);
        """;

		var result = SourceGenHelpers.Run(source);
		AssertExtensions.AssertNoDiagnostics(result);
		Assert.NotNull(result.Binding);

		var id = Math.Abs(result.Binding.Location.GetHashCode());
		AssertExtensions.CodeIsEqual(
			$$"""
            //------------------------------------------------------------------------------
            // <auto-generated>
            //     This code was generated by a .NET MAUI source generator.
            //
            //     Changes to this file may cause incorrect behavior and will be lost if
            //     the code is regenerated.
            // </auto-generated>
            //------------------------------------------------------------------------------
            #nullable enable

            namespace System.Runtime.CompilerServices
            {
                using System;
                using System.CodeDom.Compiler;

                {{BindingCodeWriter.GeneratedCodeAttribute}}
                [AttributeUsage(AttributeTargets.Method, AllowMultiple = true)]
                file sealed class InterceptsLocationAttribute : Attribute
                {
                    public InterceptsLocationAttribute(string filePath, int line, int column)
                    {
                        FilePath = filePath;
                        Line = line;
                        Column = column;
                    }

                    public string FilePath { get; }
                    public int Line { get; }
                    public int Column { get; }
                }
            }

            namespace Microsoft.Maui.Controls.Generated
            {
                using System;
                using System.CodeDom.Compiler;
                using System.Runtime.CompilerServices;
                using Microsoft.Maui.Controls.Internals;

                internal static partial class GeneratedBindingInterceptors
                {
            
                    {{BindingCodeWriter.GeneratedCodeAttribute}}
                    [InterceptsLocationAttribute(@"Path\To\Program.cs", 2, 27)]
                    public static BindingBase Create{{id}}(
                        Func<string, int> getter,
                        BindingMode mode = BindingMode.Default,
                        IValueConverter? converter = null,
                        object? converterParameter = null,
                        string? stringFormat = null,
                        object? source = null,
                        object? fallbackValue = null,
                        object? targetNullValue = null)
                    {
                        Action<string, int>? setter = null;
                        if (ShouldUseSetter(mode))
                        {
                            throw new InvalidOperationException("Cannot set value on the source object.");
                        }

                        var binding = new TypedBinding<string, int>(
                            getter: source => (getter(source), true),
                            setter,
                            handlers: new Tuple<Func<string, object?>, string>[]
                            {
                                new(static source => source, "Length"),
                            })
                        {
                            Mode = mode,
                            Converter = converter,
                            ConverterParameter = converterParameter,
                            StringFormat = stringFormat,
                            Source = source,
                            FallbackValue = fallbackValue,
                            TargetNullValue = targetNullValue
                        };
                        return binding;
                    }
                }
            }
            """,
			result.GeneratedFiles["Path-To-Program.cs-GeneratedBindingInterceptors-2-27.g.cs"]);
	}

	[Fact]
	public void IgnoresOtherOtherCreateMethod()
	{
		var source = """
        using System;
        using Microsoft.Maui.Controls.Internals;
        using MyNamespace;
        var bindingBase = MyBinding.Create(static (string s) => s.Length);

        namespace MyNamespace
        {
            public static class MyBinding
            {
                public static TypedBinding<string, int> Create(Func<string, int> getter)
                {
                    throw new NotImplementedException();
                }
            }
        }
        """;

		var result = SourceGenHelpers.Run(source);

		AssertExtensions.AssertNoDiagnostics(result);
		Assert.Null(result.Binding);
	}

	[Fact]
	public void IgnoresOtherBindingCreateMethod()
	{
		var source = """
        using System;
        using MyNamespace;
        var bindingBase = Binding.Create(static (string s) => s.Length);
  
        namespace MyNamespace
        {
            public class Binding
            {
                public static Microsoft.Maui.Controls.BindingBase Create<TSource, TProperty>(
                    Func<TSource, TProperty> getter,
                    Microsoft.Maui.Controls.BindingMode mode = Microsoft.Maui.Controls.BindingMode.Default,
                    Microsoft.Maui.Controls.IValueConverter? converter = null,
                    object? converterParameter = null,
                    string? stringFormat = null,
                    object? source = null,
                    object? fallbackValue = null,
                    object? targetNullValue = null)
                {
                    throw new InvalidOperationException($"Call to Create<{typeof(TSource)}, {typeof(TProperty)}>() was not intercepted.");
                }
            }
        }
        """;

		var result = SourceGenHelpers.Run(source);

		AssertExtensions.AssertNoDiagnostics(result);
		Assert.Null(result.Binding);
	}

	[Fact]
	public void GenerateSimpleBindingWhenNullableDisabledNonNullableValueType()
	{
		var source = """
        #nullable disable
        using Microsoft.Maui.Controls;
        using MyNamespace;

        var label = new Label();
        label.SetBinding(Label.RotationProperty, static (A a) => a.B.C);

        namespace MyNamespace
            {
                public class A
                {
                    public B B { get; set; }
                }

                public class B
                {
                    public int C { get; set; }
                }
            }
        """;

		var result = SourceGenHelpers.Run(source);
		var id = Math.Abs(result.Binding!.Location.GetHashCode());
		AssertExtensions.AssertNoDiagnostics(result);
		AssertExtensions.CodeIsEqual(
			$$"""
            //------------------------------------------------------------------------------
            // <auto-generated>
            //     This code was generated by a .NET MAUI source generator.
            //
            //     Changes to this file may cause incorrect behavior and will be lost if
            //     the code is regenerated.
            // </auto-generated>
            //------------------------------------------------------------------------------
            #nullable enable

            namespace System.Runtime.CompilerServices
            {
                using System;
                using System.CodeDom.Compiler;

                {{BindingCodeWriter.GeneratedCodeAttribute}}
                [AttributeUsage(AttributeTargets.Method, AllowMultiple = true)]
                file sealed class InterceptsLocationAttribute : Attribute
                {
                    public InterceptsLocationAttribute(string filePath, int line, int column)
                    {
                        FilePath = filePath;
                        Line = line;
                        Column = column;
                    }

                    public string FilePath { get; }
                    public int Line { get; }
                    public int Column { get; }
                }
            }

            namespace Microsoft.Maui.Controls.Generated
            {
                using System;
                using System.CodeDom.Compiler;
                using System.Runtime.CompilerServices;
                using Microsoft.Maui.Controls.Internals;

                internal static partial class GeneratedBindingInterceptors
                {
            
                    {{BindingCodeWriter.GeneratedCodeAttribute}}
                    [InterceptsLocationAttribute(@"Path\To\Program.cs", 6, 7)]
                    public static void SetBinding{{id}}(
                        this BindableObject bindableObject,
                        BindableProperty bindableProperty,
                        Func<global::MyNamespace.A?, int> getter,
                        BindingMode mode = BindingMode.Default,
                        IValueConverter? converter = null,
                        object? converterParameter = null,
                        string? stringFormat = null,
                        object? source = null,
                        object? fallbackValue = null,
                        object? targetNullValue = null)
                    {
                        Action<global::MyNamespace.A?, int>? setter = null;
                        if (ShouldUseSetter(mode, bindableProperty))
                        {
                            setter = static (source, value) =>
                            {
                                if (source is {} p0
                                    && p0.B is {} p1)
                                {
                                    p1.C = value;
                                }
                            };
                        }

                        var binding = new TypedBinding<global::MyNamespace.A?, int>(
                            getter: source => (getter(source), true),
                            setter,
                            handlers: new Tuple<Func<global::MyNamespace.A?, object?>, string>[]
                            {
                                new(static source => source, "B"),
                                new(static source => source?.B, "C"),
                            })
                        {
                            Mode = mode,
                            Converter = converter,
                            ConverterParameter = converterParameter,
                            StringFormat = stringFormat,
                            Source = source,
                            FallbackValue = fallbackValue,
                            TargetNullValue = targetNullValue
                        };
                        bindableObject.SetBinding(bindableProperty, binding);
                    }
                }
            }
            """,
			result.GeneratedFiles["Path-To-Program.cs-GeneratedBindingInterceptors-6-7.g.cs"]);
	}

	[Fact]
	public void GenerateSimpleBindingWhenNullableDisabledNonNullableValueTypeWithIndexers()
	{
		var source = """
        #nullable disable
        using Microsoft.Maui.Controls;
        using System.Collections.Generic;
        using MyNamespace;

        var label = new Label();
        label.SetBinding(Label.RotationProperty, static (A a) => a.B[0].C);

        namespace MyNamespace
            {
                public class A
                {
                    public List<B> B { get; set; }
                }

                public class B
                {
                    public int C { get; set; }
                }
            }
        """;

		var result = SourceGenHelpers.Run(source);
		var id = Math.Abs(result.Binding!.Location.GetHashCode());
		AssertExtensions.AssertNoDiagnostics(result);
		AssertExtensions.CodeIsEqual(
			$$"""
            //------------------------------------------------------------------------------
            // <auto-generated>
            //     This code was generated by a .NET MAUI source generator.
            //
            //     Changes to this file may cause incorrect behavior and will be lost if
            //     the code is regenerated.
            // </auto-generated>
            //------------------------------------------------------------------------------
            #nullable enable

            namespace System.Runtime.CompilerServices
            {
                using System;
                using System.CodeDom.Compiler;

                {{BindingCodeWriter.GeneratedCodeAttribute}}
                [AttributeUsage(AttributeTargets.Method, AllowMultiple = true)]
                file sealed class InterceptsLocationAttribute : Attribute
                {
                    public InterceptsLocationAttribute(string filePath, int line, int column)
                    {
                        FilePath = filePath;
                        Line = line;
                        Column = column;
                    }

                    public string FilePath { get; }
                    public int Line { get; }
                    public int Column { get; }
                }
            }

            namespace Microsoft.Maui.Controls.Generated
            {
                using System;
                using System.CodeDom.Compiler;
                using System.Runtime.CompilerServices;
                using Microsoft.Maui.Controls.Internals;

                internal static partial class GeneratedBindingInterceptors
                {
            
                    {{BindingCodeWriter.GeneratedCodeAttribute}}
                    [InterceptsLocationAttribute(@"Path\To\Program.cs", 7, 7)]
                    public static void SetBinding{{id}}(
                        this BindableObject bindableObject,
                        BindableProperty bindableProperty,
                        Func<global::MyNamespace.A?, int> getter,
                        BindingMode mode = BindingMode.Default,
                        IValueConverter? converter = null,
                        object? converterParameter = null,
                        string? stringFormat = null,
                        object? source = null,
                        object? fallbackValue = null,
                        object? targetNullValue = null)
                    {
                        Action<global::MyNamespace.A?, int>? setter = null;
                        if (ShouldUseSetter(mode, bindableProperty))
                        {
                            setter = static (source, value) =>
                            {
                                if (source is {} p0
                                    && p0.B is {} p1
                                    && p1[0] is {} p2)
                                {
                                    p2.C = value;
                                }
                            };
                        }

                        var binding = new TypedBinding<global::MyNamespace.A?, int>(
                            getter: source => (getter(source), true),
                            setter,
                            handlers: new Tuple<Func<global::MyNamespace.A?, object?>, string>[]
                            {
                                new(static source => source, "B"),
                                new(static source => source?.B, "Item"),
                                new(static source => source?.B, "Item[0]"),
                                new(static source => source?.B?[0], "C"),
                            })
                        {
                            Mode = mode,
                            Converter = converter,
                            ConverterParameter = converterParameter,
                            StringFormat = stringFormat,
                            Source = source,
                            FallbackValue = fallbackValue,
                            TargetNullValue = targetNullValue
                        };
                        bindableObject.SetBinding(bindableProperty, binding);
                    }
                }
            }
            """,
			result.GeneratedFiles["Path-To-Program.cs-GeneratedBindingInterceptors-7-7.g.cs"]);
	}

	public static IEnumerable<object[]> GenerateSimpleBindingWhenNullableDisabledAndPropertyNullableData =>
		new List<object[]>
		{
			new object[]
			{
				"""
                // Nullable value type
                #nullable disable
                using Microsoft.Maui.Controls;
                using MyNamespace;

                var label = new Label();
                label.SetBinding(Label.RotationProperty, static (A a) => a.B.C);

                namespace MyNamespace
                    {
                        public class A
                        {
                            public B B { get; set; }
                        }

                        public class B
                        {
                            public C? C { get; set; }
                        }

                        public struct C
                        {

                        }
                    }
                """
			},
			new object[]
			{
				"""
                // Reference Type
                #nullable disable
                using Microsoft.Maui.Controls;
                using MyNamespace;

                var label = new Label();
                label.SetBinding(Label.RotationProperty, static (A a) => a.B.C);

                namespace MyNamespace
                    {
                        public class A
                        {
                            public B B { get; set; }
                        }

                        public class B
                        {
                            public C C { get; set; }
                        }

                        public class C
                        {

                        }
                    }
                """
			},
			new object[]
			{
				"""
                // Conditional access operator
                #nullable disable
                using Microsoft.Maui.Controls;
                using MyNamespace;

                var label = new Label();
                label.SetBinding(Label.RotationProperty, static (A a) => a?.B.C);

                namespace MyNamespace
                    {
                        public class A
                        {
                            public B B { get; set; }
                        }

                        public class B
                        {
                            public C C { get; set; }
                        }

                        public class C
                        {

                        }
                    }
                """
			},
			new object[]
			{
				"""
                // Nullable value type on path
                #nullable disable
                using Microsoft.Maui.Controls;
                using MyNamespace;

                var label = new Label();
                label.SetBinding(Label.RotationProperty, static (A a) => a.B?.C);

                namespace MyNamespace
                    {
                        public class A
                        {
                            public B? B { get; set; }
                        }

                        public struct B
                        {
                            public C C { get; set; }
                        }

                        public class C
                        {

                        }
                    }
                """
			},
		};

	[Theory]
	[MemberData(nameof(GenerateSimpleBindingWhenNullableDisabledAndPropertyNullableData))]
	public void GenerateSimpleBindingWhenNullableDisabledAndPropertyNullable(string source)
	{
		var result = SourceGenHelpers.Run(source);
		var id = Math.Abs(result.Binding!.Location.GetHashCode());
		AssertExtensions.AssertNoDiagnostics(result);
		AssertExtensions.CodeIsEqual(
			$$"""
            //------------------------------------------------------------------------------
            // <auto-generated>
            //     This code was generated by a .NET MAUI source generator.
            //
            //     Changes to this file may cause incorrect behavior and will be lost if
            //     the code is regenerated.
            // </auto-generated>
            //------------------------------------------------------------------------------
            #nullable enable

            namespace System.Runtime.CompilerServices
            {
                using System;
                using System.CodeDom.Compiler;

                {{BindingCodeWriter.GeneratedCodeAttribute}}
                [AttributeUsage(AttributeTargets.Method, AllowMultiple = true)]
                file sealed class InterceptsLocationAttribute : Attribute
                {
                    public InterceptsLocationAttribute(string filePath, int line, int column)
                    {
                        FilePath = filePath;
                        Line = line;
                        Column = column;
                    }

                    public string FilePath { get; }
                    public int Line { get; }
                    public int Column { get; }
                }
            }

            namespace Microsoft.Maui.Controls.Generated
            {
                using System;
                using System.CodeDom.Compiler;
                using System.Runtime.CompilerServices;
                using Microsoft.Maui.Controls.Internals;

                internal static partial class GeneratedBindingInterceptors
                {
            
                    {{BindingCodeWriter.GeneratedCodeAttribute}}
                    [InterceptsLocationAttribute(@"Path\To\Program.cs", 7, 7)]
                    public static void SetBinding{{id}}(
                        this BindableObject bindableObject,
                        BindableProperty bindableProperty,
                        Func<global::MyNamespace.A?, global::MyNamespace.C?> getter,
                        BindingMode mode = BindingMode.Default,
                        IValueConverter? converter = null,
                        object? converterParameter = null,
                        string? stringFormat = null,
                        object? source = null,
                        object? fallbackValue = null,
                        object? targetNullValue = null)
                    {
                        Action<global::MyNamespace.A?, global::MyNamespace.C?>? setter = null;
                        if (ShouldUseSetter(mode, bindableProperty))
                        {
                            setter = static (source, value) =>
                            {
                                if (source is {} p0
                                    && p0.B is {} p1)
                                {
                                    p1.C = value;
                                }
                            };
                        }

                        var binding = new TypedBinding<global::MyNamespace.A?, global::MyNamespace.C?>(
                            getter: source => (getter(source), true),
                            setter,
                            handlers: new Tuple<Func<global::MyNamespace.A?, object?>, string>[]
                            {
                                new(static source => source, "B"),
                                new(static source => source?.B, "C"),
                            })
                        {
                            Mode = mode,
                            Converter = converter,
                            ConverterParameter = converterParameter,
                            StringFormat = stringFormat,
                            Source = source,
                            FallbackValue = fallbackValue,
                            TargetNullValue = targetNullValue
                        };
                        bindableObject.SetBinding(bindableProperty, binding);
                    }
                }
            }
            """,
			result.GeneratedFiles["Path-To-Program.cs-GeneratedBindingInterceptors-7-7.g.cs"]);
	}

	[Fact]
	public void GenerateSimpleBindingWhenNullableDisabledAndNonNullableValueTypeInPath()
	{
		var source = """
        #nullable disable
        using Microsoft.Maui.Controls;
        using MyNamespace;


        var label = new Label();
        label.SetBinding(Label.RotationProperty, static (A a) => a.B.C.D);

        namespace MyNamespace
            {
                public class A
                {
                    public B B;
                }

                public struct B
                {
                    public C C;

                    public B()
                    {
                        C = null!;
                    }
                }

                public class C
                {
                    public D D { get; set;}
                }

                public class D {

                }
            }
        """;

		var result = SourceGenHelpers.Run(source);
		var id = Math.Abs(result.Binding!.Location.GetHashCode());
		AssertExtensions.AssertNoDiagnostics(result);
		AssertExtensions.CodeIsEqual(
			$$"""
            //------------------------------------------------------------------------------
            // <auto-generated>
            //     This code was generated by a .NET MAUI source generator.
            //
            //     Changes to this file may cause incorrect behavior and will be lost if
            //     the code is regenerated.
            // </auto-generated>
            //------------------------------------------------------------------------------
            #nullable enable

            namespace System.Runtime.CompilerServices
            {
                using System;
                using System.CodeDom.Compiler;

                {{BindingCodeWriter.GeneratedCodeAttribute}}
                [AttributeUsage(AttributeTargets.Method, AllowMultiple = true)]
                file sealed class InterceptsLocationAttribute : Attribute
                {
                    public InterceptsLocationAttribute(string filePath, int line, int column)
                    {
                        FilePath = filePath;
                        Line = line;
                        Column = column;
                    }

                    public string FilePath { get; }
                    public int Line { get; }
                    public int Column { get; }
                }
            }

            namespace Microsoft.Maui.Controls.Generated
            {
                using System;
                using System.CodeDom.Compiler;
                using System.Runtime.CompilerServices;
                using Microsoft.Maui.Controls.Internals;

                internal static partial class GeneratedBindingInterceptors
                {
            
                    {{BindingCodeWriter.GeneratedCodeAttribute}}
                    [InterceptsLocationAttribute(@"Path\To\Program.cs", 7, 7)]
                    public static void SetBinding{{id}}(
                        this BindableObject bindableObject,
                        BindableProperty bindableProperty,
                        Func<global::MyNamespace.A?, global::MyNamespace.D?> getter,
                        BindingMode mode = BindingMode.Default,
                        IValueConverter? converter = null,
                        object? converterParameter = null,
                        string? stringFormat = null,
                        object? source = null,
                        object? fallbackValue = null,
                        object? targetNullValue = null)
                    {
                        Action<global::MyNamespace.A?, global::MyNamespace.D?>? setter = null;
                        if (ShouldUseSetter(mode, bindableProperty))
                        {
                            setter = static (source, value) =>
                            {
                                if (source is {} p0
                                    && p0.B.C is {} p1)
                                {
                                    p1.D = value;
                                }
                            };
                        }

                        var binding = new TypedBinding<global::MyNamespace.A?, global::MyNamespace.D?>(
                            getter: source => (getter(source), true),
                            setter,
                            handlers: new Tuple<Func<global::MyNamespace.A?, object?>, string>[]
                            {
                                new(static source => source, "B"),
                                new(static source => source?.B, "C"),
                                new(static source => source?.B.C, "D"),
                            })
                        {
                            Mode = mode,
                            Converter = converter,
                            ConverterParameter = converterParameter,
                            StringFormat = stringFormat,
                            Source = source,
                            FallbackValue = fallbackValue,
                            TargetNullValue = targetNullValue
                        };
                        bindableObject.SetBinding(bindableProperty, binding);
                    }
                }
            }
            """,
			result.GeneratedFiles["Path-To-Program.cs-GeneratedBindingInterceptors-7-7.g.cs"]);
	}

	[Theory]
	[InlineData("static (MySourceClass s) => (((s.A as X)?.B as Y)?.C as Z)?.D")]
	[InlineData("static (MySourceClass s) => ((Z?)((Y?)((X?)s.A)?.B)?.C)?.D")]
	public void GenerateBindingWithNullableReferenceTypesCasts(string bindingLambda)
	{
		var source = $$"""
            using Microsoft.Maui.Controls;
            using MyNamespace;
            var label = new Label();
            label.SetBinding(Label.TextProperty, {{bindingLambda}});

            namespace MyNamespace
            {
                public class MySourceClass
                {
                    public object? A { get; set; }
                }

                public class X
                {
                    public object? B { get; set; }
                }

                public class Y
                {
                    public object C { get; set; } = null!;
                }

                public class Z
                {
                    public MyPropertyClass D { get; set; } = null!;
                }

                public class MyPropertyClass
                {
                }
            }
            """;

		var result = SourceGenHelpers.Run(source);
		var id = Math.Abs(result.Binding!.Location.GetHashCode());

		AssertExtensions.AssertNoDiagnostics(result);
		AssertExtensions.CodeIsEqual(
			$$"""
            //------------------------------------------------------------------------------
            // <auto-generated>
            //     This code was generated by a .NET MAUI source generator.
            //
            //     Changes to this file may cause incorrect behavior and will be lost if
            //     the code is regenerated.
            // </auto-generated>
            //------------------------------------------------------------------------------
            #nullable enable

            namespace System.Runtime.CompilerServices
            {
                using System;
                using System.CodeDom.Compiler;

                {{BindingCodeWriter.GeneratedCodeAttribute}}
                [AttributeUsage(AttributeTargets.Method, AllowMultiple = true)]
                file sealed class InterceptsLocationAttribute : Attribute
                {
                    public InterceptsLocationAttribute(string filePath, int line, int column)
                    {
                        FilePath = filePath;
                        Line = line;
                        Column = column;
                    }

                    public string FilePath { get; }
                    public int Line { get; }
                    public int Column { get; }
                }
            }

            namespace Microsoft.Maui.Controls.Generated
            {
                using System;
                using System.CodeDom.Compiler;
                using System.Runtime.CompilerServices;
                using Microsoft.Maui.Controls.Internals;

                internal static partial class GeneratedBindingInterceptors
                {

                    {{BindingCodeWriter.GeneratedCodeAttribute}}
                    [InterceptsLocationAttribute(@"Path\To\Program.cs", 4, 7)]
                    public static void SetBinding{{id}}(
                        this BindableObject bindableObject,
                        BindableProperty bindableProperty,
                        Func<global::MyNamespace.MySourceClass, global::MyNamespace.MyPropertyClass?> getter,
                        BindingMode mode = BindingMode.Default,
                        IValueConverter? converter = null,
                        object? converterParameter = null,
                        string? stringFormat = null,
                        object? source = null,
                        object? fallbackValue = null,
                        object? targetNullValue = null)
                    {
                        Action<global::MyNamespace.MySourceClass, global::MyNamespace.MyPropertyClass?>? setter = null;
                        if (ShouldUseSetter(mode, bindableProperty))
                        {
                            setter = static (source, value) =>
                            {
                                if (value is null)
                                {
                                    return;
                                }
                                if (source.A is global::MyNamespace.X p0
                                    && p0.B is global::MyNamespace.Y p1
                                    && p1.C is global::MyNamespace.Z p2)
                                {
                                    p2.D = value;
                                }
                            };
                        }

                        var binding = new TypedBinding<global::MyNamespace.MySourceClass, global::MyNamespace.MyPropertyClass?>(
                            getter: source => (getter(source), true),
                            setter,
                            handlers: new Tuple<Func<global::MyNamespace.MySourceClass, object?>, string>[]
                            {
                                new(static source => source, "A"),
                                new(static source => (source.A as global::MyNamespace.X), "B"),
                                new(static source => ((source.A as global::MyNamespace.X)?.B as global::MyNamespace.Y), "C"),
                                new(static source => (((source.A as global::MyNamespace.X)?.B as global::MyNamespace.Y)?.C as global::MyNamespace.Z), "D"),
                            })
                        {
                            Mode = mode,
                            Converter = converter,
                            ConverterParameter = converterParameter,
                            StringFormat = stringFormat,
                            Source = source,
                            FallbackValue = fallbackValue,
                            TargetNullValue = targetNullValue
                        };

                        bindableObject.SetBinding(bindableProperty, binding);
                    }
                }
            }
            """,
			result.GeneratedFiles["Path-To-Program.cs-GeneratedBindingInterceptors-4-7.g.cs"]);
	}

	[Fact]
	public void GenerateBindingWithNonNullableReferenceTypesCasts()
	{
		var source = $$"""
            using Microsoft.Maui.Controls;
            using MyNamespace;
            var label = new Label();
            label.SetBinding(Label.TextProperty, static (MySourceClass s) => ((Z)((Y)((X)s.A).B).C).D);

            namespace MyNamespace
            {
                public class MySourceClass
                {
                    public object A { get; set; } = null!;
                }

                public class X
                {
                    public object B { get; set; } = null!;
                }

                public class Y
                {
                    public object C { get; set; } = null!;
                }

                public class Z
                {
                    public MyPropertyClass D { get; set; } = null!;
                }

                public class MyPropertyClass
                {
                }
            }
            """;

		var result = SourceGenHelpers.Run(source);
		var id = Math.Abs(result.Binding!.Location.GetHashCode());

		AssertExtensions.AssertNoDiagnostics(result);
		AssertExtensions.CodeIsEqual(
			$$"""
            //------------------------------------------------------------------------------
            // <auto-generated>
            //     This code was generated by a .NET MAUI source generator.
            //
            //     Changes to this file may cause incorrect behavior and will be lost if
            //     the code is regenerated.
            // </auto-generated>
            //------------------------------------------------------------------------------
            #nullable enable

            namespace System.Runtime.CompilerServices
            {
                using System;
                using System.CodeDom.Compiler;

                {{BindingCodeWriter.GeneratedCodeAttribute}}
                [AttributeUsage(AttributeTargets.Method, AllowMultiple = true)]
                file sealed class InterceptsLocationAttribute : Attribute
                {
                    public InterceptsLocationAttribute(string filePath, int line, int column)
                    {
                        FilePath = filePath;
                        Line = line;
                        Column = column;
                    }

                    public string FilePath { get; }
                    public int Line { get; }
                    public int Column { get; }
                }
            }

            namespace Microsoft.Maui.Controls.Generated
            {
                using System;
                using System.CodeDom.Compiler;
                using System.Runtime.CompilerServices;
                using Microsoft.Maui.Controls.Internals;

                internal static partial class GeneratedBindingInterceptors
                {

                    {{BindingCodeWriter.GeneratedCodeAttribute}}
                    [InterceptsLocationAttribute(@"Path\To\Program.cs", 4, 7)]
                    public static void SetBinding{{id}}(
                        this BindableObject bindableObject,
                        BindableProperty bindableProperty,
                        Func<global::MyNamespace.MySourceClass, global::MyNamespace.MyPropertyClass> getter,
                        BindingMode mode = BindingMode.Default,
                        IValueConverter? converter = null,
                        object? converterParameter = null,
                        string? stringFormat = null,
                        object? source = null,
                        object? fallbackValue = null,
                        object? targetNullValue = null)
                    {
                        Action<global::MyNamespace.MySourceClass, global::MyNamespace.MyPropertyClass>? setter = null;
                        if (ShouldUseSetter(mode, bindableProperty))
                        {
                            setter = static (source, value) =>
                            {
                                if (source.A is global::MyNamespace.X p0
                                    && p0.B is global::MyNamespace.Y p1
                                    && p1.C is global::MyNamespace.Z p2)
                                {
                                    p2.D = value;
                                }
                            };
                        }

                        var binding = new TypedBinding<global::MyNamespace.MySourceClass, global::MyNamespace.MyPropertyClass>(
                            getter: source => (getter(source), true),
                            setter,
                            handlers: new Tuple<Func<global::MyNamespace.MySourceClass, object?>, string>[]
                            {
                                new(static source => source, "A"),
                                new(static source => (source.A as global::MyNamespace.X), "B"),
                                new(static source => ((source.A as global::MyNamespace.X)?.B as global::MyNamespace.Y), "C"),
                                new(static source => (((source.A as global::MyNamespace.X)?.B as global::MyNamespace.Y)?.C as global::MyNamespace.Z), "D"),
                            })
                        {
                            Mode = mode,
                            Converter = converter,
                            ConverterParameter = converterParameter,
                            StringFormat = stringFormat,
                            Source = source,
                            FallbackValue = fallbackValue,
                            TargetNullValue = targetNullValue
                        };

                        bindableObject.SetBinding(bindableProperty, binding);
                    }
                }
            }
            """,
			result.GeneratedFiles["Path-To-Program.cs-GeneratedBindingInterceptors-4-7.g.cs"]);
	}

	[Fact]
	public void GenerateBindingWithForcedConditionalAccessAfterCast()
	{
		var source = $$"""
            using Microsoft.Maui.Controls;
            var label = new Label();
            label.SetBinding(Label.TextProperty, static (MyNamespace.A n) => ((MyNamespace.Wrapper)n.X).Wrapped.Y.Value.Length);

            namespace MyNamespace
            {
                public struct A
                {
                    public object X;
                    public B Y;
                }

                public struct B
                {
                    public string Value;
                }

                public class Wrapper
                {
                    public A Wrapped;
                }
            }
            """;

		var result = SourceGenHelpers.Run(source);
		var id = Math.Abs(result.Binding!.Location.GetHashCode());

		AssertExtensions.AssertNoDiagnostics(result);
		AssertExtensions.CodeIsEqual(
			$$"""
            //------------------------------------------------------------------------------
            // <auto-generated>
            //     This code was generated by a .NET MAUI source generator.
            //
            //     Changes to this file may cause incorrect behavior and will be lost if
            //     the code is regenerated.
            // </auto-generated>
            //------------------------------------------------------------------------------
            #nullable enable

            namespace System.Runtime.CompilerServices
            {
                using System;
                using System.CodeDom.Compiler;

                {{BindingCodeWriter.GeneratedCodeAttribute}}
                [AttributeUsage(AttributeTargets.Method, AllowMultiple = true)]
                file sealed class InterceptsLocationAttribute : Attribute
                {
                    public InterceptsLocationAttribute(string filePath, int line, int column)
                    {
                        FilePath = filePath;
                        Line = line;
                        Column = column;
                    }

                    public string FilePath { get; }
                    public int Line { get; }
                    public int Column { get; }
                }
            }

            namespace Microsoft.Maui.Controls.Generated
            {
                using System;
                using System.CodeDom.Compiler;
                using System.Runtime.CompilerServices;
                using Microsoft.Maui.Controls.Internals;

                internal static partial class GeneratedBindingInterceptors
                {
                    {{BindingCodeWriter.GeneratedCodeAttribute}}
                    [InterceptsLocationAttribute(@"Path\To\Program.cs", 3, 7)]
                    public static void SetBinding{{id}}(
                        this BindableObject bindableObject,
                        BindableProperty bindableProperty,
                        Func<global::MyNamespace.A, int> getter,
                        BindingMode mode = BindingMode.Default,
                        IValueConverter? converter = null,
                        object? converterParameter = null,
                        string? stringFormat = null,
                        object? source = null,
                        object? fallbackValue = null,
                        object? targetNullValue = null)
                    {
                        Action<global::MyNamespace.A, int>? setter = null;
                        if (ShouldUseSetter(mode, bindableProperty))
                        {
                            throw new InvalidOperationException("Cannot set value on the source object.");
                        }

                        var binding = new TypedBinding<global::MyNamespace.A, int>(
                            getter: source => (getter(source), true),
                            setter,
                            handlers: new Tuple<Func<global::MyNamespace.A, object?>, string>[]
                            {
                                new(static source => source, "X"),
                                new(static source => (source.X as global::MyNamespace.Wrapper), "Wrapped"),
                                new(static source => (source.X as global::MyNamespace.Wrapper)?.Wrapped, "Y"),
                                new(static source => (source.X as global::MyNamespace.Wrapper)?.Wrapped.Y, "Value"),
                                new(static source => (source.X as global::MyNamespace.Wrapper)?.Wrapped.Y.Value, "Length"),
                            })
                        {
                            Mode = mode,
                            Converter = converter,
                            ConverterParameter = converterParameter,
                            StringFormat = stringFormat,
                            Source = source,
                            FallbackValue = fallbackValue,
                            TargetNullValue = targetNullValue
                        };

                        bindableObject.SetBinding(bindableProperty, binding);
                    }
                }
            }
            """,
			result.GeneratedFiles["Path-To-Program.cs-GeneratedBindingInterceptors-3-7.g.cs"]);
	}

	[Fact]
	public void GenerateBindingWithIndexers()
	{
		var source = """
            using Microsoft.Maui.Controls;
            using System.Runtime.CompilerServices;
            using MyNamespace;

            var label = new Label();
            label.SetBinding(Label.TextProperty, static (MySourceClass s) => (s[12]?["Abc"][0]));

            namespace MyNamespace
            {
                public class MySourceClass
                {
                    public B this[int index] => new B();
                }

                public class B
                {
                    [IndexerName("Indexer")]
                    public MyPropertyClass[] this[string index] => [];
                }

                public class MyPropertyClass
                {

                }

            }
            """;

		var result = SourceGenHelpers.Run(source);
		var id = Math.Abs(result.Binding!.Location.GetHashCode());

		AssertExtensions.AssertNoDiagnostics(result);
		AssertExtensions.CodeIsEqual(
			$$"""
            //------------------------------------------------------------------------------
            // <auto-generated>
            //     This code was generated by a .NET MAUI source generator.
            //
            //     Changes to this file may cause incorrect behavior and will be lost if
            //     the code is regenerated.
            // </auto-generated>
            //------------------------------------------------------------------------------
            #nullable enable

            namespace System.Runtime.CompilerServices
            {
                using System;
                using System.CodeDom.Compiler;

                {{BindingCodeWriter.GeneratedCodeAttribute}}
                [AttributeUsage(AttributeTargets.Method, AllowMultiple = true)]
                file sealed class InterceptsLocationAttribute : Attribute
                {
                    public InterceptsLocationAttribute(string filePath, int line, int column)
                    {
                        FilePath = filePath;
                        Line = line;
                        Column = column;
                    }

                    public string FilePath { get; }
                    public int Line { get; }
                    public int Column { get; }
                }
            }

            namespace Microsoft.Maui.Controls.Generated
            {
                using System;
                using System.CodeDom.Compiler;
                using System.Runtime.CompilerServices;
                using Microsoft.Maui.Controls.Internals;

                internal static partial class GeneratedBindingInterceptors
                {

                    {{BindingCodeWriter.GeneratedCodeAttribute}}
                    [InterceptsLocationAttribute(@"Path\To\Program.cs", 6, 7)]
                    public static void SetBinding{{id}}(
                        this BindableObject bindableObject,
                        BindableProperty bindableProperty,
                        Func<global::MyNamespace.MySourceClass, global::MyNamespace.MyPropertyClass?> getter,
                        BindingMode mode = BindingMode.Default,
                        IValueConverter? converter = null,
                        object? converterParameter = null,
                        string? stringFormat = null,
                        object? source = null,
                        object? fallbackValue = null,
                        object? targetNullValue = null)
                    {
                        Action<global::MyNamespace.MySourceClass, global::MyNamespace.MyPropertyClass?>? setter = null;
                        if (ShouldUseSetter(mode, bindableProperty))
                        {
                            setter = static (source, value) => 
                            {
                                if (value is null)
                                {
                                    return;
                                }

                                if (source[12] is {} p0)
                                {
                                    p0["Abc"][0] = value;
                                }
                            };
                        }

                        var binding = new TypedBinding<global::MyNamespace.MySourceClass, global::MyNamespace.MyPropertyClass?>(
                            getter: source => (getter(source), true),
                            setter,
                            handlers: new Tuple<Func<global::MyNamespace.MySourceClass, object?>, string>[]
                            {
                                new(static source => source, "Item"),
                                new(static source => source, "Item[12]"),
                                new(static source => source[12], "Indexer"),
                                new(static source => source[12], "Indexer[Abc]"),
                                new(static source => source[12]?["Abc"], "Item"),
                                new(static source => source[12]?["Abc"], "Item[0]"),
                            })
                        {
                            Mode = mode,
                            Converter = converter,
                            ConverterParameter = converterParameter,
                            StringFormat = stringFormat,
                            Source = source,
                            FallbackValue = fallbackValue,
                            TargetNullValue = targetNullValue
                        };

                        bindableObject.SetBinding(bindableProperty, binding);
                    }
                }
            }
            """,
			result.GeneratedFiles["Path-To-Program.cs-GeneratedBindingInterceptors-6-7.g.cs"]);
	}

	[Fact]
	public void GenerateBindingReferencingPrivateField()
	{
		var source = """

            using Microsoft.Maui.Controls;
            using MyNamespace;

            var mySourceClass = new MySourceClass();
            mySourceClass.SetBinding();

            namespace MyNamespace
            {
                public class MySourceClass
                {
                    private Button _button = new Button();

                    public void SetBinding()
                    {
                        var entry = new Entry();
                        entry.SetBinding(Entry.TextProperty, static (MySourceClass sc) => sc._button.Text);
                    }
                }
            }
        """;

		var result = SourceGenHelpers.Run(source);
		var id = Math.Abs(result.Binding!.Location.GetHashCode());
		AssertExtensions.AssertNoDiagnostics(result);
		AssertExtensions.CodeIsEqual(
			$$"""
            //------------------------------------------------------------------------------
            // <auto-generated>
            //     This code was generated by a .NET MAUI source generator.
            //
            //     Changes to this file may cause incorrect behavior and will be lost if
            //     the code is regenerated.
            // </auto-generated>
            //------------------------------------------------------------------------------
            #nullable enable

            namespace System.Runtime.CompilerServices
            {
                using System;
                using System.CodeDom.Compiler;

                {{BindingCodeWriter.GeneratedCodeAttribute}}
                [AttributeUsage(AttributeTargets.Method, AllowMultiple = true)]
                file sealed class InterceptsLocationAttribute : Attribute
                {
                    public InterceptsLocationAttribute(string filePath, int line, int column)
                    {
                        FilePath = filePath;
                        Line = line;
                        Column = column;
                    }

                    public string FilePath { get; }
                    public int Line { get; }
                    public int Column { get; }
                }
            }

            namespace Microsoft.Maui.Controls.Generated
            {
                using System;
                using System.CodeDom.Compiler;
                using System.Runtime.CompilerServices;
                using Microsoft.Maui.Controls.Internals;

                internal static partial class GeneratedBindingInterceptors
                {

                    {{BindingCodeWriter.GeneratedCodeAttribute}}
                    [InterceptsLocationAttribute(@"Path\To\Program.cs", 17, 23)]
                    public static void SetBinding{{id}}(
                        this BindableObject bindableObject,
                        BindableProperty bindableProperty,
                        Func<global::MyNamespace.MySourceClass, string> getter,
                        BindingMode mode = BindingMode.Default,
                        IValueConverter? converter = null,
                        object? converterParameter = null,
                        string? stringFormat = null,
                        object? source = null,
                        object? fallbackValue = null,
                        object? targetNullValue = null)
                    {
                        Action<global::MyNamespace.MySourceClass, string>? setter = null;
                        if (ShouldUseSetter(mode, bindableProperty))
                        {
                            setter = static (source, value) =>
                            {
                                GetUnsafeField{{id}}_button(source).Text = value;
                            };
                        }

                        var binding = new TypedBinding<global::MyNamespace.MySourceClass, string>(
                            getter: source => (getter(source), true),
                            setter,
                            handlers: new Tuple<Func<global::MyNamespace.MySourceClass, object?>, string>[]
                            {
                                new(static source => source, "_button"),
                                new(static source => GetUnsafeField{{id}}_button(source), "Text"),
                            })
                        {
                            Mode = mode,
                            Converter = converter,
                            ConverterParameter = converterParameter,
                            StringFormat = stringFormat,
                            Source = source,
                            FallbackValue = fallbackValue,
                            TargetNullValue = targetNullValue
                        };

                        bindableObject.SetBinding(bindableProperty, binding);
                    }

                    [UnsafeAccessor(UnsafeAccessorKind.Field, Name = "_button")]
                    private static extern ref global::Microsoft.Maui.Controls.Button GetUnsafeField{{id}}_button(global::MyNamespace.MySourceClass source);
                }
            }
            """,
	result.GeneratedFiles["Path-To-Program.cs-GeneratedBindingInterceptors-17-23.g.cs"]);
	}

	[Fact]
	public void GenerateBindingReferencingPrivateProperty()
	{
		var source = """

            using Microsoft.Maui.Controls;
            using MyNamespace;

            var mySourceClass = new MySourceClass();
            mySourceClass.SetBinding();

            namespace MyNamespace
            {
                public class MySourceClass
                {
                    private Button Button {get; set;} = new Button();

                    public void SetBinding()
                    {
                        var entry = new Entry();
                        entry.SetBinding(Entry.TextProperty, static (MySourceClass sc) => sc.Button.Text);
                    }
                }
            }
        """;

		var result = SourceGenHelpers.Run(source);
		var id = Math.Abs(result.Binding!.Location.GetHashCode());
		AssertExtensions.AssertNoDiagnostics(result);
		AssertExtensions.CodeIsEqual(
			$$"""
            //------------------------------------------------------------------------------
            // <auto-generated>
            //     This code was generated by a .NET MAUI source generator.
            //
            //     Changes to this file may cause incorrect behavior and will be lost if
            //     the code is regenerated.
            // </auto-generated>
            //------------------------------------------------------------------------------
            #nullable enable

            namespace System.Runtime.CompilerServices
            {
                using System;
                using System.CodeDom.Compiler;

                {{BindingCodeWriter.GeneratedCodeAttribute}}
                [AttributeUsage(AttributeTargets.Method, AllowMultiple = true)]
                file sealed class InterceptsLocationAttribute : Attribute
                {
                    public InterceptsLocationAttribute(string filePath, int line, int column)
                    {
                        FilePath = filePath;
                        Line = line;
                        Column = column;
                    }

                    public string FilePath { get; }
                    public int Line { get; }
                    public int Column { get; }
                }
            }

            namespace Microsoft.Maui.Controls.Generated
            {
                using System;
                using System.CodeDom.Compiler;
                using System.Runtime.CompilerServices;
                using Microsoft.Maui.Controls.Internals;

                internal static partial class GeneratedBindingInterceptors
                {

                    {{BindingCodeWriter.GeneratedCodeAttribute}}
                    [InterceptsLocationAttribute(@"Path\To\Program.cs", 17, 23)]
                    public static void SetBinding{{id}}(
                        this BindableObject bindableObject,
                        BindableProperty bindableProperty,
                        Func<global::MyNamespace.MySourceClass, string> getter,
                        BindingMode mode = BindingMode.Default,
                        IValueConverter? converter = null,
                        object? converterParameter = null,
                        string? stringFormat = null,
                        object? source = null,
                        object? fallbackValue = null,
                        object? targetNullValue = null)
                    {
                        Action<global::MyNamespace.MySourceClass, string>? setter = null;
                        if (ShouldUseSetter(mode, bindableProperty))
                        {
                            setter = static (source, value) =>
                            {
                                GetUnsafeProperty{{id}}Button(source).Text = value;
                            };
                        }

                        var binding = new TypedBinding<global::MyNamespace.MySourceClass, string>(
                            getter: source => (getter(source), true),
                            setter,
                            handlers: new Tuple<Func<global::MyNamespace.MySourceClass, object?>, string>[]
                            {
                                new(static source => source, "Button"),
                                new(static source => GetUnsafeProperty{{id}}Button(source), "Text"),
                            })
                        {
                            Mode = mode,
                            Converter = converter,
                            ConverterParameter = converterParameter,
                            StringFormat = stringFormat,
                            Source = source,
                            FallbackValue = fallbackValue,
                            TargetNullValue = targetNullValue
                        };

                        bindableObject.SetBinding(bindableProperty, binding);
                    }

                    [UnsafeAccessor(UnsafeAccessorKind.Method, Name = "get_Button")]
                    private static extern global::Microsoft.Maui.Controls.Button GetUnsafeProperty{{id}}Button(global::MyNamespace.MySourceClass source);

                    [UnsafeAccessor(UnsafeAccessorKind.Method, Name = "set_Button")]
                    private static extern void SetUnsafeProperty{{id}}Button(global::MyNamespace.MySourceClass source, global::Microsoft.Maui.Controls.Button value);
                }
            }
            """,
	result.GeneratedFiles["Path-To-Program.cs-GeneratedBindingInterceptors-17-23.g.cs"]);
	}

	[Fact]
	public void GenerateBindingWithPrivatePropertySetter()
	{
		var source = """

            using Microsoft.Maui.Controls;
            using MyNamespace;

            var mySourceClass = new MySourceClass();
            mySourceClass.SetBinding();

            namespace MyNamespace
            {
                public class MySourceClass
                {
                    private string Text {get; set;} = "Hello";

                    public void SetBinding()
                    {
                        var entry = new Entry();
                        entry.SetBinding(Entry.TextProperty, static (MySourceClass sc) => sc.Text);
                    }
                }
            }
        """;

		var result = SourceGenHelpers.Run(source);
		var id = Math.Abs(result.Binding!.Location.GetHashCode());
		AssertExtensions.AssertNoDiagnostics(result);
		AssertExtensions.CodeIsEqual(
			$$"""
            //------------------------------------------------------------------------------
            // <auto-generated>
            //     This code was generated by a .NET MAUI source generator.
            //
            //     Changes to this file may cause incorrect behavior and will be lost if
            //     the code is regenerated.
            // </auto-generated>
            //------------------------------------------------------------------------------
            #nullable enable

            namespace System.Runtime.CompilerServices
            {
                using System;
                using System.CodeDom.Compiler;

                {{BindingCodeWriter.GeneratedCodeAttribute}}
                [AttributeUsage(AttributeTargets.Method, AllowMultiple = true)]
                file sealed class InterceptsLocationAttribute : Attribute
                {
                    public InterceptsLocationAttribute(string filePath, int line, int column)
                    {
                        FilePath = filePath;
                        Line = line;
                        Column = column;
                    }

                    public string FilePath { get; }
                    public int Line { get; }
                    public int Column { get; }
                }
            }

            namespace Microsoft.Maui.Controls.Generated
            {
                using System;
                using System.CodeDom.Compiler;
                using System.Runtime.CompilerServices;
                using Microsoft.Maui.Controls.Internals;

                internal static partial class GeneratedBindingInterceptors
                {

                    {{BindingCodeWriter.GeneratedCodeAttribute}}
                    [InterceptsLocationAttribute(@"Path\To\Program.cs", 17, 23)]
                    public static void SetBinding{{id}}(
                        this BindableObject bindableObject,
                        BindableProperty bindableProperty,
                        Func<global::MyNamespace.MySourceClass, string> getter,
                        BindingMode mode = BindingMode.Default,
                        IValueConverter? converter = null,
                        object? converterParameter = null,
                        string? stringFormat = null,
                        object? source = null,
                        object? fallbackValue = null,
                        object? targetNullValue = null)
                    {
                        Action<global::MyNamespace.MySourceClass, string>? setter = null;
                        if (ShouldUseSetter(mode, bindableProperty))
                        {
                            setter = static (source, value) =>
                            {
                                SetUnsafeProperty{{id}}Text(source, value);
                            };
                        }

                        var binding = new TypedBinding<global::MyNamespace.MySourceClass, string>(
                            getter: source => (getter(source), true),
                            setter,
                            handlers: new Tuple<Func<global::MyNamespace.MySourceClass, object?>, string>[]
                            {
                                new(static source => source, "Text"),
                            })
                        {
                            Mode = mode,
                            Converter = converter,
                            ConverterParameter = converterParameter,
                            StringFormat = stringFormat,
                            Source = source,
                            FallbackValue = fallbackValue,
                            TargetNullValue = targetNullValue
                        };

                        bindableObject.SetBinding(bindableProperty, binding);
                    }

                    [UnsafeAccessor(UnsafeAccessorKind.Method, Name = "get_Text")]
                    private static extern string GetUnsafeProperty{{id}}Text(global::MyNamespace.MySourceClass source);

                    [UnsafeAccessor(UnsafeAccessorKind.Method, Name = "set_Text")]
                    private static extern void SetUnsafeProperty{{id}}Text(global::MyNamespace.MySourceClass source, string value);
                }
            }
            """,
	result.GeneratedFiles["Path-To-Program.cs-GeneratedBindingInterceptors-17-23.g.cs"]);
	}

	[Fact]
	public void GenerateBindingWithPrivateReadonlyProperty()
	{
		var source = """

            using Microsoft.Maui.Controls;
            using MyNamespace;

            var mySourceClass = new MySourceClass();
            mySourceClass.SetBinding();

            namespace MyNamespace
            {
                public class MySourceClass
                {
                    private string Text {get;} = "Hello";

                    public void SetBinding()
                    {
                        var entry = new Entry();
                        entry.SetBinding(Entry.TextProperty, static (MySourceClass sc) => sc.Text);
                    }
                }
            }
        """;

		var result = SourceGenHelpers.Run(source);
		var id = Math.Abs(result.Binding!.Location.GetHashCode());
		AssertExtensions.AssertNoDiagnostics(result);
		AssertExtensions.CodeIsEqual(
			$$"""
            //------------------------------------------------------------------------------
            // <auto-generated>
            //     This code was generated by a .NET MAUI source generator.
            //
            //     Changes to this file may cause incorrect behavior and will be lost if
            //     the code is regenerated.
            // </auto-generated>
            //------------------------------------------------------------------------------
            #nullable enable

            namespace System.Runtime.CompilerServices
            {
                using System;
                using System.CodeDom.Compiler;

                {{BindingCodeWriter.GeneratedCodeAttribute}}
                [AttributeUsage(AttributeTargets.Method, AllowMultiple = true)]
                file sealed class InterceptsLocationAttribute : Attribute
                {
                    public InterceptsLocationAttribute(string filePath, int line, int column)
                    {
                        FilePath = filePath;
                        Line = line;
                        Column = column;
                    }

                    public string FilePath { get; }
                    public int Line { get; }
                    public int Column { get; }
                }
            }

            namespace Microsoft.Maui.Controls.Generated
            {
                using System;
                using System.CodeDom.Compiler;
                using System.Runtime.CompilerServices;
                using Microsoft.Maui.Controls.Internals;

                internal static partial class GeneratedBindingInterceptors
                {

                    {{BindingCodeWriter.GeneratedCodeAttribute}}
                    [InterceptsLocationAttribute(@"Path\To\Program.cs", 17, 23)]
                    public static void SetBinding{{id}}(
                        this BindableObject bindableObject,
                        BindableProperty bindableProperty,
                        Func<global::MyNamespace.MySourceClass, string> getter,
                        BindingMode mode = BindingMode.Default,
                        IValueConverter? converter = null,
                        object? converterParameter = null,
                        string? stringFormat = null,
                        object? source = null,
                        object? fallbackValue = null,
                        object? targetNullValue = null)
                    {
                        Action<global::MyNamespace.MySourceClass, string>? setter = null;
                        if (ShouldUseSetter(mode, bindableProperty))
                        {
                            throw new InvalidOperationException("Cannot set value on the source object.");
                        }

                        var binding = new TypedBinding<global::MyNamespace.MySourceClass, string>(
                            getter: source => (getter(source), true),
                            setter,
                            handlers: new Tuple<Func<global::MyNamespace.MySourceClass, object?>, string>[]
                            {
                                new(static source => source, "Text"),
                            })
                        {
                            Mode = mode,
                            Converter = converter,
                            ConverterParameter = converterParameter,
                            StringFormat = stringFormat,
                            Source = source,
                            FallbackValue = fallbackValue,
                            TargetNullValue = targetNullValue
                        };

                        bindableObject.SetBinding(bindableProperty, binding);
                    }

                    [UnsafeAccessor(UnsafeAccessorKind.Method, Name = "get_Text")]
                    private static extern string GetUnsafeProperty{{id}}Text(global::MyNamespace.MySourceClass source);
                }
            }
            """,
	result.GeneratedFiles["Path-To-Program.cs-GeneratedBindingInterceptors-17-23.g.cs"]);
	}
}
