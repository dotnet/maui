#nullable enable
~abstract Microsoft.Maui.ApplicationModel.Permissions.BasePermission.CheckStatusAsync() -> System.Threading.Tasks.Task<Microsoft.Maui.ApplicationModel.PermissionStatus>
~abstract Microsoft.Maui.ApplicationModel.Permissions.BasePermission.RequestAsync() -> System.Threading.Tasks.Task<Microsoft.Maui.ApplicationModel.PermissionStatus>
~Microsoft.Maui.ApplicationModel.Communication.Contact.Contact(string id, string namePrefix, string givenName, string middleName, string familyName, string nameSuffix, System.Collections.Generic.IEnumerable<Microsoft.Maui.ApplicationModel.Communication.ContactPhone> phones, System.Collections.Generic.IEnumerable<Microsoft.Maui.ApplicationModel.Communication.ContactEmail> email, string displayName = null) -> void
~Microsoft.Maui.ApplicationModel.Communication.Contact.DisplayName.get -> string
~Microsoft.Maui.ApplicationModel.Communication.Contact.Emails.get -> System.Collections.Generic.List<Microsoft.Maui.ApplicationModel.Communication.ContactEmail>
~Microsoft.Maui.ApplicationModel.Communication.Contact.Emails.set -> void
~Microsoft.Maui.ApplicationModel.Communication.Contact.FamilyName.get -> string
~Microsoft.Maui.ApplicationModel.Communication.Contact.FamilyName.set -> void
~Microsoft.Maui.ApplicationModel.Communication.Contact.GivenName.get -> string
~Microsoft.Maui.ApplicationModel.Communication.Contact.GivenName.set -> void
~Microsoft.Maui.ApplicationModel.Communication.Contact.Id.get -> string
~Microsoft.Maui.ApplicationModel.Communication.Contact.Id.set -> void
~Microsoft.Maui.ApplicationModel.Communication.Contact.MiddleName.get -> string
~Microsoft.Maui.ApplicationModel.Communication.Contact.MiddleName.set -> void
~Microsoft.Maui.ApplicationModel.Communication.Contact.NamePrefix.get -> string
~Microsoft.Maui.ApplicationModel.Communication.Contact.NamePrefix.set -> void
~Microsoft.Maui.ApplicationModel.Communication.Contact.NameSuffix.get -> string
~Microsoft.Maui.ApplicationModel.Communication.Contact.NameSuffix.set -> void
~Microsoft.Maui.ApplicationModel.Communication.Contact.Phones.get -> System.Collections.Generic.List<Microsoft.Maui.ApplicationModel.Communication.ContactPhone>
~Microsoft.Maui.ApplicationModel.Communication.Contact.Phones.set -> void
~Microsoft.Maui.ApplicationModel.Communication.ContactEmail.ContactEmail(string emailAddress) -> void
~Microsoft.Maui.ApplicationModel.Communication.ContactEmail.EmailAddress.get -> string
~Microsoft.Maui.ApplicationModel.Communication.ContactEmail.EmailAddress.set -> void
~Microsoft.Maui.ApplicationModel.Communication.ContactPhone.ContactPhone(string phoneNumber) -> void
~Microsoft.Maui.ApplicationModel.Communication.ContactPhone.PhoneNumber.get -> string
~Microsoft.Maui.ApplicationModel.Communication.ContactPhone.PhoneNumber.set -> void
~Microsoft.Maui.ApplicationModel.FeatureNotEnabledException.FeatureNotEnabledException(string message, System.Exception innerException) -> void
~Microsoft.Maui.ApplicationModel.FeatureNotEnabledException.FeatureNotEnabledException(string message) -> void
~Microsoft.Maui.ApplicationModel.FeatureNotSupportedException.FeatureNotSupportedException(string message, System.Exception innerException) -> void
~Microsoft.Maui.ApplicationModel.FeatureNotSupportedException.FeatureNotSupportedException(string message) -> void
~Microsoft.Maui.ApplicationModel.MapLaunchOptions.Name.get -> string
~Microsoft.Maui.ApplicationModel.MapLaunchOptions.Name.set -> void
~Microsoft.Maui.ApplicationModel.PermissionException.PermissionException(string message) -> void
~Microsoft.Maui.Authentication.WebAuthenticatorResult.AccessToken.get -> string
~Microsoft.Maui.Authentication.WebAuthenticatorResult.CallbackUri.get -> System.Uri
~Microsoft.Maui.Authentication.WebAuthenticatorResult.Get(string key) -> string
~Microsoft.Maui.Authentication.WebAuthenticatorResult.IdToken.get -> string
~Microsoft.Maui.Authentication.WebAuthenticatorResult.Properties.get -> System.Collections.Generic.Dictionary<string, string>
~Microsoft.Maui.Authentication.WebAuthenticatorResult.Properties.set -> void
~Microsoft.Maui.Authentication.WebAuthenticatorResult.Put(string key, string value) -> void
~Microsoft.Maui.Authentication.WebAuthenticatorResult.RefreshToken.get -> string
~Microsoft.Maui.Authentication.WebAuthenticatorResult.WebAuthenticatorResult(System.Collections.Generic.IDictionary<string, string> properties) -> void
~Microsoft.Maui.Authentication.WebAuthenticatorResult.WebAuthenticatorResult(System.Uri uri, Microsoft.Maui.Authentication.IWebAuthenticatorResponseDecoder responseDecoder) -> void
~Microsoft.Maui.Authentication.WebAuthenticatorResult.WebAuthenticatorResult(System.Uri uri) -> void
~Microsoft.Maui.Devices.Sensors.Location.Location(Microsoft.Maui.Devices.Sensors.Location point) -> void
~Microsoft.Maui.Devices.Sensors.Placemark.AdminArea.get -> string
~Microsoft.Maui.Devices.Sensors.Placemark.AdminArea.set -> void
~Microsoft.Maui.Devices.Sensors.Placemark.CountryCode.get -> string
~Microsoft.Maui.Devices.Sensors.Placemark.CountryCode.set -> void
~Microsoft.Maui.Devices.Sensors.Placemark.CountryName.get -> string
~Microsoft.Maui.Devices.Sensors.Placemark.CountryName.set -> void
~Microsoft.Maui.Devices.Sensors.Placemark.FeatureName.get -> string
~Microsoft.Maui.Devices.Sensors.Placemark.FeatureName.set -> void
~Microsoft.Maui.Devices.Sensors.Placemark.Locality.get -> string
~Microsoft.Maui.Devices.Sensors.Placemark.Locality.set -> void
~Microsoft.Maui.Devices.Sensors.Placemark.Location.get -> Microsoft.Maui.Devices.Sensors.Location
~Microsoft.Maui.Devices.Sensors.Placemark.Location.set -> void
~Microsoft.Maui.Devices.Sensors.Placemark.Placemark(Microsoft.Maui.Devices.Sensors.Placemark placemark) -> void
~Microsoft.Maui.Devices.Sensors.Placemark.PostalCode.get -> string
~Microsoft.Maui.Devices.Sensors.Placemark.PostalCode.set -> void
~Microsoft.Maui.Devices.Sensors.Placemark.SubAdminArea.get -> string
~Microsoft.Maui.Devices.Sensors.Placemark.SubAdminArea.set -> void
~Microsoft.Maui.Devices.Sensors.Placemark.SubLocality.get -> string
~Microsoft.Maui.Devices.Sensors.Placemark.SubLocality.set -> void
~Microsoft.Maui.Devices.Sensors.Placemark.SubThoroughfare.get -> string
~Microsoft.Maui.Devices.Sensors.Placemark.SubThoroughfare.set -> void
~Microsoft.Maui.Devices.Sensors.Placemark.Thoroughfare.get -> string
~Microsoft.Maui.Devices.Sensors.Placemark.Thoroughfare.set -> void
~Microsoft.Maui.Networking.ConnectivityChangedEventArgs.ConnectionProfiles.get -> System.Collections.Generic.IEnumerable<Microsoft.Maui.Networking.ConnectionProfile>
~Microsoft.Maui.Networking.ConnectivityChangedEventArgs.ConnectivityChangedEventArgs(Microsoft.Maui.Networking.NetworkAccess access, System.Collections.Generic.IEnumerable<Microsoft.Maui.Networking.ConnectionProfile> connectionProfiles) -> void
~Microsoft.Maui.Networking.IConnectivity.ConnectionProfiles.get -> System.Collections.Generic.IEnumerable<Microsoft.Maui.Networking.ConnectionProfile>
~override Microsoft.Maui.ApplicationModel.Communication.Contact.ToString() -> string
~override Microsoft.Maui.ApplicationModel.Communication.ContactEmail.ToString() -> string
~override Microsoft.Maui.ApplicationModel.Communication.ContactPhone.ToString() -> string
~override Microsoft.Maui.ApplicationModel.Permissions.BasePlatformPermission.CheckStatusAsync() -> System.Threading.Tasks.Task<Microsoft.Maui.ApplicationModel.PermissionStatus>
~override Microsoft.Maui.ApplicationModel.Permissions.BasePlatformPermission.RequestAsync() -> System.Threading.Tasks.Task<Microsoft.Maui.ApplicationModel.PermissionStatus>
~override Microsoft.Maui.ApplicationModel.Permissions.Camera.RequiredPrivileges.get -> (string tizenPrivilege, bool isRuntime)[]
~override Microsoft.Maui.ApplicationModel.Permissions.ContactsRead.RequiredPrivileges.get -> (string tizenPrivilege, bool isRuntime)[]
~override Microsoft.Maui.ApplicationModel.Permissions.ContactsWrite.RequiredPrivileges.get -> (string tizenPrivilege, bool isRuntime)[]
~override Microsoft.Maui.ApplicationModel.Permissions.Flashlight.RequiredPrivileges.get -> (string tizenPrivilege, bool isRuntime)[]
~override Microsoft.Maui.ApplicationModel.Permissions.LaunchApp.RequiredPrivileges.get -> (string tizenPrivilege, bool isRuntime)[]
~override Microsoft.Maui.ApplicationModel.Permissions.LocationAlways.RequiredPrivileges.get -> (string tizenPrivilege, bool isRuntime)[]
~override Microsoft.Maui.ApplicationModel.Permissions.LocationWhenInUse.RequiredPrivileges.get -> (string tizenPrivilege, bool isRuntime)[]
~override Microsoft.Maui.ApplicationModel.Permissions.Maps.RequiredPrivileges.get -> (string tizenPrivilege, bool isRuntime)[]
~override Microsoft.Maui.ApplicationModel.Permissions.Microphone.RequiredPrivileges.get -> (string tizenPrivilege, bool isRuntime)[]
~override Microsoft.Maui.ApplicationModel.Permissions.NetworkState.RequiredPrivileges.get -> (string tizenPrivilege, bool isRuntime)[]
~override Microsoft.Maui.ApplicationModel.Permissions.StorageRead.RequiredPrivileges.get -> (string tizenPrivilege, bool isRuntime)[]
~override Microsoft.Maui.ApplicationModel.Permissions.StorageWrite.RequiredPrivileges.get -> (string tizenPrivilege, bool isRuntime)[]
~override Microsoft.Maui.ApplicationModel.Permissions.Vibrate.RequiredPrivileges.get -> (string tizenPrivilege, bool isRuntime)[]
~override Microsoft.Maui.Devices.DeviceIdiom.Equals(object obj) -> bool
~override Microsoft.Maui.Devices.DeviceIdiom.ToString() -> string
~override Microsoft.Maui.Devices.DevicePlatform.Equals(object obj) -> bool
~override Microsoft.Maui.Devices.DevicePlatform.ToString() -> string
~override Microsoft.Maui.Devices.DisplayInfo.Equals(object obj) -> bool
~override Microsoft.Maui.Devices.DisplayInfo.ToString() -> string
~override Microsoft.Maui.Devices.Sensors.GeolocationRequest.ToString() -> string
~override Microsoft.Maui.Devices.Sensors.Location.Equals(object obj) -> bool
~override Microsoft.Maui.Devices.Sensors.Location.ToString() -> string
~override Microsoft.Maui.Devices.Sensors.Placemark.ToString() -> string
~override Microsoft.Maui.Networking.ConnectivityChangedEventArgs.ToString() -> string
~static Microsoft.Maui.ApplicationModel.MainThread.BeginInvokeOnMainThread(System.Action action) -> void
~static Microsoft.Maui.ApplicationModel.MainThread.GetMainThreadSynchronizationContextAsync() -> System.Threading.Tasks.Task<System.Threading.SynchronizationContext>
~static Microsoft.Maui.ApplicationModel.MainThread.InvokeOnMainThreadAsync(System.Action action) -> System.Threading.Tasks.Task
~static Microsoft.Maui.ApplicationModel.MainThread.InvokeOnMainThreadAsync(System.Func<System.Threading.Tasks.Task> funcTask) -> System.Threading.Tasks.Task
~static Microsoft.Maui.ApplicationModel.MainThread.InvokeOnMainThreadAsync<T>(System.Func<System.Threading.Tasks.Task<T>> funcTask) -> System.Threading.Tasks.Task<T>
~static Microsoft.Maui.ApplicationModel.MainThread.InvokeOnMainThreadAsync<T>(System.Func<T> func) -> System.Threading.Tasks.Task<T>
~static Microsoft.Maui.ApplicationModel.Permissions.CheckStatusAsync<TPermission>() -> System.Threading.Tasks.Task<Microsoft.Maui.ApplicationModel.PermissionStatus>
~static Microsoft.Maui.ApplicationModel.Permissions.IsPrivilegeDeclared(string tizenPrivilege) -> bool
~static Microsoft.Maui.ApplicationModel.Permissions.RequestAsync<TPermission>() -> System.Threading.Tasks.Task<Microsoft.Maui.ApplicationModel.PermissionStatus>
~static Microsoft.Maui.ApplicationModel.Permissions.ShouldShowRationale<TPermission>() -> bool
~static Microsoft.Maui.Devices.DeviceIdiom.Create(string deviceIdiom) -> Microsoft.Maui.Devices.DeviceIdiom
~static Microsoft.Maui.Devices.DevicePlatform.Create(string devicePlatform) -> Microsoft.Maui.Devices.DevicePlatform
~static Microsoft.Maui.Devices.Sensors.Location.CalculateDistance(double latitudeStart, double longitudeStart, Microsoft.Maui.Devices.Sensors.Location locationEnd, Microsoft.Maui.Devices.Sensors.DistanceUnits units) -> double
~static Microsoft.Maui.Devices.Sensors.Location.CalculateDistance(Microsoft.Maui.Devices.Sensors.Location locationStart, double latitudeEnd, double longitudeEnd, Microsoft.Maui.Devices.Sensors.DistanceUnits units) -> double
~static Microsoft.Maui.Devices.Sensors.Location.CalculateDistance(Microsoft.Maui.Devices.Sensors.Location locationStart, Microsoft.Maui.Devices.Sensors.Location locationEnd, Microsoft.Maui.Devices.Sensors.DistanceUnits units) -> double
~static Microsoft.Maui.Devices.Sensors.Location.operator !=(Microsoft.Maui.Devices.Sensors.Location left, Microsoft.Maui.Devices.Sensors.Location right) -> bool
~static Microsoft.Maui.Devices.Sensors.Location.operator ==(Microsoft.Maui.Devices.Sensors.Location left, Microsoft.Maui.Devices.Sensors.Location right) -> bool
~static Microsoft.Maui.Devices.Sensors.LocationExtensions.CalculateDistance(this Microsoft.Maui.Devices.Sensors.Location locationStart, double latitudeEnd, double longitudeEnd, Microsoft.Maui.Devices.Sensors.DistanceUnits units) -> double
~static Microsoft.Maui.Devices.Sensors.LocationExtensions.CalculateDistance(this Microsoft.Maui.Devices.Sensors.Location locationStart, Microsoft.Maui.Devices.Sensors.Location locationEnd, Microsoft.Maui.Devices.Sensors.DistanceUnits units) -> double
~static Microsoft.Maui.Devices.Sensors.LocationExtensions.OpenMapsAsync(this Microsoft.Maui.Devices.Sensors.Location location, Microsoft.Maui.ApplicationModel.MapLaunchOptions options) -> System.Threading.Tasks.Task
~static Microsoft.Maui.Devices.Sensors.LocationExtensions.OpenMapsAsync(this Microsoft.Maui.Devices.Sensors.Location location) -> System.Threading.Tasks.Task
~static Microsoft.Maui.Devices.Sensors.PlacemarkExtensions.OpenMapsAsync(this Microsoft.Maui.Devices.Sensors.Placemark placemark, Microsoft.Maui.ApplicationModel.MapLaunchOptions options) -> System.Threading.Tasks.Task
~static Microsoft.Maui.Devices.Sensors.PlacemarkExtensions.OpenMapsAsync(this Microsoft.Maui.Devices.Sensors.Placemark placemark) -> System.Threading.Tasks.Task
~virtual Microsoft.Maui.ApplicationModel.Permissions.BasePlatformPermission.RequiredPrivileges.get -> (string tizenPrivilege, bool isRuntime)[]
abstract Microsoft.Maui.ApplicationModel.Permissions.BasePermission.EnsureDeclared() -> void
abstract Microsoft.Maui.ApplicationModel.Permissions.BasePermission.ShouldShowRationale() -> bool
Microsoft.Maui.Accessibility.ISemanticScreenReader
Microsoft.Maui.Accessibility.ISemanticScreenReader.Announce(string! text) -> void
Microsoft.Maui.Accessibility.SemanticScreenReader
Microsoft.Maui.ApplicationModel.AppAction
Microsoft.Maui.ApplicationModel.AppAction.AppAction(string! id, string! title, string? subtitle = null, string? icon = null) -> void
Microsoft.Maui.ApplicationModel.AppAction.Id.get -> string!
Microsoft.Maui.ApplicationModel.AppAction.Id.set -> void
Microsoft.Maui.ApplicationModel.AppAction.Subtitle.get -> string?
Microsoft.Maui.ApplicationModel.AppAction.Subtitle.set -> void
Microsoft.Maui.ApplicationModel.AppAction.Title.get -> string!
Microsoft.Maui.ApplicationModel.AppAction.Title.set -> void
Microsoft.Maui.ApplicationModel.AppActionEventArgs
Microsoft.Maui.ApplicationModel.AppActionEventArgs.AppAction.get -> Microsoft.Maui.ApplicationModel.AppAction!
Microsoft.Maui.ApplicationModel.AppActionEventArgs.AppActionEventArgs(Microsoft.Maui.ApplicationModel.AppAction! appAction) -> void
Microsoft.Maui.ApplicationModel.AppActions
Microsoft.Maui.ApplicationModel.AppActionsExtensions
Microsoft.Maui.ApplicationModel.AppInfo
Microsoft.Maui.ApplicationModel.AppPackagingModel
Microsoft.Maui.ApplicationModel.AppPackagingModel.Packaged = 0 -> Microsoft.Maui.ApplicationModel.AppPackagingModel
Microsoft.Maui.ApplicationModel.AppPackagingModel.Unpackaged = 1 -> Microsoft.Maui.ApplicationModel.AppPackagingModel
Microsoft.Maui.ApplicationModel.AppTheme
Microsoft.Maui.ApplicationModel.AppTheme.Dark = 2 -> Microsoft.Maui.ApplicationModel.AppTheme
Microsoft.Maui.ApplicationModel.AppTheme.Light = 1 -> Microsoft.Maui.ApplicationModel.AppTheme
Microsoft.Maui.ApplicationModel.AppTheme.Unspecified = 0 -> Microsoft.Maui.ApplicationModel.AppTheme
Microsoft.Maui.ApplicationModel.Browser
Microsoft.Maui.ApplicationModel.BrowserExtensions
Microsoft.Maui.ApplicationModel.BrowserLaunchFlags
Microsoft.Maui.ApplicationModel.BrowserLaunchFlags.LaunchAdjacent = 1 -> Microsoft.Maui.ApplicationModel.BrowserLaunchFlags
Microsoft.Maui.ApplicationModel.BrowserLaunchFlags.None = 0 -> Microsoft.Maui.ApplicationModel.BrowserLaunchFlags
Microsoft.Maui.ApplicationModel.BrowserLaunchFlags.PresentAsFormSheet = 4 -> Microsoft.Maui.ApplicationModel.BrowserLaunchFlags
Microsoft.Maui.ApplicationModel.BrowserLaunchFlags.PresentAsPageSheet = 2 -> Microsoft.Maui.ApplicationModel.BrowserLaunchFlags
Microsoft.Maui.ApplicationModel.BrowserLaunchMode
Microsoft.Maui.ApplicationModel.BrowserLaunchMode.External = 1 -> Microsoft.Maui.ApplicationModel.BrowserLaunchMode
Microsoft.Maui.ApplicationModel.BrowserLaunchMode.SystemPreferred = 0 -> Microsoft.Maui.ApplicationModel.BrowserLaunchMode
Microsoft.Maui.ApplicationModel.BrowserLaunchOptions
Microsoft.Maui.ApplicationModel.BrowserLaunchOptions.BrowserLaunchOptions() -> void
Microsoft.Maui.ApplicationModel.BrowserLaunchOptions.Flags.get -> Microsoft.Maui.ApplicationModel.BrowserLaunchFlags
Microsoft.Maui.ApplicationModel.BrowserLaunchOptions.Flags.set -> void
Microsoft.Maui.ApplicationModel.BrowserLaunchOptions.LaunchMode.get -> Microsoft.Maui.ApplicationModel.BrowserLaunchMode
Microsoft.Maui.ApplicationModel.BrowserLaunchOptions.LaunchMode.set -> void
Microsoft.Maui.ApplicationModel.BrowserLaunchOptions.PreferredControlColor.get -> Microsoft.Maui.Graphics.Color?
Microsoft.Maui.ApplicationModel.BrowserLaunchOptions.PreferredControlColor.set -> void
Microsoft.Maui.ApplicationModel.BrowserLaunchOptions.PreferredToolbarColor.get -> Microsoft.Maui.Graphics.Color?
Microsoft.Maui.ApplicationModel.BrowserLaunchOptions.PreferredToolbarColor.set -> void
Microsoft.Maui.ApplicationModel.BrowserLaunchOptions.TitleMode.get -> Microsoft.Maui.ApplicationModel.BrowserTitleMode
Microsoft.Maui.ApplicationModel.BrowserLaunchOptions.TitleMode.set -> void
Microsoft.Maui.ApplicationModel.BrowserTitleMode
Microsoft.Maui.ApplicationModel.BrowserTitleMode.Default = 0 -> Microsoft.Maui.ApplicationModel.BrowserTitleMode
Microsoft.Maui.ApplicationModel.BrowserTitleMode.Hide = 2 -> Microsoft.Maui.ApplicationModel.BrowserTitleMode
Microsoft.Maui.ApplicationModel.BrowserTitleMode.Show = 1 -> Microsoft.Maui.ApplicationModel.BrowserTitleMode
Microsoft.Maui.ApplicationModel.Communication.Contact
Microsoft.Maui.ApplicationModel.Communication.Contact.Contact() -> void
Microsoft.Maui.ApplicationModel.Communication.ContactEmail
Microsoft.Maui.ApplicationModel.Communication.ContactEmail.ContactEmail() -> void
Microsoft.Maui.ApplicationModel.Communication.ContactPhone
Microsoft.Maui.ApplicationModel.Communication.ContactPhone.ContactPhone() -> void
Microsoft.Maui.ApplicationModel.Communication.Contacts
Microsoft.Maui.ApplicationModel.Communication.Email
Microsoft.Maui.ApplicationModel.Communication.EmailAttachment
Microsoft.Maui.ApplicationModel.Communication.EmailAttachment.EmailAttachment(Microsoft.Maui.Storage.FileBase! file) -> void
Microsoft.Maui.ApplicationModel.Communication.EmailAttachment.EmailAttachment(string! fullPath, string! contentType) -> void
Microsoft.Maui.ApplicationModel.Communication.EmailAttachment.EmailAttachment(string! fullPath) -> void
Microsoft.Maui.ApplicationModel.Communication.EmailBodyFormat
Microsoft.Maui.ApplicationModel.Communication.EmailBodyFormat.Html = 1 -> Microsoft.Maui.ApplicationModel.Communication.EmailBodyFormat
Microsoft.Maui.ApplicationModel.Communication.EmailBodyFormat.PlainText = 0 -> Microsoft.Maui.ApplicationModel.Communication.EmailBodyFormat
Microsoft.Maui.ApplicationModel.Communication.EmailExtensions
Microsoft.Maui.ApplicationModel.Communication.EmailMessage
Microsoft.Maui.ApplicationModel.Communication.EmailMessage.Attachments.get -> System.Collections.Generic.List<Microsoft.Maui.ApplicationModel.Communication.EmailAttachment!>?
Microsoft.Maui.ApplicationModel.Communication.EmailMessage.Attachments.set -> void
Microsoft.Maui.ApplicationModel.Communication.EmailMessage.Bcc.get -> System.Collections.Generic.List<string!>?
Microsoft.Maui.ApplicationModel.Communication.EmailMessage.Bcc.set -> void
Microsoft.Maui.ApplicationModel.Communication.EmailMessage.Body.get -> string?
Microsoft.Maui.ApplicationModel.Communication.EmailMessage.Body.set -> void
Microsoft.Maui.ApplicationModel.Communication.EmailMessage.BodyFormat.get -> Microsoft.Maui.ApplicationModel.Communication.EmailBodyFormat
Microsoft.Maui.ApplicationModel.Communication.EmailMessage.BodyFormat.set -> void
Microsoft.Maui.ApplicationModel.Communication.EmailMessage.Cc.get -> System.Collections.Generic.List<string!>?
Microsoft.Maui.ApplicationModel.Communication.EmailMessage.Cc.set -> void
Microsoft.Maui.ApplicationModel.Communication.EmailMessage.EmailMessage() -> void
Microsoft.Maui.ApplicationModel.Communication.EmailMessage.EmailMessage(string! subject, string! body, params string![]! to) -> void
Microsoft.Maui.ApplicationModel.Communication.EmailMessage.Subject.get -> string?
Microsoft.Maui.ApplicationModel.Communication.EmailMessage.Subject.set -> void
Microsoft.Maui.ApplicationModel.Communication.EmailMessage.To.get -> System.Collections.Generic.List<string!>?
Microsoft.Maui.ApplicationModel.Communication.EmailMessage.To.set -> void
Microsoft.Maui.ApplicationModel.Communication.IContacts
Microsoft.Maui.ApplicationModel.Communication.IContacts.GetAllAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<Microsoft.Maui.ApplicationModel.Communication.Contact!>!>!
Microsoft.Maui.ApplicationModel.Communication.IContacts.PickContactAsync() -> System.Threading.Tasks.Task<Microsoft.Maui.ApplicationModel.Communication.Contact?>!
Microsoft.Maui.ApplicationModel.Communication.IEmail
Microsoft.Maui.ApplicationModel.Communication.IEmail.ComposeAsync(Microsoft.Maui.ApplicationModel.Communication.EmailMessage? message) -> System.Threading.Tasks.Task!
Microsoft.Maui.ApplicationModel.Communication.IEmail.IsComposeSupported.get -> bool
Microsoft.Maui.ApplicationModel.Communication.IPhoneDialer
Microsoft.Maui.ApplicationModel.Communication.IPhoneDialer.IsSupported.get -> bool
Microsoft.Maui.ApplicationModel.Communication.IPhoneDialer.Open(string! number) -> void
Microsoft.Maui.ApplicationModel.Communication.ISms
Microsoft.Maui.ApplicationModel.Communication.ISms.ComposeAsync(Microsoft.Maui.ApplicationModel.Communication.SmsMessage? message) -> System.Threading.Tasks.Task!
Microsoft.Maui.ApplicationModel.Communication.ISms.IsComposeSupported.get -> bool
Microsoft.Maui.ApplicationModel.Communication.PhoneDialer
Microsoft.Maui.ApplicationModel.Communication.Sms
Microsoft.Maui.ApplicationModel.Communication.SmsMessage
Microsoft.Maui.ApplicationModel.Communication.SmsMessage.Body.get -> string?
Microsoft.Maui.ApplicationModel.Communication.SmsMessage.Body.set -> void
Microsoft.Maui.ApplicationModel.Communication.SmsMessage.Recipients.get -> System.Collections.Generic.List<string!>!
Microsoft.Maui.ApplicationModel.Communication.SmsMessage.Recipients.set -> void
Microsoft.Maui.ApplicationModel.Communication.SmsMessage.SmsMessage() -> void
Microsoft.Maui.ApplicationModel.Communication.SmsMessage.SmsMessage(string! body, string? recipient) -> void
Microsoft.Maui.ApplicationModel.Communication.SmsMessage.SmsMessage(string! body, System.Collections.Generic.IEnumerable<string!>? recipients) -> void
Microsoft.Maui.ApplicationModel.DataTransfer.Clipboard
Microsoft.Maui.ApplicationModel.DataTransfer.IClipboard
Microsoft.Maui.ApplicationModel.DataTransfer.IClipboard.ClipboardContentChanged -> System.EventHandler<System.EventArgs!>!
Microsoft.Maui.ApplicationModel.DataTransfer.IClipboard.GetTextAsync() -> System.Threading.Tasks.Task<string?>!
Microsoft.Maui.ApplicationModel.DataTransfer.IClipboard.HasText.get -> bool
Microsoft.Maui.ApplicationModel.DataTransfer.IClipboard.SetTextAsync(string? text) -> System.Threading.Tasks.Task!
Microsoft.Maui.ApplicationModel.DataTransfer.IShare
Microsoft.Maui.ApplicationModel.DataTransfer.IShare.RequestAsync(Microsoft.Maui.ApplicationModel.DataTransfer.ShareFileRequest! request) -> System.Threading.Tasks.Task!
Microsoft.Maui.ApplicationModel.DataTransfer.IShare.RequestAsync(Microsoft.Maui.ApplicationModel.DataTransfer.ShareMultipleFilesRequest! request) -> System.Threading.Tasks.Task!
Microsoft.Maui.ApplicationModel.DataTransfer.IShare.RequestAsync(Microsoft.Maui.ApplicationModel.DataTransfer.ShareTextRequest! request) -> System.Threading.Tasks.Task!
Microsoft.Maui.ApplicationModel.DataTransfer.Share
Microsoft.Maui.ApplicationModel.DataTransfer.ShareExtensions
Microsoft.Maui.ApplicationModel.DataTransfer.ShareFile
Microsoft.Maui.ApplicationModel.DataTransfer.ShareFile.ShareFile(Microsoft.Maui.Storage.FileBase! file) -> void
Microsoft.Maui.ApplicationModel.DataTransfer.ShareFile.ShareFile(string! fullPath, string! contentType) -> void
Microsoft.Maui.ApplicationModel.DataTransfer.ShareFile.ShareFile(string! fullPath) -> void
Microsoft.Maui.ApplicationModel.DataTransfer.ShareFileRequest
Microsoft.Maui.ApplicationModel.DataTransfer.ShareFileRequest.File.get -> Microsoft.Maui.ApplicationModel.DataTransfer.ShareFile?
Microsoft.Maui.ApplicationModel.DataTransfer.ShareFileRequest.File.set -> void
Microsoft.Maui.ApplicationModel.DataTransfer.ShareFileRequest.ShareFileRequest() -> void
Microsoft.Maui.ApplicationModel.DataTransfer.ShareFileRequest.ShareFileRequest(Microsoft.Maui.ApplicationModel.DataTransfer.ShareFile! file) -> void
Microsoft.Maui.ApplicationModel.DataTransfer.ShareFileRequest.ShareFileRequest(Microsoft.Maui.Storage.FileBase! file) -> void
Microsoft.Maui.ApplicationModel.DataTransfer.ShareFileRequest.ShareFileRequest(string! title, Microsoft.Maui.ApplicationModel.DataTransfer.ShareFile! file) -> void
Microsoft.Maui.ApplicationModel.DataTransfer.ShareFileRequest.ShareFileRequest(string! title, Microsoft.Maui.Storage.FileBase! file) -> void
Microsoft.Maui.ApplicationModel.DataTransfer.ShareMultipleFilesRequest
Microsoft.Maui.ApplicationModel.DataTransfer.ShareMultipleFilesRequest.Files.get -> System.Collections.Generic.List<Microsoft.Maui.ApplicationModel.DataTransfer.ShareFile!>?
Microsoft.Maui.ApplicationModel.DataTransfer.ShareMultipleFilesRequest.Files.set -> void
Microsoft.Maui.ApplicationModel.DataTransfer.ShareMultipleFilesRequest.ShareMultipleFilesRequest() -> void
Microsoft.Maui.ApplicationModel.DataTransfer.ShareMultipleFilesRequest.ShareMultipleFilesRequest(string! title, System.Collections.Generic.IEnumerable<Microsoft.Maui.ApplicationModel.DataTransfer.ShareFile!>! files) -> void
Microsoft.Maui.ApplicationModel.DataTransfer.ShareMultipleFilesRequest.ShareMultipleFilesRequest(string! title, System.Collections.Generic.IEnumerable<Microsoft.Maui.Storage.FileBase!>! files) -> void
Microsoft.Maui.ApplicationModel.DataTransfer.ShareMultipleFilesRequest.ShareMultipleFilesRequest(System.Collections.Generic.IEnumerable<Microsoft.Maui.ApplicationModel.DataTransfer.ShareFile!>! files) -> void
Microsoft.Maui.ApplicationModel.DataTransfer.ShareMultipleFilesRequest.ShareMultipleFilesRequest(System.Collections.Generic.IEnumerable<Microsoft.Maui.Storage.FileBase!>! files) -> void
Microsoft.Maui.ApplicationModel.DataTransfer.ShareRequestBase
Microsoft.Maui.ApplicationModel.DataTransfer.ShareRequestBase.PresentationSourceBounds.get -> Microsoft.Maui.Graphics.Rect
Microsoft.Maui.ApplicationModel.DataTransfer.ShareRequestBase.PresentationSourceBounds.set -> void
Microsoft.Maui.ApplicationModel.DataTransfer.ShareRequestBase.ShareRequestBase() -> void
Microsoft.Maui.ApplicationModel.DataTransfer.ShareRequestBase.Title.get -> string?
Microsoft.Maui.ApplicationModel.DataTransfer.ShareRequestBase.Title.set -> void
Microsoft.Maui.ApplicationModel.DataTransfer.ShareTextRequest
Microsoft.Maui.ApplicationModel.DataTransfer.ShareTextRequest.ShareTextRequest() -> void
Microsoft.Maui.ApplicationModel.DataTransfer.ShareTextRequest.ShareTextRequest(string! text, string! title) -> void
Microsoft.Maui.ApplicationModel.DataTransfer.ShareTextRequest.ShareTextRequest(string! text) -> void
Microsoft.Maui.ApplicationModel.DataTransfer.ShareTextRequest.Subject.get -> string?
Microsoft.Maui.ApplicationModel.DataTransfer.ShareTextRequest.Subject.set -> void
Microsoft.Maui.ApplicationModel.DataTransfer.ShareTextRequest.Text.get -> string?
Microsoft.Maui.ApplicationModel.DataTransfer.ShareTextRequest.Text.set -> void
Microsoft.Maui.ApplicationModel.DataTransfer.ShareTextRequest.Uri.get -> string?
Microsoft.Maui.ApplicationModel.DataTransfer.ShareTextRequest.Uri.set -> void
Microsoft.Maui.ApplicationModel.FeatureNotEnabledException
Microsoft.Maui.ApplicationModel.FeatureNotEnabledException.FeatureNotEnabledException() -> void
Microsoft.Maui.ApplicationModel.FeatureNotSupportedException
Microsoft.Maui.ApplicationModel.FeatureNotSupportedException.FeatureNotSupportedException() -> void
Microsoft.Maui.ApplicationModel.IAppActions
Microsoft.Maui.ApplicationModel.IAppActions.AppActionActivated -> System.EventHandler<Microsoft.Maui.ApplicationModel.AppActionEventArgs!>?
Microsoft.Maui.ApplicationModel.IAppActions.GetAsync() -> System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<Microsoft.Maui.ApplicationModel.AppAction!>!>!
Microsoft.Maui.ApplicationModel.IAppActions.IsSupported.get -> bool
Microsoft.Maui.ApplicationModel.IAppActions.SetAsync(System.Collections.Generic.IEnumerable<Microsoft.Maui.ApplicationModel.AppAction!>! actions) -> System.Threading.Tasks.Task!
Microsoft.Maui.ApplicationModel.IAppInfo
Microsoft.Maui.ApplicationModel.IAppInfo.BuildString.get -> string!
Microsoft.Maui.ApplicationModel.IAppInfo.Name.get -> string!
Microsoft.Maui.ApplicationModel.IAppInfo.PackageName.get -> string!
Microsoft.Maui.ApplicationModel.IAppInfo.PackagingModel.get -> Microsoft.Maui.ApplicationModel.AppPackagingModel
Microsoft.Maui.ApplicationModel.IAppInfo.RequestedLayoutDirection.get -> Microsoft.Maui.ApplicationModel.LayoutDirection
Microsoft.Maui.ApplicationModel.IAppInfo.RequestedTheme.get -> Microsoft.Maui.ApplicationModel.AppTheme
Microsoft.Maui.ApplicationModel.IAppInfo.ShowSettingsUI() -> void
Microsoft.Maui.ApplicationModel.IAppInfo.Version.get -> System.Version!
Microsoft.Maui.ApplicationModel.IAppInfo.VersionString.get -> string!
Microsoft.Maui.ApplicationModel.IBrowser
Microsoft.Maui.ApplicationModel.IBrowser.OpenAsync(System.Uri! uri, Microsoft.Maui.ApplicationModel.BrowserLaunchOptions! options) -> System.Threading.Tasks.Task<bool>!
Microsoft.Maui.ApplicationModel.ILauncher
Microsoft.Maui.ApplicationModel.ILauncher.CanOpenAsync(System.Uri! uri) -> System.Threading.Tasks.Task<bool>!
Microsoft.Maui.ApplicationModel.ILauncher.OpenAsync(Microsoft.Maui.ApplicationModel.OpenFileRequest! request) -> System.Threading.Tasks.Task<bool>!
Microsoft.Maui.ApplicationModel.ILauncher.OpenAsync(System.Uri! uri) -> System.Threading.Tasks.Task<bool>!
Microsoft.Maui.ApplicationModel.ILauncher.TryOpenAsync(System.Uri! uri) -> System.Threading.Tasks.Task<bool>!
Microsoft.Maui.ApplicationModel.IMap
Microsoft.Maui.ApplicationModel.IMap.OpenAsync(double latitude, double longitude, Microsoft.Maui.ApplicationModel.MapLaunchOptions! options) -> System.Threading.Tasks.Task!
Microsoft.Maui.ApplicationModel.IMap.OpenAsync(Microsoft.Maui.Devices.Sensors.Placemark! placemark, Microsoft.Maui.ApplicationModel.MapLaunchOptions! options) -> System.Threading.Tasks.Task!
Microsoft.Maui.ApplicationModel.IMap.TryOpenAsync(double latitude, double longitude, Microsoft.Maui.ApplicationModel.MapLaunchOptions! options) -> System.Threading.Tasks.Task<bool>!
Microsoft.Maui.ApplicationModel.IMap.TryOpenAsync(Microsoft.Maui.Devices.Sensors.Placemark! placemark, Microsoft.Maui.ApplicationModel.MapLaunchOptions! options) -> System.Threading.Tasks.Task<bool>!
Microsoft.Maui.ApplicationModel.IPlatformAppActions
Microsoft.Maui.ApplicationModel.IVersionTracking
Microsoft.Maui.ApplicationModel.IVersionTracking.BuildHistory.get -> System.Collections.Generic.IReadOnlyList<string!>!
Microsoft.Maui.ApplicationModel.IVersionTracking.CurrentBuild.get -> string!
Microsoft.Maui.ApplicationModel.IVersionTracking.CurrentVersion.get -> string!
Microsoft.Maui.ApplicationModel.IVersionTracking.FirstInstalledBuild.get -> string?
Microsoft.Maui.ApplicationModel.IVersionTracking.FirstInstalledVersion.get -> string?
Microsoft.Maui.ApplicationModel.IVersionTracking.IsFirstLaunchEver.get -> bool
Microsoft.Maui.ApplicationModel.IVersionTracking.IsFirstLaunchForBuild(string! build) -> bool
Microsoft.Maui.ApplicationModel.IVersionTracking.IsFirstLaunchForCurrentBuild.get -> bool
Microsoft.Maui.ApplicationModel.IVersionTracking.IsFirstLaunchForCurrentVersion.get -> bool
Microsoft.Maui.ApplicationModel.IVersionTracking.IsFirstLaunchForVersion(string! version) -> bool
Microsoft.Maui.ApplicationModel.IVersionTracking.PreviousBuild.get -> string?
Microsoft.Maui.ApplicationModel.IVersionTracking.PreviousVersion.get -> string?
Microsoft.Maui.ApplicationModel.IVersionTracking.Track() -> void
Microsoft.Maui.ApplicationModel.IVersionTracking.VersionHistory.get -> System.Collections.Generic.IReadOnlyList<string!>!
Microsoft.Maui.ApplicationModel.Launcher
Microsoft.Maui.ApplicationModel.LauncherExtensions
Microsoft.Maui.ApplicationModel.LayoutDirection
Microsoft.Maui.ApplicationModel.LayoutDirection.LeftToRight = 1 -> Microsoft.Maui.ApplicationModel.LayoutDirection
Microsoft.Maui.ApplicationModel.LayoutDirection.RightToLeft = 2 -> Microsoft.Maui.ApplicationModel.LayoutDirection
Microsoft.Maui.ApplicationModel.LayoutDirection.Unknown = 0 -> Microsoft.Maui.ApplicationModel.LayoutDirection
Microsoft.Maui.ApplicationModel.MainThread
Microsoft.Maui.ApplicationModel.Map
Microsoft.Maui.ApplicationModel.MapExtensions
Microsoft.Maui.ApplicationModel.MapLaunchOptions
Microsoft.Maui.ApplicationModel.MapLaunchOptions.MapLaunchOptions() -> void
Microsoft.Maui.ApplicationModel.MapLaunchOptions.NavigationMode.get -> Microsoft.Maui.ApplicationModel.NavigationMode
Microsoft.Maui.ApplicationModel.MapLaunchOptions.NavigationMode.set -> void
Microsoft.Maui.ApplicationModel.NavigationMode
Microsoft.Maui.ApplicationModel.NavigationMode.Bicycling = 2 -> Microsoft.Maui.ApplicationModel.NavigationMode
Microsoft.Maui.ApplicationModel.NavigationMode.Default = 1 -> Microsoft.Maui.ApplicationModel.NavigationMode
Microsoft.Maui.ApplicationModel.NavigationMode.Driving = 3 -> Microsoft.Maui.ApplicationModel.NavigationMode
Microsoft.Maui.ApplicationModel.NavigationMode.None = 0 -> Microsoft.Maui.ApplicationModel.NavigationMode
Microsoft.Maui.ApplicationModel.NavigationMode.Transit = 4 -> Microsoft.Maui.ApplicationModel.NavigationMode
Microsoft.Maui.ApplicationModel.NavigationMode.Walking = 5 -> Microsoft.Maui.ApplicationModel.NavigationMode
Microsoft.Maui.ApplicationModel.OpenFileRequest
Microsoft.Maui.ApplicationModel.OpenFileRequest.File.get -> Microsoft.Maui.Storage.ReadOnlyFile?
Microsoft.Maui.ApplicationModel.OpenFileRequest.File.set -> void
Microsoft.Maui.ApplicationModel.OpenFileRequest.OpenFileRequest() -> void
Microsoft.Maui.ApplicationModel.OpenFileRequest.OpenFileRequest(string! title, Microsoft.Maui.Storage.FileBase! file) -> void
Microsoft.Maui.ApplicationModel.OpenFileRequest.OpenFileRequest(string! title, Microsoft.Maui.Storage.ReadOnlyFile! file) -> void
Microsoft.Maui.ApplicationModel.OpenFileRequest.PresentationSourceBounds.get -> Microsoft.Maui.Graphics.Rect
Microsoft.Maui.ApplicationModel.OpenFileRequest.PresentationSourceBounds.set -> void
Microsoft.Maui.ApplicationModel.OpenFileRequest.Title.get -> string?
Microsoft.Maui.ApplicationModel.OpenFileRequest.Title.set -> void
Microsoft.Maui.ApplicationModel.PermissionException
Microsoft.Maui.ApplicationModel.Permissions
Microsoft.Maui.ApplicationModel.Permissions.BasePermission
Microsoft.Maui.ApplicationModel.Permissions.BasePermission.BasePermission() -> void
Microsoft.Maui.ApplicationModel.Permissions.BasePlatformPermission
Microsoft.Maui.ApplicationModel.Permissions.BasePlatformPermission.BasePlatformPermission() -> void
Microsoft.Maui.ApplicationModel.Permissions.Battery
Microsoft.Maui.ApplicationModel.Permissions.Battery.Battery() -> void
Microsoft.Maui.ApplicationModel.Permissions.Bluetooth
Microsoft.Maui.ApplicationModel.Permissions.Bluetooth.Bluetooth() -> void
Microsoft.Maui.ApplicationModel.Permissions.CalendarRead
Microsoft.Maui.ApplicationModel.Permissions.CalendarRead.CalendarRead() -> void
Microsoft.Maui.ApplicationModel.Permissions.CalendarWrite
Microsoft.Maui.ApplicationModel.Permissions.CalendarWrite.CalendarWrite() -> void
Microsoft.Maui.ApplicationModel.Permissions.Camera
Microsoft.Maui.ApplicationModel.Permissions.Camera.Camera() -> void
Microsoft.Maui.ApplicationModel.Permissions.ContactsRead
Microsoft.Maui.ApplicationModel.Permissions.ContactsRead.ContactsRead() -> void
Microsoft.Maui.ApplicationModel.Permissions.ContactsWrite
Microsoft.Maui.ApplicationModel.Permissions.ContactsWrite.ContactsWrite() -> void
Microsoft.Maui.ApplicationModel.Permissions.Flashlight
Microsoft.Maui.ApplicationModel.Permissions.Flashlight.Flashlight() -> void
Microsoft.Maui.ApplicationModel.Permissions.LaunchApp
Microsoft.Maui.ApplicationModel.Permissions.LaunchApp.LaunchApp() -> void
Microsoft.Maui.ApplicationModel.Permissions.LocationAlways
Microsoft.Maui.ApplicationModel.Permissions.LocationAlways.LocationAlways() -> void
Microsoft.Maui.ApplicationModel.Permissions.LocationWhenInUse
Microsoft.Maui.ApplicationModel.Permissions.LocationWhenInUse.LocationWhenInUse() -> void
Microsoft.Maui.ApplicationModel.Permissions.Maps
Microsoft.Maui.ApplicationModel.Permissions.Maps.Maps() -> void
Microsoft.Maui.ApplicationModel.Permissions.Media
Microsoft.Maui.ApplicationModel.Permissions.Media.Media() -> void
Microsoft.Maui.ApplicationModel.Permissions.Microphone
Microsoft.Maui.ApplicationModel.Permissions.Microphone.Microphone() -> void
Microsoft.Maui.ApplicationModel.Permissions.NearbyWifiDevices
Microsoft.Maui.ApplicationModel.Permissions.NearbyWifiDevices.NearbyWifiDevices() -> void
Microsoft.Maui.ApplicationModel.Permissions.NetworkState
Microsoft.Maui.ApplicationModel.Permissions.NetworkState.NetworkState() -> void
Microsoft.Maui.ApplicationModel.Permissions.Phone
Microsoft.Maui.ApplicationModel.Permissions.Phone.Phone() -> void
Microsoft.Maui.ApplicationModel.Permissions.Photos
Microsoft.Maui.ApplicationModel.Permissions.Photos.Photos() -> void
Microsoft.Maui.ApplicationModel.Permissions.PhotosAddOnly
Microsoft.Maui.ApplicationModel.Permissions.PhotosAddOnly.PhotosAddOnly() -> void
Microsoft.Maui.ApplicationModel.Permissions.PostNotifications
Microsoft.Maui.ApplicationModel.Permissions.PostNotifications.PostNotifications() -> void
Microsoft.Maui.ApplicationModel.Permissions.Reminders
Microsoft.Maui.ApplicationModel.Permissions.Reminders.Reminders() -> void
Microsoft.Maui.ApplicationModel.Permissions.Sensors
Microsoft.Maui.ApplicationModel.Permissions.Sensors.Sensors() -> void
Microsoft.Maui.ApplicationModel.Permissions.Sms
Microsoft.Maui.ApplicationModel.Permissions.Sms.Sms() -> void
Microsoft.Maui.ApplicationModel.Permissions.Speech
Microsoft.Maui.ApplicationModel.Permissions.Speech.Speech() -> void
Microsoft.Maui.ApplicationModel.Permissions.StorageRead
Microsoft.Maui.ApplicationModel.Permissions.StorageRead.StorageRead() -> void
Microsoft.Maui.ApplicationModel.Permissions.StorageWrite
Microsoft.Maui.ApplicationModel.Permissions.StorageWrite.StorageWrite() -> void
Microsoft.Maui.ApplicationModel.Permissions.Vibrate
Microsoft.Maui.ApplicationModel.Permissions.Vibrate.Vibrate() -> void
Microsoft.Maui.ApplicationModel.PermissionStatus
Microsoft.Maui.ApplicationModel.PermissionStatus.Denied = 1 -> Microsoft.Maui.ApplicationModel.PermissionStatus
Microsoft.Maui.ApplicationModel.PermissionStatus.Disabled = 2 -> Microsoft.Maui.ApplicationModel.PermissionStatus
Microsoft.Maui.ApplicationModel.PermissionStatus.Granted = 3 -> Microsoft.Maui.ApplicationModel.PermissionStatus
Microsoft.Maui.ApplicationModel.PermissionStatus.Limited = 5 -> Microsoft.Maui.ApplicationModel.PermissionStatus
Microsoft.Maui.ApplicationModel.PermissionStatus.Restricted = 4 -> Microsoft.Maui.ApplicationModel.PermissionStatus
Microsoft.Maui.ApplicationModel.PermissionStatus.Unknown = 0 -> Microsoft.Maui.ApplicationModel.PermissionStatus
Microsoft.Maui.ApplicationModel.Platform
Microsoft.Maui.ApplicationModel.VersionTracking
Microsoft.Maui.Authentication.AppleSignInAuthenticator
Microsoft.Maui.Authentication.AppleSignInAuthenticator.Options
Microsoft.Maui.Authentication.AppleSignInAuthenticator.Options.IncludeEmailScope.get -> bool
Microsoft.Maui.Authentication.AppleSignInAuthenticator.Options.IncludeEmailScope.set -> void
Microsoft.Maui.Authentication.AppleSignInAuthenticator.Options.IncludeFullNameScope.get -> bool
Microsoft.Maui.Authentication.AppleSignInAuthenticator.Options.IncludeFullNameScope.set -> void
Microsoft.Maui.Authentication.AppleSignInAuthenticator.Options.Options() -> void
Microsoft.Maui.Authentication.IAppleSignInAuthenticator
Microsoft.Maui.Authentication.IAppleSignInAuthenticator.AuthenticateAsync(Microsoft.Maui.Authentication.AppleSignInAuthenticator.Options? options = null) -> System.Threading.Tasks.Task<Microsoft.Maui.Authentication.WebAuthenticatorResult!>!
Microsoft.Maui.Authentication.IPlatformWebAuthenticatorCallback
Microsoft.Maui.Authentication.IWebAuthenticator
Microsoft.Maui.Authentication.IWebAuthenticator.AuthenticateAsync(Microsoft.Maui.Authentication.WebAuthenticatorOptions! webAuthenticatorOptions) -> System.Threading.Tasks.Task<Microsoft.Maui.Authentication.WebAuthenticatorResult!>!
Microsoft.Maui.Authentication.IWebAuthenticatorResponseDecoder
Microsoft.Maui.Authentication.IWebAuthenticatorResponseDecoder.DecodeResponse(System.Uri! uri) -> System.Collections.Generic.IDictionary<string!, string!>?
Microsoft.Maui.Authentication.WebAuthenticator
Microsoft.Maui.Authentication.WebAuthenticatorExtensions
Microsoft.Maui.Authentication.WebAuthenticatorOptions
Microsoft.Maui.Authentication.WebAuthenticatorOptions.CallbackUrl.get -> System.Uri?
Microsoft.Maui.Authentication.WebAuthenticatorOptions.CallbackUrl.set -> void
Microsoft.Maui.Authentication.WebAuthenticatorOptions.PrefersEphemeralWebBrowserSession.get -> bool
Microsoft.Maui.Authentication.WebAuthenticatorOptions.PrefersEphemeralWebBrowserSession.set -> void
Microsoft.Maui.Authentication.WebAuthenticatorOptions.ResponseDecoder.get -> Microsoft.Maui.Authentication.IWebAuthenticatorResponseDecoder?
Microsoft.Maui.Authentication.WebAuthenticatorOptions.ResponseDecoder.set -> void
Microsoft.Maui.Authentication.WebAuthenticatorOptions.Url.get -> System.Uri?
Microsoft.Maui.Authentication.WebAuthenticatorOptions.Url.set -> void
Microsoft.Maui.Authentication.WebAuthenticatorOptions.WebAuthenticatorOptions() -> void
Microsoft.Maui.Authentication.WebAuthenticatorResult
Microsoft.Maui.Authentication.WebAuthenticatorResult.ExpiresIn.get -> System.DateTimeOffset?
Microsoft.Maui.Authentication.WebAuthenticatorResult.RefreshTokenExpiresIn.get -> System.DateTimeOffset?
Microsoft.Maui.Authentication.WebAuthenticatorResult.Timestamp.get -> System.DateTimeOffset
Microsoft.Maui.Authentication.WebAuthenticatorResult.Timestamp.set -> void
Microsoft.Maui.Authentication.WebAuthenticatorResult.WebAuthenticatorResult() -> void
Microsoft.Maui.Devices.Battery
Microsoft.Maui.Devices.BatteryInfoChangedEventArgs
Microsoft.Maui.Devices.BatteryInfoChangedEventArgs.BatteryInfoChangedEventArgs(double level, Microsoft.Maui.Devices.BatteryState state, Microsoft.Maui.Devices.BatteryPowerSource source) -> void
Microsoft.Maui.Devices.BatteryInfoChangedEventArgs.ChargeLevel.get -> double
Microsoft.Maui.Devices.BatteryInfoChangedEventArgs.PowerSource.get -> Microsoft.Maui.Devices.BatteryPowerSource
Microsoft.Maui.Devices.BatteryInfoChangedEventArgs.State.get -> Microsoft.Maui.Devices.BatteryState
Microsoft.Maui.Devices.BatteryPowerSource
Microsoft.Maui.Devices.BatteryPowerSource.AC = 2 -> Microsoft.Maui.Devices.BatteryPowerSource
Microsoft.Maui.Devices.BatteryPowerSource.Battery = 1 -> Microsoft.Maui.Devices.BatteryPowerSource
Microsoft.Maui.Devices.BatteryPowerSource.Unknown = 0 -> Microsoft.Maui.Devices.BatteryPowerSource
Microsoft.Maui.Devices.BatteryPowerSource.Usb = 3 -> Microsoft.Maui.Devices.BatteryPowerSource
Microsoft.Maui.Devices.BatteryPowerSource.Wireless = 4 -> Microsoft.Maui.Devices.BatteryPowerSource
Microsoft.Maui.Devices.BatteryState
Microsoft.Maui.Devices.BatteryState.Charging = 1 -> Microsoft.Maui.Devices.BatteryState
Microsoft.Maui.Devices.BatteryState.Discharging = 2 -> Microsoft.Maui.Devices.BatteryState
Microsoft.Maui.Devices.BatteryState.Full = 3 -> Microsoft.Maui.Devices.BatteryState
Microsoft.Maui.Devices.BatteryState.NotCharging = 4 -> Microsoft.Maui.Devices.BatteryState
Microsoft.Maui.Devices.BatteryState.NotPresent = 5 -> Microsoft.Maui.Devices.BatteryState
Microsoft.Maui.Devices.BatteryState.Unknown = 0 -> Microsoft.Maui.Devices.BatteryState
Microsoft.Maui.Devices.DeviceDisplay
Microsoft.Maui.Devices.DeviceIdiom
Microsoft.Maui.Devices.DeviceIdiom.DeviceIdiom() -> void
Microsoft.Maui.Devices.DeviceIdiom.Equals(Microsoft.Maui.Devices.DeviceIdiom other) -> bool
Microsoft.Maui.Devices.DeviceInfo
Microsoft.Maui.Devices.DevicePlatform
Microsoft.Maui.Devices.DevicePlatform.DevicePlatform() -> void
Microsoft.Maui.Devices.DevicePlatform.Equals(Microsoft.Maui.Devices.DevicePlatform other) -> bool
Microsoft.Maui.Devices.DeviceType
Microsoft.Maui.Devices.DeviceType.Physical = 1 -> Microsoft.Maui.Devices.DeviceType
Microsoft.Maui.Devices.DeviceType.Unknown = 0 -> Microsoft.Maui.Devices.DeviceType
Microsoft.Maui.Devices.DeviceType.Virtual = 2 -> Microsoft.Maui.Devices.DeviceType
Microsoft.Maui.Devices.DisplayInfo
Microsoft.Maui.Devices.DisplayInfo.Density.get -> double
Microsoft.Maui.Devices.DisplayInfo.DisplayInfo() -> void
Microsoft.Maui.Devices.DisplayInfo.DisplayInfo(double width, double height, double density, Microsoft.Maui.Devices.DisplayOrientation orientation, Microsoft.Maui.Devices.DisplayRotation rotation, float rate) -> void
Microsoft.Maui.Devices.DisplayInfo.DisplayInfo(double width, double height, double density, Microsoft.Maui.Devices.DisplayOrientation orientation, Microsoft.Maui.Devices.DisplayRotation rotation) -> void
Microsoft.Maui.Devices.DisplayInfo.Equals(Microsoft.Maui.Devices.DisplayInfo other) -> bool
Microsoft.Maui.Devices.DisplayInfo.Height.get -> double
Microsoft.Maui.Devices.DisplayInfo.Orientation.get -> Microsoft.Maui.Devices.DisplayOrientation
Microsoft.Maui.Devices.DisplayInfo.RefreshRate.get -> float
Microsoft.Maui.Devices.DisplayInfo.Rotation.get -> Microsoft.Maui.Devices.DisplayRotation
Microsoft.Maui.Devices.DisplayInfo.Width.get -> double
Microsoft.Maui.Devices.DisplayInfoChangedEventArgs
Microsoft.Maui.Devices.DisplayInfoChangedEventArgs.DisplayInfo.get -> Microsoft.Maui.Devices.DisplayInfo
Microsoft.Maui.Devices.DisplayInfoChangedEventArgs.DisplayInfoChangedEventArgs(Microsoft.Maui.Devices.DisplayInfo displayInfo) -> void
Microsoft.Maui.Devices.DisplayOrientation
Microsoft.Maui.Devices.DisplayOrientation.Landscape = 2 -> Microsoft.Maui.Devices.DisplayOrientation
Microsoft.Maui.Devices.DisplayOrientation.Portrait = 1 -> Microsoft.Maui.Devices.DisplayOrientation
Microsoft.Maui.Devices.DisplayOrientation.Unknown = 0 -> Microsoft.Maui.Devices.DisplayOrientation
Microsoft.Maui.Devices.DisplayRotation
Microsoft.Maui.Devices.DisplayRotation.Rotation0 = 1 -> Microsoft.Maui.Devices.DisplayRotation
Microsoft.Maui.Devices.DisplayRotation.Rotation180 = 3 -> Microsoft.Maui.Devices.DisplayRotation
Microsoft.Maui.Devices.DisplayRotation.Rotation270 = 4 -> Microsoft.Maui.Devices.DisplayRotation
Microsoft.Maui.Devices.DisplayRotation.Rotation90 = 2 -> Microsoft.Maui.Devices.DisplayRotation
Microsoft.Maui.Devices.DisplayRotation.Unknown = 0 -> Microsoft.Maui.Devices.DisplayRotation
Microsoft.Maui.Devices.EnergySaverStatus
Microsoft.Maui.Devices.EnergySaverStatus.Off = 2 -> Microsoft.Maui.Devices.EnergySaverStatus
Microsoft.Maui.Devices.EnergySaverStatus.On = 1 -> Microsoft.Maui.Devices.EnergySaverStatus
Microsoft.Maui.Devices.EnergySaverStatus.Unknown = 0 -> Microsoft.Maui.Devices.EnergySaverStatus
Microsoft.Maui.Devices.EnergySaverStatusChangedEventArgs
Microsoft.Maui.Devices.EnergySaverStatusChangedEventArgs.EnergySaverStatus.get -> Microsoft.Maui.Devices.EnergySaverStatus
Microsoft.Maui.Devices.EnergySaverStatusChangedEventArgs.EnergySaverStatusChangedEventArgs(Microsoft.Maui.Devices.EnergySaverStatus saverStatus) -> void
Microsoft.Maui.Devices.Flashlight
Microsoft.Maui.Devices.HapticFeedback
Microsoft.Maui.Devices.HapticFeedbackType
Microsoft.Maui.Devices.HapticFeedbackType.Click = 0 -> Microsoft.Maui.Devices.HapticFeedbackType
Microsoft.Maui.Devices.HapticFeedbackType.LongPress = 1 -> Microsoft.Maui.Devices.HapticFeedbackType
Microsoft.Maui.Devices.IBattery
Microsoft.Maui.Devices.IBattery.BatteryInfoChanged -> System.EventHandler<Microsoft.Maui.Devices.BatteryInfoChangedEventArgs!>!
Microsoft.Maui.Devices.IBattery.ChargeLevel.get -> double
Microsoft.Maui.Devices.IBattery.EnergySaverStatus.get -> Microsoft.Maui.Devices.EnergySaverStatus
Microsoft.Maui.Devices.IBattery.EnergySaverStatusChanged -> System.EventHandler<Microsoft.Maui.Devices.EnergySaverStatusChangedEventArgs!>!
Microsoft.Maui.Devices.IBattery.PowerSource.get -> Microsoft.Maui.Devices.BatteryPowerSource
Microsoft.Maui.Devices.IBattery.State.get -> Microsoft.Maui.Devices.BatteryState
Microsoft.Maui.Devices.IDeviceDisplay
Microsoft.Maui.Devices.IDeviceDisplay.KeepScreenOn.get -> bool
Microsoft.Maui.Devices.IDeviceDisplay.KeepScreenOn.set -> void
Microsoft.Maui.Devices.IDeviceDisplay.MainDisplayInfo.get -> Microsoft.Maui.Devices.DisplayInfo
Microsoft.Maui.Devices.IDeviceDisplay.MainDisplayInfoChanged -> System.EventHandler<Microsoft.Maui.Devices.DisplayInfoChangedEventArgs!>!
Microsoft.Maui.Devices.IDeviceInfo
Microsoft.Maui.Devices.IDeviceInfo.DeviceType.get -> Microsoft.Maui.Devices.DeviceType
Microsoft.Maui.Devices.IDeviceInfo.Idiom.get -> Microsoft.Maui.Devices.DeviceIdiom
Microsoft.Maui.Devices.IDeviceInfo.Manufacturer.get -> string!
Microsoft.Maui.Devices.IDeviceInfo.Model.get -> string!
Microsoft.Maui.Devices.IDeviceInfo.Name.get -> string!
Microsoft.Maui.Devices.IDeviceInfo.Platform.get -> Microsoft.Maui.Devices.DevicePlatform
Microsoft.Maui.Devices.IDeviceInfo.Version.get -> System.Version!
Microsoft.Maui.Devices.IDeviceInfo.VersionString.get -> string!
Microsoft.Maui.Devices.IFlashlight
Microsoft.Maui.Devices.IFlashlight.IsSupportedAsync() -> System.Threading.Tasks.Task<bool>!
Microsoft.Maui.Devices.IFlashlight.TurnOffAsync() -> System.Threading.Tasks.Task!
Microsoft.Maui.Devices.IFlashlight.TurnOnAsync() -> System.Threading.Tasks.Task!
Microsoft.Maui.Devices.IHapticFeedback
Microsoft.Maui.Devices.IHapticFeedback.IsSupported.get -> bool
Microsoft.Maui.Devices.IHapticFeedback.Perform(Microsoft.Maui.Devices.HapticFeedbackType type) -> void
Microsoft.Maui.Devices.IVibration
Microsoft.Maui.Devices.IVibration.Cancel() -> void
Microsoft.Maui.Devices.IVibration.IsSupported.get -> bool
Microsoft.Maui.Devices.IVibration.Vibrate() -> void
Microsoft.Maui.Devices.IVibration.Vibrate(System.TimeSpan duration) -> void
Microsoft.Maui.Devices.Sensors.Accelerometer
Microsoft.Maui.Devices.Sensors.AccelerometerChangedEventArgs
Microsoft.Maui.Devices.Sensors.AccelerometerChangedEventArgs.AccelerometerChangedEventArgs(Microsoft.Maui.Devices.Sensors.AccelerometerData reading) -> void
Microsoft.Maui.Devices.Sensors.AccelerometerChangedEventArgs.Reading.get -> Microsoft.Maui.Devices.Sensors.AccelerometerData
Microsoft.Maui.Devices.Sensors.AccelerometerData
Microsoft.Maui.Devices.Sensors.AccelerometerData.Acceleration.get -> System.Numerics.Vector3
Microsoft.Maui.Devices.Sensors.AccelerometerData.AccelerometerData() -> void
Microsoft.Maui.Devices.Sensors.AccelerometerData.AccelerometerData(double x, double y, double z) -> void
Microsoft.Maui.Devices.Sensors.AccelerometerData.AccelerometerData(float x, float y, float z) -> void
Microsoft.Maui.Devices.Sensors.AccelerometerData.Equals(Microsoft.Maui.Devices.Sensors.AccelerometerData other) -> bool
Microsoft.Maui.Devices.Sensors.AltitudeReferenceSystem
Microsoft.Maui.Devices.Sensors.AltitudeReferenceSystem.Ellipsoid = 2 -> Microsoft.Maui.Devices.Sensors.AltitudeReferenceSystem
Microsoft.Maui.Devices.Sensors.AltitudeReferenceSystem.Geoid = 3 -> Microsoft.Maui.Devices.Sensors.AltitudeReferenceSystem
Microsoft.Maui.Devices.Sensors.AltitudeReferenceSystem.Surface = 4 -> Microsoft.Maui.Devices.Sensors.AltitudeReferenceSystem
Microsoft.Maui.Devices.Sensors.AltitudeReferenceSystem.Terrain = 1 -> Microsoft.Maui.Devices.Sensors.AltitudeReferenceSystem
Microsoft.Maui.Devices.Sensors.AltitudeReferenceSystem.Unspecified = 0 -> Microsoft.Maui.Devices.Sensors.AltitudeReferenceSystem
Microsoft.Maui.Devices.Sensors.Barometer
Microsoft.Maui.Devices.Sensors.BarometerChangedEventArgs
Microsoft.Maui.Devices.Sensors.BarometerChangedEventArgs.BarometerChangedEventArgs(Microsoft.Maui.Devices.Sensors.BarometerData reading) -> void
Microsoft.Maui.Devices.Sensors.BarometerChangedEventArgs.Reading.get -> Microsoft.Maui.Devices.Sensors.BarometerData
Microsoft.Maui.Devices.Sensors.BarometerData
Microsoft.Maui.Devices.Sensors.BarometerData.BarometerData() -> void
Microsoft.Maui.Devices.Sensors.BarometerData.BarometerData(double pressure) -> void
Microsoft.Maui.Devices.Sensors.BarometerData.Equals(Microsoft.Maui.Devices.Sensors.BarometerData other) -> bool
Microsoft.Maui.Devices.Sensors.BarometerData.PressureInHectopascals.get -> double
Microsoft.Maui.Devices.Sensors.Compass
Microsoft.Maui.Devices.Sensors.CompassChangedEventArgs
Microsoft.Maui.Devices.Sensors.CompassChangedEventArgs.CompassChangedEventArgs(Microsoft.Maui.Devices.Sensors.CompassData reading) -> void
Microsoft.Maui.Devices.Sensors.CompassChangedEventArgs.Reading.get -> Microsoft.Maui.Devices.Sensors.CompassData
Microsoft.Maui.Devices.Sensors.CompassData
Microsoft.Maui.Devices.Sensors.CompassData.CompassData() -> void
Microsoft.Maui.Devices.Sensors.CompassData.CompassData(double headingMagneticNorth) -> void
Microsoft.Maui.Devices.Sensors.CompassData.Equals(Microsoft.Maui.Devices.Sensors.CompassData other) -> bool
Microsoft.Maui.Devices.Sensors.CompassData.HeadingMagneticNorth.get -> double
Microsoft.Maui.Devices.Sensors.CompassExtensions
Microsoft.Maui.Devices.Sensors.DistanceUnits
Microsoft.Maui.Devices.Sensors.DistanceUnits.Kilometers = 0 -> Microsoft.Maui.Devices.Sensors.DistanceUnits
Microsoft.Maui.Devices.Sensors.DistanceUnits.Miles = 1 -> Microsoft.Maui.Devices.Sensors.DistanceUnits
Microsoft.Maui.Devices.Sensors.Geocoding
Microsoft.Maui.Devices.Sensors.GeocodingExtensions
Microsoft.Maui.Devices.Sensors.Geolocation
Microsoft.Maui.Devices.Sensors.GeolocationAccuracy
Microsoft.Maui.Devices.Sensors.GeolocationAccuracy.Best = 5 -> Microsoft.Maui.Devices.Sensors.GeolocationAccuracy
Microsoft.Maui.Devices.Sensors.GeolocationAccuracy.Default = 0 -> Microsoft.Maui.Devices.Sensors.GeolocationAccuracy
Microsoft.Maui.Devices.Sensors.GeolocationAccuracy.High = 4 -> Microsoft.Maui.Devices.Sensors.GeolocationAccuracy
Microsoft.Maui.Devices.Sensors.GeolocationAccuracy.Low = 2 -> Microsoft.Maui.Devices.Sensors.GeolocationAccuracy
Microsoft.Maui.Devices.Sensors.GeolocationAccuracy.Lowest = 1 -> Microsoft.Maui.Devices.Sensors.GeolocationAccuracy
Microsoft.Maui.Devices.Sensors.GeolocationAccuracy.Medium = 3 -> Microsoft.Maui.Devices.Sensors.GeolocationAccuracy
Microsoft.Maui.Devices.Sensors.GeolocationError
Microsoft.Maui.Devices.Sensors.GeolocationError.PositionUnavailable = 0 -> Microsoft.Maui.Devices.Sensors.GeolocationError
Microsoft.Maui.Devices.Sensors.GeolocationError.Unauthorized = 1 -> Microsoft.Maui.Devices.Sensors.GeolocationError
Microsoft.Maui.Devices.Sensors.GeolocationExtensions
Microsoft.Maui.Devices.Sensors.GeolocationListeningFailedEventArgs
Microsoft.Maui.Devices.Sensors.GeolocationListeningFailedEventArgs.Error.get -> Microsoft.Maui.Devices.Sensors.GeolocationError
Microsoft.Maui.Devices.Sensors.GeolocationListeningFailedEventArgs.GeolocationListeningFailedEventArgs(Microsoft.Maui.Devices.Sensors.GeolocationError geolocationError) -> void
Microsoft.Maui.Devices.Sensors.GeolocationListeningRequest
Microsoft.Maui.Devices.Sensors.GeolocationListeningRequest.DesiredAccuracy.get -> Microsoft.Maui.Devices.Sensors.GeolocationAccuracy
Microsoft.Maui.Devices.Sensors.GeolocationListeningRequest.DesiredAccuracy.set -> void
Microsoft.Maui.Devices.Sensors.GeolocationListeningRequest.GeolocationListeningRequest() -> void
Microsoft.Maui.Devices.Sensors.GeolocationListeningRequest.GeolocationListeningRequest(Microsoft.Maui.Devices.Sensors.GeolocationAccuracy accuracy, System.TimeSpan minimumTime) -> void
Microsoft.Maui.Devices.Sensors.GeolocationListeningRequest.GeolocationListeningRequest(Microsoft.Maui.Devices.Sensors.GeolocationAccuracy accuracy) -> void
Microsoft.Maui.Devices.Sensors.GeolocationListeningRequest.MinimumTime.get -> System.TimeSpan
Microsoft.Maui.Devices.Sensors.GeolocationListeningRequest.MinimumTime.set -> void
Microsoft.Maui.Devices.Sensors.GeolocationLocationChangedEventArgs
Microsoft.Maui.Devices.Sensors.GeolocationLocationChangedEventArgs.GeolocationLocationChangedEventArgs(Microsoft.Maui.Devices.Sensors.Location! location) -> void
Microsoft.Maui.Devices.Sensors.GeolocationLocationChangedEventArgs.Location.get -> Microsoft.Maui.Devices.Sensors.Location!
Microsoft.Maui.Devices.Sensors.GeolocationRequest
Microsoft.Maui.Devices.Sensors.GeolocationRequest.DesiredAccuracy.get -> Microsoft.Maui.Devices.Sensors.GeolocationAccuracy
Microsoft.Maui.Devices.Sensors.GeolocationRequest.DesiredAccuracy.set -> void
Microsoft.Maui.Devices.Sensors.GeolocationRequest.GeolocationRequest() -> void
Microsoft.Maui.Devices.Sensors.GeolocationRequest.GeolocationRequest(Microsoft.Maui.Devices.Sensors.GeolocationAccuracy accuracy, System.TimeSpan timeout) -> void
Microsoft.Maui.Devices.Sensors.GeolocationRequest.GeolocationRequest(Microsoft.Maui.Devices.Sensors.GeolocationAccuracy accuracy) -> void
Microsoft.Maui.Devices.Sensors.GeolocationRequest.RequestFullAccuracy.get -> bool
Microsoft.Maui.Devices.Sensors.GeolocationRequest.RequestFullAccuracy.set -> void
Microsoft.Maui.Devices.Sensors.GeolocationRequest.Timeout.get -> System.TimeSpan
Microsoft.Maui.Devices.Sensors.GeolocationRequest.Timeout.set -> void
Microsoft.Maui.Devices.Sensors.Gyroscope
Microsoft.Maui.Devices.Sensors.GyroscopeChangedEventArgs
Microsoft.Maui.Devices.Sensors.GyroscopeChangedEventArgs.GyroscopeChangedEventArgs(Microsoft.Maui.Devices.Sensors.GyroscopeData reading) -> void
Microsoft.Maui.Devices.Sensors.GyroscopeChangedEventArgs.Reading.get -> Microsoft.Maui.Devices.Sensors.GyroscopeData
Microsoft.Maui.Devices.Sensors.GyroscopeData
Microsoft.Maui.Devices.Sensors.GyroscopeData.AngularVelocity.get -> System.Numerics.Vector3
Microsoft.Maui.Devices.Sensors.GyroscopeData.Equals(Microsoft.Maui.Devices.Sensors.GyroscopeData other) -> bool
Microsoft.Maui.Devices.Sensors.GyroscopeData.GyroscopeData() -> void
Microsoft.Maui.Devices.Sensors.GyroscopeData.GyroscopeData(double x, double y, double z) -> void
Microsoft.Maui.Devices.Sensors.GyroscopeData.GyroscopeData(float x, float y, float z) -> void
Microsoft.Maui.Devices.Sensors.IAccelerometer
Microsoft.Maui.Devices.Sensors.IAccelerometer.IsMonitoring.get -> bool
Microsoft.Maui.Devices.Sensors.IAccelerometer.IsSupported.get -> bool
Microsoft.Maui.Devices.Sensors.IAccelerometer.ReadingChanged -> System.EventHandler<Microsoft.Maui.Devices.Sensors.AccelerometerChangedEventArgs!>?
Microsoft.Maui.Devices.Sensors.IAccelerometer.ShakeDetected -> System.EventHandler?
Microsoft.Maui.Devices.Sensors.IAccelerometer.Start(Microsoft.Maui.Devices.Sensors.SensorSpeed sensorSpeed) -> void
Microsoft.Maui.Devices.Sensors.IAccelerometer.Stop() -> void
Microsoft.Maui.Devices.Sensors.IBarometer
Microsoft.Maui.Devices.Sensors.IBarometer.IsMonitoring.get -> bool
Microsoft.Maui.Devices.Sensors.IBarometer.IsSupported.get -> bool
Microsoft.Maui.Devices.Sensors.IBarometer.ReadingChanged -> System.EventHandler<Microsoft.Maui.Devices.Sensors.BarometerChangedEventArgs!>?
Microsoft.Maui.Devices.Sensors.IBarometer.Start(Microsoft.Maui.Devices.Sensors.SensorSpeed sensorSpeed) -> void
Microsoft.Maui.Devices.Sensors.IBarometer.Stop() -> void
Microsoft.Maui.Devices.Sensors.ICompass
Microsoft.Maui.Devices.Sensors.ICompass.IsMonitoring.get -> bool
Microsoft.Maui.Devices.Sensors.ICompass.IsSupported.get -> bool
Microsoft.Maui.Devices.Sensors.ICompass.ReadingChanged -> System.EventHandler<Microsoft.Maui.Devices.Sensors.CompassChangedEventArgs!>!
Microsoft.Maui.Devices.Sensors.ICompass.Start(Microsoft.Maui.Devices.Sensors.SensorSpeed sensorSpeed, bool applyLowPassFilter) -> void
Microsoft.Maui.Devices.Sensors.ICompass.Start(Microsoft.Maui.Devices.Sensors.SensorSpeed sensorSpeed) -> void
Microsoft.Maui.Devices.Sensors.ICompass.Stop() -> void
Microsoft.Maui.Devices.Sensors.IGeocoding
Microsoft.Maui.Devices.Sensors.IGeocoding.GetLocationsAsync(string! address) -> System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<Microsoft.Maui.Devices.Sensors.Location!>!>!
Microsoft.Maui.Devices.Sensors.IGeocoding.GetPlacemarksAsync(double latitude, double longitude) -> System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<Microsoft.Maui.Devices.Sensors.Placemark!>!>!
Microsoft.Maui.Devices.Sensors.IGeolocation
Microsoft.Maui.Devices.Sensors.IGeolocation.GetLastKnownLocationAsync() -> System.Threading.Tasks.Task<Microsoft.Maui.Devices.Sensors.Location?>!
Microsoft.Maui.Devices.Sensors.IGeolocation.GetLocationAsync(Microsoft.Maui.Devices.Sensors.GeolocationRequest! request, System.Threading.CancellationToken cancelToken) -> System.Threading.Tasks.Task<Microsoft.Maui.Devices.Sensors.Location?>!
Microsoft.Maui.Devices.Sensors.IGeolocation.IsListeningForeground.get -> bool
Microsoft.Maui.Devices.Sensors.IGeolocation.ListeningFailed -> System.EventHandler<Microsoft.Maui.Devices.Sensors.GeolocationListeningFailedEventArgs!>?
Microsoft.Maui.Devices.Sensors.IGeolocation.LocationChanged -> System.EventHandler<Microsoft.Maui.Devices.Sensors.GeolocationLocationChangedEventArgs!>?
Microsoft.Maui.Devices.Sensors.IGeolocation.StartListeningForegroundAsync(Microsoft.Maui.Devices.Sensors.GeolocationListeningRequest! request) -> System.Threading.Tasks.Task<bool>!
Microsoft.Maui.Devices.Sensors.IGeolocation.StopListeningForeground() -> void
Microsoft.Maui.Devices.Sensors.IGyroscope
Microsoft.Maui.Devices.Sensors.IGyroscope.IsMonitoring.get -> bool
Microsoft.Maui.Devices.Sensors.IGyroscope.IsSupported.get -> bool
Microsoft.Maui.Devices.Sensors.IGyroscope.ReadingChanged -> System.EventHandler<Microsoft.Maui.Devices.Sensors.GyroscopeChangedEventArgs!>!
Microsoft.Maui.Devices.Sensors.IGyroscope.Start(Microsoft.Maui.Devices.Sensors.SensorSpeed sensorSpeed) -> void
Microsoft.Maui.Devices.Sensors.IGyroscope.Stop() -> void
Microsoft.Maui.Devices.Sensors.IMagnetometer
Microsoft.Maui.Devices.Sensors.IMagnetometer.IsMonitoring.get -> bool
Microsoft.Maui.Devices.Sensors.IMagnetometer.IsSupported.get -> bool
Microsoft.Maui.Devices.Sensors.IMagnetometer.ReadingChanged -> System.EventHandler<Microsoft.Maui.Devices.Sensors.MagnetometerChangedEventArgs!>!
Microsoft.Maui.Devices.Sensors.IMagnetometer.Start(Microsoft.Maui.Devices.Sensors.SensorSpeed sensorSpeed) -> void
Microsoft.Maui.Devices.Sensors.IMagnetometer.Stop() -> void
Microsoft.Maui.Devices.Sensors.IOrientationSensor
Microsoft.Maui.Devices.Sensors.IOrientationSensor.IsMonitoring.get -> bool
Microsoft.Maui.Devices.Sensors.IOrientationSensor.IsSupported.get -> bool
Microsoft.Maui.Devices.Sensors.IOrientationSensor.ReadingChanged -> System.EventHandler<Microsoft.Maui.Devices.Sensors.OrientationSensorChangedEventArgs!>!
Microsoft.Maui.Devices.Sensors.IOrientationSensor.Start(Microsoft.Maui.Devices.Sensors.SensorSpeed sensorSpeed) -> void
Microsoft.Maui.Devices.Sensors.IOrientationSensor.Stop() -> void
Microsoft.Maui.Devices.Sensors.IPlatformCompass
Microsoft.Maui.Devices.Sensors.IPlatformGeocoding
Microsoft.Maui.Devices.Sensors.IPlatformGeocoding.MapServiceToken.get -> string?
Microsoft.Maui.Devices.Sensors.IPlatformGeocoding.MapServiceToken.set -> void
Microsoft.Maui.Devices.Sensors.Location
Microsoft.Maui.Devices.Sensors.Location.Accuracy.get -> double?
Microsoft.Maui.Devices.Sensors.Location.Accuracy.set -> void
Microsoft.Maui.Devices.Sensors.Location.Altitude.get -> double?
Microsoft.Maui.Devices.Sensors.Location.Altitude.set -> void
Microsoft.Maui.Devices.Sensors.Location.AltitudeReferenceSystem.get -> Microsoft.Maui.Devices.Sensors.AltitudeReferenceSystem
Microsoft.Maui.Devices.Sensors.Location.AltitudeReferenceSystem.set -> void
Microsoft.Maui.Devices.Sensors.Location.Course.get -> double?
Microsoft.Maui.Devices.Sensors.Location.Course.set -> void
Microsoft.Maui.Devices.Sensors.Location.IsFromMockProvider.get -> bool
Microsoft.Maui.Devices.Sensors.Location.IsFromMockProvider.set -> void
Microsoft.Maui.Devices.Sensors.Location.Latitude.get -> double
Microsoft.Maui.Devices.Sensors.Location.Latitude.set -> void
Microsoft.Maui.Devices.Sensors.Location.Location() -> void
Microsoft.Maui.Devices.Sensors.Location.Location(double latitude, double longitude, double altitude) -> void
Microsoft.Maui.Devices.Sensors.Location.Location(double latitude, double longitude, System.DateTimeOffset timestamp) -> void
Microsoft.Maui.Devices.Sensors.Location.Location(double latitude, double longitude) -> void
Microsoft.Maui.Devices.Sensors.Location.Longitude.get -> double
Microsoft.Maui.Devices.Sensors.Location.Longitude.set -> void
Microsoft.Maui.Devices.Sensors.Location.ReducedAccuracy.get -> bool
Microsoft.Maui.Devices.Sensors.Location.ReducedAccuracy.set -> void
Microsoft.Maui.Devices.Sensors.Location.Speed.get -> double?
Microsoft.Maui.Devices.Sensors.Location.Speed.set -> void
Microsoft.Maui.Devices.Sensors.Location.Timestamp.get -> System.DateTimeOffset
Microsoft.Maui.Devices.Sensors.Location.Timestamp.set -> void
Microsoft.Maui.Devices.Sensors.Location.VerticalAccuracy.get -> double?
Microsoft.Maui.Devices.Sensors.Location.VerticalAccuracy.set -> void
Microsoft.Maui.Devices.Sensors.LocationExtensions
Microsoft.Maui.Devices.Sensors.Magnetometer
Microsoft.Maui.Devices.Sensors.MagnetometerChangedEventArgs
Microsoft.Maui.Devices.Sensors.MagnetometerChangedEventArgs.MagnetometerChangedEventArgs(Microsoft.Maui.Devices.Sensors.MagnetometerData reading) -> void
Microsoft.Maui.Devices.Sensors.MagnetometerChangedEventArgs.Reading.get -> Microsoft.Maui.Devices.Sensors.MagnetometerData
Microsoft.Maui.Devices.Sensors.MagnetometerData
Microsoft.Maui.Devices.Sensors.MagnetometerData.Equals(Microsoft.Maui.Devices.Sensors.MagnetometerData other) -> bool
Microsoft.Maui.Devices.Sensors.MagnetometerData.MagneticField.get -> System.Numerics.Vector3
Microsoft.Maui.Devices.Sensors.MagnetometerData.MagnetometerData() -> void
Microsoft.Maui.Devices.Sensors.MagnetometerData.MagnetometerData(double x, double y, double z) -> void
Microsoft.Maui.Devices.Sensors.MagnetometerData.MagnetometerData(float x, float y, float z) -> void
Microsoft.Maui.Devices.Sensors.OrientationSensor
Microsoft.Maui.Devices.Sensors.OrientationSensorChangedEventArgs
Microsoft.Maui.Devices.Sensors.OrientationSensorChangedEventArgs.OrientationSensorChangedEventArgs(Microsoft.Maui.Devices.Sensors.OrientationSensorData reading) -> void
Microsoft.Maui.Devices.Sensors.OrientationSensorChangedEventArgs.Reading.get -> Microsoft.Maui.Devices.Sensors.OrientationSensorData
Microsoft.Maui.Devices.Sensors.OrientationSensorData
Microsoft.Maui.Devices.Sensors.OrientationSensorData.Equals(Microsoft.Maui.Devices.Sensors.OrientationSensorData other) -> bool
Microsoft.Maui.Devices.Sensors.OrientationSensorData.Orientation.get -> System.Numerics.Quaternion
Microsoft.Maui.Devices.Sensors.OrientationSensorData.OrientationSensorData() -> void
Microsoft.Maui.Devices.Sensors.OrientationSensorData.OrientationSensorData(double x, double y, double z, double w) -> void
Microsoft.Maui.Devices.Sensors.OrientationSensorData.OrientationSensorData(float x, float y, float z, float w) -> void
Microsoft.Maui.Devices.Sensors.OrientationSensorImplementation
Microsoft.Maui.Devices.Sensors.OrientationSensorImplementation.IsMonitoring.get -> bool
Microsoft.Maui.Devices.Sensors.OrientationSensorImplementation.IsSupported.get -> bool
Microsoft.Maui.Devices.Sensors.OrientationSensorImplementation.OrientationSensorImplementation() -> void
Microsoft.Maui.Devices.Sensors.OrientationSensorImplementation.ReadingChanged -> System.EventHandler<Microsoft.Maui.Devices.Sensors.OrientationSensorChangedEventArgs!>?
Microsoft.Maui.Devices.Sensors.OrientationSensorImplementation.Start(Microsoft.Maui.Devices.Sensors.SensorSpeed sensorSpeed) -> void
Microsoft.Maui.Devices.Sensors.OrientationSensorImplementation.Stop() -> void
Microsoft.Maui.Devices.Sensors.Placemark
Microsoft.Maui.Devices.Sensors.Placemark.Placemark() -> void
Microsoft.Maui.Devices.Sensors.PlacemarkExtensions
Microsoft.Maui.Devices.Sensors.SensorSpeed
Microsoft.Maui.Devices.Sensors.SensorSpeed.Default = 0 -> Microsoft.Maui.Devices.Sensors.SensorSpeed
Microsoft.Maui.Devices.Sensors.SensorSpeed.Fastest = 3 -> Microsoft.Maui.Devices.Sensors.SensorSpeed
Microsoft.Maui.Devices.Sensors.SensorSpeed.Game = 2 -> Microsoft.Maui.Devices.Sensors.SensorSpeed
Microsoft.Maui.Devices.Sensors.SensorSpeed.UI = 1 -> Microsoft.Maui.Devices.Sensors.SensorSpeed
Microsoft.Maui.Devices.Vibration
Microsoft.Maui.Devices.VibrationExtensions
Microsoft.Maui.Media.IMediaPicker
Microsoft.Maui.Media.IMediaPicker.CapturePhotoAsync(Microsoft.Maui.Media.MediaPickerOptions? options = null) -> System.Threading.Tasks.Task<Microsoft.Maui.Storage.FileResult?>!
Microsoft.Maui.Media.IMediaPicker.CaptureVideoAsync(Microsoft.Maui.Media.MediaPickerOptions? options = null) -> System.Threading.Tasks.Task<Microsoft.Maui.Storage.FileResult?>!
Microsoft.Maui.Media.IMediaPicker.IsCaptureSupported.get -> bool
Microsoft.Maui.Media.IMediaPicker.PickPhotoAsync(Microsoft.Maui.Media.MediaPickerOptions? options = null) -> System.Threading.Tasks.Task<Microsoft.Maui.Storage.FileResult?>!
Microsoft.Maui.Media.IMediaPicker.PickVideoAsync(Microsoft.Maui.Media.MediaPickerOptions? options = null) -> System.Threading.Tasks.Task<Microsoft.Maui.Storage.FileResult?>!
Microsoft.Maui.Media.IPlatformScreenshot
Microsoft.Maui.Media.IPlatformScreenshot.CaptureAsync(Tizen.NUI.BaseComponents.View! view) -> System.Threading.Tasks.Task<Microsoft.Maui.Media.IScreenshotResult?>!
Microsoft.Maui.Media.IPlatformScreenshot.CaptureAsync(Tizen.NUI.Window! window) -> System.Threading.Tasks.Task<Microsoft.Maui.Media.IScreenshotResult!>!
Microsoft.Maui.Media.IScreenshot
Microsoft.Maui.Media.IScreenshot.CaptureAsync() -> System.Threading.Tasks.Task<Microsoft.Maui.Media.IScreenshotResult!>!
Microsoft.Maui.Media.IScreenshot.IsCaptureSupported.get -> bool
Microsoft.Maui.Media.IScreenshotResult
Microsoft.Maui.Media.IScreenshotResult.CopyToAsync(System.IO.Stream! destination, Microsoft.Maui.Media.ScreenshotFormat format = Microsoft.Maui.Media.ScreenshotFormat.Png, int quality = 100) -> System.Threading.Tasks.Task!
Microsoft.Maui.Media.IScreenshotResult.Height.get -> int
Microsoft.Maui.Media.IScreenshotResult.OpenReadAsync(Microsoft.Maui.Media.ScreenshotFormat format = Microsoft.Maui.Media.ScreenshotFormat.Png, int quality = 100) -> System.Threading.Tasks.Task<System.IO.Stream!>!
Microsoft.Maui.Media.IScreenshotResult.Width.get -> int
Microsoft.Maui.Media.ITextToSpeech
Microsoft.Maui.Media.ITextToSpeech.GetLocalesAsync() -> System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<Microsoft.Maui.Media.Locale!>!>!
Microsoft.Maui.Media.ITextToSpeech.SpeakAsync(string! text, Microsoft.Maui.Media.SpeechOptions? options = null, System.Threading.CancellationToken cancelToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
Microsoft.Maui.Media.Locale
Microsoft.Maui.Media.Locale.Country.get -> string!
Microsoft.Maui.Media.Locale.Id.get -> string!
Microsoft.Maui.Media.Locale.Language.get -> string!
Microsoft.Maui.Media.Locale.Name.get -> string!
Microsoft.Maui.Media.MediaPicker
Microsoft.Maui.Media.MediaPickerOptions
Microsoft.Maui.Media.MediaPickerOptions.MediaPickerOptions() -> void
Microsoft.Maui.Media.MediaPickerOptions.Title.get -> string?
Microsoft.Maui.Media.MediaPickerOptions.Title.set -> void
Microsoft.Maui.Media.Screenshot
Microsoft.Maui.Media.ScreenshotExtensions
Microsoft.Maui.Media.ScreenshotFormat
Microsoft.Maui.Media.ScreenshotFormat.Jpeg = 1 -> Microsoft.Maui.Media.ScreenshotFormat
Microsoft.Maui.Media.ScreenshotFormat.Png = 0 -> Microsoft.Maui.Media.ScreenshotFormat
Microsoft.Maui.Media.SpeechOptions
Microsoft.Maui.Media.SpeechOptions.Locale.get -> Microsoft.Maui.Media.Locale?
Microsoft.Maui.Media.SpeechOptions.Locale.set -> void
Microsoft.Maui.Media.SpeechOptions.Pitch.get -> float?
Microsoft.Maui.Media.SpeechOptions.Pitch.set -> void
Microsoft.Maui.Media.SpeechOptions.SpeechOptions() -> void
Microsoft.Maui.Media.SpeechOptions.Volume.get -> float?
Microsoft.Maui.Media.SpeechOptions.Volume.set -> void
Microsoft.Maui.Media.TextToSpeech
Microsoft.Maui.Media.UnitConverters
Microsoft.Maui.Networking.ConnectionProfile
Microsoft.Maui.Networking.ConnectionProfile.Bluetooth = 1 -> Microsoft.Maui.Networking.ConnectionProfile
Microsoft.Maui.Networking.ConnectionProfile.Cellular = 2 -> Microsoft.Maui.Networking.ConnectionProfile
Microsoft.Maui.Networking.ConnectionProfile.Ethernet = 3 -> Microsoft.Maui.Networking.ConnectionProfile
Microsoft.Maui.Networking.ConnectionProfile.Unknown = 0 -> Microsoft.Maui.Networking.ConnectionProfile
Microsoft.Maui.Networking.ConnectionProfile.WiFi = 4 -> Microsoft.Maui.Networking.ConnectionProfile
Microsoft.Maui.Networking.Connectivity
Microsoft.Maui.Networking.ConnectivityChangedEventArgs
Microsoft.Maui.Networking.ConnectivityChangedEventArgs.NetworkAccess.get -> Microsoft.Maui.Networking.NetworkAccess
Microsoft.Maui.Networking.IConnectivity
Microsoft.Maui.Networking.IConnectivity.ConnectivityChanged -> System.EventHandler<Microsoft.Maui.Networking.ConnectivityChangedEventArgs>
Microsoft.Maui.Networking.IConnectivity.NetworkAccess.get -> Microsoft.Maui.Networking.NetworkAccess
Microsoft.Maui.Networking.NetworkAccess
Microsoft.Maui.Networking.NetworkAccess.ConstrainedInternet = 3 -> Microsoft.Maui.Networking.NetworkAccess
Microsoft.Maui.Networking.NetworkAccess.Internet = 4 -> Microsoft.Maui.Networking.NetworkAccess
Microsoft.Maui.Networking.NetworkAccess.Local = 2 -> Microsoft.Maui.Networking.NetworkAccess
Microsoft.Maui.Networking.NetworkAccess.None = 1 -> Microsoft.Maui.Networking.NetworkAccess
Microsoft.Maui.Networking.NetworkAccess.Unknown = 0 -> Microsoft.Maui.Networking.NetworkAccess
Microsoft.Maui.Storage.FileBase
Microsoft.Maui.Storage.FileBase.ContentType.get -> string!
Microsoft.Maui.Storage.FileBase.ContentType.set -> void
Microsoft.Maui.Storage.FileBase.FileBase(Microsoft.Maui.Storage.FileBase! file) -> void
Microsoft.Maui.Storage.FileBase.FileName.get -> string!
Microsoft.Maui.Storage.FileBase.FileName.set -> void
Microsoft.Maui.Storage.FileBase.FullPath.get -> string!
Microsoft.Maui.Storage.FileBase.OpenReadAsync() -> System.Threading.Tasks.Task<System.IO.Stream!>!
Microsoft.Maui.Storage.FilePicker
Microsoft.Maui.Storage.FilePickerFileType
Microsoft.Maui.Storage.FilePickerFileType.FilePickerFileType() -> void
Microsoft.Maui.Storage.FilePickerFileType.FilePickerFileType(System.Collections.Generic.IDictionary<Microsoft.Maui.Devices.DevicePlatform, System.Collections.Generic.IEnumerable<string!>!>! fileTypes) -> void
Microsoft.Maui.Storage.FilePickerFileType.Value.get -> System.Collections.Generic.IEnumerable<string!>!
Microsoft.Maui.Storage.FileResult
Microsoft.Maui.Storage.FileResult.FileResult(Microsoft.Maui.Storage.FileBase! file) -> void
Microsoft.Maui.Storage.FileResult.FileResult(string! fullPath, string! contentType) -> void
Microsoft.Maui.Storage.FileResult.FileResult(string! fullPath) -> void
Microsoft.Maui.Storage.FileSystem
Microsoft.Maui.Storage.FileSystemImplementation
Microsoft.Maui.Storage.FileSystemImplementation.AppDataDirectory.get -> string!
Microsoft.Maui.Storage.FileSystemImplementation.AppPackageFileExistsAsync(string! filename) -> System.Threading.Tasks.Task<bool>!
Microsoft.Maui.Storage.FileSystemImplementation.CacheDirectory.get -> string!
Microsoft.Maui.Storage.FileSystemImplementation.FileSystemImplementation() -> void
Microsoft.Maui.Storage.FileSystemImplementation.OpenAppPackageFileAsync(string! filename) -> System.Threading.Tasks.Task<System.IO.Stream!>!
Microsoft.Maui.Storage.IFilePicker
Microsoft.Maui.Storage.IFilePicker.PickAsync(Microsoft.Maui.Storage.PickOptions? options = null) -> System.Threading.Tasks.Task<Microsoft.Maui.Storage.FileResult?>!
Microsoft.Maui.Storage.IFilePicker.PickMultipleAsync(Microsoft.Maui.Storage.PickOptions? options = null) -> System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<Microsoft.Maui.Storage.FileResult!>!>!
Microsoft.Maui.Storage.IFileSystem
Microsoft.Maui.Storage.IFileSystem.AppDataDirectory.get -> string!
Microsoft.Maui.Storage.IFileSystem.AppPackageFileExistsAsync(string! filename) -> System.Threading.Tasks.Task<bool>!
Microsoft.Maui.Storage.IFileSystem.CacheDirectory.get -> string!
Microsoft.Maui.Storage.IFileSystem.OpenAppPackageFileAsync(string! filename) -> System.Threading.Tasks.Task<System.IO.Stream!>!
Microsoft.Maui.Storage.IPlatformSecureStorage
Microsoft.Maui.Storage.IPreferences
Microsoft.Maui.Storage.IPreferences.Clear(string? sharedName = null) -> void
Microsoft.Maui.Storage.IPreferences.ContainsKey(string! key, string? sharedName = null) -> bool
Microsoft.Maui.Storage.IPreferences.Get<T>(string! key, T defaultValue, string? sharedName = null) -> T
Microsoft.Maui.Storage.IPreferences.Remove(string! key, string? sharedName = null) -> void
Microsoft.Maui.Storage.IPreferences.Set<T>(string! key, T value, string? sharedName = null) -> void
Microsoft.Maui.Storage.ISecureStorage
Microsoft.Maui.Storage.ISecureStorage.GetAsync(string! key) -> System.Threading.Tasks.Task<string?>!
Microsoft.Maui.Storage.ISecureStorage.Remove(string! key) -> bool
Microsoft.Maui.Storage.ISecureStorage.RemoveAll() -> void
Microsoft.Maui.Storage.ISecureStorage.SetAsync(string! key, string! value) -> System.Threading.Tasks.Task!
Microsoft.Maui.Storage.PickOptions
Microsoft.Maui.Storage.PickOptions.FileTypes.get -> Microsoft.Maui.Storage.FilePickerFileType?
Microsoft.Maui.Storage.PickOptions.FileTypes.set -> void
Microsoft.Maui.Storage.PickOptions.PickerTitle.get -> string?
Microsoft.Maui.Storage.PickOptions.PickerTitle.set -> void
Microsoft.Maui.Storage.PickOptions.PickOptions() -> void
Microsoft.Maui.Storage.Preferences
Microsoft.Maui.Storage.ReadOnlyFile
Microsoft.Maui.Storage.ReadOnlyFile.ReadOnlyFile(Microsoft.Maui.Storage.FileBase! file) -> void
Microsoft.Maui.Storage.ReadOnlyFile.ReadOnlyFile(string! fullPath, string! contentType) -> void
Microsoft.Maui.Storage.ReadOnlyFile.ReadOnlyFile(string! fullPath) -> void
Microsoft.Maui.Storage.SecureStorage
Microsoft.Maui.Storage.SecureStorageExtensions
override Microsoft.Maui.ApplicationModel.Permissions.BasePlatformPermission.EnsureDeclared() -> void
override Microsoft.Maui.ApplicationModel.Permissions.BasePlatformPermission.ShouldShowRationale() -> bool
override Microsoft.Maui.Devices.BatteryInfoChangedEventArgs.ToString() -> string!
override Microsoft.Maui.Devices.DeviceIdiom.GetHashCode() -> int
override Microsoft.Maui.Devices.DevicePlatform.GetHashCode() -> int
override Microsoft.Maui.Devices.DisplayInfo.GetHashCode() -> int
override Microsoft.Maui.Devices.EnergySaverStatusChangedEventArgs.ToString() -> string!
override Microsoft.Maui.Devices.Sensors.AccelerometerData.Equals(object? obj) -> bool
override Microsoft.Maui.Devices.Sensors.AccelerometerData.GetHashCode() -> int
override Microsoft.Maui.Devices.Sensors.AccelerometerData.ToString() -> string!
override Microsoft.Maui.Devices.Sensors.BarometerData.Equals(object? obj) -> bool
override Microsoft.Maui.Devices.Sensors.BarometerData.GetHashCode() -> int
override Microsoft.Maui.Devices.Sensors.BarometerData.ToString() -> string!
override Microsoft.Maui.Devices.Sensors.CompassData.Equals(object? obj) -> bool
override Microsoft.Maui.Devices.Sensors.CompassData.GetHashCode() -> int
override Microsoft.Maui.Devices.Sensors.CompassData.ToString() -> string!
override Microsoft.Maui.Devices.Sensors.GeolocationRequest.ToString() -> string!
override Microsoft.Maui.Devices.Sensors.GyroscopeData.Equals(object? obj) -> bool
override Microsoft.Maui.Devices.Sensors.GyroscopeData.GetHashCode() -> int
override Microsoft.Maui.Devices.Sensors.GyroscopeData.ToString() -> string!
override Microsoft.Maui.Devices.Sensors.Location.GetHashCode() -> int
override Microsoft.Maui.Devices.Sensors.MagnetometerData.Equals(object? obj) -> bool
override Microsoft.Maui.Devices.Sensors.MagnetometerData.GetHashCode() -> int
override Microsoft.Maui.Devices.Sensors.MagnetometerData.ToString() -> string!
override Microsoft.Maui.Devices.Sensors.OrientationSensorData.Equals(object? obj) -> bool
override Microsoft.Maui.Devices.Sensors.OrientationSensorData.GetHashCode() -> int
override Microsoft.Maui.Devices.Sensors.OrientationSensorData.ToString() -> string!
static Microsoft.Maui.Accessibility.SemanticScreenReader.Announce(string! text) -> void
static Microsoft.Maui.Accessibility.SemanticScreenReader.Default.get -> Microsoft.Maui.Accessibility.ISemanticScreenReader!
static Microsoft.Maui.ApplicationModel.AppActions.Current.get -> Microsoft.Maui.ApplicationModel.IAppActions!
static Microsoft.Maui.ApplicationModel.AppActions.GetAsync() -> System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<Microsoft.Maui.ApplicationModel.AppAction!>!>!
static Microsoft.Maui.ApplicationModel.AppActions.IsSupported.get -> bool
static Microsoft.Maui.ApplicationModel.AppActions.OnAppAction -> System.EventHandler<Microsoft.Maui.ApplicationModel.AppActionEventArgs!>?
static Microsoft.Maui.ApplicationModel.AppActions.SetAsync(params Microsoft.Maui.ApplicationModel.AppAction![]! actions) -> System.Threading.Tasks.Task!
static Microsoft.Maui.ApplicationModel.AppActions.SetAsync(System.Collections.Generic.IEnumerable<Microsoft.Maui.ApplicationModel.AppAction!>! actions) -> System.Threading.Tasks.Task!
static Microsoft.Maui.ApplicationModel.AppInfo.BuildString.get -> string!
static Microsoft.Maui.ApplicationModel.AppInfo.Current.get -> Microsoft.Maui.ApplicationModel.IAppInfo!
static Microsoft.Maui.ApplicationModel.AppInfo.Name.get -> string!
static Microsoft.Maui.ApplicationModel.AppInfo.PackageName.get -> string!
static Microsoft.Maui.ApplicationModel.AppInfo.PackagingModel.get -> Microsoft.Maui.ApplicationModel.AppPackagingModel
static Microsoft.Maui.ApplicationModel.AppInfo.RequestedLayoutDirection.get -> Microsoft.Maui.ApplicationModel.LayoutDirection
static Microsoft.Maui.ApplicationModel.AppInfo.RequestedTheme.get -> Microsoft.Maui.ApplicationModel.AppTheme
static Microsoft.Maui.ApplicationModel.AppInfo.ShowSettingsUI() -> void
static Microsoft.Maui.ApplicationModel.AppInfo.Version.get -> System.Version!
static Microsoft.Maui.ApplicationModel.AppInfo.VersionString.get -> string!
static Microsoft.Maui.ApplicationModel.Browser.Default.get -> Microsoft.Maui.ApplicationModel.IBrowser!
static Microsoft.Maui.ApplicationModel.Browser.OpenAsync(string! uri, Microsoft.Maui.ApplicationModel.BrowserLaunchMode launchMode) -> System.Threading.Tasks.Task<bool>!
static Microsoft.Maui.ApplicationModel.Browser.OpenAsync(string! uri, Microsoft.Maui.ApplicationModel.BrowserLaunchOptions! options) -> System.Threading.Tasks.Task<bool>!
static Microsoft.Maui.ApplicationModel.Browser.OpenAsync(string! uri) -> System.Threading.Tasks.Task<bool>!
static Microsoft.Maui.ApplicationModel.Browser.OpenAsync(System.Uri! uri, Microsoft.Maui.ApplicationModel.BrowserLaunchMode launchMode) -> System.Threading.Tasks.Task<bool>!
static Microsoft.Maui.ApplicationModel.Browser.OpenAsync(System.Uri! uri, Microsoft.Maui.ApplicationModel.BrowserLaunchOptions! options) -> System.Threading.Tasks.Task<bool>!
static Microsoft.Maui.ApplicationModel.Browser.OpenAsync(System.Uri! uri) -> System.Threading.Tasks.Task<bool>!
static Microsoft.Maui.ApplicationModel.BrowserExtensions.OpenAsync(this Microsoft.Maui.ApplicationModel.IBrowser! browser, string! uri, Microsoft.Maui.ApplicationModel.BrowserLaunchMode launchMode) -> System.Threading.Tasks.Task<bool>!
static Microsoft.Maui.ApplicationModel.BrowserExtensions.OpenAsync(this Microsoft.Maui.ApplicationModel.IBrowser! browser, string! uri, Microsoft.Maui.ApplicationModel.BrowserLaunchOptions! options) -> System.Threading.Tasks.Task<bool>!
static Microsoft.Maui.ApplicationModel.BrowserExtensions.OpenAsync(this Microsoft.Maui.ApplicationModel.IBrowser! browser, string! uri) -> System.Threading.Tasks.Task<bool>!
static Microsoft.Maui.ApplicationModel.BrowserExtensions.OpenAsync(this Microsoft.Maui.ApplicationModel.IBrowser! browser, System.Uri! uri, Microsoft.Maui.ApplicationModel.BrowserLaunchMode launchMode) -> System.Threading.Tasks.Task<bool>!
static Microsoft.Maui.ApplicationModel.BrowserExtensions.OpenAsync(this Microsoft.Maui.ApplicationModel.IBrowser! browser, System.Uri! uri) -> System.Threading.Tasks.Task<bool>!
static Microsoft.Maui.ApplicationModel.Communication.Contacts.Default.get -> Microsoft.Maui.ApplicationModel.Communication.IContacts!
static Microsoft.Maui.ApplicationModel.Communication.Contacts.GetAllAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<Microsoft.Maui.ApplicationModel.Communication.Contact!>!>!
static Microsoft.Maui.ApplicationModel.Communication.Contacts.PickContactAsync() -> System.Threading.Tasks.Task<Microsoft.Maui.ApplicationModel.Communication.Contact?>!
static Microsoft.Maui.ApplicationModel.Communication.Email.ComposeAsync() -> System.Threading.Tasks.Task!
static Microsoft.Maui.ApplicationModel.Communication.Email.ComposeAsync(Microsoft.Maui.ApplicationModel.Communication.EmailMessage! message) -> System.Threading.Tasks.Task!
static Microsoft.Maui.ApplicationModel.Communication.Email.ComposeAsync(string! subject, string! body, params string![]! to) -> System.Threading.Tasks.Task!
static Microsoft.Maui.ApplicationModel.Communication.Email.Default.get -> Microsoft.Maui.ApplicationModel.Communication.IEmail!
static Microsoft.Maui.ApplicationModel.Communication.EmailExtensions.ComposeAsync(this Microsoft.Maui.ApplicationModel.Communication.IEmail! email, string! subject, string! body, params string![]! to) -> System.Threading.Tasks.Task!
static Microsoft.Maui.ApplicationModel.Communication.EmailExtensions.ComposeAsync(this Microsoft.Maui.ApplicationModel.Communication.IEmail! email) -> System.Threading.Tasks.Task!
static Microsoft.Maui.ApplicationModel.Communication.PhoneDialer.Default.get -> Microsoft.Maui.ApplicationModel.Communication.IPhoneDialer!
static Microsoft.Maui.ApplicationModel.Communication.PhoneDialer.IsSupported.get -> bool
static Microsoft.Maui.ApplicationModel.Communication.PhoneDialer.Open(string! number) -> void
static Microsoft.Maui.ApplicationModel.Communication.Sms.ComposeAsync() -> System.Threading.Tasks.Task!
static Microsoft.Maui.ApplicationModel.Communication.Sms.ComposeAsync(Microsoft.Maui.ApplicationModel.Communication.SmsMessage? message) -> System.Threading.Tasks.Task!
static Microsoft.Maui.ApplicationModel.Communication.Sms.Default.get -> Microsoft.Maui.ApplicationModel.Communication.ISms!
static Microsoft.Maui.ApplicationModel.DataTransfer.Clipboard.ClipboardContentChanged -> System.EventHandler<System.EventArgs!>!
static Microsoft.Maui.ApplicationModel.DataTransfer.Clipboard.Default.get -> Microsoft.Maui.ApplicationModel.DataTransfer.IClipboard!
static Microsoft.Maui.ApplicationModel.DataTransfer.Clipboard.GetTextAsync() -> System.Threading.Tasks.Task<string?>!
static Microsoft.Maui.ApplicationModel.DataTransfer.Clipboard.HasText.get -> bool
static Microsoft.Maui.ApplicationModel.DataTransfer.Clipboard.SetTextAsync(string? text) -> System.Threading.Tasks.Task!
static Microsoft.Maui.ApplicationModel.DataTransfer.Share.Default.get -> Microsoft.Maui.ApplicationModel.DataTransfer.IShare!
static Microsoft.Maui.ApplicationModel.DataTransfer.Share.RequestAsync(Microsoft.Maui.ApplicationModel.DataTransfer.ShareFileRequest! request) -> System.Threading.Tasks.Task!
static Microsoft.Maui.ApplicationModel.DataTransfer.Share.RequestAsync(Microsoft.Maui.ApplicationModel.DataTransfer.ShareMultipleFilesRequest! request) -> System.Threading.Tasks.Task!
static Microsoft.Maui.ApplicationModel.DataTransfer.Share.RequestAsync(Microsoft.Maui.ApplicationModel.DataTransfer.ShareTextRequest! request) -> System.Threading.Tasks.Task!
static Microsoft.Maui.ApplicationModel.DataTransfer.Share.RequestAsync(string! text, string! title) -> System.Threading.Tasks.Task!
static Microsoft.Maui.ApplicationModel.DataTransfer.Share.RequestAsync(string! text) -> System.Threading.Tasks.Task!
static Microsoft.Maui.ApplicationModel.DataTransfer.ShareExtensions.RequestAsync(this Microsoft.Maui.ApplicationModel.DataTransfer.IShare! share, string! text, string! title) -> System.Threading.Tasks.Task!
static Microsoft.Maui.ApplicationModel.DataTransfer.ShareExtensions.RequestAsync(this Microsoft.Maui.ApplicationModel.DataTransfer.IShare! share, string! text) -> System.Threading.Tasks.Task!
static Microsoft.Maui.ApplicationModel.DataTransfer.ShareMultipleFilesRequest.explicit operator Microsoft.Maui.ApplicationModel.DataTransfer.ShareMultipleFilesRequest!(Microsoft.Maui.ApplicationModel.DataTransfer.ShareFileRequest! request) -> Microsoft.Maui.ApplicationModel.DataTransfer.ShareMultipleFilesRequest!
static Microsoft.Maui.ApplicationModel.Launcher.CanOpenAsync(string! uri) -> System.Threading.Tasks.Task<bool>!
static Microsoft.Maui.ApplicationModel.Launcher.CanOpenAsync(System.Uri! uri) -> System.Threading.Tasks.Task<bool>!
static Microsoft.Maui.ApplicationModel.Launcher.Default.get -> Microsoft.Maui.ApplicationModel.ILauncher!
static Microsoft.Maui.ApplicationModel.Launcher.OpenAsync(Microsoft.Maui.ApplicationModel.OpenFileRequest! request) -> System.Threading.Tasks.Task<bool>!
static Microsoft.Maui.ApplicationModel.Launcher.OpenAsync(string! uri) -> System.Threading.Tasks.Task<bool>!
static Microsoft.Maui.ApplicationModel.Launcher.OpenAsync(System.Uri! uri) -> System.Threading.Tasks.Task<bool>!
static Microsoft.Maui.ApplicationModel.Launcher.TryOpenAsync(string! uri) -> System.Threading.Tasks.Task<bool>!
static Microsoft.Maui.ApplicationModel.Launcher.TryOpenAsync(System.Uri! uri) -> System.Threading.Tasks.Task<bool>!
static Microsoft.Maui.ApplicationModel.LauncherExtensions.CanOpenAsync(this Microsoft.Maui.ApplicationModel.ILauncher! launcher, string! uri) -> System.Threading.Tasks.Task<bool>!
static Microsoft.Maui.ApplicationModel.LauncherExtensions.OpenAsync(this Microsoft.Maui.ApplicationModel.ILauncher! launcher, string! uri) -> System.Threading.Tasks.Task<bool>!
static Microsoft.Maui.ApplicationModel.LauncherExtensions.TryOpenAsync(this Microsoft.Maui.ApplicationModel.ILauncher! launcher, string! uri) -> System.Threading.Tasks.Task<bool>!
static Microsoft.Maui.ApplicationModel.MainThread.IsMainThread.get -> bool
static Microsoft.Maui.ApplicationModel.Map.Default.get -> Microsoft.Maui.ApplicationModel.IMap!
static Microsoft.Maui.ApplicationModel.Map.OpenAsync(double latitude, double longitude, Microsoft.Maui.ApplicationModel.MapLaunchOptions! options) -> System.Threading.Tasks.Task!
static Microsoft.Maui.ApplicationModel.Map.OpenAsync(double latitude, double longitude) -> System.Threading.Tasks.Task!
static Microsoft.Maui.ApplicationModel.Map.OpenAsync(Microsoft.Maui.Devices.Sensors.Location! location, Microsoft.Maui.ApplicationModel.MapLaunchOptions! options) -> System.Threading.Tasks.Task!
static Microsoft.Maui.ApplicationModel.Map.OpenAsync(Microsoft.Maui.Devices.Sensors.Location! location) -> System.Threading.Tasks.Task!
static Microsoft.Maui.ApplicationModel.Map.OpenAsync(Microsoft.Maui.Devices.Sensors.Placemark! placemark, Microsoft.Maui.ApplicationModel.MapLaunchOptions! options) -> System.Threading.Tasks.Task!
static Microsoft.Maui.ApplicationModel.Map.OpenAsync(Microsoft.Maui.Devices.Sensors.Placemark! placemark) -> System.Threading.Tasks.Task!
static Microsoft.Maui.ApplicationModel.Map.TryOpenAsync(double latitude, double longitude, Microsoft.Maui.ApplicationModel.MapLaunchOptions! options) -> System.Threading.Tasks.Task<bool>!
static Microsoft.Maui.ApplicationModel.Map.TryOpenAsync(double latitude, double longitude) -> System.Threading.Tasks.Task<bool>!
static Microsoft.Maui.ApplicationModel.Map.TryOpenAsync(Microsoft.Maui.Devices.Sensors.Location! location, Microsoft.Maui.ApplicationModel.MapLaunchOptions! options) -> System.Threading.Tasks.Task<bool>!
static Microsoft.Maui.ApplicationModel.Map.TryOpenAsync(Microsoft.Maui.Devices.Sensors.Location! location) -> System.Threading.Tasks.Task<bool>!
static Microsoft.Maui.ApplicationModel.Map.TryOpenAsync(Microsoft.Maui.Devices.Sensors.Placemark! placemark, Microsoft.Maui.ApplicationModel.MapLaunchOptions! options) -> System.Threading.Tasks.Task<bool>!
static Microsoft.Maui.ApplicationModel.Map.TryOpenAsync(Microsoft.Maui.Devices.Sensors.Placemark! placemark) -> System.Threading.Tasks.Task<bool>!
static Microsoft.Maui.ApplicationModel.MapExtensions.OpenAsync(this Microsoft.Maui.ApplicationModel.IMap! map, double latitude, double longitude) -> System.Threading.Tasks.Task!
static Microsoft.Maui.ApplicationModel.MapExtensions.OpenAsync(this Microsoft.Maui.ApplicationModel.IMap! map, Microsoft.Maui.Devices.Sensors.Location! location, Microsoft.Maui.ApplicationModel.MapLaunchOptions! options) -> System.Threading.Tasks.Task!
static Microsoft.Maui.ApplicationModel.MapExtensions.OpenAsync(this Microsoft.Maui.ApplicationModel.IMap! map, Microsoft.Maui.Devices.Sensors.Location! location) -> System.Threading.Tasks.Task!
static Microsoft.Maui.ApplicationModel.MapExtensions.OpenAsync(this Microsoft.Maui.ApplicationModel.IMap! map, Microsoft.Maui.Devices.Sensors.Placemark! placemark) -> System.Threading.Tasks.Task!
static Microsoft.Maui.ApplicationModel.MapExtensions.TryOpenAsync(this Microsoft.Maui.ApplicationModel.IMap! map, double latitude, double longitude) -> System.Threading.Tasks.Task<bool>!
static Microsoft.Maui.ApplicationModel.MapExtensions.TryOpenAsync(this Microsoft.Maui.ApplicationModel.IMap! map, Microsoft.Maui.Devices.Sensors.Location! location, Microsoft.Maui.ApplicationModel.MapLaunchOptions! options) -> System.Threading.Tasks.Task<bool>!
static Microsoft.Maui.ApplicationModel.MapExtensions.TryOpenAsync(this Microsoft.Maui.ApplicationModel.IMap! map, Microsoft.Maui.Devices.Sensors.Location! location) -> System.Threading.Tasks.Task<bool>!
static Microsoft.Maui.ApplicationModel.MapExtensions.TryOpenAsync(this Microsoft.Maui.ApplicationModel.IMap! map, Microsoft.Maui.Devices.Sensors.Placemark! placemark) -> System.Threading.Tasks.Task<bool>!
static Microsoft.Maui.ApplicationModel.Platform.CurrentPackage.get -> Tizen.Applications.Package!
static Microsoft.Maui.ApplicationModel.Platform.MapServiceToken.get -> string?
static Microsoft.Maui.ApplicationModel.Platform.MapServiceToken.set -> void
static Microsoft.Maui.ApplicationModel.VersionTracking.BuildHistory.get -> System.Collections.Generic.IEnumerable<string!>!
static Microsoft.Maui.ApplicationModel.VersionTracking.CurrentBuild.get -> string!
static Microsoft.Maui.ApplicationModel.VersionTracking.CurrentVersion.get -> string!
static Microsoft.Maui.ApplicationModel.VersionTracking.Default.get -> Microsoft.Maui.ApplicationModel.IVersionTracking!
static Microsoft.Maui.ApplicationModel.VersionTracking.FirstInstalledBuild.get -> string?
static Microsoft.Maui.ApplicationModel.VersionTracking.FirstInstalledVersion.get -> string?
static Microsoft.Maui.ApplicationModel.VersionTracking.IsFirstLaunchEver.get -> bool
static Microsoft.Maui.ApplicationModel.VersionTracking.IsFirstLaunchForBuild(string! build) -> bool
static Microsoft.Maui.ApplicationModel.VersionTracking.IsFirstLaunchForCurrentBuild.get -> bool
static Microsoft.Maui.ApplicationModel.VersionTracking.IsFirstLaunchForCurrentVersion.get -> bool
static Microsoft.Maui.ApplicationModel.VersionTracking.IsFirstLaunchForVersion(string! version) -> bool
static Microsoft.Maui.ApplicationModel.VersionTracking.PreviousBuild.get -> string?
static Microsoft.Maui.ApplicationModel.VersionTracking.PreviousVersion.get -> string?
static Microsoft.Maui.ApplicationModel.VersionTracking.Track() -> void
static Microsoft.Maui.ApplicationModel.VersionTracking.VersionHistory.get -> System.Collections.Generic.IEnumerable<string!>!
static Microsoft.Maui.Authentication.AppleSignInAuthenticator.AuthenticateAsync(Microsoft.Maui.Authentication.AppleSignInAuthenticator.Options? options = null) -> System.Threading.Tasks.Task<Microsoft.Maui.Authentication.WebAuthenticatorResult!>!
static Microsoft.Maui.Authentication.AppleSignInAuthenticator.Default.get -> Microsoft.Maui.Authentication.IAppleSignInAuthenticator!
static Microsoft.Maui.Authentication.WebAuthenticator.AuthenticateAsync(Microsoft.Maui.Authentication.WebAuthenticatorOptions! webAuthenticatorOptions) -> System.Threading.Tasks.Task<Microsoft.Maui.Authentication.WebAuthenticatorResult!>!
static Microsoft.Maui.Authentication.WebAuthenticator.AuthenticateAsync(System.Uri! url, System.Uri! callbackUrl) -> System.Threading.Tasks.Task<Microsoft.Maui.Authentication.WebAuthenticatorResult!>!
static Microsoft.Maui.Authentication.WebAuthenticator.Default.get -> Microsoft.Maui.Authentication.IWebAuthenticator!
static Microsoft.Maui.Authentication.WebAuthenticatorExtensions.AuthenticateAsync(this Microsoft.Maui.Authentication.IWebAuthenticator! webAuthenticator, System.Uri! url, System.Uri! callbackUrl) -> System.Threading.Tasks.Task<Microsoft.Maui.Authentication.WebAuthenticatorResult!>!
static Microsoft.Maui.Devices.Battery.BatteryInfoChanged -> System.EventHandler<Microsoft.Maui.Devices.BatteryInfoChangedEventArgs!>!
static Microsoft.Maui.Devices.Battery.ChargeLevel.get -> double
static Microsoft.Maui.Devices.Battery.Default.get -> Microsoft.Maui.Devices.IBattery!
static Microsoft.Maui.Devices.Battery.EnergySaverStatus.get -> Microsoft.Maui.Devices.EnergySaverStatus
static Microsoft.Maui.Devices.Battery.EnergySaverStatusChanged -> System.EventHandler<Microsoft.Maui.Devices.EnergySaverStatusChangedEventArgs!>!
static Microsoft.Maui.Devices.Battery.PowerSource.get -> Microsoft.Maui.Devices.BatteryPowerSource
static Microsoft.Maui.Devices.Battery.State.get -> Microsoft.Maui.Devices.BatteryState
static Microsoft.Maui.Devices.DeviceDisplay.Current.get -> Microsoft.Maui.Devices.IDeviceDisplay!
static Microsoft.Maui.Devices.DeviceDisplay.KeepScreenOn.get -> bool
static Microsoft.Maui.Devices.DeviceDisplay.KeepScreenOn.set -> void
static Microsoft.Maui.Devices.DeviceDisplay.MainDisplayInfo.get -> Microsoft.Maui.Devices.DisplayInfo
static Microsoft.Maui.Devices.DeviceDisplay.MainDisplayInfoChanged -> System.EventHandler<Microsoft.Maui.Devices.DisplayInfoChangedEventArgs!>!
static Microsoft.Maui.Devices.DeviceIdiom.Desktop.get -> Microsoft.Maui.Devices.DeviceIdiom
static Microsoft.Maui.Devices.DeviceIdiom.operator !=(Microsoft.Maui.Devices.DeviceIdiom left, Microsoft.Maui.Devices.DeviceIdiom right) -> bool
static Microsoft.Maui.Devices.DeviceIdiom.operator ==(Microsoft.Maui.Devices.DeviceIdiom left, Microsoft.Maui.Devices.DeviceIdiom right) -> bool
static Microsoft.Maui.Devices.DeviceIdiom.Phone.get -> Microsoft.Maui.Devices.DeviceIdiom
static Microsoft.Maui.Devices.DeviceIdiom.Tablet.get -> Microsoft.Maui.Devices.DeviceIdiom
static Microsoft.Maui.Devices.DeviceIdiom.TV.get -> Microsoft.Maui.Devices.DeviceIdiom
static Microsoft.Maui.Devices.DeviceIdiom.Unknown.get -> Microsoft.Maui.Devices.DeviceIdiom
static Microsoft.Maui.Devices.DeviceIdiom.Watch.get -> Microsoft.Maui.Devices.DeviceIdiom
static Microsoft.Maui.Devices.DeviceInfo.Current.get -> Microsoft.Maui.Devices.IDeviceInfo!
static Microsoft.Maui.Devices.DeviceInfo.DeviceType.get -> Microsoft.Maui.Devices.DeviceType
static Microsoft.Maui.Devices.DeviceInfo.Idiom.get -> Microsoft.Maui.Devices.DeviceIdiom
static Microsoft.Maui.Devices.DeviceInfo.Manufacturer.get -> string!
static Microsoft.Maui.Devices.DeviceInfo.Model.get -> string!
static Microsoft.Maui.Devices.DeviceInfo.Name.get -> string!
static Microsoft.Maui.Devices.DeviceInfo.Platform.get -> Microsoft.Maui.Devices.DevicePlatform
static Microsoft.Maui.Devices.DeviceInfo.Version.get -> System.Version!
static Microsoft.Maui.Devices.DeviceInfo.VersionString.get -> string!
static Microsoft.Maui.Devices.DevicePlatform.Android.get -> Microsoft.Maui.Devices.DevicePlatform
static Microsoft.Maui.Devices.DevicePlatform.iOS.get -> Microsoft.Maui.Devices.DevicePlatform
static Microsoft.Maui.Devices.DevicePlatform.MacCatalyst.get -> Microsoft.Maui.Devices.DevicePlatform
static Microsoft.Maui.Devices.DevicePlatform.macOS.get -> Microsoft.Maui.Devices.DevicePlatform
static Microsoft.Maui.Devices.DevicePlatform.operator !=(Microsoft.Maui.Devices.DevicePlatform left, Microsoft.Maui.Devices.DevicePlatform right) -> bool
static Microsoft.Maui.Devices.DevicePlatform.operator ==(Microsoft.Maui.Devices.DevicePlatform left, Microsoft.Maui.Devices.DevicePlatform right) -> bool
static Microsoft.Maui.Devices.DevicePlatform.Tizen.get -> Microsoft.Maui.Devices.DevicePlatform
static Microsoft.Maui.Devices.DevicePlatform.tvOS.get -> Microsoft.Maui.Devices.DevicePlatform
static Microsoft.Maui.Devices.DevicePlatform.Unknown.get -> Microsoft.Maui.Devices.DevicePlatform
static Microsoft.Maui.Devices.DevicePlatform.UWP.get -> Microsoft.Maui.Devices.DevicePlatform
static Microsoft.Maui.Devices.DevicePlatform.watchOS.get -> Microsoft.Maui.Devices.DevicePlatform
static Microsoft.Maui.Devices.DevicePlatform.WinUI.get -> Microsoft.Maui.Devices.DevicePlatform
static Microsoft.Maui.Devices.DisplayInfo.operator !=(Microsoft.Maui.Devices.DisplayInfo left, Microsoft.Maui.Devices.DisplayInfo right) -> bool
static Microsoft.Maui.Devices.DisplayInfo.operator ==(Microsoft.Maui.Devices.DisplayInfo left, Microsoft.Maui.Devices.DisplayInfo right) -> bool
static Microsoft.Maui.Devices.Flashlight.Default.get -> Microsoft.Maui.Devices.IFlashlight!
static Microsoft.Maui.Devices.Flashlight.IsSupportedAsync() -> System.Threading.Tasks.Task<bool>!
static Microsoft.Maui.Devices.Flashlight.TurnOffAsync() -> System.Threading.Tasks.Task!
static Microsoft.Maui.Devices.Flashlight.TurnOnAsync() -> System.Threading.Tasks.Task!
static Microsoft.Maui.Devices.HapticFeedback.Default.get -> Microsoft.Maui.Devices.IHapticFeedback!
static Microsoft.Maui.Devices.HapticFeedback.Perform(Microsoft.Maui.Devices.HapticFeedbackType type = Microsoft.Maui.Devices.HapticFeedbackType.Click) -> void
static Microsoft.Maui.Devices.Sensors.Accelerometer.Default.get -> Microsoft.Maui.Devices.Sensors.IAccelerometer!
static Microsoft.Maui.Devices.Sensors.Accelerometer.IsMonitoring.get -> bool
static Microsoft.Maui.Devices.Sensors.Accelerometer.IsSupported.get -> bool
static Microsoft.Maui.Devices.Sensors.Accelerometer.ReadingChanged -> System.EventHandler<Microsoft.Maui.Devices.Sensors.AccelerometerChangedEventArgs!>!
static Microsoft.Maui.Devices.Sensors.Accelerometer.ShakeDetected -> System.EventHandler!
static Microsoft.Maui.Devices.Sensors.Accelerometer.Start(Microsoft.Maui.Devices.Sensors.SensorSpeed sensorSpeed) -> void
static Microsoft.Maui.Devices.Sensors.Accelerometer.Stop() -> void
static Microsoft.Maui.Devices.Sensors.AccelerometerData.operator !=(Microsoft.Maui.Devices.Sensors.AccelerometerData left, Microsoft.Maui.Devices.Sensors.AccelerometerData right) -> bool
static Microsoft.Maui.Devices.Sensors.AccelerometerData.operator ==(Microsoft.Maui.Devices.Sensors.AccelerometerData left, Microsoft.Maui.Devices.Sensors.AccelerometerData right) -> bool
static Microsoft.Maui.Devices.Sensors.Barometer.Default.get -> Microsoft.Maui.Devices.Sensors.IBarometer!
static Microsoft.Maui.Devices.Sensors.Barometer.IsMonitoring.get -> bool
static Microsoft.Maui.Devices.Sensors.Barometer.IsSupported.get -> bool
static Microsoft.Maui.Devices.Sensors.Barometer.ReadingChanged -> System.EventHandler<Microsoft.Maui.Devices.Sensors.BarometerChangedEventArgs!>!
static Microsoft.Maui.Devices.Sensors.Barometer.Start(Microsoft.Maui.Devices.Sensors.SensorSpeed sensorSpeed) -> void
static Microsoft.Maui.Devices.Sensors.Barometer.Stop() -> void
static Microsoft.Maui.Devices.Sensors.BarometerData.operator !=(Microsoft.Maui.Devices.Sensors.BarometerData left, Microsoft.Maui.Devices.Sensors.BarometerData right) -> bool
static Microsoft.Maui.Devices.Sensors.BarometerData.operator ==(Microsoft.Maui.Devices.Sensors.BarometerData left, Microsoft.Maui.Devices.Sensors.BarometerData right) -> bool
static Microsoft.Maui.Devices.Sensors.Compass.Default.get -> Microsoft.Maui.Devices.Sensors.ICompass!
static Microsoft.Maui.Devices.Sensors.Compass.IsMonitoring.get -> bool
static Microsoft.Maui.Devices.Sensors.Compass.IsSupported.get -> bool
static Microsoft.Maui.Devices.Sensors.Compass.ReadingChanged -> System.EventHandler<Microsoft.Maui.Devices.Sensors.CompassChangedEventArgs!>!
static Microsoft.Maui.Devices.Sensors.Compass.Start(Microsoft.Maui.Devices.Sensors.SensorSpeed sensorSpeed, bool applyLowPassFilter) -> void
static Microsoft.Maui.Devices.Sensors.Compass.Start(Microsoft.Maui.Devices.Sensors.SensorSpeed sensorSpeed) -> void
static Microsoft.Maui.Devices.Sensors.Compass.Stop() -> void
static Microsoft.Maui.Devices.Sensors.CompassData.operator !=(Microsoft.Maui.Devices.Sensors.CompassData left, Microsoft.Maui.Devices.Sensors.CompassData right) -> bool
static Microsoft.Maui.Devices.Sensors.CompassData.operator ==(Microsoft.Maui.Devices.Sensors.CompassData left, Microsoft.Maui.Devices.Sensors.CompassData right) -> bool
static Microsoft.Maui.Devices.Sensors.Geocoding.Default.get -> Microsoft.Maui.Devices.Sensors.IGeocoding!
static Microsoft.Maui.Devices.Sensors.Geocoding.GetLocationsAsync(string! address) -> System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<Microsoft.Maui.Devices.Sensors.Location!>!>!
static Microsoft.Maui.Devices.Sensors.Geocoding.GetPlacemarksAsync(double latitude, double longitude) -> System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<Microsoft.Maui.Devices.Sensors.Placemark!>!>!
static Microsoft.Maui.Devices.Sensors.Geocoding.GetPlacemarksAsync(Microsoft.Maui.Devices.Sensors.Location! location) -> System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<Microsoft.Maui.Devices.Sensors.Placemark!>!>!
static Microsoft.Maui.Devices.Sensors.GeocodingExtensions.GetMapServiceToken(this Microsoft.Maui.Devices.Sensors.IGeocoding! geocoding) -> string?
static Microsoft.Maui.Devices.Sensors.GeocodingExtensions.GetPlacemarksAsync(this Microsoft.Maui.Devices.Sensors.IGeocoding! geocoding, Microsoft.Maui.Devices.Sensors.Location! location) -> System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<Microsoft.Maui.Devices.Sensors.Placemark!>!>!
static Microsoft.Maui.Devices.Sensors.GeocodingExtensions.SetMapServiceToken(this Microsoft.Maui.Devices.Sensors.IGeocoding! geocoding, string? mapServiceToken) -> void
static Microsoft.Maui.Devices.Sensors.Geolocation.Default.get -> Microsoft.Maui.Devices.Sensors.IGeolocation!
static Microsoft.Maui.Devices.Sensors.Geolocation.GetLastKnownLocationAsync() -> System.Threading.Tasks.Task<Microsoft.Maui.Devices.Sensors.Location?>!
static Microsoft.Maui.Devices.Sensors.Geolocation.GetLocationAsync() -> System.Threading.Tasks.Task<Microsoft.Maui.Devices.Sensors.Location?>!
static Microsoft.Maui.Devices.Sensors.Geolocation.GetLocationAsync(Microsoft.Maui.Devices.Sensors.GeolocationRequest! request, System.Threading.CancellationToken cancelToken) -> System.Threading.Tasks.Task<Microsoft.Maui.Devices.Sensors.Location?>!
static Microsoft.Maui.Devices.Sensors.Geolocation.GetLocationAsync(Microsoft.Maui.Devices.Sensors.GeolocationRequest! request) -> System.Threading.Tasks.Task<Microsoft.Maui.Devices.Sensors.Location?>!
static Microsoft.Maui.Devices.Sensors.Geolocation.IsListeningForeground.get -> bool
static Microsoft.Maui.Devices.Sensors.Geolocation.ListeningFailed -> System.EventHandler<Microsoft.Maui.Devices.Sensors.GeolocationListeningFailedEventArgs!>!
static Microsoft.Maui.Devices.Sensors.Geolocation.LocationChanged -> System.EventHandler<Microsoft.Maui.Devices.Sensors.GeolocationLocationChangedEventArgs!>!
static Microsoft.Maui.Devices.Sensors.Geolocation.StartListeningForegroundAsync(Microsoft.Maui.Devices.Sensors.GeolocationListeningRequest! request) -> System.Threading.Tasks.Task<bool>!
static Microsoft.Maui.Devices.Sensors.Geolocation.StopListeningForeground() -> void
static Microsoft.Maui.Devices.Sensors.GeolocationExtensions.GetLocationAsync(this Microsoft.Maui.Devices.Sensors.IGeolocation! geolocation, Microsoft.Maui.Devices.Sensors.GeolocationRequest! request) -> System.Threading.Tasks.Task<Microsoft.Maui.Devices.Sensors.Location?>!
static Microsoft.Maui.Devices.Sensors.GeolocationExtensions.GetLocationAsync(this Microsoft.Maui.Devices.Sensors.IGeolocation! geolocation) -> System.Threading.Tasks.Task<Microsoft.Maui.Devices.Sensors.Location?>!
static Microsoft.Maui.Devices.Sensors.Gyroscope.Default.get -> Microsoft.Maui.Devices.Sensors.IGyroscope!
static Microsoft.Maui.Devices.Sensors.Gyroscope.IsMonitoring.get -> bool
static Microsoft.Maui.Devices.Sensors.Gyroscope.IsSupported.get -> bool
static Microsoft.Maui.Devices.Sensors.Gyroscope.ReadingChanged -> System.EventHandler<Microsoft.Maui.Devices.Sensors.GyroscopeChangedEventArgs!>!
static Microsoft.Maui.Devices.Sensors.Gyroscope.Start(Microsoft.Maui.Devices.Sensors.SensorSpeed sensorSpeed) -> void
static Microsoft.Maui.Devices.Sensors.Gyroscope.Stop() -> void
static Microsoft.Maui.Devices.Sensors.GyroscopeData.operator !=(Microsoft.Maui.Devices.Sensors.GyroscopeData left, Microsoft.Maui.Devices.Sensors.GyroscopeData right) -> bool
static Microsoft.Maui.Devices.Sensors.GyroscopeData.operator ==(Microsoft.Maui.Devices.Sensors.GyroscopeData left, Microsoft.Maui.Devices.Sensors.GyroscopeData right) -> bool
static Microsoft.Maui.Devices.Sensors.Location.CalculateDistance(double latitudeStart, double longitudeStart, double latitudeEnd, double longitudeEnd, Microsoft.Maui.Devices.Sensors.DistanceUnits units) -> double
static Microsoft.Maui.Devices.Sensors.Magnetometer.Default.get -> Microsoft.Maui.Devices.Sensors.IMagnetometer!
static Microsoft.Maui.Devices.Sensors.Magnetometer.IsMonitoring.get -> bool
static Microsoft.Maui.Devices.Sensors.Magnetometer.IsSupported.get -> bool
static Microsoft.Maui.Devices.Sensors.Magnetometer.ReadingChanged -> System.EventHandler<Microsoft.Maui.Devices.Sensors.MagnetometerChangedEventArgs!>!
static Microsoft.Maui.Devices.Sensors.Magnetometer.Start(Microsoft.Maui.Devices.Sensors.SensorSpeed sensorSpeed) -> void
static Microsoft.Maui.Devices.Sensors.Magnetometer.Stop() -> void
static Microsoft.Maui.Devices.Sensors.MagnetometerData.operator !=(Microsoft.Maui.Devices.Sensors.MagnetometerData left, Microsoft.Maui.Devices.Sensors.MagnetometerData right) -> bool
static Microsoft.Maui.Devices.Sensors.MagnetometerData.operator ==(Microsoft.Maui.Devices.Sensors.MagnetometerData left, Microsoft.Maui.Devices.Sensors.MagnetometerData right) -> bool
static Microsoft.Maui.Devices.Sensors.OrientationSensor.Default.get -> Microsoft.Maui.Devices.Sensors.IOrientationSensor!
static Microsoft.Maui.Devices.Sensors.OrientationSensor.IsMonitoring.get -> bool
static Microsoft.Maui.Devices.Sensors.OrientationSensor.IsSupported.get -> bool
static Microsoft.Maui.Devices.Sensors.OrientationSensor.ReadingChanged -> System.EventHandler<Microsoft.Maui.Devices.Sensors.OrientationSensorChangedEventArgs!>!
static Microsoft.Maui.Devices.Sensors.OrientationSensor.Start(Microsoft.Maui.Devices.Sensors.SensorSpeed sensorSpeed) -> void
static Microsoft.Maui.Devices.Sensors.OrientationSensor.Stop() -> void
static Microsoft.Maui.Devices.Sensors.OrientationSensorData.operator !=(Microsoft.Maui.Devices.Sensors.OrientationSensorData left, Microsoft.Maui.Devices.Sensors.OrientationSensorData right) -> bool
static Microsoft.Maui.Devices.Sensors.OrientationSensorData.operator ==(Microsoft.Maui.Devices.Sensors.OrientationSensorData left, Microsoft.Maui.Devices.Sensors.OrientationSensorData right) -> bool
static Microsoft.Maui.Devices.Vibration.Cancel() -> void
static Microsoft.Maui.Devices.Vibration.Default.get -> Microsoft.Maui.Devices.IVibration!
static Microsoft.Maui.Devices.Vibration.Vibrate() -> void
static Microsoft.Maui.Devices.Vibration.Vibrate(double duration) -> void
static Microsoft.Maui.Devices.Vibration.Vibrate(System.TimeSpan duration) -> void
static Microsoft.Maui.Devices.VibrationExtensions.Vibrate(this Microsoft.Maui.Devices.IVibration! vibration, double duration) -> void
static Microsoft.Maui.Media.MediaPicker.CapturePhotoAsync(Microsoft.Maui.Media.MediaPickerOptions? options = null) -> System.Threading.Tasks.Task<Microsoft.Maui.Storage.FileResult?>!
static Microsoft.Maui.Media.MediaPicker.CaptureVideoAsync(Microsoft.Maui.Media.MediaPickerOptions? options = null) -> System.Threading.Tasks.Task<Microsoft.Maui.Storage.FileResult?>!
static Microsoft.Maui.Media.MediaPicker.Default.get -> Microsoft.Maui.Media.IMediaPicker!
static Microsoft.Maui.Media.MediaPicker.IsCaptureSupported.get -> bool
static Microsoft.Maui.Media.MediaPicker.PickPhotoAsync(Microsoft.Maui.Media.MediaPickerOptions? options = null) -> System.Threading.Tasks.Task<Microsoft.Maui.Storage.FileResult?>!
static Microsoft.Maui.Media.MediaPicker.PickVideoAsync(Microsoft.Maui.Media.MediaPickerOptions? options = null) -> System.Threading.Tasks.Task<Microsoft.Maui.Storage.FileResult?>!
static Microsoft.Maui.Media.Screenshot.CaptureAsync() -> System.Threading.Tasks.Task<Microsoft.Maui.Media.IScreenshotResult!>!
static Microsoft.Maui.Media.Screenshot.Default.get -> Microsoft.Maui.Media.IScreenshot!
static Microsoft.Maui.Media.Screenshot.IsCaptureSupported.get -> bool
static Microsoft.Maui.Media.ScreenshotExtensions.CaptureAsync(this Microsoft.Maui.Media.IScreenshot! screenshot, Tizen.NUI.BaseComponents.View! view) -> System.Threading.Tasks.Task<Microsoft.Maui.Media.IScreenshotResult?>!
static Microsoft.Maui.Media.ScreenshotExtensions.CaptureAsync(this Microsoft.Maui.Media.IScreenshot! screenshot, Tizen.NUI.Window! window) -> System.Threading.Tasks.Task<Microsoft.Maui.Media.IScreenshotResult!>!
static Microsoft.Maui.Media.TextToSpeech.Default.get -> Microsoft.Maui.Media.ITextToSpeech!
static Microsoft.Maui.Media.TextToSpeech.GetLocalesAsync() -> System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<Microsoft.Maui.Media.Locale!>!>!
static Microsoft.Maui.Media.TextToSpeech.SpeakAsync(string! text, Microsoft.Maui.Media.SpeechOptions? options, System.Threading.CancellationToken cancelToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
static Microsoft.Maui.Media.TextToSpeech.SpeakAsync(string! text, System.Threading.CancellationToken cancelToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
static Microsoft.Maui.Media.UnitConverters.AtmospheresToPascals(double atm) -> double
static Microsoft.Maui.Media.UnitConverters.CelsiusToFahrenheit(double celsius) -> double
static Microsoft.Maui.Media.UnitConverters.CelsiusToKelvin(double celsius) -> double
static Microsoft.Maui.Media.UnitConverters.CoordinatesToKilometers(double lat1, double lon1, double lat2, double lon2) -> double
static Microsoft.Maui.Media.UnitConverters.CoordinatesToMiles(double lat1, double lon1, double lat2, double lon2) -> double
static Microsoft.Maui.Media.UnitConverters.DegreesPerSecondToHertz(double degrees) -> double
static Microsoft.Maui.Media.UnitConverters.DegreesPerSecondToRadiansPerSecond(double degrees) -> double
static Microsoft.Maui.Media.UnitConverters.DegreesToRadians(double degrees) -> double
static Microsoft.Maui.Media.UnitConverters.FahrenheitToCelsius(double fahrenheit) -> double
static Microsoft.Maui.Media.UnitConverters.HectopascalsToKilopascals(double hpa) -> double
static Microsoft.Maui.Media.UnitConverters.HectopascalsToPascals(double hpa) -> double
static Microsoft.Maui.Media.UnitConverters.HertzToDegreesPerSecond(double hertz) -> double
static Microsoft.Maui.Media.UnitConverters.HertzToRadiansPerSecond(double hertz) -> double
static Microsoft.Maui.Media.UnitConverters.InternationalFeetToMeters(double internationalFeet) -> double
static Microsoft.Maui.Media.UnitConverters.KelvinToCelsius(double kelvin) -> double
static Microsoft.Maui.Media.UnitConverters.KilogramsToPounds(double kilograms) -> double
static Microsoft.Maui.Media.UnitConverters.KilometersToMiles(double kilometers) -> double
static Microsoft.Maui.Media.UnitConverters.KilopascalsToHectopascals(double kpa) -> double
static Microsoft.Maui.Media.UnitConverters.KilopascalsToPascals(double kpa) -> double
static Microsoft.Maui.Media.UnitConverters.MetersToInternationalFeet(double meters) -> double
static Microsoft.Maui.Media.UnitConverters.MetersToUSSurveyFeet(double meters) -> double
static Microsoft.Maui.Media.UnitConverters.MilesToKilometers(double miles) -> double
static Microsoft.Maui.Media.UnitConverters.MilesToMeters(double miles) -> double
static Microsoft.Maui.Media.UnitConverters.PascalsToAtmospheres(double pascals) -> double
static Microsoft.Maui.Media.UnitConverters.PoundsToKilograms(double pounds) -> double
static Microsoft.Maui.Media.UnitConverters.PoundsToStones(double pounds) -> double
static Microsoft.Maui.Media.UnitConverters.RadiansPerSecondToDegreesPerSecond(double radians) -> double
static Microsoft.Maui.Media.UnitConverters.RadiansPerSecondToHertz(double radians) -> double
static Microsoft.Maui.Media.UnitConverters.RadiansToDegrees(double radians) -> double
static Microsoft.Maui.Media.UnitConverters.StonesToPounds(double stones) -> double
static Microsoft.Maui.Media.UnitConverters.USSurveyFeetToMeters(double usFeet) -> double
static Microsoft.Maui.Networking.Connectivity.ConnectionProfiles.get -> System.Collections.Generic.IEnumerable<Microsoft.Maui.Networking.ConnectionProfile>!
static Microsoft.Maui.Networking.Connectivity.ConnectivityChanged -> System.EventHandler<Microsoft.Maui.Networking.ConnectivityChangedEventArgs!>!
static Microsoft.Maui.Networking.Connectivity.Current.get -> Microsoft.Maui.Networking.IConnectivity!
static Microsoft.Maui.Networking.Connectivity.NetworkAccess.get -> Microsoft.Maui.Networking.NetworkAccess
static Microsoft.Maui.Storage.FilePicker.Default.get -> Microsoft.Maui.Storage.IFilePicker!
static Microsoft.Maui.Storage.FilePicker.PickAsync(Microsoft.Maui.Storage.PickOptions? options = null) -> System.Threading.Tasks.Task<Microsoft.Maui.Storage.FileResult?>!
static Microsoft.Maui.Storage.FilePicker.PickMultipleAsync(Microsoft.Maui.Storage.PickOptions? options = null) -> System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<Microsoft.Maui.Storage.FileResult!>!>!
static Microsoft.Maui.Storage.FileSystem.AppDataDirectory.get -> string!
static Microsoft.Maui.Storage.FileSystem.AppPackageFileExistsAsync(string! filename) -> System.Threading.Tasks.Task<bool>!
static Microsoft.Maui.Storage.FileSystem.CacheDirectory.get -> string!
static Microsoft.Maui.Storage.FileSystem.Current.get -> Microsoft.Maui.Storage.IFileSystem!
static Microsoft.Maui.Storage.FileSystem.OpenAppPackageFileAsync(string! filename) -> System.Threading.Tasks.Task<System.IO.Stream!>!
static Microsoft.Maui.Storage.PickOptions.Default.get -> Microsoft.Maui.Storage.PickOptions!
static Microsoft.Maui.Storage.PickOptions.Images.get -> Microsoft.Maui.Storage.PickOptions!
static Microsoft.Maui.Storage.Preferences.Clear() -> void
static Microsoft.Maui.Storage.Preferences.Clear(string? sharedName) -> void
static Microsoft.Maui.Storage.Preferences.ContainsKey(string! key, string? sharedName) -> bool
static Microsoft.Maui.Storage.Preferences.ContainsKey(string! key) -> bool
static Microsoft.Maui.Storage.Preferences.Default.get -> Microsoft.Maui.Storage.IPreferences!
static Microsoft.Maui.Storage.Preferences.Get(string! key, bool defaultValue, string? sharedName) -> bool
static Microsoft.Maui.Storage.Preferences.Get(string! key, bool defaultValue) -> bool
static Microsoft.Maui.Storage.Preferences.Get(string! key, double defaultValue, string? sharedName) -> double
static Microsoft.Maui.Storage.Preferences.Get(string! key, double defaultValue) -> double
static Microsoft.Maui.Storage.Preferences.Get(string! key, float defaultValue, string? sharedName) -> float
static Microsoft.Maui.Storage.Preferences.Get(string! key, float defaultValue) -> float
static Microsoft.Maui.Storage.Preferences.Get(string! key, int defaultValue, string? sharedName) -> int
static Microsoft.Maui.Storage.Preferences.Get(string! key, int defaultValue) -> int
static Microsoft.Maui.Storage.Preferences.Get(string! key, long defaultValue, string? sharedName) -> long
static Microsoft.Maui.Storage.Preferences.Get(string! key, long defaultValue) -> long
static Microsoft.Maui.Storage.Preferences.Get(string! key, string? defaultValue, string? sharedName) -> string?
static Microsoft.Maui.Storage.Preferences.Get(string! key, string? defaultValue) -> string?
static Microsoft.Maui.Storage.Preferences.Get(string! key, System.DateTime defaultValue, string? sharedName) -> System.DateTime
static Microsoft.Maui.Storage.Preferences.Get(string! key, System.DateTime defaultValue) -> System.DateTime
static Microsoft.Maui.Storage.Preferences.Remove(string! key, string? sharedName) -> void
static Microsoft.Maui.Storage.Preferences.Remove(string! key) -> void
static Microsoft.Maui.Storage.Preferences.Set(string! key, bool value, string? sharedName) -> void
static Microsoft.Maui.Storage.Preferences.Set(string! key, bool value) -> void
static Microsoft.Maui.Storage.Preferences.Set(string! key, double value, string? sharedName) -> void
static Microsoft.Maui.Storage.Preferences.Set(string! key, double value) -> void
static Microsoft.Maui.Storage.Preferences.Set(string! key, float value, string? sharedName) -> void
static Microsoft.Maui.Storage.Preferences.Set(string! key, float value) -> void
static Microsoft.Maui.Storage.Preferences.Set(string! key, int value, string? sharedName) -> void
static Microsoft.Maui.Storage.Preferences.Set(string! key, int value) -> void
static Microsoft.Maui.Storage.Preferences.Set(string! key, long value, string? sharedName) -> void
static Microsoft.Maui.Storage.Preferences.Set(string! key, long value) -> void
static Microsoft.Maui.Storage.Preferences.Set(string! key, string? value, string? sharedName) -> void
static Microsoft.Maui.Storage.Preferences.Set(string! key, string? value) -> void
static Microsoft.Maui.Storage.Preferences.Set(string! key, System.DateTime value, string? sharedName) -> void
static Microsoft.Maui.Storage.Preferences.Set(string! key, System.DateTime value) -> void
static Microsoft.Maui.Storage.SecureStorage.Default.get -> Microsoft.Maui.Storage.ISecureStorage!
static Microsoft.Maui.Storage.SecureStorage.GetAsync(string! key) -> System.Threading.Tasks.Task<string?>!
static Microsoft.Maui.Storage.SecureStorage.Remove(string! key) -> bool
static Microsoft.Maui.Storage.SecureStorage.RemoveAll() -> void
static Microsoft.Maui.Storage.SecureStorage.SetAsync(string! key, string! value) -> System.Threading.Tasks.Task!
static readonly Microsoft.Maui.Storage.FilePickerFileType.Images -> Microsoft.Maui.Storage.FilePickerFileType!
static readonly Microsoft.Maui.Storage.FilePickerFileType.Jpeg -> Microsoft.Maui.Storage.FilePickerFileType!
static readonly Microsoft.Maui.Storage.FilePickerFileType.Pdf -> Microsoft.Maui.Storage.FilePickerFileType!
static readonly Microsoft.Maui.Storage.FilePickerFileType.Png -> Microsoft.Maui.Storage.FilePickerFileType!
static readonly Microsoft.Maui.Storage.FilePickerFileType.Videos -> Microsoft.Maui.Storage.FilePickerFileType!
virtual Microsoft.Maui.Storage.FilePickerFileType.GetPlatformFileType(Microsoft.Maui.Devices.DevicePlatform platform) -> System.Collections.Generic.IEnumerable<string!>!
