#nullable enable
~Microsoft.Maui.Core_XamlTypeInfo.XamlMetaDataProvider.GetXamlType(string fullName) -> Microsoft.UI.Xaml.Markup.IXamlType
~Microsoft.Maui.Core_XamlTypeInfo.XamlMetaDataProvider.GetXamlType(System.Type type) -> Microsoft.UI.Xaml.Markup.IXamlType
~Microsoft.Maui.Core_XamlTypeInfo.XamlMetaDataProvider.GetXmlnsDefinitions() -> Microsoft.UI.Xaml.Markup.XmlnsDefinition[]
~Microsoft.Maui.Platform.MauiCancelButton.BackgroundBrush.get -> Microsoft.UI.Xaml.Media.Brush
~Microsoft.Maui.Platform.MauiCancelButton.BackgroundBrush.set -> void
~Microsoft.Maui.Platform.MauiCancelButton.ForegroundBrush.get -> Microsoft.UI.Xaml.Media.Brush
~Microsoft.Maui.Platform.MauiCancelButton.ForegroundBrush.set -> void
~Microsoft.Maui.Platform.MauiStepper.ButtonBackground.get -> Microsoft.UI.Xaml.Media.Brush
~Microsoft.Maui.Platform.MauiStepper.ButtonBackground.set -> void
~Microsoft.Maui.Platform.MauiStepper.ButtonBackgroundColor.get -> Microsoft.Maui.Graphics.Color
~Microsoft.Maui.Platform.MauiStepper.ButtonBackgroundColor.set -> void
~Microsoft.Maui.Platform.MauiToolbar.Connect(int connectionId, object target) -> void
~Microsoft.Maui.Platform.MauiToolbar.GetBindingConnector(int connectionId, object target) -> Microsoft.UI.Xaml.Markup.IComponentConnector
~override Microsoft.Maui.Converters.EasingTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Type sourceType) -> bool
~override Microsoft.Maui.Converters.EasingTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Type destinationType) -> bool
~override Microsoft.Maui.Converters.EasingTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value) -> object
~override Microsoft.Maui.Converters.EasingTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, System.Type destinationType) -> object
~override Microsoft.Maui.Converters.EasingTypeConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext context) -> System.ComponentModel.TypeConverter.StandardValuesCollection
~override Microsoft.Maui.Converters.EasingTypeConverter.GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext context) -> bool
~override Microsoft.Maui.Converters.EasingTypeConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext context) -> bool
~override Microsoft.Maui.Converters.FlexAlignContentTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Type sourceType) -> bool
~override Microsoft.Maui.Converters.FlexAlignContentTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Type destinationType) -> bool
~override Microsoft.Maui.Converters.FlexAlignContentTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value) -> object
~override Microsoft.Maui.Converters.FlexAlignContentTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, System.Type destinationType) -> object
~override Microsoft.Maui.Converters.FlexAlignItemsTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Type sourceType) -> bool
~override Microsoft.Maui.Converters.FlexAlignItemsTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Type destinationType) -> bool
~override Microsoft.Maui.Converters.FlexAlignItemsTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value) -> object
~override Microsoft.Maui.Converters.FlexAlignItemsTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, System.Type destinationType) -> object
~override Microsoft.Maui.Converters.FlexAlignSelfTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Type sourceType) -> bool
~override Microsoft.Maui.Converters.FlexAlignSelfTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Type destinationType) -> bool
~override Microsoft.Maui.Converters.FlexAlignSelfTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value) -> object
~override Microsoft.Maui.Converters.FlexAlignSelfTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, System.Type destinationType) -> object
~override Microsoft.Maui.Converters.FlexBasisTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Type sourceType) -> bool
~override Microsoft.Maui.Converters.FlexBasisTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Type destinationType) -> bool
~override Microsoft.Maui.Converters.FlexBasisTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value) -> object
~override Microsoft.Maui.Converters.FlexBasisTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, System.Type destinationType) -> object
~override Microsoft.Maui.Converters.FlexDirectionTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Type sourceType) -> bool
~override Microsoft.Maui.Converters.FlexDirectionTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Type destinationType) -> bool
~override Microsoft.Maui.Converters.FlexDirectionTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value) -> object
~override Microsoft.Maui.Converters.FlexDirectionTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, System.Type destinationType) -> object
~override Microsoft.Maui.Converters.FlexJustifyTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Type sourceType) -> bool
~override Microsoft.Maui.Converters.FlexJustifyTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Type destinationType) -> bool
~override Microsoft.Maui.Converters.FlexJustifyTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value) -> object
~override Microsoft.Maui.Converters.FlexJustifyTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, System.Type destinationType) -> object
~override Microsoft.Maui.Converters.FlexWrapTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Type sourceType) -> bool
~override Microsoft.Maui.Converters.FlexWrapTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Type destinationType) -> bool
~override Microsoft.Maui.Converters.FlexWrapTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value) -> object
~override Microsoft.Maui.Converters.FlexWrapTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, System.Type destinationType) -> object
~override Microsoft.Maui.Converters.ThicknessTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Type sourceType) -> bool
~override Microsoft.Maui.Converters.ThicknessTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Type destinationType) -> bool
~override Microsoft.Maui.Converters.ThicknessTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value) -> object
~override Microsoft.Maui.Converters.ThicknessTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, System.Type destinationType) -> object
~override Microsoft.Maui.Handlers.StepperHandler.ConnectHandler(Microsoft.Maui.Platform.MauiStepper platformView) -> void
~override Microsoft.Maui.Handlers.StepperHandler.CreatePlatformView() -> Microsoft.Maui.Platform.MauiStepper
~override Microsoft.Maui.Handlers.StepperHandler.DisconnectHandler(Microsoft.Maui.Platform.MauiStepper platformView) -> void
~static Microsoft.Maui.Handlers.StepperHandler.MapBackground(Microsoft.Maui.Handlers.IStepperHandler handler, Microsoft.Maui.IStepper view) -> void
~static Microsoft.Maui.Handlers.StepperHandler.MapIncrement(Microsoft.Maui.Handlers.IStepperHandler handler, Microsoft.Maui.IStepper stepper) -> void
~static Microsoft.Maui.Handlers.StepperHandler.MapMaximum(Microsoft.Maui.Handlers.IStepperHandler handler, Microsoft.Maui.IStepper stepper) -> void
~static Microsoft.Maui.Handlers.StepperHandler.MapMinimum(Microsoft.Maui.Handlers.IStepperHandler handler, Microsoft.Maui.IStepper stepper) -> void
~static Microsoft.Maui.Handlers.StepperHandler.MapValue(Microsoft.Maui.Handlers.IStepperHandler handler, Microsoft.Maui.IStepper stepper) -> void
~static Microsoft.Maui.Platform.GraphicsExtensions.AsPathGeometry(this Microsoft.Maui.Graphics.PathF target, float scale = 1) -> Microsoft.UI.Xaml.Media.PathGeometry
abstract Microsoft.Maui.Handlers.ElementHandler<TVirtualView, TPlatformView>.CreatePlatformElement() -> TPlatformView!
abstract Microsoft.Maui.Handlers.ViewHandler.GetDesiredSize(double widthConstraint, double heightConstraint) -> Microsoft.Maui.Graphics.Size
abstract Microsoft.Maui.Handlers.ViewHandler.PlatformArrange(Microsoft.Maui.Graphics.Rect frame) -> void
abstract Microsoft.Maui.Handlers.ViewHandler.RemoveContainer() -> void
abstract Microsoft.Maui.Handlers.ViewHandler.SetupContainer() -> void
abstract Microsoft.Maui.Handlers.ViewHandler<TVirtualView, TPlatformView>.CreatePlatformView() -> TPlatformView!
abstract Microsoft.Maui.ImageSourceService.GetImageSourceAsync(Microsoft.Maui.IImageSource! imageSource, float scale = 1, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<Microsoft.Maui.IImageSourceServiceResult<Microsoft.UI.Xaml.Media.ImageSource!>?>!
abstract Microsoft.Maui.Layouts.LayoutManager.ArrangeChildren(Microsoft.Maui.Graphics.Rect bounds) -> Microsoft.Maui.Graphics.Size
abstract Microsoft.Maui.Layouts.LayoutManager.Measure(double widthConstraint, double heightConstraint) -> Microsoft.Maui.Graphics.Size
abstract Microsoft.Maui.MauiWinUIApplication.CreateMauiApp() -> Microsoft.Maui.Hosting.MauiApp!
const Microsoft.Maui.Primitives.Dimension.Maximum = Infinity -> double
const Microsoft.Maui.Primitives.Dimension.Minimum = 0 -> double
const Microsoft.Maui.Primitives.Dimension.Unset = NaN -> double
Microsoft.Maui.ActivationState
Microsoft.Maui.ActivationState.ActivationState(Microsoft.Maui.IMauiContext! context, Microsoft.Maui.IPersistedState! state) -> void
Microsoft.Maui.ActivationState.ActivationState(Microsoft.Maui.IMauiContext! context, Microsoft.UI.Xaml.LaunchActivatedEventArgs? launchActivatedEventArgs) -> void
Microsoft.Maui.ActivationState.ActivationState(Microsoft.Maui.IMauiContext! context) -> void
Microsoft.Maui.ActivationState.Context.get -> Microsoft.Maui.IMauiContext!
Microsoft.Maui.ActivationState.LaunchActivatedEventArgs.get -> Microsoft.UI.Xaml.LaunchActivatedEventArgs?
Microsoft.Maui.ActivationState.State.get -> Microsoft.Maui.IPersistedState!
Microsoft.Maui.Animations.Animation
Microsoft.Maui.Animations.Animation.Add(double beginAt, double duration, Microsoft.Maui.Animations.Animation! animation) -> void
Microsoft.Maui.Animations.Animation.Animation() -> void
Microsoft.Maui.Animations.Animation.Animation(System.Action<double>! callback, double start = 0, double duration = 1, Microsoft.Maui.Easing? easing = null, System.Action? finished = null) -> void
Microsoft.Maui.Animations.Animation.Animation(System.Collections.Generic.List<Microsoft.Maui.Animations.Animation!>! animations) -> void
Microsoft.Maui.Animations.Animation.AnimationManager.get -> Microsoft.Maui.Animations.IAnimationManager?
Microsoft.Maui.Animations.Animation.animationManger -> Microsoft.Maui.Animations.IAnimationManager?
Microsoft.Maui.Animations.Animation.childrenAnimations -> System.Collections.Generic.List<Microsoft.Maui.Animations.Animation!>!
Microsoft.Maui.Animations.Animation.Commit(Microsoft.Maui.Animations.IAnimationManager! animationManger) -> void
Microsoft.Maui.Animations.Animation.CreateAutoReversing() -> Microsoft.Maui.Animations.Animation!
Microsoft.Maui.Animations.Animation.CurrentTime.get -> double
Microsoft.Maui.Animations.Animation.CurrentTime.set -> void
Microsoft.Maui.Animations.Animation.Dispose() -> void
Microsoft.Maui.Animations.Animation.Duration.get -> double
Microsoft.Maui.Animations.Animation.Duration.set -> void
Microsoft.Maui.Animations.Animation.Easing.get -> Microsoft.Maui.Easing!
Microsoft.Maui.Animations.Animation.Easing.set -> void
Microsoft.Maui.Animations.Animation.Finished.get -> System.Action?
Microsoft.Maui.Animations.Animation.Finished.set -> void
Microsoft.Maui.Animations.Animation.GetEnumerator() -> System.Collections.IEnumerator!
Microsoft.Maui.Animations.Animation.HasFinished.get -> bool
Microsoft.Maui.Animations.Animation.HasFinished.set -> void
Microsoft.Maui.Animations.Animation.IsDisposed.get -> bool
Microsoft.Maui.Animations.Animation.IsPaused.get -> bool
Microsoft.Maui.Animations.Animation.Name.get -> string?
Microsoft.Maui.Animations.Animation.Name.set -> void
Microsoft.Maui.Animations.Animation.Pause() -> void
Microsoft.Maui.Animations.Animation.Progress.get -> double
Microsoft.Maui.Animations.Animation.Progress.set -> void
Microsoft.Maui.Animations.Animation.RemoveFromParent() -> void
Microsoft.Maui.Animations.Animation.Repeats.get -> bool
Microsoft.Maui.Animations.Animation.Repeats.set -> void
Microsoft.Maui.Animations.Animation.Resume() -> void
Microsoft.Maui.Animations.Animation.StartDelay.get -> double
Microsoft.Maui.Animations.Animation.StartDelay.set -> void
Microsoft.Maui.Animations.Animation.Step.get -> System.Action<double>?
Microsoft.Maui.Animations.Animation.Step.set -> void
Microsoft.Maui.Animations.Animation.Tick(double milliseconds) -> void
Microsoft.Maui.Animations.AnimationLerpingExtensions
Microsoft.Maui.Animations.AnimationManager
Microsoft.Maui.Animations.AnimationManager.Add(Microsoft.Maui.Animations.Animation! animation) -> void
Microsoft.Maui.Animations.AnimationManager.AnimationManager(Microsoft.Maui.Animations.ITicker! ticker) -> void
Microsoft.Maui.Animations.AnimationManager.AutoStartTicker.get -> bool
Microsoft.Maui.Animations.AnimationManager.AutoStartTicker.set -> void
Microsoft.Maui.Animations.AnimationManager.Dispose() -> void
Microsoft.Maui.Animations.AnimationManager.Remove(Microsoft.Maui.Animations.Animation! animation) -> void
Microsoft.Maui.Animations.AnimationManager.SpeedModifier.get -> double
Microsoft.Maui.Animations.AnimationManager.SpeedModifier.set -> void
Microsoft.Maui.Animations.AnimationManager.Ticker.get -> Microsoft.Maui.Animations.ITicker!
Microsoft.Maui.Animations.IAnimationManager
Microsoft.Maui.Animations.IAnimationManager.Add(Microsoft.Maui.Animations.Animation! animation) -> void
Microsoft.Maui.Animations.IAnimationManager.AutoStartTicker.get -> bool
Microsoft.Maui.Animations.IAnimationManager.AutoStartTicker.set -> void
Microsoft.Maui.Animations.IAnimationManager.Remove(Microsoft.Maui.Animations.Animation! animation) -> void
Microsoft.Maui.Animations.IAnimationManager.SpeedModifier.get -> double
Microsoft.Maui.Animations.IAnimationManager.SpeedModifier.set -> void
Microsoft.Maui.Animations.IAnimationManager.Ticker.get -> Microsoft.Maui.Animations.ITicker!
Microsoft.Maui.Animations.IAnimator
Microsoft.Maui.Animations.IAnimator.AddAnimation(Microsoft.Maui.Animations.Animation! animation) -> void
Microsoft.Maui.Animations.IAnimator.RemoveAnimation(Microsoft.Maui.Animations.Animation! animation) -> void
Microsoft.Maui.Animations.ITicker
Microsoft.Maui.Animations.ITicker.Fire.get -> System.Action?
Microsoft.Maui.Animations.ITicker.Fire.set -> void
Microsoft.Maui.Animations.ITicker.IsRunning.get -> bool
Microsoft.Maui.Animations.ITicker.MaxFps.get -> int
Microsoft.Maui.Animations.ITicker.MaxFps.set -> void
Microsoft.Maui.Animations.ITicker.Start() -> void
Microsoft.Maui.Animations.ITicker.Stop() -> void
Microsoft.Maui.Animations.ITicker.SystemEnabled.get -> bool
Microsoft.Maui.Animations.Lerp
Microsoft.Maui.Animations.Lerp.Calculate.get -> Microsoft.Maui.Animations.Lerp.LerpDelegate?
Microsoft.Maui.Animations.Lerp.Calculate.set -> void
Microsoft.Maui.Animations.Lerp.Lerp() -> void
Microsoft.Maui.Animations.Lerp.LerpDelegate
Microsoft.Maui.Animations.LerpingAnimation
Microsoft.Maui.Animations.LerpingAnimation.CurrentValue.get -> object?
Microsoft.Maui.Animations.LerpingAnimation.CurrentValue.set -> void
Microsoft.Maui.Animations.LerpingAnimation.EndValue.get -> object?
Microsoft.Maui.Animations.LerpingAnimation.EndValue.set -> void
Microsoft.Maui.Animations.LerpingAnimation.Lerp.get -> Microsoft.Maui.Animations.Lerp?
Microsoft.Maui.Animations.LerpingAnimation.Lerp.set -> void
Microsoft.Maui.Animations.LerpingAnimation.LerpingAnimation() -> void
Microsoft.Maui.Animations.LerpingAnimation.LerpingAnimation(System.Action<double>! callback, double start = 0, double end = 1, Microsoft.Maui.Easing? easing = null, System.Action? finished = null) -> void
Microsoft.Maui.Animations.LerpingAnimation.LerpingAnimation(System.Collections.Generic.List<Microsoft.Maui.Animations.Animation!>! animations) -> void
Microsoft.Maui.Animations.LerpingAnimation.StartValue.get -> object?
Microsoft.Maui.Animations.LerpingAnimation.StartValue.set -> void
Microsoft.Maui.Animations.LerpingAnimation.ValueChanged.get -> System.Action?
Microsoft.Maui.Animations.LerpingAnimation.ValueChanged.set -> void
Microsoft.Maui.Animations.PlatformTicker
Microsoft.Maui.Animations.PlatformTicker.PlatformTicker() -> void
Microsoft.Maui.Animations.Ticker
Microsoft.Maui.Animations.Ticker.Fire.get -> System.Action?
Microsoft.Maui.Animations.Ticker.Fire.set -> void
Microsoft.Maui.Animations.Ticker.Ticker() -> void
Microsoft.Maui.Aspect
Microsoft.Maui.Aspect.AspectFill = 1 -> Microsoft.Maui.Aspect
Microsoft.Maui.Aspect.AspectFit = 0 -> Microsoft.Maui.Aspect
Microsoft.Maui.Aspect.Center = 3 -> Microsoft.Maui.Aspect
Microsoft.Maui.Aspect.Fill = 2 -> Microsoft.Maui.Aspect
Microsoft.Maui.ClearButtonVisibility
Microsoft.Maui.ClearButtonVisibility.Never = 0 -> Microsoft.Maui.ClearButtonVisibility
Microsoft.Maui.ClearButtonVisibility.WhileEditing = 1 -> Microsoft.Maui.ClearButtonVisibility
Microsoft.Maui.CommandMapper
Microsoft.Maui.CommandMapper.Chained.get -> Microsoft.Maui.CommandMapper?
Microsoft.Maui.CommandMapper.Chained.set -> void
Microsoft.Maui.CommandMapper.CommandMapper() -> void
Microsoft.Maui.CommandMapper.CommandMapper(Microsoft.Maui.CommandMapper! chained) -> void
Microsoft.Maui.CommandMapper.Invoke(Microsoft.Maui.IElementHandler! viewHandler, Microsoft.Maui.IElement? virtualView, string! property, object? args) -> void
Microsoft.Maui.CommandMapper<TVirtualView, TViewHandler>
Microsoft.Maui.CommandMapper<TVirtualView, TViewHandler>.Add(string! key, System.Action<TViewHandler, TVirtualView, object?>! action) -> void
Microsoft.Maui.CommandMapper<TVirtualView, TViewHandler>.Add(string! key, System.Action<TViewHandler, TVirtualView>! action) -> void
Microsoft.Maui.CommandMapper<TVirtualView, TViewHandler>.CommandMapper() -> void
Microsoft.Maui.CommandMapper<TVirtualView, TViewHandler>.CommandMapper(Microsoft.Maui.CommandMapper! chained) -> void
Microsoft.Maui.CommandMapper<TVirtualView, TViewHandler>.this[string! key].get -> System.Action<TViewHandler, TVirtualView, object?>!
Microsoft.Maui.CommandMapper<TVirtualView, TViewHandler>.this[string! key].set -> void
Microsoft.Maui.CommandMapper<TVirtualView>
Microsoft.Maui.CommandMapper<TVirtualView>.CommandMapper() -> void
Microsoft.Maui.CommandMapper<TVirtualView>.CommandMapper(Microsoft.Maui.CommandMapper! chained) -> void
Microsoft.Maui.CommandMapperExtensions
Microsoft.Maui.Converters.CornerRadiusTypeConverter
Microsoft.Maui.Converters.CornerRadiusTypeConverter.CornerRadiusTypeConverter() -> void
Microsoft.Maui.Converters.EasingTypeConverter
Microsoft.Maui.Converters.EasingTypeConverter.EasingTypeConverter() -> void
Microsoft.Maui.Converters.FlexAlignContentTypeConverter
Microsoft.Maui.Converters.FlexAlignContentTypeConverter.FlexAlignContentTypeConverter() -> void
Microsoft.Maui.Converters.FlexAlignItemsTypeConverter
Microsoft.Maui.Converters.FlexAlignItemsTypeConverter.FlexAlignItemsTypeConverter() -> void
Microsoft.Maui.Converters.FlexAlignSelfTypeConverter
Microsoft.Maui.Converters.FlexAlignSelfTypeConverter.FlexAlignSelfTypeConverter() -> void
Microsoft.Maui.Converters.FlexBasisTypeConverter
Microsoft.Maui.Converters.FlexBasisTypeConverter.FlexBasisTypeConverter() -> void
Microsoft.Maui.Converters.FlexDirectionTypeConverter
Microsoft.Maui.Converters.FlexDirectionTypeConverter.FlexDirectionTypeConverter() -> void
Microsoft.Maui.Converters.FlexJustifyTypeConverter
Microsoft.Maui.Converters.FlexJustifyTypeConverter.FlexJustifyTypeConverter() -> void
Microsoft.Maui.Converters.FlexWrapTypeConverter
Microsoft.Maui.Converters.FlexWrapTypeConverter.FlexWrapTypeConverter() -> void
Microsoft.Maui.Converters.KeyboardTypeConverter
Microsoft.Maui.Converters.KeyboardTypeConverter.KeyboardTypeConverter() -> void
Microsoft.Maui.Converters.ThicknessTypeConverter
Microsoft.Maui.Converters.ThicknessTypeConverter.ThicknessTypeConverter() -> void
Microsoft.Maui.Core_XamlTypeInfo.XamlMetaDataProvider
Microsoft.Maui.Core_XamlTypeInfo.XamlMetaDataProvider.XamlMetaDataProvider() -> void
Microsoft.Maui.CornerRadius
Microsoft.Maui.CornerRadius.BottomLeft.get -> double
Microsoft.Maui.CornerRadius.BottomRight.get -> double
Microsoft.Maui.CornerRadius.CornerRadius() -> void
Microsoft.Maui.CornerRadius.CornerRadius(double topLeft, double topRight, double bottomLeft, double bottomRight) -> void
Microsoft.Maui.CornerRadius.CornerRadius(double uniformRadius) -> void
Microsoft.Maui.CornerRadius.Deconstruct(out double topLeft, out double topRight, out double bottomLeft, out double bottomRight) -> void
Microsoft.Maui.CornerRadius.TopLeft.get -> double
Microsoft.Maui.CornerRadius.TopRight.get -> double
Microsoft.Maui.Crc64
Microsoft.Maui.CustomKeyboard
Microsoft.Maui.CustomKeyboard.Flags.get -> Microsoft.Maui.KeyboardFlags
Microsoft.Maui.Dispatching.Dispatcher
Microsoft.Maui.Dispatching.Dispatcher.CreateTimer() -> Microsoft.Maui.Dispatching.IDispatcherTimer!
Microsoft.Maui.Dispatching.Dispatcher.Dispatch(System.Action! action) -> bool
Microsoft.Maui.Dispatching.Dispatcher.DispatchDelayed(System.TimeSpan delay, System.Action! action) -> bool
Microsoft.Maui.Dispatching.Dispatcher.IsDispatchRequired.get -> bool
Microsoft.Maui.Dispatching.DispatcherExtensions
Microsoft.Maui.Dispatching.DispatcherProvider
Microsoft.Maui.Dispatching.DispatcherProvider.DispatcherProvider() -> void
Microsoft.Maui.Dispatching.DispatcherProvider.GetForCurrentThread() -> Microsoft.Maui.Dispatching.IDispatcher?
Microsoft.Maui.Dispatching.IDispatcher
Microsoft.Maui.Dispatching.IDispatcher.CreateTimer() -> Microsoft.Maui.Dispatching.IDispatcherTimer!
Microsoft.Maui.Dispatching.IDispatcher.Dispatch(System.Action! action) -> bool
Microsoft.Maui.Dispatching.IDispatcher.DispatchDelayed(System.TimeSpan delay, System.Action! action) -> bool
Microsoft.Maui.Dispatching.IDispatcher.IsDispatchRequired.get -> bool
Microsoft.Maui.Dispatching.IDispatcherProvider
Microsoft.Maui.Dispatching.IDispatcherProvider.GetForCurrentThread() -> Microsoft.Maui.Dispatching.IDispatcher?
Microsoft.Maui.Dispatching.IDispatcherTimer
Microsoft.Maui.Dispatching.IDispatcherTimer.Interval.get -> System.TimeSpan
Microsoft.Maui.Dispatching.IDispatcherTimer.Interval.set -> void
Microsoft.Maui.Dispatching.IDispatcherTimer.IsRepeating.get -> bool
Microsoft.Maui.Dispatching.IDispatcherTimer.IsRepeating.set -> void
Microsoft.Maui.Dispatching.IDispatcherTimer.IsRunning.get -> bool
Microsoft.Maui.Dispatching.IDispatcherTimer.Start() -> void
Microsoft.Maui.Dispatching.IDispatcherTimer.Stop() -> void
Microsoft.Maui.Dispatching.IDispatcherTimer.Tick -> System.EventHandler!
Microsoft.Maui.DisplayDensityRequest
Microsoft.Maui.DisplayDensityRequest.DisplayDensityRequest() -> void
Microsoft.Maui.Easing
Microsoft.Maui.Easing.Ease(double v) -> double
Microsoft.Maui.Easing.Easing(System.Func<double, double>! easingFunc) -> void
Microsoft.Maui.EmbeddedFont
Microsoft.Maui.EmbeddedFont.EmbeddedFont() -> void
Microsoft.Maui.EmbeddedFont.FontName.get -> string?
Microsoft.Maui.EmbeddedFont.FontName.set -> void
Microsoft.Maui.EmbeddedFont.ResourceStream.get -> System.IO.Stream?
Microsoft.Maui.EmbeddedFont.ResourceStream.set -> void
Microsoft.Maui.EmbeddedFontLoader
Microsoft.Maui.EmbeddedFontLoader.EmbeddedFontLoader() -> void
Microsoft.Maui.EmbeddedFontLoader.EmbeddedFontLoader(System.IServiceProvider? serviceProvider = null) -> void
Microsoft.Maui.EmbeddedFontLoader.LoadFont(Microsoft.Maui.EmbeddedFont! font) -> string?
Microsoft.Maui.EvaluateJavaScriptAsyncRequest
Microsoft.Maui.EvaluateJavaScriptAsyncRequest.EvaluateJavaScriptAsyncRequest(string! script) -> void
Microsoft.Maui.EvaluateJavaScriptAsyncRequest.Script.get -> string!
Microsoft.Maui.FileImageSourceService
Microsoft.Maui.FileImageSourceService.FileImageSourceService() -> void
Microsoft.Maui.FileImageSourceService.FileImageSourceService(Microsoft.Extensions.Logging.ILogger<Microsoft.Maui.FileImageSourceService!>? logger = null) -> void
Microsoft.Maui.FileImageSourceService.GetImageSourceAsync(Microsoft.Maui.IFileImageSource! imageSource, float scale = 1, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<Microsoft.Maui.IImageSourceServiceResult<Microsoft.UI.Xaml.Media.ImageSource!>?>!
Microsoft.Maui.FileSystemEmbeddedFontLoader
Microsoft.Maui.FileSystemEmbeddedFontLoader.FileSystemEmbeddedFontLoader(string! rootPath, System.IServiceProvider? serviceProvider = null) -> void
Microsoft.Maui.FileSystemEmbeddedFontLoader.LoadFont(Microsoft.Maui.EmbeddedFont! font) -> string?
Microsoft.Maui.FilterMode
Microsoft.Maui.FilterMode.Multiply = 1 -> Microsoft.Maui.FilterMode
Microsoft.Maui.FilterMode.SrcAtop = 2 -> Microsoft.Maui.FilterMode
Microsoft.Maui.FilterMode.SrcIn = 0 -> Microsoft.Maui.FilterMode
Microsoft.Maui.FlowDirection
Microsoft.Maui.FlowDirection.LeftToRight = 1 -> Microsoft.Maui.FlowDirection
Microsoft.Maui.FlowDirection.MatchParent = 0 -> Microsoft.Maui.FlowDirection
Microsoft.Maui.FlowDirection.RightToLeft = 2 -> Microsoft.Maui.FlowDirection
Microsoft.Maui.FlyoutBehavior
Microsoft.Maui.FlyoutBehavior.Disabled = 0 -> Microsoft.Maui.FlyoutBehavior
Microsoft.Maui.FlyoutBehavior.Flyout = 1 -> Microsoft.Maui.FlyoutBehavior
Microsoft.Maui.FlyoutBehavior.Locked = 2 -> Microsoft.Maui.FlyoutBehavior
Microsoft.Maui.FocusRequest
Microsoft.Maui.FocusRequest.FocusRequest() -> void
Microsoft.Maui.FocusRequest.FocusRequest(bool isFocused) -> void
Microsoft.Maui.FocusRequest.IsFocused.get -> bool
Microsoft.Maui.FocusRequest.IsFocused.set -> void
Microsoft.Maui.Font
Microsoft.Maui.Font.AutoScalingEnabled.get -> bool
Microsoft.Maui.Font.Family.get -> string?
Microsoft.Maui.Font.Font() -> void
Microsoft.Maui.Font.IsDefault.get -> bool
Microsoft.Maui.Font.Size.get -> double
Microsoft.Maui.Font.Slant.get -> Microsoft.Maui.FontSlant
Microsoft.Maui.Font.Weight.get -> Microsoft.Maui.FontWeight
Microsoft.Maui.Font.WithAutoScaling(bool enabled) -> Microsoft.Maui.Font
Microsoft.Maui.Font.WithSize(double size) -> Microsoft.Maui.Font
Microsoft.Maui.Font.WithSlant(Microsoft.Maui.FontSlant fontSlant) -> Microsoft.Maui.Font
Microsoft.Maui.Font.WithWeight(Microsoft.Maui.FontWeight weight, Microsoft.Maui.FontSlant fontSlant) -> Microsoft.Maui.Font
Microsoft.Maui.Font.WithWeight(Microsoft.Maui.FontWeight weight) -> Microsoft.Maui.Font
Microsoft.Maui.FontFile
Microsoft.Maui.FontFile.Extension.get -> string?
Microsoft.Maui.FontFile.Extension.set -> void
Microsoft.Maui.FontFile.FileName.get -> string?
Microsoft.Maui.FontFile.FileName.set -> void
Microsoft.Maui.FontFile.FileNameWithExtension() -> string!
Microsoft.Maui.FontFile.FileNameWithExtension(string? extension) -> string!
Microsoft.Maui.FontFile.FontFile() -> void
Microsoft.Maui.FontFile.GetPostScriptNameWithSpaces() -> string!
Microsoft.Maui.FontFile.PostScriptName.get -> string?
Microsoft.Maui.FontFile.PostScriptName.set -> void
Microsoft.Maui.FontImageSourceService
Microsoft.Maui.FontImageSourceService.FontImageSourceService(Microsoft.Maui.IFontManager! fontManager, Microsoft.Extensions.Logging.ILogger<Microsoft.Maui.FontImageSourceService!>? logger = null) -> void
Microsoft.Maui.FontImageSourceService.FontImageSourceService(Microsoft.Maui.IFontManager! fontManager) -> void
Microsoft.Maui.FontImageSourceService.FontManager.get -> Microsoft.Maui.IFontManager!
Microsoft.Maui.FontImageSourceService.GetImageSourceAsync(Microsoft.Maui.IFontImageSource! imageSource, float scale = 1, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<Microsoft.Maui.IImageSourceServiceResult<Microsoft.UI.Xaml.Media.ImageSource!>?>!
Microsoft.Maui.FontManager
Microsoft.Maui.FontManager.DefaultFontFamily.get -> Microsoft.UI.Xaml.Media.FontFamily!
Microsoft.Maui.FontManager.DefaultFontSize.get -> double
Microsoft.Maui.FontManager.FontManager(Microsoft.Maui.IFontRegistrar! fontRegistrar, System.IServiceProvider? serviceProvider = null) -> void
Microsoft.Maui.FontManager.GetFontFamily(Microsoft.Maui.Font font) -> Microsoft.UI.Xaml.Media.FontFamily!
Microsoft.Maui.FontManager.GetFontSize(Microsoft.Maui.Font font, double defaultFontSize = 0) -> double
Microsoft.Maui.FontRegistrar
Microsoft.Maui.FontRegistrar.FontRegistrar(Microsoft.Maui.IEmbeddedFontLoader! fontLoader, System.IServiceProvider? serviceProvider = null) -> void
Microsoft.Maui.FontRegistrar.GetFont(string! font) -> string?
Microsoft.Maui.FontRegistrar.Register(string! filename, string? alias, System.Reflection.Assembly! assembly) -> void
Microsoft.Maui.FontRegistrar.Register(string! filename, string? alias) -> void
Microsoft.Maui.FontSlant
Microsoft.Maui.FontSlant.Default = 0 -> Microsoft.Maui.FontSlant
Microsoft.Maui.FontSlant.Italic = 1 -> Microsoft.Maui.FontSlant
Microsoft.Maui.FontSlant.Oblique = 2 -> Microsoft.Maui.FontSlant
Microsoft.Maui.FontWeight
Microsoft.Maui.FontWeight.Black = 900 -> Microsoft.Maui.FontWeight
Microsoft.Maui.FontWeight.Bold = 700 -> Microsoft.Maui.FontWeight
Microsoft.Maui.FontWeight.Heavy = 800 -> Microsoft.Maui.FontWeight
Microsoft.Maui.FontWeight.Light = 300 -> Microsoft.Maui.FontWeight
Microsoft.Maui.FontWeight.Medium = 500 -> Microsoft.Maui.FontWeight
Microsoft.Maui.FontWeight.Regular = 400 -> Microsoft.Maui.FontWeight
Microsoft.Maui.FontWeight.Semibold = 600 -> Microsoft.Maui.FontWeight
Microsoft.Maui.FontWeight.Thin = 100 -> Microsoft.Maui.FontWeight
Microsoft.Maui.FontWeight.Ultralight = 200 -> Microsoft.Maui.FontWeight
Microsoft.Maui.GestureStatus
Microsoft.Maui.GestureStatus.Canceled = 3 -> Microsoft.Maui.GestureStatus
Microsoft.Maui.GestureStatus.Completed = 2 -> Microsoft.Maui.GestureStatus
Microsoft.Maui.GestureStatus.Running = 1 -> Microsoft.Maui.GestureStatus
Microsoft.Maui.GestureStatus.Started = 0 -> Microsoft.Maui.GestureStatus
Microsoft.Maui.Graphics.IShape
Microsoft.Maui.Graphics.IShape.PathForBounds(Microsoft.Maui.Graphics.Rect bounds) -> Microsoft.Maui.Graphics.PathF!
Microsoft.Maui.Graphics.PaintExtensions
Microsoft.Maui.Graphics.ShapeDrawable
Microsoft.Maui.Graphics.ShapeDrawable.Draw(Microsoft.Maui.Graphics.ICanvas! canvas, Microsoft.Maui.Graphics.RectF dirtyRect) -> void
Microsoft.Maui.Graphics.ShapeDrawable.ShapeDrawable() -> void
Microsoft.Maui.Graphics.ShapeDrawable.ShapeDrawable(Microsoft.Maui.IShapeView? shape) -> void
Microsoft.Maui.Graphics.ShapeDrawable.UpdateRenderTransform(System.Numerics.Matrix3x2? renderTransform) -> void
Microsoft.Maui.Graphics.ShapeDrawable.UpdateShapeView(Microsoft.Maui.IShapeView? shape) -> void
Microsoft.Maui.Graphics.ShapeDrawable.UpdateWindingMode(Microsoft.Maui.Graphics.WindingMode windingMode) -> void
Microsoft.Maui.GridLength
Microsoft.Maui.GridLength.GridLength() -> void
Microsoft.Maui.GridLength.GridLength(double value, Microsoft.Maui.GridUnitType type) -> void
Microsoft.Maui.GridLength.GridLength(double value) -> void
Microsoft.Maui.GridLength.GridUnitType.get -> Microsoft.Maui.GridUnitType
Microsoft.Maui.GridLength.IsAbsolute.get -> bool
Microsoft.Maui.GridLength.IsAuto.get -> bool
Microsoft.Maui.GridLength.IsStar.get -> bool
Microsoft.Maui.GridLength.Value.get -> double
Microsoft.Maui.GridUnitType
Microsoft.Maui.GridUnitType.Absolute = 0 -> Microsoft.Maui.GridUnitType
Microsoft.Maui.GridUnitType.Auto = 2 -> Microsoft.Maui.GridUnitType
Microsoft.Maui.GridUnitType.Star = 1 -> Microsoft.Maui.GridUnitType
Microsoft.Maui.Handlers.ActivityIndicatorHandler
Microsoft.Maui.Handlers.ActivityIndicatorHandler.ActivityIndicatorHandler() -> void
Microsoft.Maui.Handlers.ActivityIndicatorHandler.ActivityIndicatorHandler(Microsoft.Maui.IPropertyMapper? mapper, Microsoft.Maui.CommandMapper? commandMapper) -> void
Microsoft.Maui.Handlers.ActivityIndicatorHandler.ActivityIndicatorHandler(Microsoft.Maui.IPropertyMapper? mapper) -> void
Microsoft.Maui.Handlers.ApplicationHandler
Microsoft.Maui.Handlers.ApplicationHandler.ApplicationHandler() -> void
Microsoft.Maui.Handlers.ApplicationHandler.ApplicationHandler(Microsoft.Maui.IPropertyMapper? mapper, Microsoft.Maui.CommandMapper? commandMapper) -> void
Microsoft.Maui.Handlers.ApplicationHandler.ApplicationHandler(Microsoft.Maui.IPropertyMapper? mapper) -> void
Microsoft.Maui.Handlers.BorderHandler
Microsoft.Maui.Handlers.BorderHandler.BorderHandler() -> void
Microsoft.Maui.Handlers.BorderHandler.BorderHandler(Microsoft.Maui.IPropertyMapper? mapper, Microsoft.Maui.CommandMapper? commandMapper) -> void
Microsoft.Maui.Handlers.BorderHandler.BorderHandler(Microsoft.Maui.IPropertyMapper? mapper) -> void
Microsoft.Maui.Handlers.ButtonHandler
Microsoft.Maui.Handlers.ButtonHandler.ButtonHandler() -> void
Microsoft.Maui.Handlers.ButtonHandler.ButtonHandler(Microsoft.Maui.IPropertyMapper? mapper, Microsoft.Maui.CommandMapper? commandMapper) -> void
Microsoft.Maui.Handlers.ButtonHandler.ButtonHandler(Microsoft.Maui.IPropertyMapper? mapper) -> void
Microsoft.Maui.Handlers.CheckBoxHandler
Microsoft.Maui.Handlers.CheckBoxHandler.CheckBoxHandler() -> void
Microsoft.Maui.Handlers.CheckBoxHandler.CheckBoxHandler(Microsoft.Maui.IPropertyMapper? mapper, Microsoft.Maui.CommandMapper? commandMapper) -> void
Microsoft.Maui.Handlers.CheckBoxHandler.CheckBoxHandler(Microsoft.Maui.IPropertyMapper? mapper) -> void
Microsoft.Maui.Handlers.ContentViewHandler
Microsoft.Maui.Handlers.ContentViewHandler.ContentViewHandler() -> void
Microsoft.Maui.Handlers.ContentViewHandler.ContentViewHandler(Microsoft.Maui.IPropertyMapper? mapper, Microsoft.Maui.CommandMapper? commandMapper) -> void
Microsoft.Maui.Handlers.ContentViewHandler.ContentViewHandler(Microsoft.Maui.IPropertyMapper? mapper) -> void
Microsoft.Maui.Handlers.ContextFlyoutItemHandlerUpdate
Microsoft.Maui.Handlers.ContextFlyoutItemHandlerUpdate.ContextFlyoutItemHandlerUpdate(int Index, Microsoft.Maui.IMenuElement! MenuElement) -> void
Microsoft.Maui.Handlers.ContextFlyoutItemHandlerUpdate.Index.get -> int
Microsoft.Maui.Handlers.ContextFlyoutItemHandlerUpdate.Index.init -> void
Microsoft.Maui.Handlers.ContextFlyoutItemHandlerUpdate.MenuElement.get -> Microsoft.Maui.IMenuElement!
Microsoft.Maui.Handlers.ContextFlyoutItemHandlerUpdate.MenuElement.init -> void
Microsoft.Maui.Handlers.DatePickerHandler
Microsoft.Maui.Handlers.DatePickerHandler.DatePickerHandler() -> void
Microsoft.Maui.Handlers.DatePickerHandler.DatePickerHandler(Microsoft.Maui.IPropertyMapper? mapper, Microsoft.Maui.CommandMapper? commandMapper) -> void
Microsoft.Maui.Handlers.DatePickerHandler.DatePickerHandler(Microsoft.Maui.IPropertyMapper? mapper) -> void
Microsoft.Maui.Handlers.EditorHandler
Microsoft.Maui.Handlers.EditorHandler.EditorHandler() -> void
Microsoft.Maui.Handlers.EditorHandler.EditorHandler(Microsoft.Maui.IPropertyMapper? mapper, Microsoft.Maui.CommandMapper? commandMapper) -> void
Microsoft.Maui.Handlers.EditorHandler.EditorHandler(Microsoft.Maui.IPropertyMapper? mapper) -> void
Microsoft.Maui.Handlers.ElementHandler
Microsoft.Maui.Handlers.ElementHandler.ElementHandler(Microsoft.Maui.IPropertyMapper! mapper, Microsoft.Maui.CommandMapper? commandMapper = null) -> void
Microsoft.Maui.Handlers.ElementHandler.MauiContext.get -> Microsoft.Maui.IMauiContext?
Microsoft.Maui.Handlers.ElementHandler.PlatformView.get -> object?
Microsoft.Maui.Handlers.ElementHandler.Services.get -> System.IServiceProvider?
Microsoft.Maui.Handlers.ElementHandler.VirtualView.get -> Microsoft.Maui.IElement?
Microsoft.Maui.Handlers.ElementHandler<TVirtualView, TPlatformView>
Microsoft.Maui.Handlers.ElementHandler<TVirtualView, TPlatformView>.ElementHandler(Microsoft.Maui.IPropertyMapper! mapper, Microsoft.Maui.CommandMapper? commandMapper = null) -> void
Microsoft.Maui.Handlers.ElementHandler<TVirtualView, TPlatformView>.PlatformView.get -> TPlatformView!
Microsoft.Maui.Handlers.ElementHandler<TVirtualView, TPlatformView>.VirtualView.get -> TVirtualView!
Microsoft.Maui.Handlers.EntryHandler
Microsoft.Maui.Handlers.EntryHandler.EntryHandler() -> void
Microsoft.Maui.Handlers.EntryHandler.EntryHandler(Microsoft.Maui.IPropertyMapper? mapper, Microsoft.Maui.CommandMapper? commandMapper) -> void
Microsoft.Maui.Handlers.EntryHandler.EntryHandler(Microsoft.Maui.IPropertyMapper? mapper) -> void
Microsoft.Maui.Handlers.FlyoutViewHandler
Microsoft.Maui.Handlers.FlyoutViewHandler.FlyoutViewHandler() -> void
Microsoft.Maui.Handlers.FlyoutViewHandler.FlyoutViewHandler(Microsoft.Maui.IPropertyMapper? mapper, Microsoft.Maui.CommandMapper? commandMapper) -> void
Microsoft.Maui.Handlers.FlyoutViewHandler.FlyoutViewHandler(Microsoft.Maui.IPropertyMapper? mapper) -> void
Microsoft.Maui.Handlers.GraphicsViewHandler
Microsoft.Maui.Handlers.GraphicsViewHandler.GraphicsViewHandler() -> void
Microsoft.Maui.Handlers.GraphicsViewHandler.GraphicsViewHandler(Microsoft.Maui.IPropertyMapper? mapper, Microsoft.Maui.CommandMapper? commandMapper) -> void
Microsoft.Maui.Handlers.GraphicsViewHandler.GraphicsViewHandler(Microsoft.Maui.IPropertyMapper? mapper) -> void
Microsoft.Maui.Handlers.IActivityIndicatorHandler
Microsoft.Maui.Handlers.IActivityIndicatorHandler.PlatformView.get -> Microsoft.UI.Xaml.Controls.ProgressRing!
Microsoft.Maui.Handlers.IActivityIndicatorHandler.VirtualView.get -> Microsoft.Maui.IActivityIndicator!
Microsoft.Maui.Handlers.IBorderHandler
Microsoft.Maui.Handlers.IBorderHandler.PlatformView.get -> Microsoft.Maui.Platform.ContentPanel!
Microsoft.Maui.Handlers.IBorderHandler.VirtualView.get -> Microsoft.Maui.IBorderView!
Microsoft.Maui.Handlers.IButtonHandler
Microsoft.Maui.Handlers.IButtonHandler.ImageSourceLoader.get -> Microsoft.Maui.Platform.ImageSourcePartLoader!
Microsoft.Maui.Handlers.IButtonHandler.PlatformView.get -> Microsoft.UI.Xaml.Controls.Button!
Microsoft.Maui.Handlers.IButtonHandler.VirtualView.get -> Microsoft.Maui.IButton!
Microsoft.Maui.Handlers.ICheckBoxHandler
Microsoft.Maui.Handlers.ICheckBoxHandler.PlatformView.get -> Microsoft.UI.Xaml.Controls.CheckBox!
Microsoft.Maui.Handlers.ICheckBoxHandler.VirtualView.get -> Microsoft.Maui.ICheckBox!
Microsoft.Maui.Handlers.IContentViewHandler
Microsoft.Maui.Handlers.IContentViewHandler.PlatformView.get -> Microsoft.Maui.Platform.ContentPanel!
Microsoft.Maui.Handlers.IContentViewHandler.VirtualView.get -> Microsoft.Maui.IContentView!
Microsoft.Maui.Handlers.IDatePickerHandler
Microsoft.Maui.Handlers.IDatePickerHandler.PlatformView.get -> Microsoft.UI.Xaml.Controls.CalendarDatePicker!
Microsoft.Maui.Handlers.IDatePickerHandler.VirtualView.get -> Microsoft.Maui.IDatePicker!
Microsoft.Maui.Handlers.IEditorHandler
Microsoft.Maui.Handlers.IEditorHandler.PlatformView.get -> Microsoft.UI.Xaml.Controls.TextBox!
Microsoft.Maui.Handlers.IEditorHandler.VirtualView.get -> Microsoft.Maui.IEditor!
Microsoft.Maui.Handlers.IEntryHandler
Microsoft.Maui.Handlers.IEntryHandler.PlatformView.get -> Microsoft.UI.Xaml.Controls.TextBox!
Microsoft.Maui.Handlers.IEntryHandler.VirtualView.get -> Microsoft.Maui.IEntry!
Microsoft.Maui.Handlers.IFlyoutViewHandler
Microsoft.Maui.Handlers.IFlyoutViewHandler.PlatformView.get -> Microsoft.Maui.Platform.RootNavigationView!
Microsoft.Maui.Handlers.IFlyoutViewHandler.VirtualView.get -> Microsoft.Maui.IFlyoutView!
Microsoft.Maui.Handlers.IGraphicsViewHandler
Microsoft.Maui.Handlers.IGraphicsViewHandler.PlatformView.get -> Microsoft.Maui.Platform.PlatformTouchGraphicsView!
Microsoft.Maui.Handlers.IGraphicsViewHandler.VirtualView.get -> Microsoft.Maui.IGraphicsView!
Microsoft.Maui.Handlers.IImageButtonHandler
Microsoft.Maui.Handlers.IImageButtonHandler.PlatformView.get -> Microsoft.UI.Xaml.Controls.Button!
Microsoft.Maui.Handlers.IImageButtonHandler.VirtualView.get -> Microsoft.Maui.IImageButton!
Microsoft.Maui.Handlers.IImageHandler
Microsoft.Maui.Handlers.IImageHandler.PlatformView.get -> Microsoft.UI.Xaml.Controls.Image!
Microsoft.Maui.Handlers.IImageHandler.SourceLoader.get -> Microsoft.Maui.Platform.ImageSourcePartLoader!
Microsoft.Maui.Handlers.IImageHandler.VirtualView.get -> Microsoft.Maui.IImage!
Microsoft.Maui.Handlers.IIndicatorViewHandler
Microsoft.Maui.Handlers.IIndicatorViewHandler.PlatformView.get -> Microsoft.Maui.Platform.MauiPageControl!
Microsoft.Maui.Handlers.IIndicatorViewHandler.VirtualView.get -> Microsoft.Maui.IIndicatorView!
Microsoft.Maui.Handlers.ILabelHandler
Microsoft.Maui.Handlers.ILabelHandler.PlatformView.get -> Microsoft.UI.Xaml.Controls.TextBlock!
Microsoft.Maui.Handlers.ILabelHandler.VirtualView.get -> Microsoft.Maui.ILabel!
Microsoft.Maui.Handlers.ImageButtonHandler
Microsoft.Maui.Handlers.ImageButtonHandler.ImageButtonHandler() -> void
Microsoft.Maui.Handlers.ImageButtonHandler.ImageButtonHandler(Microsoft.Maui.IPropertyMapper? mapper, Microsoft.Maui.CommandMapper? commandMapper) -> void
Microsoft.Maui.Handlers.ImageButtonHandler.ImageButtonHandler(Microsoft.Maui.IPropertyMapper? mapper) -> void
Microsoft.Maui.Handlers.ImageHandler
Microsoft.Maui.Handlers.ImageHandler.ImageHandler() -> void
Microsoft.Maui.Handlers.ImageHandler.ImageHandler(Microsoft.Maui.IPropertyMapper? mapper, Microsoft.Maui.CommandMapper? commandMapper) -> void
Microsoft.Maui.Handlers.ImageHandler.ImageHandler(Microsoft.Maui.IPropertyMapper? mapper) -> void
Microsoft.Maui.Handlers.IMenuBarHandler
Microsoft.Maui.Handlers.IMenuBarHandler.Add(Microsoft.Maui.IMenuBarItem! view) -> void
Microsoft.Maui.Handlers.IMenuBarHandler.Clear() -> void
Microsoft.Maui.Handlers.IMenuBarHandler.Insert(int index, Microsoft.Maui.IMenuBarItem! view) -> void
Microsoft.Maui.Handlers.IMenuBarHandler.PlatformView.get -> Microsoft.UI.Xaml.Controls.MenuBar!
Microsoft.Maui.Handlers.IMenuBarHandler.Remove(Microsoft.Maui.IMenuBarItem! view) -> void
Microsoft.Maui.Handlers.IMenuBarHandler.VirtualView.get -> Microsoft.Maui.IMenuBar!
Microsoft.Maui.Handlers.IMenuBarItemHandler
Microsoft.Maui.Handlers.IMenuBarItemHandler.Add(Microsoft.Maui.IMenuElement! view) -> void
Microsoft.Maui.Handlers.IMenuBarItemHandler.Clear() -> void
Microsoft.Maui.Handlers.IMenuBarItemHandler.Insert(int index, Microsoft.Maui.IMenuElement! view) -> void
Microsoft.Maui.Handlers.IMenuBarItemHandler.PlatformView.get -> Microsoft.UI.Xaml.Controls.MenuBarItem!
Microsoft.Maui.Handlers.IMenuBarItemHandler.Remove(Microsoft.Maui.IMenuElement! view) -> void
Microsoft.Maui.Handlers.IMenuBarItemHandler.VirtualView.get -> Microsoft.Maui.IMenuBarItem!
Microsoft.Maui.Handlers.IMenuFlyoutHandler
Microsoft.Maui.Handlers.IMenuFlyoutHandler.Add(Microsoft.Maui.IMenuElement! view) -> void
Microsoft.Maui.Handlers.IMenuFlyoutHandler.Clear() -> void
Microsoft.Maui.Handlers.IMenuFlyoutHandler.Insert(int index, Microsoft.Maui.IMenuElement! view) -> void
Microsoft.Maui.Handlers.IMenuFlyoutHandler.PlatformView.get -> Microsoft.UI.Xaml.Controls.MenuFlyout!
Microsoft.Maui.Handlers.IMenuFlyoutHandler.Remove(Microsoft.Maui.IMenuElement! view) -> void
Microsoft.Maui.Handlers.IMenuFlyoutHandler.VirtualView.get -> Microsoft.Maui.IMenuFlyout!
Microsoft.Maui.Handlers.IMenuFlyoutItemHandler
Microsoft.Maui.Handlers.IMenuFlyoutItemHandler.PlatformView.get -> Microsoft.UI.Xaml.Controls.MenuFlyoutItem!
Microsoft.Maui.Handlers.IMenuFlyoutItemHandler.VirtualView.get -> Microsoft.Maui.IMenuFlyoutItem!
Microsoft.Maui.Handlers.IMenuFlyoutSeparatorHandler
Microsoft.Maui.Handlers.IMenuFlyoutSeparatorHandler.PlatformView.get -> Microsoft.UI.Xaml.Controls.MenuFlyoutSeparator!
Microsoft.Maui.Handlers.IMenuFlyoutSeparatorHandler.VirtualView.get -> Microsoft.Maui.IMenuFlyoutSeparator!
Microsoft.Maui.Handlers.IMenuFlyoutSubItemHandler
Microsoft.Maui.Handlers.IMenuFlyoutSubItemHandler.Add(Microsoft.Maui.IMenuElement! view) -> void
Microsoft.Maui.Handlers.IMenuFlyoutSubItemHandler.Clear() -> void
Microsoft.Maui.Handlers.IMenuFlyoutSubItemHandler.Insert(int index, Microsoft.Maui.IMenuElement! view) -> void
Microsoft.Maui.Handlers.IMenuFlyoutSubItemHandler.PlatformView.get -> Microsoft.UI.Xaml.Controls.MenuFlyoutSubItem!
Microsoft.Maui.Handlers.IMenuFlyoutSubItemHandler.Remove(Microsoft.Maui.IMenuElement! view) -> void
Microsoft.Maui.Handlers.IMenuFlyoutSubItemHandler.VirtualView.get -> Microsoft.Maui.IMenuFlyoutSubItem!
Microsoft.Maui.Handlers.INavigationViewHandler
Microsoft.Maui.Handlers.INavigationViewHandler.PlatformView.get -> Microsoft.UI.Xaml.Controls.Frame!
Microsoft.Maui.Handlers.INavigationViewHandler.VirtualView.get -> Microsoft.Maui.IStackNavigationView!
Microsoft.Maui.Handlers.IndicatorViewHandler
Microsoft.Maui.Handlers.IndicatorViewHandler.IndicatorViewHandler() -> void
Microsoft.Maui.Handlers.IndicatorViewHandler.IndicatorViewHandler(Microsoft.Maui.IPropertyMapper? mapper, Microsoft.Maui.CommandMapper? commandMapper) -> void
Microsoft.Maui.Handlers.IndicatorViewHandler.IndicatorViewHandler(Microsoft.Maui.IPropertyMapper? mapper) -> void
Microsoft.Maui.Handlers.IPageHandler
Microsoft.Maui.Handlers.IPickerHandler
Microsoft.Maui.Handlers.IPickerHandler.PlatformView.get -> Microsoft.UI.Xaml.Controls.ComboBox!
Microsoft.Maui.Handlers.IPickerHandler.VirtualView.get -> Microsoft.Maui.IPicker!
Microsoft.Maui.Handlers.IProgressBarHandler
Microsoft.Maui.Handlers.IProgressBarHandler.PlatformView.get -> Microsoft.UI.Xaml.Controls.ProgressBar!
Microsoft.Maui.Handlers.IProgressBarHandler.VirtualView.get -> Microsoft.Maui.IProgress!
Microsoft.Maui.Handlers.IRadioButtonHandler
Microsoft.Maui.Handlers.IRadioButtonHandler.PlatformView.get -> Microsoft.UI.Xaml.Controls.RadioButton!
Microsoft.Maui.Handlers.IRadioButtonHandler.VirtualView.get -> Microsoft.Maui.IRadioButton!
Microsoft.Maui.Handlers.IRefreshViewHandler
Microsoft.Maui.Handlers.IRefreshViewHandler.PlatformView.get -> Microsoft.UI.Xaml.Controls.RefreshContainer!
Microsoft.Maui.Handlers.IRefreshViewHandler.VirtualView.get -> Microsoft.Maui.IRefreshView!
Microsoft.Maui.Handlers.IScrollViewHandler
Microsoft.Maui.Handlers.IScrollViewHandler.PlatformView.get -> Microsoft.UI.Xaml.Controls.ScrollViewer!
Microsoft.Maui.Handlers.IScrollViewHandler.VirtualView.get -> Microsoft.Maui.IScrollView!
Microsoft.Maui.Handlers.ISearchBarHandler
Microsoft.Maui.Handlers.ISearchBarHandler.PlatformView.get -> Microsoft.UI.Xaml.Controls.AutoSuggestBox!
Microsoft.Maui.Handlers.ISearchBarHandler.QueryEditor.get -> Microsoft.UI.Xaml.Controls.AutoSuggestBox?
Microsoft.Maui.Handlers.ISearchBarHandler.VirtualView.get -> Microsoft.Maui.ISearchBar!
Microsoft.Maui.Handlers.IShapeViewHandler
Microsoft.Maui.Handlers.IShapeViewHandler.PlatformView.get -> Microsoft.Maui.Graphics.Win2D.W2DGraphicsView!
Microsoft.Maui.Handlers.IShapeViewHandler.VirtualView.get -> Microsoft.Maui.IShapeView!
Microsoft.Maui.Handlers.ISliderHandler
Microsoft.Maui.Handlers.ISliderHandler.PlatformView.get -> Microsoft.UI.Xaml.Controls.Slider!
Microsoft.Maui.Handlers.ISliderHandler.VirtualView.get -> Microsoft.Maui.ISlider!
Microsoft.Maui.Handlers.IStepperHandler
Microsoft.Maui.Handlers.IStepperHandler.PlatformView.get -> Microsoft.Maui.Platform.MauiStepper!
Microsoft.Maui.Handlers.IStepperHandler.VirtualView.get -> Microsoft.Maui.IStepper!
Microsoft.Maui.Handlers.ISwipeItemMenuItemHandler
Microsoft.Maui.Handlers.ISwipeItemMenuItemHandler.PlatformView.get -> Microsoft.UI.Xaml.Controls.SwipeItem!
Microsoft.Maui.Handlers.ISwipeItemMenuItemHandler.SourceLoader.get -> Microsoft.Maui.Platform.ImageSourcePartLoader?
Microsoft.Maui.Handlers.ISwipeItemMenuItemHandler.VirtualView.get -> Microsoft.Maui.ISwipeItemMenuItem!
Microsoft.Maui.Handlers.ISwipeItemViewHandler
Microsoft.Maui.Handlers.ISwipeItemViewHandler.PlatformView.get -> Microsoft.UI.Xaml.FrameworkElement!
Microsoft.Maui.Handlers.ISwipeItemViewHandler.VirtualView.get -> Microsoft.Maui.ISwipeItemView!
Microsoft.Maui.Handlers.ISwipeViewHandler
Microsoft.Maui.Handlers.ISwipeViewHandler.PlatformView.get -> Microsoft.UI.Xaml.Controls.SwipeControl!
Microsoft.Maui.Handlers.ISwipeViewHandler.VirtualView.get -> Microsoft.Maui.ISwipeView!
Microsoft.Maui.Handlers.ISwitchHandler
Microsoft.Maui.Handlers.ISwitchHandler.PlatformView.get -> Microsoft.UI.Xaml.Controls.ToggleSwitch!
Microsoft.Maui.Handlers.ISwitchHandler.VirtualView.get -> Microsoft.Maui.ISwitch!
Microsoft.Maui.Handlers.ITabbedViewHandler
Microsoft.Maui.Handlers.ITabbedViewHandler.VirtualView.get -> Microsoft.Maui.ITabbedView!
Microsoft.Maui.Handlers.ITimePickerHandler
Microsoft.Maui.Handlers.ITimePickerHandler.PlatformView.get -> Microsoft.UI.Xaml.Controls.TimePicker!
Microsoft.Maui.Handlers.ITimePickerHandler.VirtualView.get -> Microsoft.Maui.ITimePicker!
Microsoft.Maui.Handlers.IToolbarHandler
Microsoft.Maui.Handlers.IToolbarHandler.PlatformView.get -> Microsoft.Maui.Platform.MauiToolbar!
Microsoft.Maui.Handlers.IToolbarHandler.VirtualView.get -> Microsoft.Maui.IToolbar!
Microsoft.Maui.Handlers.IWebViewHandler
Microsoft.Maui.Handlers.IWebViewHandler.PlatformView.get -> Microsoft.UI.Xaml.Controls.WebView2!
Microsoft.Maui.Handlers.IWebViewHandler.VirtualView.get -> Microsoft.Maui.IWebView!
Microsoft.Maui.Handlers.IWindowHandler
Microsoft.Maui.Handlers.IWindowHandler.PlatformView.get -> Microsoft.UI.Xaml.Window!
Microsoft.Maui.Handlers.IWindowHandler.VirtualView.get -> Microsoft.Maui.IWindow!
Microsoft.Maui.Handlers.LabelHandler
Microsoft.Maui.Handlers.LabelHandler.LabelHandler() -> void
Microsoft.Maui.Handlers.LabelHandler.LabelHandler(Microsoft.Maui.IPropertyMapper? mapper, Microsoft.Maui.CommandMapper? commandMapper) -> void
Microsoft.Maui.Handlers.LabelHandler.LabelHandler(Microsoft.Maui.IPropertyMapper? mapper) -> void
Microsoft.Maui.Handlers.LayoutHandler
Microsoft.Maui.Handlers.LayoutHandler.Add(Microsoft.Maui.IView! child) -> void
Microsoft.Maui.Handlers.LayoutHandler.Clear() -> void
Microsoft.Maui.Handlers.LayoutHandler.Insert(int index, Microsoft.Maui.IView! child) -> void
Microsoft.Maui.Handlers.LayoutHandler.LayoutHandler() -> void
Microsoft.Maui.Handlers.LayoutHandler.LayoutHandler(Microsoft.Maui.IPropertyMapper? mapper = null, Microsoft.Maui.CommandMapper? commandMapper = null) -> void
Microsoft.Maui.Handlers.LayoutHandler.Remove(Microsoft.Maui.IView! child) -> void
Microsoft.Maui.Handlers.LayoutHandler.Update(int index, Microsoft.Maui.IView! child) -> void
Microsoft.Maui.Handlers.LayoutHandler.UpdateZIndex(Microsoft.Maui.IView! child) -> void
Microsoft.Maui.Handlers.LayoutHandlerUpdate
Microsoft.Maui.Handlers.LayoutHandlerUpdate.Index.get -> int
Microsoft.Maui.Handlers.LayoutHandlerUpdate.Index.init -> void
Microsoft.Maui.Handlers.LayoutHandlerUpdate.LayoutHandlerUpdate(int Index, Microsoft.Maui.IView! View) -> void
Microsoft.Maui.Handlers.LayoutHandlerUpdate.View.get -> Microsoft.Maui.IView!
Microsoft.Maui.Handlers.LayoutHandlerUpdate.View.init -> void
Microsoft.Maui.Handlers.MenuBarHandler
Microsoft.Maui.Handlers.MenuBarHandler.Add(Microsoft.Maui.IMenuBarItem! view) -> void
Microsoft.Maui.Handlers.MenuBarHandler.Clear() -> void
Microsoft.Maui.Handlers.MenuBarHandler.Insert(int index, Microsoft.Maui.IMenuBarItem! view) -> void
Microsoft.Maui.Handlers.MenuBarHandler.MenuBarHandler() -> void
Microsoft.Maui.Handlers.MenuBarHandler.MenuBarHandler(Microsoft.Maui.IPropertyMapper! mapper, Microsoft.Maui.CommandMapper? commandMapper = null) -> void
Microsoft.Maui.Handlers.MenuBarHandler.Remove(Microsoft.Maui.IMenuBarItem! view) -> void
Microsoft.Maui.Handlers.MenuBarHandlerUpdate
Microsoft.Maui.Handlers.MenuBarHandlerUpdate.Index.get -> int
Microsoft.Maui.Handlers.MenuBarHandlerUpdate.Index.init -> void
Microsoft.Maui.Handlers.MenuBarHandlerUpdate.MenuBarHandlerUpdate(int Index, Microsoft.Maui.IMenuBarItem! MenuBarItem) -> void
Microsoft.Maui.Handlers.MenuBarHandlerUpdate.MenuBarItem.get -> Microsoft.Maui.IMenuBarItem!
Microsoft.Maui.Handlers.MenuBarHandlerUpdate.MenuBarItem.init -> void
Microsoft.Maui.Handlers.MenuBarItemHandler
Microsoft.Maui.Handlers.MenuBarItemHandler.Add(Microsoft.Maui.IMenuElement! view) -> void
Microsoft.Maui.Handlers.MenuBarItemHandler.Clear() -> void
Microsoft.Maui.Handlers.MenuBarItemHandler.Insert(int index, Microsoft.Maui.IMenuElement! view) -> void
Microsoft.Maui.Handlers.MenuBarItemHandler.MenuBarItemHandler() -> void
Microsoft.Maui.Handlers.MenuBarItemHandler.MenuBarItemHandler(Microsoft.Maui.IPropertyMapper! mapper, Microsoft.Maui.CommandMapper? commandMapper = null) -> void
Microsoft.Maui.Handlers.MenuBarItemHandler.Remove(Microsoft.Maui.IMenuElement! view) -> void
Microsoft.Maui.Handlers.MenuBarItemHandlerUpdate
Microsoft.Maui.Handlers.MenuBarItemHandlerUpdate.Index.get -> int
Microsoft.Maui.Handlers.MenuBarItemHandlerUpdate.Index.init -> void
Microsoft.Maui.Handlers.MenuBarItemHandlerUpdate.MenuBarItemHandlerUpdate(int Index, Microsoft.Maui.IMenuElement! MenuElement) -> void
Microsoft.Maui.Handlers.MenuBarItemHandlerUpdate.MenuElement.get -> Microsoft.Maui.IMenuElement!
Microsoft.Maui.Handlers.MenuBarItemHandlerUpdate.MenuElement.init -> void
Microsoft.Maui.Handlers.MenuFlyoutHandler
Microsoft.Maui.Handlers.MenuFlyoutHandler.Add(Microsoft.Maui.IMenuElement! view) -> void
Microsoft.Maui.Handlers.MenuFlyoutHandler.Clear() -> void
Microsoft.Maui.Handlers.MenuFlyoutHandler.Insert(int index, Microsoft.Maui.IMenuElement! view) -> void
Microsoft.Maui.Handlers.MenuFlyoutHandler.MenuFlyoutHandler() -> void
Microsoft.Maui.Handlers.MenuFlyoutHandler.MenuFlyoutHandler(Microsoft.Maui.IPropertyMapper! mapper, Microsoft.Maui.CommandMapper? commandMapper = null) -> void
Microsoft.Maui.Handlers.MenuFlyoutHandler.Remove(Microsoft.Maui.IMenuElement! view) -> void
Microsoft.Maui.Handlers.MenuFlyoutItemHandler
Microsoft.Maui.Handlers.MenuFlyoutItemHandler.MenuFlyoutItemHandler() -> void
Microsoft.Maui.Handlers.MenuFlyoutSeparatorHandler
Microsoft.Maui.Handlers.MenuFlyoutSeparatorHandler.MenuFlyoutSeparatorHandler() -> void
Microsoft.Maui.Handlers.MenuFlyoutSeparatorHandler.MenuFlyoutSeparatorHandler(Microsoft.Maui.IPropertyMapper! mapper, Microsoft.Maui.CommandMapper? commandMapper = null) -> void
Microsoft.Maui.Handlers.MenuFlyoutSubItemHandler
Microsoft.Maui.Handlers.MenuFlyoutSubItemHandler.Add(Microsoft.Maui.IMenuElement! view) -> void
Microsoft.Maui.Handlers.MenuFlyoutSubItemHandler.Clear() -> void
Microsoft.Maui.Handlers.MenuFlyoutSubItemHandler.Insert(int index, Microsoft.Maui.IMenuElement! view) -> void
Microsoft.Maui.Handlers.MenuFlyoutSubItemHandler.MenuFlyoutSubItemHandler() -> void
Microsoft.Maui.Handlers.MenuFlyoutSubItemHandler.MenuFlyoutSubItemHandler(Microsoft.Maui.IPropertyMapper! mapper, Microsoft.Maui.CommandMapper? commandMapper = null) -> void
Microsoft.Maui.Handlers.MenuFlyoutSubItemHandler.Remove(Microsoft.Maui.IMenuElement! view) -> void
Microsoft.Maui.Handlers.MenuFlyoutSubItemHandlerUpdate
Microsoft.Maui.Handlers.MenuFlyoutSubItemHandlerUpdate.Index.get -> int
Microsoft.Maui.Handlers.MenuFlyoutSubItemHandlerUpdate.Index.init -> void
Microsoft.Maui.Handlers.MenuFlyoutSubItemHandlerUpdate.MenuElement.get -> Microsoft.Maui.IMenuElement!
Microsoft.Maui.Handlers.MenuFlyoutSubItemHandlerUpdate.MenuElement.init -> void
Microsoft.Maui.Handlers.MenuFlyoutSubItemHandlerUpdate.MenuFlyoutSubItemHandlerUpdate(int Index, Microsoft.Maui.IMenuElement! MenuElement) -> void
Microsoft.Maui.Handlers.NavigationViewHandler
Microsoft.Maui.Handlers.NavigationViewHandler.NavigationViewHandler() -> void
Microsoft.Maui.Handlers.NavigationViewHandler.NavigationViewHandler(Microsoft.Maui.IPropertyMapper? mapper, Microsoft.Maui.CommandMapper? commandMapper) -> void
Microsoft.Maui.Handlers.NavigationViewHandler.NavigationViewHandler(Microsoft.Maui.IPropertyMapper? mapper) -> void
Microsoft.Maui.Handlers.OpenWindowRequest
Microsoft.Maui.Handlers.OpenWindowRequest.LaunchArgs.get -> Microsoft.UI.Xaml.LaunchActivatedEventArgs?
Microsoft.Maui.Handlers.OpenWindowRequest.LaunchArgs.init -> void
Microsoft.Maui.Handlers.OpenWindowRequest.OpenWindowRequest(Microsoft.Maui.IPersistedState? State = null, Microsoft.UI.Xaml.LaunchActivatedEventArgs? LaunchArgs = null) -> void
Microsoft.Maui.Handlers.OpenWindowRequest.State.get -> Microsoft.Maui.IPersistedState?
Microsoft.Maui.Handlers.OpenWindowRequest.State.init -> void
Microsoft.Maui.Handlers.PageHandler
Microsoft.Maui.Handlers.PageHandler.PageHandler() -> void
Microsoft.Maui.Handlers.PageHandler.PageHandler(Microsoft.Maui.IPropertyMapper? mapper, Microsoft.Maui.CommandMapper? commandMapper) -> void
Microsoft.Maui.Handlers.PageHandler.PageHandler(Microsoft.Maui.IPropertyMapper? mapper) -> void
Microsoft.Maui.Handlers.PickerHandler
Microsoft.Maui.Handlers.PickerHandler.PickerHandler() -> void
Microsoft.Maui.Handlers.PickerHandler.PickerHandler(Microsoft.Maui.IPropertyMapper? mapper, Microsoft.Maui.CommandMapper? commandMapper) -> void
Microsoft.Maui.Handlers.PickerHandler.PickerHandler(Microsoft.Maui.IPropertyMapper? mapper) -> void
Microsoft.Maui.Handlers.ProgressBarHandler
Microsoft.Maui.Handlers.ProgressBarHandler.ProgressBarHandler() -> void
Microsoft.Maui.Handlers.ProgressBarHandler.ProgressBarHandler(Microsoft.Maui.IPropertyMapper? mapper, Microsoft.Maui.CommandMapper? commandMapper) -> void
Microsoft.Maui.Handlers.ProgressBarHandler.ProgressBarHandler(Microsoft.Maui.IPropertyMapper? mapper) -> void
Microsoft.Maui.Handlers.RadioButtonHandler
Microsoft.Maui.Handlers.RadioButtonHandler.RadioButtonHandler() -> void
Microsoft.Maui.Handlers.RadioButtonHandler.RadioButtonHandler(Microsoft.Maui.IPropertyMapper? mapper, Microsoft.Maui.CommandMapper? commandMapper) -> void
Microsoft.Maui.Handlers.RadioButtonHandler.RadioButtonHandler(Microsoft.Maui.IPropertyMapper? mapper) -> void
Microsoft.Maui.Handlers.RefreshViewHandler
Microsoft.Maui.Handlers.RefreshViewHandler.RefreshViewHandler() -> void
Microsoft.Maui.Handlers.RefreshViewHandler.RefreshViewHandler(Microsoft.Maui.IPropertyMapper? mapper, Microsoft.Maui.CommandMapper? commandMapper) -> void
Microsoft.Maui.Handlers.RefreshViewHandler.RefreshViewHandler(Microsoft.Maui.IPropertyMapper? mapper) -> void
Microsoft.Maui.Handlers.ScrollViewHandler
Microsoft.Maui.Handlers.ScrollViewHandler.ScrollViewHandler() -> void
Microsoft.Maui.Handlers.ScrollViewHandler.ScrollViewHandler(Microsoft.Maui.IPropertyMapper? mapper, Microsoft.Maui.CommandMapper? commandMapper) -> void
Microsoft.Maui.Handlers.ScrollViewHandler.ScrollViewHandler(Microsoft.Maui.IPropertyMapper? mapper) -> void
Microsoft.Maui.Handlers.SearchBarHandler
Microsoft.Maui.Handlers.SearchBarHandler.QueryEditor.get -> Microsoft.UI.Xaml.Controls.AutoSuggestBox?
Microsoft.Maui.Handlers.SearchBarHandler.SearchBarHandler() -> void
Microsoft.Maui.Handlers.SearchBarHandler.SearchBarHandler(Microsoft.Maui.IPropertyMapper? mapper, Microsoft.Maui.CommandMapper? commandMapper) -> void
Microsoft.Maui.Handlers.SearchBarHandler.SearchBarHandler(Microsoft.Maui.IPropertyMapper? mapper) -> void
Microsoft.Maui.Handlers.ShapeViewHandler
Microsoft.Maui.Handlers.ShapeViewHandler.ShapeViewHandler() -> void
Microsoft.Maui.Handlers.ShapeViewHandler.ShapeViewHandler(Microsoft.Maui.IPropertyMapper? mapper, Microsoft.Maui.CommandMapper? commandMapper) -> void
Microsoft.Maui.Handlers.ShapeViewHandler.ShapeViewHandler(Microsoft.Maui.IPropertyMapper? mapper) -> void
Microsoft.Maui.Handlers.SliderHandler
Microsoft.Maui.Handlers.SliderHandler.SliderHandler() -> void
Microsoft.Maui.Handlers.SliderHandler.SliderHandler(Microsoft.Maui.IPropertyMapper? mapper, Microsoft.Maui.CommandMapper? commandMapper) -> void
Microsoft.Maui.Handlers.SliderHandler.SliderHandler(Microsoft.Maui.IPropertyMapper? mapper) -> void
Microsoft.Maui.Handlers.StepperHandler
Microsoft.Maui.Handlers.StepperHandler.StepperHandler() -> void
Microsoft.Maui.Handlers.StepperHandler.StepperHandler(Microsoft.Maui.IPropertyMapper? mapper, Microsoft.Maui.CommandMapper? commandMapper) -> void
Microsoft.Maui.Handlers.StepperHandler.StepperHandler(Microsoft.Maui.IPropertyMapper? mapper) -> void
Microsoft.Maui.Handlers.SwipeItemMenuItemHandler
Microsoft.Maui.Handlers.SwipeItemMenuItemHandler.SwipeItemMenuItemHandler() -> void
Microsoft.Maui.Handlers.SwipeItemMenuItemHandler.SwipeItemMenuItemHandler(Microsoft.Maui.IPropertyMapper? mapper, Microsoft.Maui.CommandMapper? commandMapper) -> void
Microsoft.Maui.Handlers.SwipeItemMenuItemHandler.SwipeItemMenuItemHandler(Microsoft.Maui.IPropertyMapper? mapper) -> void
Microsoft.Maui.Handlers.SwipeItemViewHandler
Microsoft.Maui.Handlers.SwipeItemViewHandler.SwipeItemViewHandler() -> void
Microsoft.Maui.Handlers.SwipeItemViewHandler.SwipeItemViewHandler(Microsoft.Maui.IPropertyMapper? mapper, Microsoft.Maui.CommandMapper? commandMapper) -> void
Microsoft.Maui.Handlers.SwipeItemViewHandler.SwipeItemViewHandler(Microsoft.Maui.IPropertyMapper? mapper) -> void
Microsoft.Maui.Handlers.SwipeViewHandler
Microsoft.Maui.Handlers.SwipeViewHandler.SwipeViewHandler() -> void
Microsoft.Maui.Handlers.SwipeViewHandler.SwipeViewHandler(Microsoft.Maui.IPropertyMapper? mapper, Microsoft.Maui.CommandMapper? commandMapper) -> void
Microsoft.Maui.Handlers.SwipeViewHandler.SwipeViewHandler(Microsoft.Maui.IPropertyMapper? mapper) -> void
Microsoft.Maui.Handlers.SwitchHandler
Microsoft.Maui.Handlers.SwitchHandler.SwitchHandler() -> void
Microsoft.Maui.Handlers.SwitchHandler.SwitchHandler(Microsoft.Maui.IPropertyMapper? mapper, Microsoft.Maui.CommandMapper? commandMapper) -> void
Microsoft.Maui.Handlers.SwitchHandler.SwitchHandler(Microsoft.Maui.IPropertyMapper? mapper) -> void
Microsoft.Maui.Handlers.TabbedViewHandler
Microsoft.Maui.Handlers.TabbedViewHandler.TabbedViewHandler() -> void
Microsoft.Maui.Handlers.TabbedViewHandler.TabbedViewHandler(Microsoft.Maui.IPropertyMapper? mapper, Microsoft.Maui.CommandMapper? commandMapper) -> void
Microsoft.Maui.Handlers.TabbedViewHandler.TabbedViewHandler(Microsoft.Maui.IPropertyMapper? mapper) -> void
Microsoft.Maui.Handlers.TimePickerHandler
Microsoft.Maui.Handlers.TimePickerHandler.TimePickerHandler() -> void
Microsoft.Maui.Handlers.TimePickerHandler.TimePickerHandler(Microsoft.Maui.IPropertyMapper? mapper, Microsoft.Maui.CommandMapper? commandMapper) -> void
Microsoft.Maui.Handlers.TimePickerHandler.TimePickerHandler(Microsoft.Maui.IPropertyMapper? mapper) -> void
Microsoft.Maui.Handlers.ToolbarHandler
Microsoft.Maui.Handlers.ToolbarHandler.ToolbarHandler() -> void
Microsoft.Maui.Handlers.ToolbarHandler.ToolbarHandler(Microsoft.Maui.IPropertyMapper? mapper, Microsoft.Maui.CommandMapper? commandMapper) -> void
Microsoft.Maui.Handlers.ToolbarHandler.ToolbarHandler(Microsoft.Maui.IPropertyMapper? mapper) -> void
Microsoft.Maui.Handlers.ViewHandler
Microsoft.Maui.Handlers.ViewHandler.ContainerView.get -> Microsoft.UI.Xaml.FrameworkElement?
Microsoft.Maui.Handlers.ViewHandler.HasContainer.get -> bool
Microsoft.Maui.Handlers.ViewHandler.HasContainer.set -> void
Microsoft.Maui.Handlers.ViewHandler.PlatformView.get -> Microsoft.UI.Xaml.FrameworkElement?
Microsoft.Maui.Handlers.ViewHandler.ViewHandler(Microsoft.Maui.IPropertyMapper! mapper, Microsoft.Maui.CommandMapper? commandMapper = null) -> void
Microsoft.Maui.Handlers.ViewHandler.VirtualView.get -> Microsoft.Maui.IView?
Microsoft.Maui.Handlers.ViewHandler<TVirtualView, TPlatformView>
Microsoft.Maui.Handlers.ViewHandler<TVirtualView, TPlatformView>.PlatformView.get -> TPlatformView!
Microsoft.Maui.Handlers.ViewHandler<TVirtualView, TPlatformView>.ViewHandler(Microsoft.Maui.IPropertyMapper! mapper, Microsoft.Maui.CommandMapper? commandMapper = null) -> void
Microsoft.Maui.Handlers.ViewHandler<TVirtualView, TPlatformView>.VirtualView.get -> TVirtualView!
Microsoft.Maui.Handlers.WebViewHandler
Microsoft.Maui.Handlers.WebViewHandler.WebViewHandler() -> void
Microsoft.Maui.Handlers.WebViewHandler.WebViewHandler(Microsoft.Maui.IPropertyMapper? mapper = null, Microsoft.Maui.CommandMapper? commandMapper = null) -> void
Microsoft.Maui.Handlers.WindowHandler
Microsoft.Maui.Handlers.WindowHandler.WindowHandler() -> void
Microsoft.Maui.Handlers.WindowHandler.WindowHandler(Microsoft.Maui.IPropertyMapper? mapper, Microsoft.Maui.CommandMapper? commandMapper) -> void
Microsoft.Maui.Handlers.WindowHandler.WindowHandler(Microsoft.Maui.IPropertyMapper? mapper) -> void
Microsoft.Maui.Hosting.AppHostBuilderExtensions
Microsoft.Maui.Hosting.EssentialsExtensions
Microsoft.Maui.Hosting.FontCollectionExtensions
Microsoft.Maui.Hosting.FontDescriptor
Microsoft.Maui.Hosting.FontDescriptor.Alias.get -> string?
Microsoft.Maui.Hosting.FontDescriptor.Assembly.get -> System.Reflection.Assembly?
Microsoft.Maui.Hosting.FontDescriptor.Filename.get -> string!
Microsoft.Maui.Hosting.FontDescriptor.FontDescriptor(string! filename, string? alias, System.Reflection.Assembly? assembly) -> void
Microsoft.Maui.Hosting.FontsMauiAppBuilderExtensions
Microsoft.Maui.Hosting.HandlerMauiAppBuilderExtensions
Microsoft.Maui.Hosting.IEssentialsBuilder
Microsoft.Maui.Hosting.IEssentialsBuilder.AddAppAction(Microsoft.Maui.ApplicationModel.AppAction! appAction) -> Microsoft.Maui.Hosting.IEssentialsBuilder!
Microsoft.Maui.Hosting.IEssentialsBuilder.OnAppAction(System.Action<Microsoft.Maui.ApplicationModel.AppAction!>! action) -> Microsoft.Maui.Hosting.IEssentialsBuilder!
Microsoft.Maui.Hosting.IEssentialsBuilder.UseMapServiceToken(string! token) -> Microsoft.Maui.Hosting.IEssentialsBuilder!
Microsoft.Maui.Hosting.IEssentialsBuilder.UseVersionTracking() -> Microsoft.Maui.Hosting.IEssentialsBuilder!
Microsoft.Maui.Hosting.IFontCollection
Microsoft.Maui.Hosting.IImageSourceServiceCollection
Microsoft.Maui.Hosting.ImageSourceServiceCollectionExtensions
Microsoft.Maui.Hosting.ImageSourcesMauiAppBuilderExtensions
Microsoft.Maui.Hosting.IMauiHandlersCollection
Microsoft.Maui.Hosting.IMauiInitializeScopedService
Microsoft.Maui.Hosting.IMauiInitializeScopedService.Initialize(System.IServiceProvider! services) -> void
Microsoft.Maui.Hosting.IMauiInitializeService
Microsoft.Maui.Hosting.IMauiInitializeService.Initialize(System.IServiceProvider! services) -> void
Microsoft.Maui.Hosting.IMauiServiceCollection
Microsoft.Maui.Hosting.IMauiServiceCollection.TryGetService(System.Type! serviceType, out Microsoft.Extensions.DependencyInjection.ServiceDescriptor? descriptor) -> bool
Microsoft.Maui.Hosting.MauiApp
Microsoft.Maui.Hosting.MauiApp.Configuration.get -> Microsoft.Extensions.Configuration.IConfiguration!
Microsoft.Maui.Hosting.MauiApp.Dispose() -> void
Microsoft.Maui.Hosting.MauiApp.DisposeAsync() -> System.Threading.Tasks.ValueTask
Microsoft.Maui.Hosting.MauiApp.Services.get -> System.IServiceProvider!
Microsoft.Maui.Hosting.MauiAppBuilder
Microsoft.Maui.Hosting.MauiAppBuilder.Build() -> Microsoft.Maui.Hosting.MauiApp!
Microsoft.Maui.Hosting.MauiAppBuilder.Configuration.get -> Microsoft.Extensions.Configuration.ConfigurationManager!
Microsoft.Maui.Hosting.MauiAppBuilder.ConfigureContainer<TBuilder>(Microsoft.Extensions.DependencyInjection.IServiceProviderFactory<TBuilder>! factory, System.Action<TBuilder>? configure = null) -> void
Microsoft.Maui.Hosting.MauiAppBuilder.Logging.get -> Microsoft.Extensions.Logging.ILoggingBuilder!
Microsoft.Maui.Hosting.MauiAppBuilder.Services.get -> Microsoft.Extensions.DependencyInjection.IServiceCollection!
Microsoft.Maui.Hosting.MauiHandlersCollectionExtensions
Microsoft.Maui.HotReload.HotReloadExtensions
Microsoft.Maui.HotReload.IHotReloadableView
Microsoft.Maui.HotReload.IHotReloadableView.Reload() -> void
Microsoft.Maui.HotReload.IHotReloadableView.ReloadHandler.get -> Microsoft.Maui.HotReload.IReloadHandler!
Microsoft.Maui.HotReload.IHotReloadableView.ReloadHandler.set -> void
Microsoft.Maui.HotReload.IHotReloadableView.TransferState(Microsoft.Maui.IView! newView) -> void
Microsoft.Maui.HotReload.IReloadHandler
Microsoft.Maui.HotReload.IReloadHandler.Reload() -> void
Microsoft.Maui.HotReload.MauiHotReloadHelper
Microsoft.Maui.HotReload.OnHotReloadAttribute
Microsoft.Maui.HotReload.OnHotReloadAttribute.OnHotReloadAttribute() -> void
Microsoft.Maui.IAbsoluteLayout
Microsoft.Maui.IAbsoluteLayout.GetLayoutBounds(Microsoft.Maui.IView! view) -> Microsoft.Maui.Graphics.Rect
Microsoft.Maui.IAbsoluteLayout.GetLayoutFlags(Microsoft.Maui.IView! view) -> Microsoft.Maui.Layouts.AbsoluteLayoutFlags
Microsoft.Maui.IActivationState
Microsoft.Maui.IActivationState.Context.get -> Microsoft.Maui.IMauiContext!
Microsoft.Maui.IActivationState.State.get -> Microsoft.Maui.IPersistedState!
Microsoft.Maui.IActivityIndicator
Microsoft.Maui.IActivityIndicator.Color.get -> Microsoft.Maui.Graphics.Color!
Microsoft.Maui.IActivityIndicator.IsRunning.get -> bool
Microsoft.Maui.IAdorner
Microsoft.Maui.IAdorner.Density.get -> float
Microsoft.Maui.IAdorner.VisualView.get -> Microsoft.Maui.IView!
Microsoft.Maui.IApplication
Microsoft.Maui.IApplication.CloseWindow(Microsoft.Maui.IWindow! window) -> void
Microsoft.Maui.IApplication.CreateWindow(Microsoft.Maui.IActivationState? activationState) -> Microsoft.Maui.IWindow!
Microsoft.Maui.IApplication.OpenWindow(Microsoft.Maui.IWindow! window) -> void
Microsoft.Maui.IApplication.ThemeChanged() -> void
Microsoft.Maui.IApplication.UserAppTheme.get -> Microsoft.Maui.ApplicationModel.AppTheme
Microsoft.Maui.IApplication.Windows.get -> System.Collections.Generic.IReadOnlyList<Microsoft.Maui.IWindow!>!
Microsoft.Maui.IBorder
Microsoft.Maui.IBorder.Border.get -> Microsoft.Maui.IBorderStroke!
Microsoft.Maui.IBorderStroke
Microsoft.Maui.IBorderStroke.Shape.get -> Microsoft.Maui.Graphics.IShape?
Microsoft.Maui.IBorderView
Microsoft.Maui.IButton
Microsoft.Maui.IButton.Clicked() -> void
Microsoft.Maui.IButton.Pressed() -> void
Microsoft.Maui.IButton.Released() -> void
Microsoft.Maui.IButtonStroke
Microsoft.Maui.IButtonStroke.CornerRadius.get -> int
Microsoft.Maui.IButtonStroke.StrokeColor.get -> Microsoft.Maui.Graphics.Color!
Microsoft.Maui.IButtonStroke.StrokeThickness.get -> double
Microsoft.Maui.ICheckBox
Microsoft.Maui.ICheckBox.Foreground.get -> Microsoft.Maui.Graphics.Paint?
Microsoft.Maui.ICheckBox.IsChecked.get -> bool
Microsoft.Maui.ICheckBox.IsChecked.set -> void
Microsoft.Maui.ICommandMapper
Microsoft.Maui.ICommandMapper.GetCommand(string! key) -> System.Action<Microsoft.Maui.IElementHandler!, Microsoft.Maui.IElement!, object?>?
Microsoft.Maui.ICommandMapper.Invoke(Microsoft.Maui.IElementHandler! viewHandler, Microsoft.Maui.IElement? virtualView, string! property, object? args) -> void
Microsoft.Maui.ICommandMapper<TVirtualView, TViewHandler>
Microsoft.Maui.ICommandMapper<TVirtualView, TViewHandler>.Add(string! key, System.Action<TViewHandler, TVirtualView, object?>! action) -> void
Microsoft.Maui.ICommandMapper<TVirtualView, TViewHandler>.Add(string! key, System.Action<TViewHandler, TVirtualView>! action) -> void
Microsoft.Maui.IContainer
Microsoft.Maui.IContentView
Microsoft.Maui.IContentView.Content.get -> object?
Microsoft.Maui.IContentView.CrossPlatformArrange(Microsoft.Maui.Graphics.Rect bounds) -> Microsoft.Maui.Graphics.Size
Microsoft.Maui.IContentView.CrossPlatformMeasure(double widthConstraint, double heightConstraint) -> Microsoft.Maui.Graphics.Size
Microsoft.Maui.IContentView.PresentedContent.get -> Microsoft.Maui.IView?
Microsoft.Maui.IContextFlyoutElement
Microsoft.Maui.IContextFlyoutElement.ContextFlyout.get -> Microsoft.Maui.IFlyout?
Microsoft.Maui.ICrossPlatformLayout
Microsoft.Maui.ICrossPlatformLayout.CrossPlatformArrange(Microsoft.Maui.Graphics.Rect bounds) -> Microsoft.Maui.Graphics.Size
Microsoft.Maui.ICrossPlatformLayout.CrossPlatformMeasure(double widthConstraint, double heightConstraint) -> Microsoft.Maui.Graphics.Size
Microsoft.Maui.ICrossPlatformLayoutBacking
Microsoft.Maui.ICrossPlatformLayoutBacking.CrossPlatformLayout.get -> Microsoft.Maui.ICrossPlatformLayout?
Microsoft.Maui.ICrossPlatformLayoutBacking.CrossPlatformLayout.set -> void
Microsoft.Maui.IDatePicker
Microsoft.Maui.IDatePicker.Date.get -> System.DateTime
Microsoft.Maui.IDatePicker.Date.set -> void
Microsoft.Maui.IDatePicker.Format.get -> string!
Microsoft.Maui.IDatePicker.Format.set -> void
Microsoft.Maui.IDatePicker.MaximumDate.get -> System.DateTime
Microsoft.Maui.IDatePicker.MinimumDate.get -> System.DateTime
Microsoft.Maui.IEditor
Microsoft.Maui.IEditor.Completed() -> void
Microsoft.Maui.IElement
Microsoft.Maui.IElement.Handler.get -> Microsoft.Maui.IElementHandler?
Microsoft.Maui.IElement.Handler.set -> void
Microsoft.Maui.IElement.Parent.get -> Microsoft.Maui.IElement?
Microsoft.Maui.IElementHandler
Microsoft.Maui.IElementHandler.DisconnectHandler() -> void
Microsoft.Maui.IElementHandler.Invoke(string! command, object? args = null) -> void
Microsoft.Maui.IElementHandler.MauiContext.get -> Microsoft.Maui.IMauiContext?
Microsoft.Maui.IElementHandler.PlatformView.get -> object?
Microsoft.Maui.IElementHandler.SetMauiContext(Microsoft.Maui.IMauiContext! mauiContext) -> void
Microsoft.Maui.IElementHandler.SetVirtualView(Microsoft.Maui.IElement! view) -> void
Microsoft.Maui.IElementHandler.UpdateValue(string! property) -> void
Microsoft.Maui.IElementHandler.VirtualView.get -> Microsoft.Maui.IElement?
Microsoft.Maui.IEmbeddedFontLoader
Microsoft.Maui.IEmbeddedFontLoader.LoadFont(Microsoft.Maui.EmbeddedFont! font) -> string?
Microsoft.Maui.IEntry
Microsoft.Maui.IEntry.ClearButtonVisibility.get -> Microsoft.Maui.ClearButtonVisibility
Microsoft.Maui.IEntry.Completed() -> void
Microsoft.Maui.IEntry.IsPassword.get -> bool
Microsoft.Maui.IEntry.ReturnType.get -> Microsoft.Maui.ReturnType
Microsoft.Maui.IFileImageSource
Microsoft.Maui.IFileImageSource.File.get -> string!
Microsoft.Maui.IFlexLayout
Microsoft.Maui.IFlexLayout.AlignContent.get -> Microsoft.Maui.Layouts.FlexAlignContent
Microsoft.Maui.IFlexLayout.AlignItems.get -> Microsoft.Maui.Layouts.FlexAlignItems
Microsoft.Maui.IFlexLayout.Direction.get -> Microsoft.Maui.Layouts.FlexDirection
Microsoft.Maui.IFlexLayout.GetAlignSelf(Microsoft.Maui.IView! view) -> Microsoft.Maui.Layouts.FlexAlignSelf
Microsoft.Maui.IFlexLayout.GetBasis(Microsoft.Maui.IView! view) -> Microsoft.Maui.Layouts.FlexBasis
Microsoft.Maui.IFlexLayout.GetFlexFrame(Microsoft.Maui.IView! view) -> Microsoft.Maui.Graphics.Rect
Microsoft.Maui.IFlexLayout.GetGrow(Microsoft.Maui.IView! view) -> float
Microsoft.Maui.IFlexLayout.GetOrder(Microsoft.Maui.IView! view) -> int
Microsoft.Maui.IFlexLayout.GetShrink(Microsoft.Maui.IView! view) -> float
Microsoft.Maui.IFlexLayout.JustifyContent.get -> Microsoft.Maui.Layouts.FlexJustify
Microsoft.Maui.IFlexLayout.Layout(double width, double height) -> void
Microsoft.Maui.IFlexLayout.Position.get -> Microsoft.Maui.Layouts.FlexPosition
Microsoft.Maui.IFlexLayout.Wrap.get -> Microsoft.Maui.Layouts.FlexWrap
Microsoft.Maui.IFlyout
Microsoft.Maui.IFlyoutView
Microsoft.Maui.IFlyoutView.Detail.get -> Microsoft.Maui.IView!
Microsoft.Maui.IFlyoutView.Flyout.get -> Microsoft.Maui.IView!
Microsoft.Maui.IFlyoutView.FlyoutBehavior.get -> Microsoft.Maui.FlyoutBehavior
Microsoft.Maui.IFlyoutView.FlyoutWidth.get -> double
Microsoft.Maui.IFlyoutView.IsGestureEnabled.get -> bool
Microsoft.Maui.IFlyoutView.IsPresented.get -> bool
Microsoft.Maui.IFlyoutView.IsPresented.set -> void
Microsoft.Maui.IFontImageSource
Microsoft.Maui.IFontImageSource.Color.get -> Microsoft.Maui.Graphics.Color!
Microsoft.Maui.IFontImageSource.Font.get -> Microsoft.Maui.Font
Microsoft.Maui.IFontImageSource.Glyph.get -> string!
Microsoft.Maui.IFontManager
Microsoft.Maui.IFontManager.DefaultFontFamily.get -> Microsoft.UI.Xaml.Media.FontFamily!
Microsoft.Maui.IFontManager.DefaultFontSize.get -> double
Microsoft.Maui.IFontManager.GetFontFamily(Microsoft.Maui.Font font) -> Microsoft.UI.Xaml.Media.FontFamily!
Microsoft.Maui.IFontManager.GetFontSize(Microsoft.Maui.Font font, double defaultFontSize = 0) -> double
Microsoft.Maui.IFontRegistrar
Microsoft.Maui.IFontRegistrar.GetFont(string! font) -> string?
Microsoft.Maui.IFontRegistrar.Register(string! filename, string? alias, System.Reflection.Assembly! assembly) -> void
Microsoft.Maui.IFontRegistrar.Register(string! filename, string? alias) -> void
Microsoft.Maui.IGraphicsView
Microsoft.Maui.IGraphicsView.CancelInteraction() -> void
Microsoft.Maui.IGraphicsView.DragInteraction(Microsoft.Maui.Graphics.PointF[]! points) -> void
Microsoft.Maui.IGraphicsView.Drawable.get -> Microsoft.Maui.Graphics.IDrawable!
Microsoft.Maui.IGraphicsView.EndHoverInteraction() -> void
Microsoft.Maui.IGraphicsView.EndInteraction(Microsoft.Maui.Graphics.PointF[]! points, bool isInsideBounds) -> void
Microsoft.Maui.IGraphicsView.Invalidate() -> void
Microsoft.Maui.IGraphicsView.MoveHoverInteraction(Microsoft.Maui.Graphics.PointF[]! points) -> void
Microsoft.Maui.IGraphicsView.StartHoverInteraction(Microsoft.Maui.Graphics.PointF[]! points) -> void
Microsoft.Maui.IGraphicsView.StartInteraction(Microsoft.Maui.Graphics.PointF[]! points) -> void
Microsoft.Maui.IGridColumnDefinition
Microsoft.Maui.IGridColumnDefinition.Width.get -> Microsoft.Maui.GridLength
Microsoft.Maui.IGridLayout
Microsoft.Maui.IGridLayout.ColumnDefinitions.get -> System.Collections.Generic.IReadOnlyList<Microsoft.Maui.IGridColumnDefinition!>!
Microsoft.Maui.IGridLayout.ColumnSpacing.get -> double
Microsoft.Maui.IGridLayout.GetColumn(Microsoft.Maui.IView! view) -> int
Microsoft.Maui.IGridLayout.GetColumnSpan(Microsoft.Maui.IView! view) -> int
Microsoft.Maui.IGridLayout.GetRow(Microsoft.Maui.IView! view) -> int
Microsoft.Maui.IGridLayout.GetRowSpan(Microsoft.Maui.IView! view) -> int
Microsoft.Maui.IGridLayout.RowDefinitions.get -> System.Collections.Generic.IReadOnlyList<Microsoft.Maui.IGridRowDefinition!>!
Microsoft.Maui.IGridLayout.RowSpacing.get -> double
Microsoft.Maui.IGridRowDefinition
Microsoft.Maui.IGridRowDefinition.Height.get -> Microsoft.Maui.GridLength
Microsoft.Maui.IImage
Microsoft.Maui.IImage.Aspect.get -> Microsoft.Maui.Aspect
Microsoft.Maui.IImage.IsOpaque.get -> bool
Microsoft.Maui.IImageButton
Microsoft.Maui.IImageSource
Microsoft.Maui.IImageSource.IsEmpty.get -> bool
Microsoft.Maui.IImageSourcePart
Microsoft.Maui.IImageSourcePart.IsAnimationPlaying.get -> bool
Microsoft.Maui.IImageSourcePart.Source.get -> Microsoft.Maui.IImageSource?
Microsoft.Maui.IImageSourcePart.UpdateIsLoading(bool isLoading) -> void
Microsoft.Maui.IImageSourcePartEvents
Microsoft.Maui.IImageSourcePartEvents.LoadingCompleted(bool successful) -> void
Microsoft.Maui.IImageSourcePartEvents.LoadingFailed(System.Exception! exception) -> void
Microsoft.Maui.IImageSourcePartEvents.LoadingStarted() -> void
Microsoft.Maui.IImageSourceService
Microsoft.Maui.IImageSourceService.GetImageSourceAsync(Microsoft.Maui.IImageSource! imageSource, float scale = 1, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<Microsoft.Maui.IImageSourceServiceResult<Microsoft.UI.Xaml.Media.ImageSource!>?>!
Microsoft.Maui.IImageSourceService<T>
Microsoft.Maui.IImageSourceServiceProvider
Microsoft.Maui.IImageSourceServiceProvider.GetImageSourceService(System.Type! imageSource) -> Microsoft.Maui.IImageSourceService?
Microsoft.Maui.IImageSourceServiceProvider.GetImageSourceServiceType(System.Type! imageSource) -> System.Type!
Microsoft.Maui.IImageSourceServiceProvider.GetImageSourceType(System.Type! imageSource) -> System.Type!
Microsoft.Maui.IImageSourceServiceProvider.HostServiceProvider.get -> System.IServiceProvider!
Microsoft.Maui.IImageSourceServiceResult
Microsoft.Maui.IImageSourceServiceResult.IsDisposed.get -> bool
Microsoft.Maui.IImageSourceServiceResult.IsResolutionDependent.get -> bool
Microsoft.Maui.IImageSourceServiceResult<T>
Microsoft.Maui.IImageSourceServiceResult<T>.Value.get -> T
Microsoft.Maui.IIndicatorView
Microsoft.Maui.IIndicatorView.Count.get -> int
Microsoft.Maui.IIndicatorView.HideSingle.get -> bool
Microsoft.Maui.IIndicatorView.IndicatorColor.get -> Microsoft.Maui.Graphics.Paint?
Microsoft.Maui.IIndicatorView.IndicatorSize.get -> double
Microsoft.Maui.IIndicatorView.IndicatorsShape.get -> Microsoft.Maui.Graphics.IShape!
Microsoft.Maui.IIndicatorView.MaximumVisible.get -> int
Microsoft.Maui.IIndicatorView.Position.get -> int
Microsoft.Maui.IIndicatorView.Position.set -> void
Microsoft.Maui.IIndicatorView.SelectedIndicatorColor.get -> Microsoft.Maui.Graphics.Paint?
Microsoft.Maui.IItemDelegate<T>
Microsoft.Maui.IItemDelegate<T>.GetCount() -> int
Microsoft.Maui.IItemDelegate<T>.GetItem(int index) -> T
Microsoft.Maui.IKeyboardAccelerator
Microsoft.Maui.IKeyboardAccelerator.Key.get -> string?
Microsoft.Maui.IKeyboardAccelerator.Modifiers.get -> Microsoft.Maui.KeyboardAcceleratorModifiers
Microsoft.Maui.ILabel
Microsoft.Maui.ILabel.LineHeight.get -> double
Microsoft.Maui.ILabel.TextDecorations.get -> Microsoft.Maui.TextDecorations
Microsoft.Maui.ILayout
Microsoft.Maui.ILayout.ClipsToBounds.get -> bool
Microsoft.Maui.ILayout.CrossPlatformArrange(Microsoft.Maui.Graphics.Rect bounds) -> Microsoft.Maui.Graphics.Size
Microsoft.Maui.ILayout.CrossPlatformMeasure(double widthConstraint, double heightConstraint) -> Microsoft.Maui.Graphics.Size
Microsoft.Maui.ILayoutHandler
Microsoft.Maui.ILayoutHandler.Add(Microsoft.Maui.IView! view) -> void
Microsoft.Maui.ILayoutHandler.Clear() -> void
Microsoft.Maui.ILayoutHandler.Insert(int index, Microsoft.Maui.IView! view) -> void
Microsoft.Maui.ILayoutHandler.PlatformView.get -> Microsoft.Maui.Platform.LayoutPanel!
Microsoft.Maui.ILayoutHandler.Remove(Microsoft.Maui.IView! view) -> void
Microsoft.Maui.ILayoutHandler.Update(int index, Microsoft.Maui.IView! view) -> void
Microsoft.Maui.ILayoutHandler.UpdateZIndex(Microsoft.Maui.IView! view) -> void
Microsoft.Maui.ILayoutHandler.VirtualView.get -> Microsoft.Maui.ILayout!
Microsoft.Maui.ImageSourceExtensions
Microsoft.Maui.ImageSourceService
Microsoft.Maui.ImageSourceService.ImageSourceService(Microsoft.Extensions.Logging.ILogger? logger = null) -> void
Microsoft.Maui.ImageSourceService.Logger.get -> Microsoft.Extensions.Logging.ILogger?
Microsoft.Maui.ImageSourceServiceLoadResult
Microsoft.Maui.ImageSourceServiceLoadResult.Dispose() -> void
Microsoft.Maui.ImageSourceServiceLoadResult.ImageSourceServiceLoadResult() -> void
Microsoft.Maui.ImageSourceServiceLoadResult.ImageSourceServiceLoadResult(bool resolutionDependent, System.Action? dispose = null) -> void
Microsoft.Maui.ImageSourceServiceLoadResult.ImageSourceServiceLoadResult(System.Action? dispose = null) -> void
Microsoft.Maui.ImageSourceServiceLoadResult.IsDisposed.get -> bool
Microsoft.Maui.ImageSourceServiceLoadResult.IsResolutionDependent.get -> bool
Microsoft.Maui.ImageSourceServiceProviderExtensions
Microsoft.Maui.ImageSourceServiceResult
Microsoft.Maui.ImageSourceServiceResult.Dispose() -> void
Microsoft.Maui.ImageSourceServiceResult.ImageSourceServiceResult(Microsoft.UI.Xaml.Media.ImageSource! image, bool resolutionDependent, System.Action? dispose = null) -> void
Microsoft.Maui.ImageSourceServiceResult.ImageSourceServiceResult(Microsoft.UI.Xaml.Media.ImageSource! image, System.Action? dispose = null) -> void
Microsoft.Maui.ImageSourceServiceResult.IsDisposed.get -> bool
Microsoft.Maui.ImageSourceServiceResult.IsResolutionDependent.get -> bool
Microsoft.Maui.ImageSourceServiceResult.Value.get -> Microsoft.UI.Xaml.Media.ImageSource!
Microsoft.Maui.IMauiContext
Microsoft.Maui.IMauiContext.Handlers.get -> Microsoft.Maui.IMauiHandlersFactory!
Microsoft.Maui.IMauiContext.Services.get -> System.IServiceProvider!
Microsoft.Maui.IMauiFactory
Microsoft.Maui.IMauiHandlersFactory
Microsoft.Maui.IMauiHandlersFactory.GetCollection() -> Microsoft.Maui.Hosting.IMauiHandlersCollection!
Microsoft.Maui.IMauiHandlersFactory.GetHandler(System.Type! type) -> Microsoft.Maui.IElementHandler?
Microsoft.Maui.IMauiHandlersFactory.GetHandler<T>() -> Microsoft.Maui.IElementHandler?
Microsoft.Maui.IMauiHandlersFactory.GetHandlerType(System.Type! iview) -> System.Type?
Microsoft.Maui.IMenuBar
Microsoft.Maui.IMenuBar.IsEnabled.get -> bool
Microsoft.Maui.IMenuBarElement
Microsoft.Maui.IMenuBarElement.MenuBar.get -> Microsoft.Maui.IMenuBar?
Microsoft.Maui.IMenuBarItem
Microsoft.Maui.IMenuBarItem.IsEnabled.get -> bool
Microsoft.Maui.IMenuBarItem.Text.get -> string!
Microsoft.Maui.IMenuElement
Microsoft.Maui.IMenuElement.Clicked() -> void
Microsoft.Maui.IMenuElement.IsEnabled.get -> bool
Microsoft.Maui.IMenuFlyout
Microsoft.Maui.IMenuFlyoutItem
Microsoft.Maui.IMenuFlyoutItem.KeyboardAccelerators.get -> System.Collections.Generic.IReadOnlyList<Microsoft.Maui.IKeyboardAccelerator!>?
Microsoft.Maui.IMenuFlyoutSeparator
Microsoft.Maui.IMenuFlyoutSubItem
Microsoft.Maui.IPadding
Microsoft.Maui.IPadding.Padding.get -> Microsoft.Maui.Thickness
Microsoft.Maui.IPersistedState
Microsoft.Maui.IPicker
Microsoft.Maui.IPicker.Items.get -> System.Collections.Generic.IList<string!>!
Microsoft.Maui.IPicker.SelectedIndex.get -> int
Microsoft.Maui.IPicker.SelectedIndex.set -> void
Microsoft.Maui.IPicker.Title.get -> string!
Microsoft.Maui.IPicker.TitleColor.get -> Microsoft.Maui.Graphics.Color!
Microsoft.Maui.IPickerExtension
Microsoft.Maui.IPlaceholder
Microsoft.Maui.IPlaceholder.Placeholder.get -> string!
Microsoft.Maui.IPlaceholder.PlaceholderColor.get -> Microsoft.Maui.Graphics.Color!
Microsoft.Maui.IPlaceholder.PlaceholderColor.set -> void
Microsoft.Maui.IPlatformApplication
Microsoft.Maui.IPlatformApplication.Application.get -> Microsoft.Maui.IApplication!
Microsoft.Maui.IPlatformApplication.Current.get -> Microsoft.Maui.IPlatformApplication?
Microsoft.Maui.IPlatformApplication.Current.set -> void
Microsoft.Maui.IPlatformApplication.Services.get -> System.IServiceProvider!
Microsoft.Maui.IPlatformViewHandler
Microsoft.Maui.IPlatformViewHandler.ContainerView.get -> Microsoft.UI.Xaml.FrameworkElement?
Microsoft.Maui.IPlatformViewHandler.PlatformView.get -> Microsoft.UI.Xaml.FrameworkElement?
Microsoft.Maui.IProgress
Microsoft.Maui.IProgress.Progress.get -> double
Microsoft.Maui.IProgress.ProgressColor.get -> Microsoft.Maui.Graphics.Color!
Microsoft.Maui.IPropertyMapper
Microsoft.Maui.IPropertyMapper.GetKeys() -> System.Collections.Generic.IEnumerable<string!>!
Microsoft.Maui.IPropertyMapper.GetProperty(string! key) -> System.Action<Microsoft.Maui.IElementHandler!, Microsoft.Maui.IElement!>?
Microsoft.Maui.IPropertyMapper.UpdateProperties(Microsoft.Maui.IElementHandler! elementHandler, Microsoft.Maui.IElement! virtualView) -> void
Microsoft.Maui.IPropertyMapper.UpdateProperty(Microsoft.Maui.IElementHandler! elementHandler, Microsoft.Maui.IElement! virtualView, string! property) -> void
Microsoft.Maui.IPropertyMapper<TVirtualView, TViewHandler>
Microsoft.Maui.IPropertyMapper<TVirtualView, TViewHandler>.Add(string! key, System.Action<TViewHandler, TVirtualView>! action) -> void
Microsoft.Maui.IPropertyMapperView
Microsoft.Maui.IPropertyMapperView.GetPropertyMapperOverrides() -> Microsoft.Maui.PropertyMapper!
Microsoft.Maui.IRadioButton
Microsoft.Maui.IRadioButton.IsChecked.get -> bool
Microsoft.Maui.IRadioButton.IsChecked.set -> void
Microsoft.Maui.IRange
Microsoft.Maui.IRange.Maximum.get -> double
Microsoft.Maui.IRange.Minimum.get -> double
Microsoft.Maui.IRange.Value.get -> double
Microsoft.Maui.IRange.Value.set -> void
Microsoft.Maui.IRefreshView
Microsoft.Maui.IRefreshView.Content.get -> Microsoft.Maui.IView!
Microsoft.Maui.IRefreshView.IsRefreshing.get -> bool
Microsoft.Maui.IRefreshView.IsRefreshing.set -> void
Microsoft.Maui.IRefreshView.RefreshColor.get -> Microsoft.Maui.Graphics.Paint?
Microsoft.Maui.IReplaceableView
Microsoft.Maui.IReplaceableView.ReplacedView.get -> Microsoft.Maui.IView!
Microsoft.Maui.ISafeAreaView
Microsoft.Maui.ISafeAreaView.IgnoreSafeArea.get -> bool
Microsoft.Maui.IScrollView
Microsoft.Maui.IScrollView.ContentSize.get -> Microsoft.Maui.Graphics.Size
Microsoft.Maui.IScrollView.HorizontalOffset.get -> double
Microsoft.Maui.IScrollView.HorizontalOffset.set -> void
Microsoft.Maui.IScrollView.HorizontalScrollBarVisibility.get -> Microsoft.Maui.ScrollBarVisibility
Microsoft.Maui.IScrollView.Orientation.get -> Microsoft.Maui.ScrollOrientation
Microsoft.Maui.IScrollView.RequestScrollTo(double horizontalOffset, double verticalOffset, bool instant) -> void
Microsoft.Maui.IScrollView.ScrollFinished() -> void
Microsoft.Maui.IScrollView.VerticalOffset.get -> double
Microsoft.Maui.IScrollView.VerticalOffset.set -> void
Microsoft.Maui.IScrollView.VerticalScrollBarVisibility.get -> Microsoft.Maui.ScrollBarVisibility
Microsoft.Maui.ISearchBar
Microsoft.Maui.ISearchBar.CancelButtonColor.get -> Microsoft.Maui.Graphics.Color!
Microsoft.Maui.ISearchBar.SearchButtonPressed() -> void
Microsoft.Maui.IShadow
Microsoft.Maui.IShadow.Offset.get -> Microsoft.Maui.Graphics.Point
Microsoft.Maui.IShadow.Opacity.get -> float
Microsoft.Maui.IShadow.Paint.get -> Microsoft.Maui.Graphics.Paint!
Microsoft.Maui.IShadow.Radius.get -> float
Microsoft.Maui.IShapeView
Microsoft.Maui.IShapeView.Aspect.get -> Microsoft.Maui.PathAspect
Microsoft.Maui.IShapeView.Fill.get -> Microsoft.Maui.Graphics.Paint?
Microsoft.Maui.IShapeView.Shape.get -> Microsoft.Maui.Graphics.IShape?
Microsoft.Maui.ISlider
Microsoft.Maui.ISlider.DragCompleted() -> void
Microsoft.Maui.ISlider.DragStarted() -> void
Microsoft.Maui.ISlider.MaximumTrackColor.get -> Microsoft.Maui.Graphics.Color!
Microsoft.Maui.ISlider.MinimumTrackColor.get -> Microsoft.Maui.Graphics.Color!
Microsoft.Maui.ISlider.ThumbColor.get -> Microsoft.Maui.Graphics.Color!
Microsoft.Maui.ISlider.ThumbImageSource.get -> Microsoft.Maui.IImageSource!
Microsoft.Maui.IStackLayout
Microsoft.Maui.IStackLayout.Spacing.get -> double
Microsoft.Maui.IStackNavigation
Microsoft.Maui.IStackNavigation.NavigationFinished(System.Collections.Generic.IReadOnlyList<Microsoft.Maui.IView!>! newStack) -> void
Microsoft.Maui.IStackNavigation.RequestNavigation(Microsoft.Maui.NavigationRequest! eventArgs) -> void
Microsoft.Maui.IStackNavigationView
Microsoft.Maui.IStepper
Microsoft.Maui.IStepper.Interval.get -> double
Microsoft.Maui.IStreamImageSource
Microsoft.Maui.IStreamImageSource.GetStreamAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<System.IO.Stream!>!
Microsoft.Maui.IStroke
Microsoft.Maui.IStroke.Stroke.get -> Microsoft.Maui.Graphics.Paint?
Microsoft.Maui.IStroke.StrokeDashOffset.get -> float
Microsoft.Maui.IStroke.StrokeDashPattern.get -> float[]?
Microsoft.Maui.IStroke.StrokeLineCap.get -> Microsoft.Maui.Graphics.LineCap
Microsoft.Maui.IStroke.StrokeLineJoin.get -> Microsoft.Maui.Graphics.LineJoin
Microsoft.Maui.IStroke.StrokeMiterLimit.get -> float
Microsoft.Maui.IStroke.StrokeThickness.get -> double
Microsoft.Maui.ISwipeItem
Microsoft.Maui.ISwipeItem.AutomationId.get -> string!
Microsoft.Maui.ISwipeItem.OnInvoked() -> void
Microsoft.Maui.ISwipeItemMenuItem
Microsoft.Maui.ISwipeItemMenuItem.Background.get -> Microsoft.Maui.Graphics.Paint?
Microsoft.Maui.ISwipeItemMenuItem.Visibility.get -> Microsoft.Maui.Visibility
Microsoft.Maui.ISwipeItems
Microsoft.Maui.ISwipeItems.Mode.get -> Microsoft.Maui.SwipeMode
Microsoft.Maui.ISwipeItems.SwipeBehaviorOnInvoked.get -> Microsoft.Maui.SwipeBehaviorOnInvoked
Microsoft.Maui.ISwipeItemView
Microsoft.Maui.ISwipeView
Microsoft.Maui.ISwipeView.BottomItems.get -> Microsoft.Maui.ISwipeItems!
Microsoft.Maui.ISwipeView.IsOpen.get -> bool
Microsoft.Maui.ISwipeView.IsOpen.set -> void
Microsoft.Maui.ISwipeView.LeftItems.get -> Microsoft.Maui.ISwipeItems!
Microsoft.Maui.ISwipeView.RequestClose(Microsoft.Maui.SwipeViewCloseRequest! swipeCloseRequest) -> void
Microsoft.Maui.ISwipeView.RequestOpen(Microsoft.Maui.SwipeViewOpenRequest! swipeOpenRequest) -> void
Microsoft.Maui.ISwipeView.RightItems.get -> Microsoft.Maui.ISwipeItems!
Microsoft.Maui.ISwipeView.SwipeChanging(Microsoft.Maui.SwipeViewSwipeChanging! swipeChanging) -> void
Microsoft.Maui.ISwipeView.SwipeEnded(Microsoft.Maui.SwipeViewSwipeEnded! swipeEnded) -> void
Microsoft.Maui.ISwipeView.SwipeStarted(Microsoft.Maui.SwipeViewSwipeStarted! swipeStarted) -> void
Microsoft.Maui.ISwipeView.SwipeTransitionMode.get -> Microsoft.Maui.SwipeTransitionMode
Microsoft.Maui.ISwipeView.Threshold.get -> double
Microsoft.Maui.ISwipeView.TopItems.get -> Microsoft.Maui.ISwipeItems!
Microsoft.Maui.ISwitch
Microsoft.Maui.ISwitch.IsOn.get -> bool
Microsoft.Maui.ISwitch.IsOn.set -> void
Microsoft.Maui.ISwitch.ThumbColor.get -> Microsoft.Maui.Graphics.Color!
Microsoft.Maui.ISwitch.TrackColor.get -> Microsoft.Maui.Graphics.Color!
Microsoft.Maui.ITabbedView
Microsoft.Maui.ItemDelegateList<T>
Microsoft.Maui.ItemDelegateList<T>.Count.get -> int
Microsoft.Maui.ItemDelegateList<T>.GetEnumerator() -> System.Collections.Generic.IEnumerator<T>!
Microsoft.Maui.ItemDelegateList<T>.ItemDelegate.get -> Microsoft.Maui.IItemDelegate<T>!
Microsoft.Maui.ItemDelegateList<T>.ItemDelegateList(Microsoft.Maui.IItemDelegate<T>! itemDelegate) -> void
Microsoft.Maui.ItemDelegateList<T>.this[int index].get -> T
Microsoft.Maui.ITemplatedIndicatorView
Microsoft.Maui.ITemplatedIndicatorView.IndicatorsLayoutOverride.get -> Microsoft.Maui.ILayout?
Microsoft.Maui.IText
Microsoft.Maui.IText.Text.get -> string!
Microsoft.Maui.ITextAlignment
Microsoft.Maui.ITextAlignment.HorizontalTextAlignment.get -> Microsoft.Maui.TextAlignment
Microsoft.Maui.ITextAlignment.VerticalTextAlignment.get -> Microsoft.Maui.TextAlignment
Microsoft.Maui.ITextButton
Microsoft.Maui.ITextInput
Microsoft.Maui.ITextInput.CursorPosition.get -> int
Microsoft.Maui.ITextInput.CursorPosition.set -> void
Microsoft.Maui.ITextInput.IsReadOnly.get -> bool
Microsoft.Maui.ITextInput.IsSpellCheckEnabled.get -> bool
Microsoft.Maui.ITextInput.IsTextPredictionEnabled.get -> bool
Microsoft.Maui.ITextInput.Keyboard.get -> Microsoft.Maui.Keyboard!
Microsoft.Maui.ITextInput.MaxLength.get -> int
Microsoft.Maui.ITextInput.SelectionLength.get -> int
Microsoft.Maui.ITextInput.SelectionLength.set -> void
Microsoft.Maui.ITextInput.Text.get -> string!
Microsoft.Maui.ITextInput.Text.set -> void
Microsoft.Maui.ITextInputExtensions
Microsoft.Maui.ITextStyle
Microsoft.Maui.ITextStyle.CharacterSpacing.get -> double
Microsoft.Maui.ITextStyle.Font.get -> Microsoft.Maui.Font
Microsoft.Maui.ITextStyle.TextColor.get -> Microsoft.Maui.Graphics.Color!
Microsoft.Maui.ITimePicker
Microsoft.Maui.ITimePicker.Format.get -> string!
Microsoft.Maui.ITimePicker.Time.get -> System.TimeSpan
Microsoft.Maui.ITimePicker.Time.set -> void
Microsoft.Maui.ITitledElement
Microsoft.Maui.ITitledElement.Title.get -> string?
Microsoft.Maui.IToolbar
Microsoft.Maui.IToolbar.BackButtonVisible.get -> bool
Microsoft.Maui.IToolbar.BackButtonVisible.set -> void
Microsoft.Maui.IToolbar.IsVisible.get -> bool
Microsoft.Maui.IToolbar.IsVisible.set -> void
Microsoft.Maui.IToolbar.Title.get -> string!
Microsoft.Maui.IToolbarElement
Microsoft.Maui.IToolbarElement.Toolbar.get -> Microsoft.Maui.IToolbar?
Microsoft.Maui.IToolTipElement
Microsoft.Maui.IToolTipElement.ToolTip.get -> Microsoft.Maui.ToolTip?
Microsoft.Maui.ITransform
Microsoft.Maui.ITransform.AnchorX.get -> double
Microsoft.Maui.ITransform.AnchorY.get -> double
Microsoft.Maui.ITransform.Rotation.get -> double
Microsoft.Maui.ITransform.RotationX.get -> double
Microsoft.Maui.ITransform.RotationY.get -> double
Microsoft.Maui.ITransform.Scale.get -> double
Microsoft.Maui.ITransform.ScaleX.get -> double
Microsoft.Maui.ITransform.ScaleY.get -> double
Microsoft.Maui.ITransform.TranslationX.get -> double
Microsoft.Maui.ITransform.TranslationY.get -> double
Microsoft.Maui.IUriImageSource
Microsoft.Maui.IUriImageSource.CacheValidity.get -> System.TimeSpan
Microsoft.Maui.IUriImageSource.CachingEnabled.get -> bool
Microsoft.Maui.IUriImageSource.Uri.get -> System.Uri!
Microsoft.Maui.IView
Microsoft.Maui.IView.Arrange(Microsoft.Maui.Graphics.Rect bounds) -> Microsoft.Maui.Graphics.Size
Microsoft.Maui.IView.AutomationId.get -> string!
Microsoft.Maui.IView.Background.get -> Microsoft.Maui.Graphics.Paint?
Microsoft.Maui.IView.Clip.get -> Microsoft.Maui.Graphics.IShape?
Microsoft.Maui.IView.DesiredSize.get -> Microsoft.Maui.Graphics.Size
Microsoft.Maui.IView.FlowDirection.get -> Microsoft.Maui.FlowDirection
Microsoft.Maui.IView.Focus() -> bool
Microsoft.Maui.IView.Frame.get -> Microsoft.Maui.Graphics.Rect
Microsoft.Maui.IView.Frame.set -> void
Microsoft.Maui.IView.Handler.get -> Microsoft.Maui.IViewHandler?
Microsoft.Maui.IView.Handler.set -> void
Microsoft.Maui.IView.Height.get -> double
Microsoft.Maui.IView.HorizontalLayoutAlignment.get -> Microsoft.Maui.Primitives.LayoutAlignment
Microsoft.Maui.IView.InputTransparent.get -> bool
Microsoft.Maui.IView.InvalidateArrange() -> void
Microsoft.Maui.IView.InvalidateMeasure() -> void
Microsoft.Maui.IView.IsEnabled.get -> bool
Microsoft.Maui.IView.IsFocused.get -> bool
Microsoft.Maui.IView.IsFocused.set -> void
Microsoft.Maui.IView.Margin.get -> Microsoft.Maui.Thickness
Microsoft.Maui.IView.MaximumHeight.get -> double
Microsoft.Maui.IView.MaximumWidth.get -> double
Microsoft.Maui.IView.Measure(double widthConstraint, double heightConstraint) -> Microsoft.Maui.Graphics.Size
Microsoft.Maui.IView.MinimumHeight.get -> double
Microsoft.Maui.IView.MinimumWidth.get -> double
Microsoft.Maui.IView.Opacity.get -> double
Microsoft.Maui.IView.Semantics.get -> Microsoft.Maui.Semantics?
Microsoft.Maui.IView.Shadow.get -> Microsoft.Maui.IShadow?
Microsoft.Maui.IView.Unfocus() -> void
Microsoft.Maui.IView.VerticalLayoutAlignment.get -> Microsoft.Maui.Primitives.LayoutAlignment
Microsoft.Maui.IView.Visibility.get -> Microsoft.Maui.Visibility
Microsoft.Maui.IView.Width.get -> double
Microsoft.Maui.IView.ZIndex.get -> int
Microsoft.Maui.IViewHandler
Microsoft.Maui.IViewHandler.ContainerView.get -> object?
Microsoft.Maui.IViewHandler.GetDesiredSize(double widthConstraint, double heightConstraint) -> Microsoft.Maui.Graphics.Size
Microsoft.Maui.IViewHandler.HasContainer.get -> bool
Microsoft.Maui.IViewHandler.HasContainer.set -> void
Microsoft.Maui.IViewHandler.PlatformArrange(Microsoft.Maui.Graphics.Rect frame) -> void
Microsoft.Maui.IViewHandler.VirtualView.get -> Microsoft.Maui.IView?
Microsoft.Maui.IVisualDiagnosticsOverlay
Microsoft.Maui.IVisualDiagnosticsOverlay.AddAdorner(Microsoft.Maui.IAdorner! adorner, bool scrollToElement) -> bool
Microsoft.Maui.IVisualDiagnosticsOverlay.AddAdorner(Microsoft.Maui.IVisualTreeElement! visualElement, bool scrollToElement) -> bool
Microsoft.Maui.IVisualDiagnosticsOverlay.AddScrollableElementHandler(Microsoft.Maui.IScrollView! view) -> void
Microsoft.Maui.IVisualDiagnosticsOverlay.AddScrollableElementHandlers() -> void
Microsoft.Maui.IVisualDiagnosticsOverlay.EnableElementSelector.get -> bool
Microsoft.Maui.IVisualDiagnosticsOverlay.EnableElementSelector.set -> void
Microsoft.Maui.IVisualDiagnosticsOverlay.Offset.get -> Microsoft.Maui.Graphics.Point
Microsoft.Maui.IVisualDiagnosticsOverlay.RemoveAdorner(Microsoft.Maui.IAdorner! adorner) -> bool
Microsoft.Maui.IVisualDiagnosticsOverlay.RemoveAdorners() -> void
Microsoft.Maui.IVisualDiagnosticsOverlay.RemoveAdorners(Microsoft.Maui.IVisualTreeElement! visualElement) -> bool
Microsoft.Maui.IVisualDiagnosticsOverlay.RemoveScrollableElementHandler() -> void
Microsoft.Maui.IVisualDiagnosticsOverlay.ScrollToElement.get -> bool
Microsoft.Maui.IVisualDiagnosticsOverlay.ScrollToElement.set -> void
Microsoft.Maui.IVisualDiagnosticsOverlay.ScrollToView(Microsoft.Maui.IVisualTreeElement! element) -> void
Microsoft.Maui.IVisualDiagnosticsOverlay.ScrollViews.get -> System.Collections.Generic.IReadOnlyCollection<Microsoft.Maui.IScrollView!>!
Microsoft.Maui.IVisualTreeElement
Microsoft.Maui.IVisualTreeElement.GetVisualChildren() -> System.Collections.Generic.IReadOnlyList<Microsoft.Maui.IVisualTreeElement!>!
Microsoft.Maui.IVisualTreeElement.GetVisualParent() -> Microsoft.Maui.IVisualTreeElement?
Microsoft.Maui.IWebView
Microsoft.Maui.IWebView.CanGoBack.get -> bool
Microsoft.Maui.IWebView.CanGoBack.set -> void
Microsoft.Maui.IWebView.CanGoForward.get -> bool
Microsoft.Maui.IWebView.CanGoForward.set -> void
Microsoft.Maui.IWebView.Cookies.get -> System.Net.CookieContainer!
Microsoft.Maui.IWebView.Eval(string! script) -> void
Microsoft.Maui.IWebView.EvaluateJavaScriptAsync(string! script) -> System.Threading.Tasks.Task<string!>!
Microsoft.Maui.IWebView.GoBack() -> void
Microsoft.Maui.IWebView.GoForward() -> void
Microsoft.Maui.IWebView.Navigated(Microsoft.Maui.WebNavigationEvent evnt, string! url, Microsoft.Maui.WebNavigationResult result) -> void
Microsoft.Maui.IWebView.Navigating(Microsoft.Maui.WebNavigationEvent evnt, string! url) -> bool
Microsoft.Maui.IWebView.Reload() -> void
Microsoft.Maui.IWebView.Source.get -> Microsoft.Maui.IWebViewSource!
Microsoft.Maui.IWebView.UserAgent.get -> string?
Microsoft.Maui.IWebView.UserAgent.set -> void
Microsoft.Maui.IWebViewDelegate
Microsoft.Maui.IWebViewDelegate.LoadHtml(string? html, string? baseUrl) -> void
Microsoft.Maui.IWebViewDelegate.LoadUrl(string? url) -> void
Microsoft.Maui.IWebViewSource
Microsoft.Maui.IWebViewSource.Load(Microsoft.Maui.IWebViewDelegate! webViewDelegate) -> void
Microsoft.Maui.IWindow
Microsoft.Maui.IWindow.Activated() -> void
Microsoft.Maui.IWindow.AddOverlay(Microsoft.Maui.IWindowOverlay! overlay) -> bool
Microsoft.Maui.IWindow.BackButtonClicked() -> bool
Microsoft.Maui.IWindow.Backgrounding(Microsoft.Maui.IPersistedState! state) -> void
Microsoft.Maui.IWindow.Content.get -> Microsoft.Maui.IView!
Microsoft.Maui.IWindow.Created() -> void
Microsoft.Maui.IWindow.Deactivated() -> void
Microsoft.Maui.IWindow.Destroying() -> void
Microsoft.Maui.IWindow.DisplayDensityChanged(float displayDensity) -> void
Microsoft.Maui.IWindow.FlowDirection.get -> Microsoft.Maui.FlowDirection
Microsoft.Maui.IWindow.FrameChanged(Microsoft.Maui.Graphics.Rect frame) -> void
Microsoft.Maui.IWindow.Height.get -> double
Microsoft.Maui.IWindow.MaximumHeight.get -> double
Microsoft.Maui.IWindow.MaximumWidth.get -> double
Microsoft.Maui.IWindow.MinimumHeight.get -> double
Microsoft.Maui.IWindow.MinimumWidth.get -> double
Microsoft.Maui.IWindow.Overlays.get -> System.Collections.Generic.IReadOnlyCollection<Microsoft.Maui.IWindowOverlay!>!
Microsoft.Maui.IWindow.RemoveOverlay(Microsoft.Maui.IWindowOverlay! overlay) -> bool
Microsoft.Maui.IWindow.RequestDisplayDensity() -> float
Microsoft.Maui.IWindow.Resumed() -> void
Microsoft.Maui.IWindow.Stopped() -> void
Microsoft.Maui.IWindow.TitleBarDragRectangles.get -> Microsoft.Maui.Graphics.Rect[]?
Microsoft.Maui.IWindow.VisualDiagnosticsOverlay.get -> Microsoft.Maui.IVisualDiagnosticsOverlay!
Microsoft.Maui.IWindow.Width.get -> double
Microsoft.Maui.IWindow.X.get -> double
Microsoft.Maui.IWindow.Y.get -> double
Microsoft.Maui.IWindowOverlay
Microsoft.Maui.IWindowOverlay.AddWindowElement(Microsoft.Maui.IWindowOverlayElement! element) -> bool
Microsoft.Maui.IWindowOverlay.Deinitialize() -> bool
Microsoft.Maui.IWindowOverlay.Density.get -> float
Microsoft.Maui.IWindowOverlay.DisableUITouchEventPassthrough.get -> bool
Microsoft.Maui.IWindowOverlay.DisableUITouchEventPassthrough.set -> void
Microsoft.Maui.IWindowOverlay.EnableDrawableTouchHandling.get -> bool
Microsoft.Maui.IWindowOverlay.EnableDrawableTouchHandling.set -> void
Microsoft.Maui.IWindowOverlay.HandleUIChange() -> void
Microsoft.Maui.IWindowOverlay.Initialize() -> bool
Microsoft.Maui.IWindowOverlay.Invalidate() -> void
Microsoft.Maui.IWindowOverlay.IsPlatformViewInitialized.get -> bool
Microsoft.Maui.IWindowOverlay.IsVisible.get -> bool
Microsoft.Maui.IWindowOverlay.IsVisible.set -> void
Microsoft.Maui.IWindowOverlay.RemoveWindowElement(Microsoft.Maui.IWindowOverlayElement! element) -> bool
Microsoft.Maui.IWindowOverlay.RemoveWindowElements() -> void
Microsoft.Maui.IWindowOverlay.Tapped -> System.EventHandler<Microsoft.Maui.WindowOverlayTappedEventArgs!>!
Microsoft.Maui.IWindowOverlay.Window.get -> Microsoft.Maui.IWindow!
Microsoft.Maui.IWindowOverlay.WindowElements.get -> System.Collections.Generic.IReadOnlyCollection<Microsoft.Maui.IWindowOverlayElement!>!
Microsoft.Maui.IWindowOverlayElement
Microsoft.Maui.IWindowOverlayElement.Contains(Microsoft.Maui.Graphics.Point point) -> bool
Microsoft.Maui.Keyboard
Microsoft.Maui.KeyboardAcceleratorModifiers
Microsoft.Maui.KeyboardAcceleratorModifiers.Alt = 4 -> Microsoft.Maui.KeyboardAcceleratorModifiers
Microsoft.Maui.KeyboardAcceleratorModifiers.Cmd = 8 -> Microsoft.Maui.KeyboardAcceleratorModifiers
Microsoft.Maui.KeyboardAcceleratorModifiers.Ctrl = 2 -> Microsoft.Maui.KeyboardAcceleratorModifiers
Microsoft.Maui.KeyboardAcceleratorModifiers.None = 0 -> Microsoft.Maui.KeyboardAcceleratorModifiers
Microsoft.Maui.KeyboardAcceleratorModifiers.Shift = 1 -> Microsoft.Maui.KeyboardAcceleratorModifiers
Microsoft.Maui.KeyboardAcceleratorModifiers.Windows = 16 -> Microsoft.Maui.KeyboardAcceleratorModifiers
Microsoft.Maui.KeyboardFlags
Microsoft.Maui.KeyboardFlags.All = -1 -> Microsoft.Maui.KeyboardFlags
Microsoft.Maui.KeyboardFlags.CapitalizeCharacter = 16 -> Microsoft.Maui.KeyboardFlags
Microsoft.Maui.KeyboardFlags.CapitalizeNone = 32 -> Microsoft.Maui.KeyboardFlags
Microsoft.Maui.KeyboardFlags.CapitalizeSentence = 1 -> Microsoft.Maui.KeyboardFlags
Microsoft.Maui.KeyboardFlags.CapitalizeWord = 8 -> Microsoft.Maui.KeyboardFlags
Microsoft.Maui.KeyboardFlags.None = 0 -> Microsoft.Maui.KeyboardFlags
Microsoft.Maui.KeyboardFlags.Spellcheck = 2 -> Microsoft.Maui.KeyboardFlags
Microsoft.Maui.KeyboardFlags.Suggestions = 4 -> Microsoft.Maui.KeyboardFlags
Microsoft.Maui.Layouts.AbsoluteLayoutFlags
Microsoft.Maui.Layouts.AbsoluteLayoutFlags.All = -1 -> Microsoft.Maui.Layouts.AbsoluteLayoutFlags
Microsoft.Maui.Layouts.AbsoluteLayoutFlags.HeightProportional = 8 -> Microsoft.Maui.Layouts.AbsoluteLayoutFlags
Microsoft.Maui.Layouts.AbsoluteLayoutFlags.None = 0 -> Microsoft.Maui.Layouts.AbsoluteLayoutFlags
Microsoft.Maui.Layouts.AbsoluteLayoutFlags.PositionProportional = Microsoft.Maui.Layouts.AbsoluteLayoutFlags.XProportional | Microsoft.Maui.Layouts.AbsoluteLayoutFlags.YProportional -> Microsoft.Maui.Layouts.AbsoluteLayoutFlags
Microsoft.Maui.Layouts.AbsoluteLayoutFlags.SizeProportional = Microsoft.Maui.Layouts.AbsoluteLayoutFlags.WidthProportional | Microsoft.Maui.Layouts.AbsoluteLayoutFlags.HeightProportional -> Microsoft.Maui.Layouts.AbsoluteLayoutFlags
Microsoft.Maui.Layouts.AbsoluteLayoutFlags.WidthProportional = 4 -> Microsoft.Maui.Layouts.AbsoluteLayoutFlags
Microsoft.Maui.Layouts.AbsoluteLayoutFlags.XProportional = 1 -> Microsoft.Maui.Layouts.AbsoluteLayoutFlags
Microsoft.Maui.Layouts.AbsoluteLayoutFlags.YProportional = 2 -> Microsoft.Maui.Layouts.AbsoluteLayoutFlags
Microsoft.Maui.Layouts.AbsoluteLayoutManager
Microsoft.Maui.Layouts.AbsoluteLayoutManager.AbsoluteLayout.get -> Microsoft.Maui.IAbsoluteLayout!
Microsoft.Maui.Layouts.AbsoluteLayoutManager.AbsoluteLayoutManager(Microsoft.Maui.IAbsoluteLayout! absoluteLayout) -> void
Microsoft.Maui.Layouts.FlexAlignContent
Microsoft.Maui.Layouts.FlexAlignContent.Center = 2 -> Microsoft.Maui.Layouts.FlexAlignContent
Microsoft.Maui.Layouts.FlexAlignContent.End = 4 -> Microsoft.Maui.Layouts.FlexAlignContent
Microsoft.Maui.Layouts.FlexAlignContent.SpaceAround = 6 -> Microsoft.Maui.Layouts.FlexAlignContent
Microsoft.Maui.Layouts.FlexAlignContent.SpaceBetween = 5 -> Microsoft.Maui.Layouts.FlexAlignContent
Microsoft.Maui.Layouts.FlexAlignContent.SpaceEvenly = 7 -> Microsoft.Maui.Layouts.FlexAlignContent
Microsoft.Maui.Layouts.FlexAlignContent.Start = 3 -> Microsoft.Maui.Layouts.FlexAlignContent
Microsoft.Maui.Layouts.FlexAlignContent.Stretch = 1 -> Microsoft.Maui.Layouts.FlexAlignContent
Microsoft.Maui.Layouts.FlexAlignItems
Microsoft.Maui.Layouts.FlexAlignItems.Center = 2 -> Microsoft.Maui.Layouts.FlexAlignItems
Microsoft.Maui.Layouts.FlexAlignItems.End = 4 -> Microsoft.Maui.Layouts.FlexAlignItems
Microsoft.Maui.Layouts.FlexAlignItems.Start = 3 -> Microsoft.Maui.Layouts.FlexAlignItems
Microsoft.Maui.Layouts.FlexAlignItems.Stretch = 1 -> Microsoft.Maui.Layouts.FlexAlignItems
Microsoft.Maui.Layouts.FlexAlignSelf
Microsoft.Maui.Layouts.FlexAlignSelf.Auto = 0 -> Microsoft.Maui.Layouts.FlexAlignSelf
Microsoft.Maui.Layouts.FlexAlignSelf.Center = 2 -> Microsoft.Maui.Layouts.FlexAlignSelf
Microsoft.Maui.Layouts.FlexAlignSelf.End = 4 -> Microsoft.Maui.Layouts.FlexAlignSelf
Microsoft.Maui.Layouts.FlexAlignSelf.Start = 3 -> Microsoft.Maui.Layouts.FlexAlignSelf
Microsoft.Maui.Layouts.FlexAlignSelf.Stretch = 1 -> Microsoft.Maui.Layouts.FlexAlignSelf
Microsoft.Maui.Layouts.FlexBasis
Microsoft.Maui.Layouts.FlexBasis.Equals(Microsoft.Maui.Layouts.FlexBasis other) -> bool
Microsoft.Maui.Layouts.FlexBasis.FlexBasis() -> void
Microsoft.Maui.Layouts.FlexBasis.FlexBasis(float length, bool isRelative = false) -> void
Microsoft.Maui.Layouts.FlexBasis.Length.get -> float
Microsoft.Maui.Layouts.FlexDirection
Microsoft.Maui.Layouts.FlexDirection.Column = 2 -> Microsoft.Maui.Layouts.FlexDirection
Microsoft.Maui.Layouts.FlexDirection.ColumnReverse = 3 -> Microsoft.Maui.Layouts.FlexDirection
Microsoft.Maui.Layouts.FlexDirection.Row = 0 -> Microsoft.Maui.Layouts.FlexDirection
Microsoft.Maui.Layouts.FlexDirection.RowReverse = 1 -> Microsoft.Maui.Layouts.FlexDirection
Microsoft.Maui.Layouts.FlexJustify
Microsoft.Maui.Layouts.FlexJustify.Center = 2 -> Microsoft.Maui.Layouts.FlexJustify
Microsoft.Maui.Layouts.FlexJustify.End = 4 -> Microsoft.Maui.Layouts.FlexJustify
Microsoft.Maui.Layouts.FlexJustify.SpaceAround = 6 -> Microsoft.Maui.Layouts.FlexJustify
Microsoft.Maui.Layouts.FlexJustify.SpaceBetween = 5 -> Microsoft.Maui.Layouts.FlexJustify
Microsoft.Maui.Layouts.FlexJustify.SpaceEvenly = 7 -> Microsoft.Maui.Layouts.FlexJustify
Microsoft.Maui.Layouts.FlexJustify.Start = 3 -> Microsoft.Maui.Layouts.FlexJustify
Microsoft.Maui.Layouts.FlexLayoutManager
Microsoft.Maui.Layouts.FlexLayoutManager.ArrangeChildren(Microsoft.Maui.Graphics.Rect bounds) -> Microsoft.Maui.Graphics.Size
Microsoft.Maui.Layouts.FlexLayoutManager.FlexLayoutManager(Microsoft.Maui.IFlexLayout! flexLayout) -> void
Microsoft.Maui.Layouts.FlexLayoutManager.Measure(double widthConstraint, double heightConstraint) -> Microsoft.Maui.Graphics.Size
Microsoft.Maui.Layouts.FlexPosition
Microsoft.Maui.Layouts.FlexPosition.Absolute = 1 -> Microsoft.Maui.Layouts.FlexPosition
Microsoft.Maui.Layouts.FlexPosition.Relative = 0 -> Microsoft.Maui.Layouts.FlexPosition
Microsoft.Maui.Layouts.FlexWrap
Microsoft.Maui.Layouts.FlexWrap.NoWrap = 0 -> Microsoft.Maui.Layouts.FlexWrap
Microsoft.Maui.Layouts.FlexWrap.Reverse = 2 -> Microsoft.Maui.Layouts.FlexWrap
Microsoft.Maui.Layouts.FlexWrap.Wrap = 1 -> Microsoft.Maui.Layouts.FlexWrap
Microsoft.Maui.Layouts.GridLayoutManager
Microsoft.Maui.Layouts.GridLayoutManager.Grid.get -> Microsoft.Maui.IGridLayout!
Microsoft.Maui.Layouts.GridLayoutManager.GridLayoutManager(Microsoft.Maui.IGridLayout! layout) -> void
Microsoft.Maui.Layouts.HorizontalStackLayoutManager
Microsoft.Maui.Layouts.HorizontalStackLayoutManager.HorizontalStackLayoutManager(Microsoft.Maui.IStackLayout! layout) -> void
Microsoft.Maui.Layouts.ILayoutManager
Microsoft.Maui.Layouts.ILayoutManager.ArrangeChildren(Microsoft.Maui.Graphics.Rect bounds) -> Microsoft.Maui.Graphics.Size
Microsoft.Maui.Layouts.ILayoutManager.Measure(double widthConstraint, double heightConstraint) -> Microsoft.Maui.Graphics.Size
Microsoft.Maui.Layouts.LayoutExtensions
Microsoft.Maui.Layouts.LayoutManager
Microsoft.Maui.Layouts.LayoutManager.Layout.get -> Microsoft.Maui.ILayout!
Microsoft.Maui.Layouts.LayoutManager.LayoutManager(Microsoft.Maui.ILayout! layout) -> void
Microsoft.Maui.Layouts.StackLayoutManager
Microsoft.Maui.Layouts.StackLayoutManager.Stack.get -> Microsoft.Maui.IStackLayout!
Microsoft.Maui.Layouts.StackLayoutManager.StackLayoutManager(Microsoft.Maui.IStackLayout! stack) -> void
Microsoft.Maui.Layouts.VerticalStackLayoutManager
Microsoft.Maui.Layouts.VerticalStackLayoutManager.VerticalStackLayoutManager(Microsoft.Maui.IStackLayout! stackLayout) -> void
Microsoft.Maui.LifecycleEvents.AppHostBuilderExtensions
Microsoft.Maui.LifecycleEvents.ILifecycleBuilder
Microsoft.Maui.LifecycleEvents.ILifecycleBuilder.AddEvent<TDelegate>(string! eventName, TDelegate! action) -> void
Microsoft.Maui.LifecycleEvents.ILifecycleEventService
Microsoft.Maui.LifecycleEvents.ILifecycleEventService.ContainsEvent(string! eventName) -> bool
Microsoft.Maui.LifecycleEvents.ILifecycleEventService.GetEventDelegates<TDelegate>(string! eventName) -> System.Collections.Generic.IEnumerable<TDelegate!>!
Microsoft.Maui.LifecycleEvents.IWindowsLifecycleBuilder
Microsoft.Maui.LifecycleEvents.LifecycleBuilderExtensions
Microsoft.Maui.LifecycleEvents.LifecycleEventRegistration
Microsoft.Maui.LifecycleEvents.LifecycleEventRegistration.LifecycleEventRegistration(System.Action<Microsoft.Maui.LifecycleEvents.ILifecycleBuilder!>! registerAction) -> void
Microsoft.Maui.LifecycleEvents.LifecycleEventService
Microsoft.Maui.LifecycleEvents.LifecycleEventService.AddEvent<TDelegate>(string! eventName, TDelegate! action) -> void
Microsoft.Maui.LifecycleEvents.LifecycleEventService.ContainsEvent(string! eventName) -> bool
Microsoft.Maui.LifecycleEvents.LifecycleEventService.GetEventDelegates<TDelegate>(string! eventName) -> System.Collections.Generic.IEnumerable<TDelegate!>!
Microsoft.Maui.LifecycleEvents.LifecycleEventService.LifecycleEventService(System.Collections.Generic.IEnumerable<Microsoft.Maui.LifecycleEvents.LifecycleEventRegistration!>! registrations) -> void
Microsoft.Maui.LifecycleEvents.LifecycleEventServiceExtensions
Microsoft.Maui.LifecycleEvents.MauiAppHostBuilderExtensions
Microsoft.Maui.LifecycleEvents.WindowsLifecycle
Microsoft.Maui.LifecycleEvents.WindowsLifecycle.OnActivated
Microsoft.Maui.LifecycleEvents.WindowsLifecycle.OnClosed
Microsoft.Maui.LifecycleEvents.WindowsLifecycle.OnLaunched
Microsoft.Maui.LifecycleEvents.WindowsLifecycle.OnLaunching
Microsoft.Maui.LifecycleEvents.WindowsLifecycle.OnPlatformMessage
Microsoft.Maui.LifecycleEvents.WindowsLifecycle.OnPlatformWindowSubclassed
Microsoft.Maui.LifecycleEvents.WindowsLifecycle.OnResumed
Microsoft.Maui.LifecycleEvents.WindowsLifecycle.OnVisibilityChanged
Microsoft.Maui.LifecycleEvents.WindowsLifecycle.OnWindowCreated
Microsoft.Maui.LifecycleEvents.WindowsLifecycleBuilderExtensions
Microsoft.Maui.LifecycleEvents.WindowsLifecycleExtensions
Microsoft.Maui.LineBreakMode
Microsoft.Maui.LineBreakMode.CharacterWrap = 2 -> Microsoft.Maui.LineBreakMode
Microsoft.Maui.LineBreakMode.HeadTruncation = 3 -> Microsoft.Maui.LineBreakMode
Microsoft.Maui.LineBreakMode.MiddleTruncation = 5 -> Microsoft.Maui.LineBreakMode
Microsoft.Maui.LineBreakMode.NoWrap = 0 -> Microsoft.Maui.LineBreakMode
Microsoft.Maui.LineBreakMode.TailTruncation = 4 -> Microsoft.Maui.LineBreakMode
Microsoft.Maui.LineBreakMode.WordWrap = 1 -> Microsoft.Maui.LineBreakMode
Microsoft.Maui.LockableObservableListWrapper
Microsoft.Maui.LockableObservableListWrapper.Add(string! item) -> void
Microsoft.Maui.LockableObservableListWrapper.Clear() -> void
Microsoft.Maui.LockableObservableListWrapper.Contains(string! item) -> bool
Microsoft.Maui.LockableObservableListWrapper.CopyTo(string![]! array, int arrayIndex) -> void
Microsoft.Maui.LockableObservableListWrapper.Count.get -> int
Microsoft.Maui.LockableObservableListWrapper.GetEnumerator() -> System.Collections.Generic.IEnumerator<string!>!
Microsoft.Maui.LockableObservableListWrapper.IndexOf(string! item) -> int
Microsoft.Maui.LockableObservableListWrapper.Insert(int index, string! item) -> void
Microsoft.Maui.LockableObservableListWrapper.InternalAdd(string! item) -> void
Microsoft.Maui.LockableObservableListWrapper.InternalClear() -> void
Microsoft.Maui.LockableObservableListWrapper.InternalInsert(int index, string! item) -> void
Microsoft.Maui.LockableObservableListWrapper.InternalRemove(string! item) -> bool
Microsoft.Maui.LockableObservableListWrapper.InternalRemoveAt(int index) -> void
Microsoft.Maui.LockableObservableListWrapper.IsLocked.get -> bool
Microsoft.Maui.LockableObservableListWrapper.IsLocked.set -> void
Microsoft.Maui.LockableObservableListWrapper.IsReadOnly.get -> bool
Microsoft.Maui.LockableObservableListWrapper.LockableObservableListWrapper() -> void
Microsoft.Maui.LockableObservableListWrapper.Remove(string! item) -> bool
Microsoft.Maui.LockableObservableListWrapper.RemoveAt(int index) -> void
Microsoft.Maui.LockableObservableListWrapper.this[int index].get -> string!
Microsoft.Maui.LockableObservableListWrapper.this[int index].set -> void
Microsoft.Maui.MauiContext
Microsoft.Maui.MauiContext.Handlers.get -> Microsoft.Maui.IMauiHandlersFactory!
Microsoft.Maui.MauiContext.MauiContext(System.IServiceProvider! services) -> void
Microsoft.Maui.MauiContext.Services.get -> System.IServiceProvider!
Microsoft.Maui.MauiWinUIApplication
Microsoft.Maui.MauiWinUIApplication.Application.get -> Microsoft.Maui.IApplication!
Microsoft.Maui.MauiWinUIApplication.Application.set -> void
Microsoft.Maui.MauiWinUIApplication.LaunchActivatedEventArgs.get -> Microsoft.UI.Xaml.LaunchActivatedEventArgs!
Microsoft.Maui.MauiWinUIApplication.LaunchActivatedEventArgs.set -> void
Microsoft.Maui.MauiWinUIApplication.MauiWinUIApplication() -> void
Microsoft.Maui.MauiWinUIApplication.Services.get -> System.IServiceProvider!
Microsoft.Maui.MauiWinUIApplication.Services.set -> void
Microsoft.Maui.MauiWinUIWindow
Microsoft.Maui.MauiWinUIWindow.MauiWinUIWindow() -> void
Microsoft.Maui.MauiWinUIWindow.WindowHandle.get -> nint
Microsoft.Maui.MissingMapperAttribute
Microsoft.Maui.MissingMapperAttribute.Description.get -> string?
Microsoft.Maui.MissingMapperAttribute.Description.set -> void
Microsoft.Maui.MissingMapperAttribute.MissingMapperAttribute() -> void
Microsoft.Maui.MissingMapperAttribute.MissingMapperAttribute(string! description) -> void
Microsoft.Maui.NavigationRequest
Microsoft.Maui.NavigationRequest.Animated.get -> bool
Microsoft.Maui.NavigationRequest.NavigationRequest(System.Collections.Generic.IReadOnlyList<Microsoft.Maui.IView!>! newNavigationStack, bool animated) -> void
Microsoft.Maui.NavigationRequest.NavigationStack.get -> System.Collections.Generic.IReadOnlyList<Microsoft.Maui.IView!>!
Microsoft.Maui.OpenSwipeItem
Microsoft.Maui.OpenSwipeItem.BottomItems = 3 -> Microsoft.Maui.OpenSwipeItem
Microsoft.Maui.OpenSwipeItem.LeftItems = 0 -> Microsoft.Maui.OpenSwipeItem
Microsoft.Maui.OpenSwipeItem.RightItems = 2 -> Microsoft.Maui.OpenSwipeItem
Microsoft.Maui.OpenSwipeItem.TopItems = 1 -> Microsoft.Maui.OpenSwipeItem
Microsoft.Maui.PathAspect
Microsoft.Maui.PathAspect.AspectFill = 4 -> Microsoft.Maui.PathAspect
Microsoft.Maui.PathAspect.AspectFit = 3 -> Microsoft.Maui.PathAspect
Microsoft.Maui.PathAspect.Center = 1 -> Microsoft.Maui.PathAspect
Microsoft.Maui.PathAspect.None = 0 -> Microsoft.Maui.PathAspect
Microsoft.Maui.PathAspect.Stretch = 2 -> Microsoft.Maui.PathAspect
Microsoft.Maui.PersistedState
Microsoft.Maui.PersistedState.PersistedState() -> void
Microsoft.Maui.Platform.ActivityIndicatorExtensions
Microsoft.Maui.Platform.AlignmentExtensions
Microsoft.Maui.Platform.ApplicationExtensions
Microsoft.Maui.Platform.AspectExtensions
Microsoft.Maui.Platform.BorderExtensions
Microsoft.Maui.Platform.ButtonExtensions
Microsoft.Maui.Platform.CharacterSpacingExtensions
Microsoft.Maui.Platform.CheckBoxExtensions
Microsoft.Maui.Platform.ColorConverter
Microsoft.Maui.Platform.ColorConverter.ColorConverter() -> void
Microsoft.Maui.Platform.ColorConverter.Convert(object! value, System.Type! targetType, object! parameter, string! language) -> object!
Microsoft.Maui.Platform.ColorConverter.ConvertBack(object! value, System.Type! targetType, object! parameter, string! language) -> object!
Microsoft.Maui.Platform.ColorExtensions
Microsoft.Maui.Platform.ContentPanel
Microsoft.Maui.Platform.ContentPanel.ContentPanel() -> void
Microsoft.Maui.Platform.ContentPanel.UpdateBackground(Microsoft.Maui.Graphics.Paint? background) -> void
Microsoft.Maui.Platform.ContentPanel.UpdateBorderShape(Microsoft.Maui.Graphics.IShape! borderShape) -> void
Microsoft.Maui.Platform.ControlExtensions
Microsoft.Maui.Platform.DatePickerExtensions
Microsoft.Maui.Platform.ElementExtensions
Microsoft.Maui.Platform.FontExtensions
Microsoft.Maui.Platform.GraphicsExtensions
Microsoft.Maui.Platform.GraphicsViewExtensions
Microsoft.Maui.Platform.IImageSourcePartSetter
Microsoft.Maui.Platform.IImageSourcePartSetter.Handler.get -> Microsoft.Maui.IElementHandler?
Microsoft.Maui.Platform.IImageSourcePartSetter.ImageSourcePart.get -> Microsoft.Maui.IImageSourcePart?
Microsoft.Maui.Platform.IImageSourcePartSetter.SetImageSource(Microsoft.UI.Xaml.Media.ImageSource? platformImage) -> void
Microsoft.Maui.Platform.ImageExtensions
Microsoft.Maui.Platform.ImageSourcePartLoader
Microsoft.Maui.Platform.ImageSourcePartLoader.ImageSourcePartLoader(Microsoft.Maui.IElementHandler! handler, System.Func<Microsoft.Maui.IImageSourcePart?>! imageSourcePart, System.Action<Microsoft.UI.Xaml.Media.ImageSource?>! setImage) -> void
Microsoft.Maui.Platform.ImageSourcePartLoader.ImageSourcePartLoader(Microsoft.Maui.Platform.IImageSourcePartSetter! setter) -> void
Microsoft.Maui.Platform.ImageSourcePartLoader.Reset() -> void
Microsoft.Maui.Platform.ImageSourcePartLoader.UpdateImageSourceAsync() -> System.Threading.Tasks.Task!
Microsoft.Maui.Platform.ImageViewExtensions
Microsoft.Maui.Platform.KeyboardAcceleratorExtensions
Microsoft.Maui.Platform.KeyboardExtensions
Microsoft.Maui.Platform.LayoutPanel
Microsoft.Maui.Platform.LayoutPanel.ClipsToBounds.get -> bool
Microsoft.Maui.Platform.LayoutPanel.ClipsToBounds.set -> void
Microsoft.Maui.Platform.LayoutPanel.LayoutPanel() -> void
Microsoft.Maui.Platform.LayoutPanel.UpdateInputTransparent(bool inputTransparent, Microsoft.UI.Xaml.Media.Brush? background) -> void
Microsoft.Maui.Platform.LayoutPanelExtensions
Microsoft.Maui.Platform.MauiAutoSuggestBox
Microsoft.Maui.Platform.MauiButton
Microsoft.Maui.Platform.MauiButton.MauiButton() -> void
Microsoft.Maui.Platform.MauiButtonAutomationPeer
Microsoft.Maui.Platform.MauiButtonAutomationPeer.MauiButtonAutomationPeer(Microsoft.UI.Xaml.Controls.Button! owner) -> void
Microsoft.Maui.Platform.MauiCancelButton
Microsoft.Maui.Platform.MauiCancelButton.IsReady.get -> bool
Microsoft.Maui.Platform.MauiCancelButton.MauiCancelButton() -> void
Microsoft.Maui.Platform.MauiCancelButton.ReadyChanged -> System.EventHandler
Microsoft.Maui.Platform.MauiNavigationView
Microsoft.Maui.Platform.MauiNavigationView.MauiNavigationView() -> void
Microsoft.Maui.Platform.MauiNavigationView.NavigationViewBackButtonMargin.get -> Microsoft.UI.Xaml.Thickness
Microsoft.Maui.Platform.MauiNavigationView.NavigationViewBackButtonMargin.set -> void
Microsoft.Maui.Platform.MauiPageControl
Microsoft.Maui.Platform.MauiPageControl.MauiPageControl() -> void
Microsoft.Maui.Platform.MauiPageControl.SetIndicatorView(Microsoft.Maui.IIndicatorView! indicatorView) -> void
Microsoft.Maui.Platform.MauiPanel
Microsoft.Maui.Platform.MauiPanel.CrossPlatformLayout.get -> Microsoft.Maui.ICrossPlatformLayout?
Microsoft.Maui.Platform.MauiPanel.CrossPlatformLayout.set -> void
Microsoft.Maui.Platform.MauiPanel.MauiPanel() -> void
Microsoft.Maui.Platform.MauiPasswordTextBox
Microsoft.Maui.Platform.MauiPasswordTextBox.IsObfuscationDelayed.get -> bool
Microsoft.Maui.Platform.MauiPasswordTextBox.IsObfuscationDelayed.set -> void
Microsoft.Maui.Platform.MauiPasswordTextBox.IsPassword.get -> bool
Microsoft.Maui.Platform.MauiPasswordTextBox.IsPassword.set -> void
Microsoft.Maui.Platform.MauiPasswordTextBox.MauiPasswordTextBox() -> void
Microsoft.Maui.Platform.MauiPasswordTextBox.Password.get -> string!
Microsoft.Maui.Platform.MauiPasswordTextBox.Password.set -> void
Microsoft.Maui.Platform.MauiStepper
Microsoft.Maui.Platform.MauiStepper.Increment.get -> double
Microsoft.Maui.Platform.MauiStepper.Increment.set -> void
Microsoft.Maui.Platform.MauiStepper.MauiStepper() -> void
Microsoft.Maui.Platform.MauiStepper.Maximum.get -> double
Microsoft.Maui.Platform.MauiStepper.Maximum.set -> void
Microsoft.Maui.Platform.MauiStepper.Minimum.get -> double
Microsoft.Maui.Platform.MauiStepper.Minimum.set -> void
Microsoft.Maui.Platform.MauiStepper.Value.get -> double
Microsoft.Maui.Platform.MauiStepper.Value.set -> void
Microsoft.Maui.Platform.MauiStepper.ValueChanged -> System.EventHandler
Microsoft.Maui.Platform.MauiTextBox
Microsoft.Maui.Platform.MauiToolbar
Microsoft.Maui.Platform.MauiToolbar.InitializeComponent() -> void
Microsoft.Maui.Platform.MauiToolbar.IsBackButtonVisible.get -> Microsoft.UI.Xaml.Controls.NavigationViewBackButtonVisible
Microsoft.Maui.Platform.MauiToolbar.IsBackButtonVisible.set -> void
Microsoft.Maui.Platform.MauiToolbar.IsBackEnabled.get -> bool
Microsoft.Maui.Platform.MauiToolbar.IsBackEnabled.set -> void
Microsoft.Maui.Platform.MauiToolbar.MauiToolbar() -> void
Microsoft.Maui.Platform.MauiWebView
Microsoft.Maui.Platform.MauiWebView.LoadHtml(string? html, string? baseUrl) -> void
Microsoft.Maui.Platform.MauiWebView.LoadUrl(string? url) -> void
Microsoft.Maui.Platform.MauiWebView.MauiWebView() -> void
Microsoft.Maui.Platform.MauiWebView.MauiWebView(Microsoft.Maui.Handlers.WebViewHandler! handler) -> void
Microsoft.Maui.Platform.NavigationRootManager
Microsoft.Maui.Platform.NavigationRootManager.NavigationRootManager(Microsoft.UI.Xaml.Window! platformWindow) -> void
Microsoft.Maui.Platform.NavigationRootManager.RootView.get -> Microsoft.UI.Xaml.FrameworkElement!
Microsoft.Maui.Platform.NavigationViewExtensions
Microsoft.Maui.Platform.PickerExtensions
Microsoft.Maui.Platform.PlatformTouchGraphicsView
Microsoft.Maui.Platform.PlatformTouchGraphicsView.Connect(Microsoft.Maui.IGraphicsView! graphicsView) -> void
Microsoft.Maui.Platform.PlatformTouchGraphicsView.Disconnect() -> void
Microsoft.Maui.Platform.PlatformTouchGraphicsView.Invalidate() -> void
Microsoft.Maui.Platform.PlatformTouchGraphicsView.PlatformTouchGraphicsView() -> void
Microsoft.Maui.Platform.PlatformTouchGraphicsView.UpdateDrawable(Microsoft.Maui.IGraphicsView! graphicsView) -> void
Microsoft.Maui.Platform.PrimitiveExtensions
Microsoft.Maui.Platform.ProgressBarExtensions
Microsoft.Maui.Platform.RadioButtonExtensions
Microsoft.Maui.Platform.RootNavigationView
Microsoft.Maui.Platform.RootNavigationView.RootNavigationView() -> void
Microsoft.Maui.Platform.RootPanel
Microsoft.Maui.Platform.RootPanel.RootPanel() -> void
Microsoft.Maui.Platform.ScrollViewerExtensions
Microsoft.Maui.Platform.SearchBarExtensions
Microsoft.Maui.Platform.ShapesExtensions
Microsoft.Maui.Platform.SizeExtensions
Microsoft.Maui.Platform.SliderExtensions
Microsoft.Maui.Platform.StackNavigationManager
Microsoft.Maui.Platform.StackNavigationManager.CurrentPage.get -> Microsoft.Maui.IView!
Microsoft.Maui.Platform.StackNavigationManager.MauiContext.get -> Microsoft.Maui.IMauiContext!
Microsoft.Maui.Platform.StackNavigationManager.NavigationFrame.get -> Microsoft.UI.Xaml.Controls.Frame!
Microsoft.Maui.Platform.StackNavigationManager.NavigationStack.get -> System.Collections.Generic.IReadOnlyList<Microsoft.Maui.IView!>!
Microsoft.Maui.Platform.StackNavigationManager.NavigationStack.set -> void
Microsoft.Maui.Platform.StackNavigationManager.StackNavigationManager(Microsoft.Maui.IMauiContext! mauiContext) -> void
Microsoft.Maui.Platform.StackNavigationManager.WindowManager.get -> Microsoft.Maui.Platform.NavigationRootManager!
Microsoft.Maui.Platform.StepperExtensions
Microsoft.Maui.Platform.StrokeExtensions
Microsoft.Maui.Platform.SwipeViewExtensions
Microsoft.Maui.Platform.SwitchExtensions
Microsoft.Maui.Platform.TextAlignmentToHorizontalAlignmentConverter
Microsoft.Maui.Platform.TextAlignmentToHorizontalAlignmentConverter.Convert(object! value, System.Type! targetType, object! parameter, string! language) -> object!
Microsoft.Maui.Platform.TextAlignmentToHorizontalAlignmentConverter.ConvertBack(object! value, System.Type! targetType, object! parameter, string! language) -> object!
Microsoft.Maui.Platform.TextAlignmentToHorizontalAlignmentConverter.TextAlignmentToHorizontalAlignmentConverter() -> void
Microsoft.Maui.Platform.TextBlockExtensions
Microsoft.Maui.Platform.TextBoxExtensions
Microsoft.Maui.Platform.TextElementExtensions
Microsoft.Maui.Platform.TimeExtensions
Microsoft.Maui.Platform.TimePickerExtensions
Microsoft.Maui.Platform.TransformationExtensions
Microsoft.Maui.Platform.ViewExtensions
Microsoft.Maui.Platform.WebViewExtensions
Microsoft.Maui.Platform.WindowExtensions
Microsoft.Maui.Platform.WindowRootView
Microsoft.Maui.Platform.WindowRootView.AppTitleBarTemplate.get -> Microsoft.UI.Xaml.DataTemplate?
Microsoft.Maui.Platform.WindowRootView.AppTitleBarTemplate.set -> void
Microsoft.Maui.Platform.WindowRootView.BackRequested -> Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Controls.NavigationView!, Microsoft.UI.Xaml.Controls.NavigationViewBackRequestedEventArgs!>?
Microsoft.Maui.Platform.WindowRootView.NavigationViewControl.get -> Microsoft.Maui.Platform.RootNavigationView?
Microsoft.Maui.Platform.WindowRootView.WindowRootView() -> void
Microsoft.Maui.Platform.WindowsPlatformMessageEventArgs
Microsoft.Maui.Platform.WindowsPlatformMessageEventArgs.Hwnd.get -> nint
Microsoft.Maui.Platform.WindowsPlatformMessageEventArgs.LParam.get -> nint
Microsoft.Maui.Platform.WindowsPlatformMessageEventArgs.MessageId.get -> uint
Microsoft.Maui.Platform.WindowsPlatformMessageEventArgs.WindowsPlatformMessageEventArgs(nint hwnd, uint messageId, nint wParam, nint lParam) -> void
Microsoft.Maui.Platform.WindowsPlatformMessageEventArgs.WParam.get -> nint
Microsoft.Maui.Platform.WindowsPlatformWindowSubclassedEventArgs
Microsoft.Maui.Platform.WindowsPlatformWindowSubclassedEventArgs.Hwnd.get -> nint
Microsoft.Maui.Platform.WindowsPlatformWindowSubclassedEventArgs.WindowsPlatformWindowSubclassedEventArgs(nint hwnd) -> void
Microsoft.Maui.Platform.WrapperView
Microsoft.Maui.Platform.WrapperView.Border.get -> Microsoft.Maui.IBorderStroke?
Microsoft.Maui.Platform.WrapperView.Border.set -> void
Microsoft.Maui.Platform.WrapperView.Child.get -> Microsoft.UI.Xaml.FrameworkElement?
Microsoft.Maui.Platform.WrapperView.Clip.get -> Microsoft.Maui.Graphics.IShape?
Microsoft.Maui.Platform.WrapperView.Clip.set -> void
Microsoft.Maui.Platform.WrapperView.Dispose() -> void
Microsoft.Maui.Platform.WrapperView.Shadow.get -> Microsoft.Maui.IShadow?
Microsoft.Maui.Platform.WrapperView.Shadow.set -> void
Microsoft.Maui.Platform.WrapperView.WrapperView() -> void
Microsoft.Maui.PortHandlerAttribute
Microsoft.Maui.PortHandlerAttribute.Description.get -> string?
Microsoft.Maui.PortHandlerAttribute.Description.set -> void
Microsoft.Maui.PortHandlerAttribute.PortHandlerAttribute() -> void
Microsoft.Maui.PortHandlerAttribute.PortHandlerAttribute(string! description) -> void
Microsoft.Maui.Primitives.Dimension
Microsoft.Maui.Primitives.LayoutAlignment
Microsoft.Maui.Primitives.LayoutAlignment.Center = 2 -> Microsoft.Maui.Primitives.LayoutAlignment
Microsoft.Maui.Primitives.LayoutAlignment.End = 3 -> Microsoft.Maui.Primitives.LayoutAlignment
Microsoft.Maui.Primitives.LayoutAlignment.Fill = 0 -> Microsoft.Maui.Primitives.LayoutAlignment
Microsoft.Maui.Primitives.LayoutAlignment.Start = 1 -> Microsoft.Maui.Primitives.LayoutAlignment
Microsoft.Maui.PropertyMapper
Microsoft.Maui.PropertyMapper.Chained.get -> Microsoft.Maui.IPropertyMapper![]?
Microsoft.Maui.PropertyMapper.Chained.set -> void
Microsoft.Maui.PropertyMapper.PropertyMapper() -> void
Microsoft.Maui.PropertyMapper.PropertyMapper(params Microsoft.Maui.IPropertyMapper![]? chained) -> void
Microsoft.Maui.PropertyMapper.UpdateProperties(Microsoft.Maui.IElementHandler! viewHandler, Microsoft.Maui.IElement? virtualView) -> void
Microsoft.Maui.PropertyMapper.UpdateProperty(Microsoft.Maui.IElementHandler! viewHandler, Microsoft.Maui.IElement? virtualView, string! property) -> void
Microsoft.Maui.PropertyMapper<TVirtualView, TViewHandler>
Microsoft.Maui.PropertyMapper<TVirtualView, TViewHandler>.Add(string! key, System.Action<TViewHandler, TVirtualView>! action) -> void
Microsoft.Maui.PropertyMapper<TVirtualView, TViewHandler>.PropertyMapper() -> void
Microsoft.Maui.PropertyMapper<TVirtualView, TViewHandler>.PropertyMapper(params Microsoft.Maui.IPropertyMapper![]! chained) -> void
Microsoft.Maui.PropertyMapper<TVirtualView, TViewHandler>.this[string! key].get -> System.Action<TViewHandler, TVirtualView>!
Microsoft.Maui.PropertyMapper<TVirtualView, TViewHandler>.this[string! key].set -> void
Microsoft.Maui.PropertyMapper<TVirtualView>
Microsoft.Maui.PropertyMapper<TVirtualView>.PropertyMapper() -> void
Microsoft.Maui.PropertyMapper<TVirtualView>.PropertyMapper(params Microsoft.Maui.PropertyMapper![]! chained) -> void
Microsoft.Maui.PropertyMapperExtensions
Microsoft.Maui.RectangleAdorner
Microsoft.Maui.RectangleAdorner.Density.get -> float
Microsoft.Maui.RectangleAdorner.DrawnRectangle.get -> Microsoft.Maui.Graphics.Rect
Microsoft.Maui.RectangleAdorner.FillColor.get -> Microsoft.Maui.Graphics.Color!
Microsoft.Maui.RectangleAdorner.Offset.get -> Microsoft.Maui.Graphics.Point
Microsoft.Maui.RectangleAdorner.RectangleAdorner(Microsoft.Maui.IView! view, float density = 1, Microsoft.Maui.Graphics.Point? offset = null, Microsoft.Maui.Graphics.Color? fillColor = null, Microsoft.Maui.Graphics.Color? strokeColor = null) -> void
Microsoft.Maui.RectangleAdorner.StrokeColor.get -> Microsoft.Maui.Graphics.Color!
Microsoft.Maui.RectangleAdorner.VisualView.get -> Microsoft.Maui.IView!
Microsoft.Maui.RectangleGridAdorner
Microsoft.Maui.RectangleGridAdorner.RectangleGridAdorner(Microsoft.Maui.IView! view, float density = 1, Microsoft.Maui.Graphics.Point? offset = null, Microsoft.Maui.Graphics.Color? fillColor = null, Microsoft.Maui.Graphics.Color? strokeColor = null) -> void
Microsoft.Maui.RetrievePlatformValueRequest<T>
Microsoft.Maui.RetrievePlatformValueRequest<T>.Result.get -> T
Microsoft.Maui.RetrievePlatformValueRequest<T>.RetrievePlatformValueRequest() -> void
Microsoft.Maui.RetrievePlatformValueRequest<T>.SetResult(T result) -> void
Microsoft.Maui.RetrievePlatformValueRequest<T>.TrySetResult(T result) -> bool
Microsoft.Maui.ReturnType
Microsoft.Maui.ReturnType.Default = 0 -> Microsoft.Maui.ReturnType
Microsoft.Maui.ReturnType.Done = 1 -> Microsoft.Maui.ReturnType
Microsoft.Maui.ReturnType.Go = 2 -> Microsoft.Maui.ReturnType
Microsoft.Maui.ReturnType.Next = 3 -> Microsoft.Maui.ReturnType
Microsoft.Maui.ReturnType.Search = 4 -> Microsoft.Maui.ReturnType
Microsoft.Maui.ReturnType.Send = 5 -> Microsoft.Maui.ReturnType
Microsoft.Maui.ScrollBarVisibility
Microsoft.Maui.ScrollBarVisibility.Always = 1 -> Microsoft.Maui.ScrollBarVisibility
Microsoft.Maui.ScrollBarVisibility.Default = 0 -> Microsoft.Maui.ScrollBarVisibility
Microsoft.Maui.ScrollBarVisibility.Never = 2 -> Microsoft.Maui.ScrollBarVisibility
Microsoft.Maui.ScrollOrientation
Microsoft.Maui.ScrollOrientation.Both = 2 -> Microsoft.Maui.ScrollOrientation
Microsoft.Maui.ScrollOrientation.Horizontal = 1 -> Microsoft.Maui.ScrollOrientation
Microsoft.Maui.ScrollOrientation.Neither = 3 -> Microsoft.Maui.ScrollOrientation
Microsoft.Maui.ScrollOrientation.Vertical = 0 -> Microsoft.Maui.ScrollOrientation
Microsoft.Maui.ScrollToRequest
Microsoft.Maui.ScrollToRequest.HorizontalOffset.get -> double
Microsoft.Maui.ScrollToRequest.HorizontalOffset.init -> void
Microsoft.Maui.ScrollToRequest.Instant.get -> bool
Microsoft.Maui.ScrollToRequest.Instant.init -> void
Microsoft.Maui.ScrollToRequest.ScrollToRequest(double HorizontalOffset, double VerticalOffset, bool Instant) -> void
Microsoft.Maui.ScrollToRequest.VerticalOffset.get -> double
Microsoft.Maui.ScrollToRequest.VerticalOffset.init -> void
Microsoft.Maui.SemanticExtensions
Microsoft.Maui.SemanticHeadingLevel
Microsoft.Maui.SemanticHeadingLevel.Level1 = 1 -> Microsoft.Maui.SemanticHeadingLevel
Microsoft.Maui.SemanticHeadingLevel.Level2 = 2 -> Microsoft.Maui.SemanticHeadingLevel
Microsoft.Maui.SemanticHeadingLevel.Level3 = 3 -> Microsoft.Maui.SemanticHeadingLevel
Microsoft.Maui.SemanticHeadingLevel.Level4 = 4 -> Microsoft.Maui.SemanticHeadingLevel
Microsoft.Maui.SemanticHeadingLevel.Level5 = 5 -> Microsoft.Maui.SemanticHeadingLevel
Microsoft.Maui.SemanticHeadingLevel.Level6 = 6 -> Microsoft.Maui.SemanticHeadingLevel
Microsoft.Maui.SemanticHeadingLevel.Level7 = 7 -> Microsoft.Maui.SemanticHeadingLevel
Microsoft.Maui.SemanticHeadingLevel.Level8 = 8 -> Microsoft.Maui.SemanticHeadingLevel
Microsoft.Maui.SemanticHeadingLevel.Level9 = 9 -> Microsoft.Maui.SemanticHeadingLevel
Microsoft.Maui.SemanticHeadingLevel.None = 0 -> Microsoft.Maui.SemanticHeadingLevel
Microsoft.Maui.Semantics
Microsoft.Maui.Semantics.Description.get -> string?
Microsoft.Maui.Semantics.Description.set -> void
Microsoft.Maui.Semantics.HeadingLevel.get -> Microsoft.Maui.SemanticHeadingLevel
Microsoft.Maui.Semantics.HeadingLevel.set -> void
Microsoft.Maui.Semantics.Hint.get -> string?
Microsoft.Maui.Semantics.Hint.set -> void
Microsoft.Maui.Semantics.IsHeading.get -> bool
Microsoft.Maui.Semantics.Semantics() -> void
Microsoft.Maui.SizeRequest
Microsoft.Maui.SizeRequest.Equals(Microsoft.Maui.SizeRequest other) -> bool
Microsoft.Maui.SizeRequest.Minimum.get -> Microsoft.Maui.Graphics.Size
Microsoft.Maui.SizeRequest.Minimum.set -> void
Microsoft.Maui.SizeRequest.Request.get -> Microsoft.Maui.Graphics.Size
Microsoft.Maui.SizeRequest.Request.set -> void
Microsoft.Maui.SizeRequest.SizeRequest() -> void
Microsoft.Maui.SizeRequest.SizeRequest(Microsoft.Maui.Graphics.Size request, Microsoft.Maui.Graphics.Size minimum) -> void
Microsoft.Maui.SizeRequest.SizeRequest(Microsoft.Maui.Graphics.Size request) -> void
Microsoft.Maui.SoftInputExtensions
Microsoft.Maui.SourceInfo
Microsoft.Maui.SourceInfo.Deconstruct(out System.Uri! sourceUri, out int lineNumber, out int linePosition) -> void
Microsoft.Maui.SourceInfo.LineNumber.get -> int
Microsoft.Maui.SourceInfo.LinePosition.get -> int
Microsoft.Maui.SourceInfo.SourceInfo(System.Uri! sourceUri, int lineNumber, int linePosition) -> void
Microsoft.Maui.SourceInfo.SourceUri.get -> System.Uri!
Microsoft.Maui.StreamImageSourceService
Microsoft.Maui.StreamImageSourceService.GetImageSourceAsync(Microsoft.Maui.IStreamImageSource! imageSource, float scale = 1, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<Microsoft.Maui.IImageSourceServiceResult<Microsoft.UI.Xaml.Media.ImageSource!>?>!
Microsoft.Maui.StreamImageSourceService.StreamImageSourceService() -> void
Microsoft.Maui.StreamImageSourceService.StreamImageSourceService(Microsoft.Extensions.Logging.ILogger<Microsoft.Maui.StreamImageSourceService!>? logger = null) -> void
Microsoft.Maui.SwipeBehaviorOnInvoked
Microsoft.Maui.SwipeBehaviorOnInvoked.Auto = 0 -> Microsoft.Maui.SwipeBehaviorOnInvoked
Microsoft.Maui.SwipeBehaviorOnInvoked.Close = 1 -> Microsoft.Maui.SwipeBehaviorOnInvoked
Microsoft.Maui.SwipeBehaviorOnInvoked.RemainOpen = 2 -> Microsoft.Maui.SwipeBehaviorOnInvoked
Microsoft.Maui.SwipeDirection
Microsoft.Maui.SwipeDirection.Down = 8 -> Microsoft.Maui.SwipeDirection
Microsoft.Maui.SwipeDirection.Left = 2 -> Microsoft.Maui.SwipeDirection
Microsoft.Maui.SwipeDirection.Right = 1 -> Microsoft.Maui.SwipeDirection
Microsoft.Maui.SwipeDirection.Up = 4 -> Microsoft.Maui.SwipeDirection
Microsoft.Maui.SwipeMode
Microsoft.Maui.SwipeMode.Execute = 1 -> Microsoft.Maui.SwipeMode
Microsoft.Maui.SwipeMode.Reveal = 0 -> Microsoft.Maui.SwipeMode
Microsoft.Maui.SwipeTransitionMode
Microsoft.Maui.SwipeTransitionMode.Drag = 1 -> Microsoft.Maui.SwipeTransitionMode
Microsoft.Maui.SwipeTransitionMode.Reveal = 0 -> Microsoft.Maui.SwipeTransitionMode
Microsoft.Maui.SwipeViewCloseRequest
Microsoft.Maui.SwipeViewCloseRequest.Animated.get -> bool
Microsoft.Maui.SwipeViewCloseRequest.Animated.init -> void
Microsoft.Maui.SwipeViewCloseRequest.SwipeViewCloseRequest(bool Animated) -> void
Microsoft.Maui.SwipeViewOpenRequest
Microsoft.Maui.SwipeViewOpenRequest.Animated.get -> bool
Microsoft.Maui.SwipeViewOpenRequest.Animated.init -> void
Microsoft.Maui.SwipeViewOpenRequest.OpenSwipeItem.get -> Microsoft.Maui.OpenSwipeItem
Microsoft.Maui.SwipeViewOpenRequest.OpenSwipeItem.init -> void
Microsoft.Maui.SwipeViewOpenRequest.SwipeViewOpenRequest(Microsoft.Maui.OpenSwipeItem OpenSwipeItem, bool Animated) -> void
Microsoft.Maui.SwipeViewSwipeChanging
Microsoft.Maui.SwipeViewSwipeChanging.Offset.get -> double
Microsoft.Maui.SwipeViewSwipeChanging.Offset.init -> void
Microsoft.Maui.SwipeViewSwipeChanging.SwipeDirection.get -> Microsoft.Maui.SwipeDirection
Microsoft.Maui.SwipeViewSwipeChanging.SwipeDirection.init -> void
Microsoft.Maui.SwipeViewSwipeChanging.SwipeViewSwipeChanging(Microsoft.Maui.SwipeDirection SwipeDirection, double Offset) -> void
Microsoft.Maui.SwipeViewSwipeEnded
Microsoft.Maui.SwipeViewSwipeEnded.IsOpen.get -> bool
Microsoft.Maui.SwipeViewSwipeEnded.IsOpen.init -> void
Microsoft.Maui.SwipeViewSwipeEnded.SwipeDirection.get -> Microsoft.Maui.SwipeDirection
Microsoft.Maui.SwipeViewSwipeEnded.SwipeDirection.init -> void
Microsoft.Maui.SwipeViewSwipeEnded.SwipeViewSwipeEnded(Microsoft.Maui.SwipeDirection SwipeDirection, bool IsOpen) -> void
Microsoft.Maui.SwipeViewSwipeStarted
Microsoft.Maui.SwipeViewSwipeStarted.SwipeDirection.get -> Microsoft.Maui.SwipeDirection
Microsoft.Maui.SwipeViewSwipeStarted.SwipeDirection.init -> void
Microsoft.Maui.SwipeViewSwipeStarted.SwipeViewSwipeStarted(Microsoft.Maui.SwipeDirection SwipeDirection) -> void
Microsoft.Maui.TextAlignment
Microsoft.Maui.TextAlignment.Center = 1 -> Microsoft.Maui.TextAlignment
Microsoft.Maui.TextAlignment.End = 2 -> Microsoft.Maui.TextAlignment
Microsoft.Maui.TextAlignment.Start = 0 -> Microsoft.Maui.TextAlignment
Microsoft.Maui.TextDecorations
Microsoft.Maui.TextDecorations.None = 0 -> Microsoft.Maui.TextDecorations
Microsoft.Maui.TextDecorations.Strikethrough = 2 -> Microsoft.Maui.TextDecorations
Microsoft.Maui.TextDecorations.Underline = 1 -> Microsoft.Maui.TextDecorations
Microsoft.Maui.TextTransform
Microsoft.Maui.TextTransform.Default = 1 -> Microsoft.Maui.TextTransform
Microsoft.Maui.TextTransform.Lowercase = 2 -> Microsoft.Maui.TextTransform
Microsoft.Maui.TextTransform.None = 0 -> Microsoft.Maui.TextTransform
Microsoft.Maui.TextTransform.Uppercase = 3 -> Microsoft.Maui.TextTransform
Microsoft.Maui.TextType
Microsoft.Maui.TextType.Html = 1 -> Microsoft.Maui.TextType
Microsoft.Maui.TextType.Text = 0 -> Microsoft.Maui.TextType
Microsoft.Maui.Thickness
Microsoft.Maui.Thickness.Bottom.get -> double
Microsoft.Maui.Thickness.Bottom.set -> void
Microsoft.Maui.Thickness.Deconstruct(out double left, out double top, out double right, out double bottom) -> void
Microsoft.Maui.Thickness.HorizontalThickness.get -> double
Microsoft.Maui.Thickness.IsEmpty.get -> bool
Microsoft.Maui.Thickness.IsNaN.get -> bool
Microsoft.Maui.Thickness.Left.get -> double
Microsoft.Maui.Thickness.Left.set -> void
Microsoft.Maui.Thickness.Right.get -> double
Microsoft.Maui.Thickness.Right.set -> void
Microsoft.Maui.Thickness.Thickness() -> void
Microsoft.Maui.Thickness.Thickness(double horizontalSize, double verticalSize) -> void
Microsoft.Maui.Thickness.Thickness(double left, double top, double right, double bottom) -> void
Microsoft.Maui.Thickness.Thickness(double uniformSize) -> void
Microsoft.Maui.Thickness.Top.get -> double
Microsoft.Maui.Thickness.Top.set -> void
Microsoft.Maui.Thickness.VerticalThickness.get -> double
Microsoft.Maui.ToolTip
Microsoft.Maui.ToolTip.Content.get -> object?
Microsoft.Maui.ToolTip.Content.set -> void
Microsoft.Maui.ToolTip.ToolTip() -> void
Microsoft.Maui.UriImageSourceService
Microsoft.Maui.UriImageSourceService.GetImageSourceAsync(Microsoft.Maui.IUriImageSource! imageSource, float scale = 1, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<Microsoft.Maui.IImageSourceServiceResult<Microsoft.UI.Xaml.Media.ImageSource!>?>!
Microsoft.Maui.UriImageSourceService.UriImageSourceService() -> void
Microsoft.Maui.UriImageSourceService.UriImageSourceService(Microsoft.Extensions.Logging.ILogger<Microsoft.Maui.UriImageSourceService!>? logger = null) -> void
Microsoft.Maui.ViewExtensions
Microsoft.Maui.Visibility
Microsoft.Maui.Visibility.Collapsed = 2 -> Microsoft.Maui.Visibility
Microsoft.Maui.Visibility.Hidden = 1 -> Microsoft.Maui.Visibility
Microsoft.Maui.Visibility.Visible = 0 -> Microsoft.Maui.Visibility
Microsoft.Maui.VisualDiagnostics
Microsoft.Maui.VisualDiagnosticsOverlay
Microsoft.Maui.VisualDiagnosticsOverlay.AddAdorner(Microsoft.Maui.IAdorner! adorner, bool scrollToView = false) -> bool
Microsoft.Maui.VisualDiagnosticsOverlay.AddAdorner(Microsoft.Maui.IVisualTreeElement! visualElement, bool scrollToView = false) -> bool
Microsoft.Maui.VisualDiagnosticsOverlay.AddScrollableElementHandler(Microsoft.Maui.IScrollView! scrollBar) -> void
Microsoft.Maui.VisualDiagnosticsOverlay.AddScrollableElementHandlers() -> void
Microsoft.Maui.VisualDiagnosticsOverlay.EnableElementSelector.get -> bool
Microsoft.Maui.VisualDiagnosticsOverlay.EnableElementSelector.set -> void
Microsoft.Maui.VisualDiagnosticsOverlay.Offset.get -> Microsoft.Maui.Graphics.Point
Microsoft.Maui.VisualDiagnosticsOverlay.RemoveAdorner(Microsoft.Maui.IAdorner! adorner) -> bool
Microsoft.Maui.VisualDiagnosticsOverlay.RemoveAdorners() -> void
Microsoft.Maui.VisualDiagnosticsOverlay.RemoveAdorners(Microsoft.Maui.IVisualTreeElement! visualElement) -> bool
Microsoft.Maui.VisualDiagnosticsOverlay.RemoveScrollableElementHandler() -> void
Microsoft.Maui.VisualDiagnosticsOverlay.ScrollToElement.get -> bool
Microsoft.Maui.VisualDiagnosticsOverlay.ScrollToElement.set -> void
Microsoft.Maui.VisualDiagnosticsOverlay.ScrollToView(Microsoft.Maui.IVisualTreeElement! element) -> void
Microsoft.Maui.VisualDiagnosticsOverlay.ScrollViews.get -> System.Collections.Generic.IReadOnlyCollection<Microsoft.Maui.IScrollView!>!
Microsoft.Maui.VisualDiagnosticsOverlay.VisualDiagnosticsOverlay(Microsoft.Maui.IWindow! window) -> void
Microsoft.Maui.VisualTreeChangeEventArgs
Microsoft.Maui.VisualTreeChangeEventArgs.ChangeType.get -> Microsoft.Maui.VisualTreeChangeType
Microsoft.Maui.VisualTreeChangeEventArgs.Child.get -> object!
Microsoft.Maui.VisualTreeChangeEventArgs.ChildIndex.get -> int
Microsoft.Maui.VisualTreeChangeEventArgs.Parent.get -> object?
Microsoft.Maui.VisualTreeChangeEventArgs.VisualTreeChangeEventArgs(object? parent, object! child, int childIndex, Microsoft.Maui.VisualTreeChangeType changeType) -> void
Microsoft.Maui.VisualTreeChangeType
Microsoft.Maui.VisualTreeChangeType.Add = 0 -> Microsoft.Maui.VisualTreeChangeType
Microsoft.Maui.VisualTreeChangeType.Remove = 1 -> Microsoft.Maui.VisualTreeChangeType
Microsoft.Maui.VisualTreeElementExtensions
Microsoft.Maui.WeakEventManager
Microsoft.Maui.WeakEventManager.AddEventHandler(System.Delegate? handler, string! eventName = "") -> void
Microsoft.Maui.WeakEventManager.AddEventHandler<TEventArgs>(System.EventHandler<TEventArgs!>! handler, string! eventName = "") -> void
Microsoft.Maui.WeakEventManager.HandleEvent(object? sender, object? args, string! eventName) -> void
Microsoft.Maui.WeakEventManager.RemoveEventHandler(System.Delegate? handler, string! eventName = "") -> void
Microsoft.Maui.WeakEventManager.RemoveEventHandler<TEventArgs>(System.EventHandler<TEventArgs!>! handler, string! eventName = "") -> void
Microsoft.Maui.WeakEventManager.WeakEventManager() -> void
Microsoft.Maui.WebNavigationEvent
Microsoft.Maui.WebNavigationEvent.Back = 1 -> Microsoft.Maui.WebNavigationEvent
Microsoft.Maui.WebNavigationEvent.Forward = 2 -> Microsoft.Maui.WebNavigationEvent
Microsoft.Maui.WebNavigationEvent.NewPage = 3 -> Microsoft.Maui.WebNavigationEvent
Microsoft.Maui.WebNavigationEvent.Refresh = 4 -> Microsoft.Maui.WebNavigationEvent
Microsoft.Maui.WebNavigationResult
Microsoft.Maui.WebNavigationResult.Cancel = 2 -> Microsoft.Maui.WebNavigationResult
Microsoft.Maui.WebNavigationResult.Failure = 4 -> Microsoft.Maui.WebNavigationResult
Microsoft.Maui.WebNavigationResult.Success = 1 -> Microsoft.Maui.WebNavigationResult
Microsoft.Maui.WebNavigationResult.Timeout = 3 -> Microsoft.Maui.WebNavigationResult
Microsoft.Maui.WindowExtensions
Microsoft.Maui.WindowOverlay
Microsoft.Maui.WindowOverlay.Density.get -> float
Microsoft.Maui.WindowOverlay.DisableUITouchEventPassthrough.get -> bool
Microsoft.Maui.WindowOverlay.DisableUITouchEventPassthrough.set -> void
Microsoft.Maui.WindowOverlay.Draw(Microsoft.Maui.Graphics.ICanvas! canvas, Microsoft.Maui.Graphics.RectF dirtyRect) -> void
Microsoft.Maui.WindowOverlay.EnableDrawableTouchHandling.get -> bool
Microsoft.Maui.WindowOverlay.EnableDrawableTouchHandling.set -> void
Microsoft.Maui.WindowOverlay.GraphicsView.get -> Microsoft.UI.Xaml.FrameworkElement?
Microsoft.Maui.WindowOverlay.Invalidate() -> void
Microsoft.Maui.WindowOverlay.IsPlatformViewInitialized.get -> bool
Microsoft.Maui.WindowOverlay.IsVisible.get -> bool
Microsoft.Maui.WindowOverlay.IsVisible.set -> void
Microsoft.Maui.WindowOverlay.Tapped -> System.EventHandler<Microsoft.Maui.WindowOverlayTappedEventArgs!>?
Microsoft.Maui.WindowOverlay.Window.get -> Microsoft.Maui.IWindow!
Microsoft.Maui.WindowOverlay.WindowElements.get -> System.Collections.Generic.IReadOnlyCollection<Microsoft.Maui.IWindowOverlayElement!>!
Microsoft.Maui.WindowOverlay.WindowOverlay(Microsoft.Maui.IWindow! window) -> void
Microsoft.Maui.WindowOverlayTappedEventArgs
Microsoft.Maui.WindowOverlayTappedEventArgs.Point.get -> Microsoft.Maui.Graphics.Point
Microsoft.Maui.WindowOverlayTappedEventArgs.VisualTreeElements.get -> System.Collections.Generic.IList<Microsoft.Maui.IVisualTreeElement!>!
Microsoft.Maui.WindowOverlayTappedEventArgs.WindowOverlayElements.get -> System.Collections.Generic.IList<Microsoft.Maui.IWindowOverlayElement!>!
Microsoft.Maui.WindowOverlayTappedEventArgs.WindowOverlayTappedEventArgs(Microsoft.Maui.Graphics.Point point, System.Collections.Generic.IList<Microsoft.Maui.IVisualTreeElement!>! elements, System.Collections.Generic.IList<Microsoft.Maui.IWindowOverlayElement!>! overlayElements) -> void
override Microsoft.Maui.Animations.LerpingAnimation.Update(double percent) -> void
override Microsoft.Maui.Animations.PlatformTicker.Start() -> void
override Microsoft.Maui.Animations.PlatformTicker.Stop() -> void
override Microsoft.Maui.Converters.CornerRadiusTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext? context, System.Type! sourceType) -> bool
override Microsoft.Maui.Converters.CornerRadiusTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext? context, System.Type? destinationType) -> bool
override Microsoft.Maui.Converters.CornerRadiusTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext? context, System.Globalization.CultureInfo? culture, object? value) -> object!
override Microsoft.Maui.Converters.CornerRadiusTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext? context, System.Globalization.CultureInfo? culture, object? value, System.Type! destinationType) -> object!
override Microsoft.Maui.Converters.KeyboardTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext? context, System.Type! sourceType) -> bool
override Microsoft.Maui.Converters.KeyboardTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext? context, System.Type? destinationType) -> bool
override Microsoft.Maui.Converters.KeyboardTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext? context, System.Globalization.CultureInfo? culture, object? value) -> object!
override Microsoft.Maui.Converters.KeyboardTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext? context, System.Globalization.CultureInfo? culture, object? value, System.Type! destinationType) -> object!
override Microsoft.Maui.CornerRadius.Equals(object? obj) -> bool
override Microsoft.Maui.CornerRadius.GetHashCode() -> int
override Microsoft.Maui.FileImageSourceService.GetImageSourceAsync(Microsoft.Maui.IImageSource! imageSource, float scale = 1, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<Microsoft.Maui.IImageSourceServiceResult<Microsoft.UI.Xaml.Media.ImageSource!>?>!
override Microsoft.Maui.Font.Equals(object? obj) -> bool
override Microsoft.Maui.Font.GetHashCode() -> int
override Microsoft.Maui.Font.ToString() -> string!
override Microsoft.Maui.FontImageSourceService.GetImageSourceAsync(Microsoft.Maui.IImageSource! imageSource, float scale = 1, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<Microsoft.Maui.IImageSourceServiceResult<Microsoft.UI.Xaml.Media.ImageSource!>?>!
override Microsoft.Maui.GridLength.Equals(object? obj) -> bool
override Microsoft.Maui.GridLength.GetHashCode() -> int
override Microsoft.Maui.GridLength.ToString() -> string!
override Microsoft.Maui.Handlers.ActivityIndicatorHandler.CreatePlatformView() -> Microsoft.UI.Xaml.Controls.ProgressRing!
override Microsoft.Maui.Handlers.ActivityIndicatorHandler.NeedsContainer.get -> bool
override Microsoft.Maui.Handlers.ApplicationHandler.CreatePlatformElement() -> Microsoft.UI.Xaml.Application!
override Microsoft.Maui.Handlers.BorderHandler.CreatePlatformView() -> Microsoft.Maui.Platform.ContentPanel!
override Microsoft.Maui.Handlers.BorderHandler.SetVirtualView(Microsoft.Maui.IView! view) -> void
override Microsoft.Maui.Handlers.ButtonHandler.ConnectHandler(Microsoft.UI.Xaml.Controls.Button! platformView) -> void
override Microsoft.Maui.Handlers.ButtonHandler.CreatePlatformView() -> Microsoft.UI.Xaml.Controls.Button!
override Microsoft.Maui.Handlers.ButtonHandler.DisconnectHandler(Microsoft.UI.Xaml.Controls.Button! platformView) -> void
override Microsoft.Maui.Handlers.CheckBoxHandler.ConnectHandler(Microsoft.UI.Xaml.Controls.CheckBox! platformView) -> void
override Microsoft.Maui.Handlers.CheckBoxHandler.CreatePlatformView() -> Microsoft.UI.Xaml.Controls.CheckBox!
override Microsoft.Maui.Handlers.CheckBoxHandler.DisconnectHandler(Microsoft.UI.Xaml.Controls.CheckBox! platformView) -> void
override Microsoft.Maui.Handlers.ContentViewHandler.CreatePlatformView() -> Microsoft.Maui.Platform.ContentPanel!
override Microsoft.Maui.Handlers.ContentViewHandler.DisconnectHandler(Microsoft.Maui.Platform.ContentPanel! platformView) -> void
override Microsoft.Maui.Handlers.ContentViewHandler.SetVirtualView(Microsoft.Maui.IView! view) -> void
override Microsoft.Maui.Handlers.DatePickerHandler.ConnectHandler(Microsoft.UI.Xaml.Controls.CalendarDatePicker! platformView) -> void
override Microsoft.Maui.Handlers.DatePickerHandler.CreatePlatformView() -> Microsoft.UI.Xaml.Controls.CalendarDatePicker!
override Microsoft.Maui.Handlers.DatePickerHandler.DisconnectHandler(Microsoft.UI.Xaml.Controls.CalendarDatePicker! platformView) -> void
override Microsoft.Maui.Handlers.EditorHandler.ConnectHandler(Microsoft.UI.Xaml.Controls.TextBox! platformView) -> void
override Microsoft.Maui.Handlers.EditorHandler.CreatePlatformView() -> Microsoft.UI.Xaml.Controls.TextBox!
override Microsoft.Maui.Handlers.EditorHandler.DisconnectHandler(Microsoft.UI.Xaml.Controls.TextBox! platformView) -> void
override Microsoft.Maui.Handlers.EditorHandler.SetVirtualView(Microsoft.Maui.IView! view) -> void
override Microsoft.Maui.Handlers.EntryHandler.ConnectHandler(Microsoft.UI.Xaml.Controls.TextBox! platformView) -> void
override Microsoft.Maui.Handlers.EntryHandler.CreatePlatformView() -> Microsoft.UI.Xaml.Controls.TextBox!
override Microsoft.Maui.Handlers.EntryHandler.DisconnectHandler(Microsoft.UI.Xaml.Controls.TextBox! platformView) -> void
override Microsoft.Maui.Handlers.EntryHandler.SetVirtualView(Microsoft.Maui.IView! view) -> void
override Microsoft.Maui.Handlers.FlyoutViewHandler.ConnectHandler(Microsoft.Maui.Platform.RootNavigationView! platformView) -> void
override Microsoft.Maui.Handlers.FlyoutViewHandler.CreatePlatformView() -> Microsoft.Maui.Platform.RootNavigationView!
override Microsoft.Maui.Handlers.FlyoutViewHandler.DisconnectHandler(Microsoft.Maui.Platform.RootNavigationView! platformView) -> void
override Microsoft.Maui.Handlers.GraphicsViewHandler.ConnectHandler(Microsoft.Maui.Platform.PlatformTouchGraphicsView! platformView) -> void
override Microsoft.Maui.Handlers.GraphicsViewHandler.CreatePlatformView() -> Microsoft.Maui.Platform.PlatformTouchGraphicsView!
override Microsoft.Maui.Handlers.GraphicsViewHandler.DisconnectHandler(Microsoft.Maui.Platform.PlatformTouchGraphicsView! platformView) -> void
override Microsoft.Maui.Handlers.ImageButtonHandler.ConnectHandler(Microsoft.UI.Xaml.Controls.Button! platformView) -> void
override Microsoft.Maui.Handlers.ImageButtonHandler.CreatePlatformView() -> Microsoft.UI.Xaml.Controls.Button!
override Microsoft.Maui.Handlers.ImageButtonHandler.DisconnectHandler(Microsoft.UI.Xaml.Controls.Button! platformView) -> void
override Microsoft.Maui.Handlers.ImageHandler.ConnectHandler(Microsoft.UI.Xaml.Controls.Image! platformView) -> void
override Microsoft.Maui.Handlers.ImageHandler.CreatePlatformView() -> Microsoft.UI.Xaml.Controls.Image!
override Microsoft.Maui.Handlers.ImageHandler.DisconnectHandler(Microsoft.UI.Xaml.Controls.Image! platformView) -> void
override Microsoft.Maui.Handlers.ImageHandler.NeedsContainer.get -> bool
override Microsoft.Maui.Handlers.ImageHandler.RemoveContainer() -> void
override Microsoft.Maui.Handlers.ImageHandler.SetupContainer() -> void
override Microsoft.Maui.Handlers.IndicatorViewHandler.ConnectHandler(Microsoft.Maui.Platform.MauiPageControl! platformView) -> void
override Microsoft.Maui.Handlers.IndicatorViewHandler.CreatePlatformView() -> Microsoft.Maui.Platform.MauiPageControl!
override Microsoft.Maui.Handlers.LabelHandler.CreatePlatformView() -> Microsoft.UI.Xaml.Controls.TextBlock!
override Microsoft.Maui.Handlers.LabelHandler.NeedsContainer.get -> bool
override Microsoft.Maui.Handlers.LabelHandler.RemoveContainer() -> void
override Microsoft.Maui.Handlers.LabelHandler.SetupContainer() -> void
override Microsoft.Maui.Handlers.LayoutHandler.CreatePlatformView() -> Microsoft.Maui.Platform.LayoutPanel!
override Microsoft.Maui.Handlers.LayoutHandler.DisconnectHandler(Microsoft.Maui.Platform.LayoutPanel! platformView) -> void
override Microsoft.Maui.Handlers.LayoutHandler.SetVirtualView(Microsoft.Maui.IView! view) -> void
override Microsoft.Maui.Handlers.MenuBarHandler.CreatePlatformElement() -> Microsoft.UI.Xaml.Controls.MenuBar!
override Microsoft.Maui.Handlers.MenuBarHandler.SetVirtualView(Microsoft.Maui.IElement! view) -> void
override Microsoft.Maui.Handlers.MenuBarItemHandler.CreatePlatformElement() -> Microsoft.UI.Xaml.Controls.MenuBarItem!
override Microsoft.Maui.Handlers.MenuBarItemHandler.SetVirtualView(Microsoft.Maui.IElement! view) -> void
override Microsoft.Maui.Handlers.MenuFlyoutHandler.CreatePlatformElement() -> Microsoft.UI.Xaml.Controls.MenuFlyout!
override Microsoft.Maui.Handlers.MenuFlyoutHandler.DisconnectHandler(Microsoft.UI.Xaml.Controls.MenuFlyout! platformView) -> void
override Microsoft.Maui.Handlers.MenuFlyoutHandler.SetVirtualView(Microsoft.Maui.IElement! view) -> void
override Microsoft.Maui.Handlers.MenuFlyoutItemHandler.ConnectHandler(Microsoft.UI.Xaml.Controls.MenuFlyoutItem! PlatformView) -> void
override Microsoft.Maui.Handlers.MenuFlyoutItemHandler.CreatePlatformElement() -> Microsoft.UI.Xaml.Controls.MenuFlyoutItem!
override Microsoft.Maui.Handlers.MenuFlyoutItemHandler.DisconnectHandler(Microsoft.UI.Xaml.Controls.MenuFlyoutItem! PlatformView) -> void
override Microsoft.Maui.Handlers.MenuFlyoutSeparatorHandler.CreatePlatformElement() -> Microsoft.UI.Xaml.Controls.MenuFlyoutSeparator!
override Microsoft.Maui.Handlers.MenuFlyoutSubItemHandler.ConnectHandler(Microsoft.UI.Xaml.Controls.MenuFlyoutSubItem! PlatformView) -> void
override Microsoft.Maui.Handlers.MenuFlyoutSubItemHandler.CreatePlatformElement() -> Microsoft.UI.Xaml.Controls.MenuFlyoutSubItem!
override Microsoft.Maui.Handlers.MenuFlyoutSubItemHandler.DisconnectHandler(Microsoft.UI.Xaml.Controls.MenuFlyoutSubItem! PlatformView) -> void
override Microsoft.Maui.Handlers.MenuFlyoutSubItemHandler.SetVirtualView(Microsoft.Maui.IElement! view) -> void
override Microsoft.Maui.Handlers.NavigationViewHandler.ConnectHandler(Microsoft.UI.Xaml.Controls.Frame! platformView) -> void
override Microsoft.Maui.Handlers.NavigationViewHandler.CreatePlatformView() -> Microsoft.UI.Xaml.Controls.Frame!
override Microsoft.Maui.Handlers.NavigationViewHandler.DisconnectHandler(Microsoft.UI.Xaml.Controls.Frame! platformView) -> void
override Microsoft.Maui.Handlers.PickerHandler.ConnectHandler(Microsoft.UI.Xaml.Controls.ComboBox! platformView) -> void
override Microsoft.Maui.Handlers.PickerHandler.CreatePlatformView() -> Microsoft.UI.Xaml.Controls.ComboBox!
override Microsoft.Maui.Handlers.PickerHandler.DisconnectHandler(Microsoft.UI.Xaml.Controls.ComboBox! platformView) -> void
override Microsoft.Maui.Handlers.ProgressBarHandler.CreatePlatformView() -> Microsoft.UI.Xaml.Controls.ProgressBar!
override Microsoft.Maui.Handlers.RadioButtonHandler.ConnectHandler(Microsoft.UI.Xaml.Controls.RadioButton! platformView) -> void
override Microsoft.Maui.Handlers.RadioButtonHandler.CreatePlatformView() -> Microsoft.UI.Xaml.Controls.RadioButton!
override Microsoft.Maui.Handlers.RadioButtonHandler.DisconnectHandler(Microsoft.UI.Xaml.Controls.RadioButton! platformView) -> void
override Microsoft.Maui.Handlers.RefreshViewHandler.ConnectHandler(Microsoft.UI.Xaml.Controls.RefreshContainer! nativeView) -> void
override Microsoft.Maui.Handlers.RefreshViewHandler.CreatePlatformView() -> Microsoft.UI.Xaml.Controls.RefreshContainer!
override Microsoft.Maui.Handlers.RefreshViewHandler.DisconnectHandler(Microsoft.UI.Xaml.Controls.RefreshContainer! nativeView) -> void
override Microsoft.Maui.Handlers.ScrollViewHandler.ConnectHandler(Microsoft.UI.Xaml.Controls.ScrollViewer! platformView) -> void
override Microsoft.Maui.Handlers.ScrollViewHandler.CreatePlatformView() -> Microsoft.UI.Xaml.Controls.ScrollViewer!
override Microsoft.Maui.Handlers.ScrollViewHandler.DisconnectHandler(Microsoft.UI.Xaml.Controls.ScrollViewer! platformView) -> void
override Microsoft.Maui.Handlers.SearchBarHandler.ConnectHandler(Microsoft.UI.Xaml.Controls.AutoSuggestBox! platformView) -> void
override Microsoft.Maui.Handlers.SearchBarHandler.CreatePlatformView() -> Microsoft.UI.Xaml.Controls.AutoSuggestBox!
override Microsoft.Maui.Handlers.SearchBarHandler.DisconnectHandler(Microsoft.UI.Xaml.Controls.AutoSuggestBox! platformView) -> void
override Microsoft.Maui.Handlers.ShapeViewHandler.CreatePlatformView() -> Microsoft.Maui.Graphics.Win2D.W2DGraphicsView!
override Microsoft.Maui.Handlers.ShapeViewHandler.NeedsContainer.get -> bool
override Microsoft.Maui.Handlers.SliderHandler.ConnectHandler(Microsoft.UI.Xaml.Controls.Slider! platformView) -> void
override Microsoft.Maui.Handlers.SliderHandler.CreatePlatformView() -> Microsoft.UI.Xaml.Controls.Slider!
override Microsoft.Maui.Handlers.SliderHandler.DisconnectHandler(Microsoft.UI.Xaml.Controls.Slider! platformView) -> void
override Microsoft.Maui.Handlers.SwipeItemMenuItemHandler.ConnectHandler(Microsoft.UI.Xaml.Controls.SwipeItem! platformView) -> void
override Microsoft.Maui.Handlers.SwipeItemMenuItemHandler.CreatePlatformElement() -> Microsoft.UI.Xaml.Controls.SwipeItem!
override Microsoft.Maui.Handlers.SwipeItemMenuItemHandler.DisconnectHandler(Microsoft.UI.Xaml.Controls.SwipeItem! platformView) -> void
override Microsoft.Maui.Handlers.SwipeItemViewHandler.CreatePlatformView() -> Microsoft.UI.Xaml.FrameworkElement!
override Microsoft.Maui.Handlers.SwipeViewHandler.ConnectHandler(Microsoft.UI.Xaml.Controls.SwipeControl! platformView) -> void
override Microsoft.Maui.Handlers.SwipeViewHandler.CreatePlatformView() -> Microsoft.UI.Xaml.Controls.SwipeControl!
override Microsoft.Maui.Handlers.SwipeViewHandler.DisconnectHandler(Microsoft.UI.Xaml.Controls.SwipeControl! platformView) -> void
override Microsoft.Maui.Handlers.SwipeViewHandler.SetVirtualView(Microsoft.Maui.IView! view) -> void
override Microsoft.Maui.Handlers.SwitchHandler.ConnectHandler(Microsoft.UI.Xaml.Controls.ToggleSwitch! platformView) -> void
override Microsoft.Maui.Handlers.SwitchHandler.CreatePlatformView() -> Microsoft.UI.Xaml.Controls.ToggleSwitch!
override Microsoft.Maui.Handlers.SwitchHandler.DisconnectHandler(Microsoft.UI.Xaml.Controls.ToggleSwitch! platformView) -> void
override Microsoft.Maui.Handlers.TabbedViewHandler.CreatePlatformView() -> Microsoft.UI.Xaml.FrameworkElement!
override Microsoft.Maui.Handlers.TimePickerHandler.ConnectHandler(Microsoft.UI.Xaml.Controls.TimePicker! platformView) -> void
override Microsoft.Maui.Handlers.TimePickerHandler.CreatePlatformView() -> Microsoft.UI.Xaml.Controls.TimePicker!
override Microsoft.Maui.Handlers.TimePickerHandler.DisconnectHandler(Microsoft.UI.Xaml.Controls.TimePicker! platformView) -> void
override Microsoft.Maui.Handlers.ToolbarHandler.CreatePlatformElement() -> Microsoft.Maui.Platform.MauiToolbar!
override Microsoft.Maui.Handlers.ViewHandler<TVirtualView, TPlatformView>.GetDesiredSize(double widthConstraint, double heightConstraint) -> Microsoft.Maui.Graphics.Size
override Microsoft.Maui.Handlers.ViewHandler<TVirtualView, TPlatformView>.PlatformArrange(Microsoft.Maui.Graphics.Rect rect) -> void
override Microsoft.Maui.Handlers.ViewHandler<TVirtualView, TPlatformView>.RemoveContainer() -> void
override Microsoft.Maui.Handlers.ViewHandler<TVirtualView, TPlatformView>.SetupContainer() -> void
override Microsoft.Maui.Handlers.WebViewHandler.ConnectHandler(Microsoft.UI.Xaml.Controls.WebView2! platformView) -> void
override Microsoft.Maui.Handlers.WebViewHandler.CreatePlatformView() -> Microsoft.UI.Xaml.Controls.WebView2!
override Microsoft.Maui.Handlers.WebViewHandler.DisconnectHandler(Microsoft.UI.Xaml.Controls.WebView2! platformView) -> void
override Microsoft.Maui.Handlers.WindowHandler.ConnectHandler(Microsoft.UI.Xaml.Window! platformView) -> void
override Microsoft.Maui.Handlers.WindowHandler.CreatePlatformElement() -> Microsoft.UI.Xaml.Window!
override Microsoft.Maui.Handlers.WindowHandler.DisconnectHandler(Microsoft.UI.Xaml.Window! platformView) -> void
override Microsoft.Maui.Layouts.AbsoluteLayoutManager.ArrangeChildren(Microsoft.Maui.Graphics.Rect bounds) -> Microsoft.Maui.Graphics.Size
override Microsoft.Maui.Layouts.AbsoluteLayoutManager.Measure(double widthConstraint, double heightConstraint) -> Microsoft.Maui.Graphics.Size
override Microsoft.Maui.Layouts.FlexBasis.Equals(object? obj) -> bool
override Microsoft.Maui.Layouts.FlexBasis.GetHashCode() -> int
override Microsoft.Maui.Layouts.GridLayoutManager.ArrangeChildren(Microsoft.Maui.Graphics.Rect bounds) -> Microsoft.Maui.Graphics.Size
override Microsoft.Maui.Layouts.GridLayoutManager.Measure(double widthConstraint, double heightConstraint) -> Microsoft.Maui.Graphics.Size
override Microsoft.Maui.Layouts.HorizontalStackLayoutManager.ArrangeChildren(Microsoft.Maui.Graphics.Rect bounds) -> Microsoft.Maui.Graphics.Size
override Microsoft.Maui.Layouts.HorizontalStackLayoutManager.Measure(double widthConstraint, double heightConstraint) -> Microsoft.Maui.Graphics.Size
override Microsoft.Maui.Layouts.VerticalStackLayoutManager.ArrangeChildren(Microsoft.Maui.Graphics.Rect bounds) -> Microsoft.Maui.Graphics.Size
override Microsoft.Maui.Layouts.VerticalStackLayoutManager.Measure(double widthConstraint, double heightConstraint) -> Microsoft.Maui.Graphics.Size
override Microsoft.Maui.MauiWinUIApplication.OnLaunched(Microsoft.UI.Xaml.LaunchActivatedEventArgs! args) -> void
override Microsoft.Maui.Platform.ContentPanel.ArrangeOverride(Windows.Foundation.Size finalSize) -> Windows.Foundation.Size
override Microsoft.Maui.Platform.LayoutPanel.ArrangeOverride(Windows.Foundation.Size finalSize) -> Windows.Foundation.Size
override Microsoft.Maui.Platform.MauiButton.OnCreateAutomationPeer() -> Microsoft.UI.Xaml.Automation.Peers.AutomationPeer!
override Microsoft.Maui.Platform.MauiButtonAutomationPeer.GetChildrenCore() -> System.Collections.Generic.IList<Microsoft.UI.Xaml.Automation.Peers.AutomationPeer!>?
override Microsoft.Maui.Platform.MauiButtonAutomationPeer.GetLabeledByCore() -> Microsoft.UI.Xaml.Automation.Peers.AutomationPeer?
override Microsoft.Maui.Platform.MauiCancelButton.OnApplyTemplate() -> void
override Microsoft.Maui.Platform.MauiNavigationView.OnApplyTemplate() -> void
override Microsoft.Maui.Platform.MauiPanel.ArrangeOverride(Windows.Foundation.Size finalSize) -> Windows.Foundation.Size
override Microsoft.Maui.Platform.MauiPanel.MeasureOverride(Windows.Foundation.Size availableSize) -> Windows.Foundation.Size
override Microsoft.Maui.Platform.MauiPasswordTextBox.OnKeyDown(Microsoft.UI.Xaml.Input.KeyRoutedEventArgs! e) -> void
override Microsoft.Maui.Platform.MauiStepper.OnApplyTemplate() -> void
override Microsoft.Maui.Platform.PlatformTouchGraphicsView.OnPointerCanceled(Microsoft.UI.Xaml.Input.PointerRoutedEventArgs! e) -> void
override Microsoft.Maui.Platform.PlatformTouchGraphicsView.OnPointerEntered(Microsoft.UI.Xaml.Input.PointerRoutedEventArgs! e) -> void
override Microsoft.Maui.Platform.PlatformTouchGraphicsView.OnPointerExited(Microsoft.UI.Xaml.Input.PointerRoutedEventArgs! e) -> void
override Microsoft.Maui.Platform.PlatformTouchGraphicsView.OnPointerMoved(Microsoft.UI.Xaml.Input.PointerRoutedEventArgs! e) -> void
override Microsoft.Maui.Platform.PlatformTouchGraphicsView.OnPointerPressed(Microsoft.UI.Xaml.Input.PointerRoutedEventArgs! e) -> void
override Microsoft.Maui.Platform.PlatformTouchGraphicsView.OnPointerReleased(Microsoft.UI.Xaml.Input.PointerRoutedEventArgs! e) -> void
override Microsoft.Maui.Platform.RootPanel.ArrangeOverride(Windows.Foundation.Size finalSize) -> Windows.Foundation.Size
override Microsoft.Maui.Platform.RootPanel.MeasureOverride(Windows.Foundation.Size availableSize) -> Windows.Foundation.Size
override Microsoft.Maui.Platform.WindowRootView.OnApplyTemplate() -> void
override Microsoft.Maui.Platform.WindowRootView.OnContentChanged(object! oldContent, object! newContent) -> void
override Microsoft.Maui.RectangleGridAdorner.Draw(Microsoft.Maui.Graphics.ICanvas! canvas, Microsoft.Maui.Graphics.RectF dirtyRect) -> void
override Microsoft.Maui.Semantics.ToString() -> string!
override Microsoft.Maui.SizeRequest.Equals(object? obj) -> bool
override Microsoft.Maui.SizeRequest.GetHashCode() -> int
override Microsoft.Maui.SizeRequest.ToString() -> string!
override Microsoft.Maui.StreamImageSourceService.GetImageSourceAsync(Microsoft.Maui.IImageSource! imageSource, float scale = 1, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<Microsoft.Maui.IImageSourceServiceResult<Microsoft.UI.Xaml.Media.ImageSource!>?>!
override Microsoft.Maui.Thickness.Equals(object? obj) -> bool
override Microsoft.Maui.Thickness.GetHashCode() -> int
override Microsoft.Maui.UriImageSourceService.GetImageSourceAsync(Microsoft.Maui.IImageSource! imageSource, float scale = 1, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<Microsoft.Maui.IImageSourceServiceResult<Microsoft.UI.Xaml.Media.ImageSource!>?>!
override Microsoft.Maui.VisualDiagnosticsOverlay.AddWindowElement(Microsoft.Maui.IWindowOverlayElement! drawable) -> bool
override Microsoft.Maui.VisualDiagnosticsOverlay.Deinitialize() -> bool
override Microsoft.Maui.VisualDiagnosticsOverlay.HandleUIChange() -> void
override Microsoft.Maui.VisualDiagnosticsOverlay.RemoveWindowElement(Microsoft.Maui.IWindowOverlayElement! drawable) -> bool
override Microsoft.Maui.VisualDiagnosticsOverlay.RemoveWindowElements() -> void
override sealed Microsoft.Maui.Handlers.ViewHandler<TVirtualView, TPlatformView>.SetVirtualView(Microsoft.Maui.IElement! view) -> void
readonly Microsoft.Maui.LockableObservableListWrapper._list -> System.Collections.ObjectModel.ObservableCollection<string!>!
readonly Microsoft.Maui.PropertyMapper._mapper -> System.Collections.Generic.Dictionary<string!, System.Action<Microsoft.Maui.IElementHandler!, Microsoft.Maui.IElement!>!>!
static Microsoft.Maui.Animations.AnimationLerpingExtensions.GenericLerp<T>(this T start, T end, double progress, double toggleThreshold = 0.5) -> T
static Microsoft.Maui.Animations.AnimationLerpingExtensions.Lerp(this double start, double end, double progress) -> double
static Microsoft.Maui.Animations.AnimationLerpingExtensions.Lerp(this float start, float end, double progress) -> float
static Microsoft.Maui.Animations.AnimationLerpingExtensions.Lerp(this float? start, float? end, double progress) -> float?
static Microsoft.Maui.Animations.AnimationLerpingExtensions.Lerp(this Microsoft.Maui.Graphics.Color! color, Microsoft.Maui.Graphics.Color! endColor, double progress) -> Microsoft.Maui.Graphics.Color!
static Microsoft.Maui.Animations.AnimationLerpingExtensions.Lerp(this Microsoft.Maui.Graphics.Point start, Microsoft.Maui.Graphics.Point end, double progress) -> Microsoft.Maui.Graphics.Point
static Microsoft.Maui.Animations.AnimationLerpingExtensions.Lerp(this Microsoft.Maui.Graphics.PointF start, Microsoft.Maui.Graphics.PointF end, double progress) -> Microsoft.Maui.Graphics.PointF
static Microsoft.Maui.Animations.AnimationLerpingExtensions.Lerp(this Microsoft.Maui.Graphics.Rect start, Microsoft.Maui.Graphics.Rect end, double progress) -> Microsoft.Maui.Graphics.Rect
static Microsoft.Maui.Animations.AnimationLerpingExtensions.Lerp(this Microsoft.Maui.Graphics.RectF start, Microsoft.Maui.Graphics.RectF end, double progress) -> Microsoft.Maui.Graphics.RectF
static Microsoft.Maui.Animations.AnimationLerpingExtensions.Lerp(this Microsoft.Maui.Graphics.Size start, Microsoft.Maui.Graphics.Size end, double progress) -> Microsoft.Maui.Graphics.Size
static Microsoft.Maui.Animations.AnimationLerpingExtensions.Lerp(this Microsoft.Maui.Graphics.SizeF start, Microsoft.Maui.Graphics.SizeF end, double progress) -> Microsoft.Maui.Graphics.SizeF
static Microsoft.Maui.Animations.AnimationLerpingExtensions.Lerp(this Microsoft.Maui.Graphics.SolidPaint! paint, Microsoft.Maui.Graphics.SolidPaint! endPaint, double progress) -> Microsoft.Maui.Graphics.SolidPaint!
static Microsoft.Maui.Animations.AnimationLerpingExtensions.Lerp(this Microsoft.Maui.Thickness start, Microsoft.Maui.Thickness end, double progress) -> Microsoft.Maui.Thickness
static Microsoft.Maui.Animations.Lerp.GetLerp(System.Type! type) -> Microsoft.Maui.Animations.Lerp?
static Microsoft.Maui.CommandMapperExtensions.AppendToMapping<TVirtualView, TViewHandler>(this Microsoft.Maui.CommandMapper<TVirtualView, TViewHandler>! commandMapper, string! key, System.Action<TViewHandler, TVirtualView, object?>! method) -> void
static Microsoft.Maui.CommandMapperExtensions.AppendToMapping<TVirtualView, TViewHandler>(this Microsoft.Maui.ICommandMapper<Microsoft.Maui.IElement!, Microsoft.Maui.IElementHandler!>! commandMapper, string! key, System.Action<TViewHandler, TVirtualView, object?>! method) -> void
static Microsoft.Maui.CommandMapperExtensions.AppendToMapping<TVirtualView, TViewHandler>(this Microsoft.Maui.ICommandMapper<TVirtualView, TViewHandler>! commandMapper, string! key, System.Action<TViewHandler, TVirtualView, object?>! method) -> void
static Microsoft.Maui.CommandMapperExtensions.ModifyMapping<TVirtualView, TViewHandler>(this Microsoft.Maui.CommandMapper<TVirtualView, TViewHandler>! commandMapper, string! key, System.Action<TViewHandler, TVirtualView, object?, System.Action<Microsoft.Maui.IElementHandler!, Microsoft.Maui.IElement!, object?>?>! method) -> void
static Microsoft.Maui.CommandMapperExtensions.ModifyMapping<TVirtualView, TViewHandler>(this Microsoft.Maui.ICommandMapper<Microsoft.Maui.IElement!, Microsoft.Maui.IElementHandler!>! commandMapper, string! key, System.Action<TViewHandler, TVirtualView, object?, System.Action<Microsoft.Maui.IElementHandler!, Microsoft.Maui.IElement!, object?>?>! method) -> void
static Microsoft.Maui.CommandMapperExtensions.ModifyMapping<TVirtualView, TViewHandler>(this Microsoft.Maui.ICommandMapper<TVirtualView, TViewHandler>! commandMapper, string! key, System.Action<TViewHandler, TVirtualView, object?, System.Action<Microsoft.Maui.IElementHandler!, Microsoft.Maui.IElement!, object?>?>! method) -> void
static Microsoft.Maui.CommandMapperExtensions.PrependToMapping<TVirtualView, TViewHandler>(this Microsoft.Maui.CommandMapper<TVirtualView, TViewHandler>! commandMapper, string! key, System.Action<TViewHandler, TVirtualView, object?>! method) -> void
static Microsoft.Maui.CommandMapperExtensions.PrependToMapping<TVirtualView, TViewHandler>(this Microsoft.Maui.ICommandMapper<Microsoft.Maui.IElement!, Microsoft.Maui.IElementHandler!>! commandMapper, string! key, System.Action<TViewHandler, TVirtualView, object?>! method) -> void
static Microsoft.Maui.CommandMapperExtensions.PrependToMapping<TVirtualView, TViewHandler>(this Microsoft.Maui.ICommandMapper<TVirtualView, TViewHandler>! commandMapper, string! key, System.Action<TViewHandler, TVirtualView, object?>! method) -> void
static Microsoft.Maui.CommandMapperExtensions.ReplaceMapping<TVirtualView, TViewHandler>(this Microsoft.Maui.ICommandMapper<Microsoft.Maui.IElement!, Microsoft.Maui.IElementHandler!>! commandMapper, string! key, System.Action<TViewHandler, TVirtualView, object?>! method) -> void
static Microsoft.Maui.CornerRadius.implicit operator Microsoft.Maui.CornerRadius(double uniformRadius) -> Microsoft.Maui.CornerRadius
static Microsoft.Maui.CornerRadius.operator !=(Microsoft.Maui.CornerRadius left, Microsoft.Maui.CornerRadius right) -> bool
static Microsoft.Maui.CornerRadius.operator ==(Microsoft.Maui.CornerRadius left, Microsoft.Maui.CornerRadius right) -> bool
static Microsoft.Maui.Crc64.ComputeHash(byte[]! input) -> byte[]!
static Microsoft.Maui.Crc64.ComputeHash(System.IO.Stream! inputStream) -> byte[]!
static Microsoft.Maui.Crc64.ComputeHashString(string! input) -> string!
static Microsoft.Maui.Dispatching.Dispatcher.GetForCurrentThread() -> Microsoft.Maui.Dispatching.IDispatcher?
static Microsoft.Maui.Dispatching.DispatcherExtensions.DispatchAsync(this Microsoft.Maui.Dispatching.IDispatcher! dispatcher, System.Action! action) -> System.Threading.Tasks.Task!
static Microsoft.Maui.Dispatching.DispatcherExtensions.DispatchAsync(this Microsoft.Maui.Dispatching.IDispatcher! dispatcher, System.Func<System.Threading.Tasks.Task!>! funcTask) -> System.Threading.Tasks.Task!
static Microsoft.Maui.Dispatching.DispatcherExtensions.DispatchAsync<T>(this Microsoft.Maui.Dispatching.IDispatcher! dispatcher, System.Func<System.Threading.Tasks.Task<T>!>! funcTask) -> System.Threading.Tasks.Task<T>!
static Microsoft.Maui.Dispatching.DispatcherExtensions.DispatchAsync<T>(this Microsoft.Maui.Dispatching.IDispatcher! dispatcher, System.Func<T>! func) -> System.Threading.Tasks.Task<T>!
static Microsoft.Maui.Dispatching.DispatcherExtensions.GetSynchronizationContextAsync(this Microsoft.Maui.Dispatching.IDispatcher! dispatcher) -> System.Threading.Tasks.Task<System.Threading.SynchronizationContext!>!
static Microsoft.Maui.Dispatching.DispatcherExtensions.StartTimer(this Microsoft.Maui.Dispatching.IDispatcher! dispatcher, System.TimeSpan interval, System.Func<bool>! callback) -> void
static Microsoft.Maui.Dispatching.DispatcherProvider.Current.get -> Microsoft.Maui.Dispatching.IDispatcherProvider!
static Microsoft.Maui.Dispatching.DispatcherProvider.SetCurrent(Microsoft.Maui.Dispatching.IDispatcherProvider? provider) -> bool
static Microsoft.Maui.Easing.Default.get -> Microsoft.Maui.Easing!
static Microsoft.Maui.Easing.implicit operator Microsoft.Maui.Easing!(System.Func<double, double>! func) -> Microsoft.Maui.Easing!
static Microsoft.Maui.Font.Default.get -> Microsoft.Maui.Font
static Microsoft.Maui.Font.OfSize(string? name, double size, Microsoft.Maui.FontWeight weight = Microsoft.Maui.FontWeight.Regular, Microsoft.Maui.FontSlant fontSlant = Microsoft.Maui.FontSlant.Default, bool enableScaling = true) -> Microsoft.Maui.Font
static Microsoft.Maui.Font.operator !=(Microsoft.Maui.Font left, Microsoft.Maui.Font right) -> bool
static Microsoft.Maui.Font.operator ==(Microsoft.Maui.Font left, Microsoft.Maui.Font right) -> bool
static Microsoft.Maui.Font.SystemFontOfSize(double size, Microsoft.Maui.FontWeight weight = Microsoft.Maui.FontWeight.Regular, Microsoft.Maui.FontSlant fontSlant = Microsoft.Maui.FontSlant.Default, bool enableScaling = true) -> Microsoft.Maui.Font
static Microsoft.Maui.Font.SystemFontOfWeight(Microsoft.Maui.FontWeight weight, Microsoft.Maui.FontSlant fontSlant = Microsoft.Maui.FontSlant.Default, bool enableScaling = true) -> Microsoft.Maui.Font
static Microsoft.Maui.FontFile.FromString(string! input) -> Microsoft.Maui.FontFile!
static Microsoft.Maui.Graphics.PaintExtensions.CreateBrush(this Microsoft.Maui.Graphics.ImagePaint! imagePaint) -> Microsoft.UI.Xaml.Media.Brush?
static Microsoft.Maui.Graphics.PaintExtensions.CreateBrush(this Microsoft.Maui.Graphics.LinearGradientPaint! linearGradientPaint) -> Microsoft.UI.Xaml.Media.Brush?
static Microsoft.Maui.Graphics.PaintExtensions.CreateBrush(this Microsoft.Maui.Graphics.PatternPaint! patternPaint) -> Microsoft.UI.Xaml.Media.Brush?
static Microsoft.Maui.Graphics.PaintExtensions.CreateBrush(this Microsoft.Maui.Graphics.RadialGradientPaint! radialGradientPaint) -> Microsoft.UI.Xaml.Media.Brush?
static Microsoft.Maui.Graphics.PaintExtensions.CreateBrush(this Microsoft.Maui.Graphics.SolidPaint! solidPaint) -> Microsoft.UI.Xaml.Media.Brush?
static Microsoft.Maui.Graphics.PaintExtensions.IsNullOrEmpty(this Microsoft.Maui.Graphics.Paint? paint) -> bool
static Microsoft.Maui.Graphics.PaintExtensions.ToColor(this Microsoft.Maui.Graphics.Paint? paint) -> Microsoft.Maui.Graphics.Color?
static Microsoft.Maui.Graphics.PaintExtensions.ToPlatform(this Microsoft.Maui.Graphics.Paint! paint) -> Microsoft.UI.Xaml.Media.Brush?
static Microsoft.Maui.GridLength.implicit operator Microsoft.Maui.GridLength(double absoluteValue) -> Microsoft.Maui.GridLength
static Microsoft.Maui.GridLength.operator !=(Microsoft.Maui.GridLength left, Microsoft.Maui.GridLength right) -> bool
static Microsoft.Maui.GridLength.operator ==(Microsoft.Maui.GridLength left, Microsoft.Maui.GridLength right) -> bool
static Microsoft.Maui.Handlers.ActivityIndicatorHandler.CommandMapper -> Microsoft.Maui.CommandMapper<Microsoft.Maui.IActivityIndicator!, Microsoft.Maui.Handlers.IActivityIndicatorHandler!>!
static Microsoft.Maui.Handlers.ActivityIndicatorHandler.MapBackground(Microsoft.Maui.Handlers.IActivityIndicatorHandler! handler, Microsoft.Maui.IActivityIndicator! activityIndicator) -> void
static Microsoft.Maui.Handlers.ActivityIndicatorHandler.MapColor(Microsoft.Maui.Handlers.IActivityIndicatorHandler! handler, Microsoft.Maui.IActivityIndicator! activityIndicator) -> void
static Microsoft.Maui.Handlers.ActivityIndicatorHandler.MapHeight(Microsoft.Maui.Handlers.IActivityIndicatorHandler! handler, Microsoft.Maui.IActivityIndicator! activityIndicator) -> void
static Microsoft.Maui.Handlers.ActivityIndicatorHandler.MapIsRunning(Microsoft.Maui.Handlers.IActivityIndicatorHandler! handler, Microsoft.Maui.IActivityIndicator! activityIndicator) -> void
static Microsoft.Maui.Handlers.ActivityIndicatorHandler.Mapper -> Microsoft.Maui.IPropertyMapper<Microsoft.Maui.IActivityIndicator!, Microsoft.Maui.Handlers.IActivityIndicatorHandler!>!
static Microsoft.Maui.Handlers.ActivityIndicatorHandler.MapWidth(Microsoft.Maui.Handlers.IActivityIndicatorHandler! handler, Microsoft.Maui.IActivityIndicator! activityIndicator) -> void
static Microsoft.Maui.Handlers.ApplicationHandler.CommandMapper -> Microsoft.Maui.CommandMapper<Microsoft.Maui.IApplication!, Microsoft.Maui.Handlers.ApplicationHandler!>!
static Microsoft.Maui.Handlers.ApplicationHandler.MapCloseWindow(Microsoft.Maui.Handlers.ApplicationHandler! handler, Microsoft.Maui.IApplication! application, object? args) -> void
static Microsoft.Maui.Handlers.ApplicationHandler.MapOpenWindow(Microsoft.Maui.Handlers.ApplicationHandler! handler, Microsoft.Maui.IApplication! application, object? args) -> void
static Microsoft.Maui.Handlers.ApplicationHandler.Mapper -> Microsoft.Maui.IPropertyMapper<Microsoft.Maui.IApplication!, Microsoft.Maui.Handlers.ApplicationHandler!>!
static Microsoft.Maui.Handlers.ApplicationHandler.MapTerminate(Microsoft.Maui.Handlers.ApplicationHandler! handler, Microsoft.Maui.IApplication! application, object? args) -> void
static Microsoft.Maui.Handlers.BorderHandler.CommandMapper -> Microsoft.Maui.CommandMapper<Microsoft.Maui.IBorderView!, Microsoft.Maui.Handlers.BorderHandler!>!
static Microsoft.Maui.Handlers.BorderHandler.MapBackground(Microsoft.Maui.Handlers.IBorderHandler! handler, Microsoft.Maui.IBorderView! border) -> void
static Microsoft.Maui.Handlers.BorderHandler.MapContent(Microsoft.Maui.Handlers.IBorderHandler! handler, Microsoft.Maui.IBorderView! border) -> void
static Microsoft.Maui.Handlers.BorderHandler.Mapper -> Microsoft.Maui.IPropertyMapper<Microsoft.Maui.IBorderView!, Microsoft.Maui.Handlers.IBorderHandler!>!
static Microsoft.Maui.Handlers.BorderHandler.MapStroke(Microsoft.Maui.Handlers.IBorderHandler! handler, Microsoft.Maui.IBorderView! border) -> void
static Microsoft.Maui.Handlers.BorderHandler.MapStrokeDashOffset(Microsoft.Maui.Handlers.IBorderHandler! handler, Microsoft.Maui.IBorderView! border) -> void
static Microsoft.Maui.Handlers.BorderHandler.MapStrokeDashPattern(Microsoft.Maui.Handlers.IBorderHandler! handler, Microsoft.Maui.IBorderView! border) -> void
static Microsoft.Maui.Handlers.BorderHandler.MapStrokeLineCap(Microsoft.Maui.Handlers.IBorderHandler! handler, Microsoft.Maui.IBorderView! border) -> void
static Microsoft.Maui.Handlers.BorderHandler.MapStrokeLineJoin(Microsoft.Maui.Handlers.IBorderHandler! handler, Microsoft.Maui.IBorderView! border) -> void
static Microsoft.Maui.Handlers.BorderHandler.MapStrokeMiterLimit(Microsoft.Maui.Handlers.IBorderHandler! handler, Microsoft.Maui.IBorderView! border) -> void
static Microsoft.Maui.Handlers.BorderHandler.MapStrokeShape(Microsoft.Maui.Handlers.IBorderHandler! handler, Microsoft.Maui.IBorderView! border) -> void
static Microsoft.Maui.Handlers.BorderHandler.MapStrokeThickness(Microsoft.Maui.Handlers.IBorderHandler! handler, Microsoft.Maui.IBorderView! border) -> void
static Microsoft.Maui.Handlers.ButtonHandler.CommandMapper -> Microsoft.Maui.CommandMapper<Microsoft.Maui.IButton!, Microsoft.Maui.Handlers.IButtonHandler!>!
static Microsoft.Maui.Handlers.ButtonHandler.ImageButtonMapper -> Microsoft.Maui.IPropertyMapper<Microsoft.Maui.IImage!, Microsoft.Maui.Handlers.IButtonHandler!>!
static Microsoft.Maui.Handlers.ButtonHandler.MapBackground(Microsoft.Maui.Handlers.IButtonHandler! handler, Microsoft.Maui.IButton! button) -> void
static Microsoft.Maui.Handlers.ButtonHandler.MapCharacterSpacing(Microsoft.Maui.Handlers.IButtonHandler! handler, Microsoft.Maui.ITextStyle! button) -> void
static Microsoft.Maui.Handlers.ButtonHandler.MapCornerRadius(Microsoft.Maui.Handlers.IButtonHandler! handler, Microsoft.Maui.IButtonStroke! buttonStroke) -> void
static Microsoft.Maui.Handlers.ButtonHandler.MapFont(Microsoft.Maui.Handlers.IButtonHandler! handler, Microsoft.Maui.ITextStyle! button) -> void
static Microsoft.Maui.Handlers.ButtonHandler.MapImageSource(Microsoft.Maui.Handlers.IButtonHandler! handler, Microsoft.Maui.IImage! image) -> void
static Microsoft.Maui.Handlers.ButtonHandler.MapPadding(Microsoft.Maui.Handlers.IButtonHandler! handler, Microsoft.Maui.IButton! button) -> void
static Microsoft.Maui.Handlers.ButtonHandler.Mapper -> Microsoft.Maui.IPropertyMapper<Microsoft.Maui.IButton!, Microsoft.Maui.Handlers.IButtonHandler!>!
static Microsoft.Maui.Handlers.ButtonHandler.MapStrokeColor(Microsoft.Maui.Handlers.IButtonHandler! handler, Microsoft.Maui.IButtonStroke! buttonStroke) -> void
static Microsoft.Maui.Handlers.ButtonHandler.MapStrokeThickness(Microsoft.Maui.Handlers.IButtonHandler! handler, Microsoft.Maui.IButtonStroke! buttonStroke) -> void
static Microsoft.Maui.Handlers.ButtonHandler.MapText(Microsoft.Maui.Handlers.IButtonHandler! handler, Microsoft.Maui.IText! button) -> void
static Microsoft.Maui.Handlers.ButtonHandler.MapTextColor(Microsoft.Maui.Handlers.IButtonHandler! handler, Microsoft.Maui.ITextStyle! button) -> void
static Microsoft.Maui.Handlers.ButtonHandler.TextButtonMapper -> Microsoft.Maui.IPropertyMapper<Microsoft.Maui.ITextButton!, Microsoft.Maui.Handlers.IButtonHandler!>!
static Microsoft.Maui.Handlers.CheckBoxHandler.CommandMapper -> Microsoft.Maui.CommandMapper<Microsoft.Maui.ICheckBox!, Microsoft.Maui.Handlers.CheckBoxHandler!>!
static Microsoft.Maui.Handlers.CheckBoxHandler.MapForeground(Microsoft.Maui.Handlers.ICheckBoxHandler! handler, Microsoft.Maui.ICheckBox! check) -> void
static Microsoft.Maui.Handlers.CheckBoxHandler.MapIsChecked(Microsoft.Maui.Handlers.ICheckBoxHandler! handler, Microsoft.Maui.ICheckBox! check) -> void
static Microsoft.Maui.Handlers.CheckBoxHandler.Mapper -> Microsoft.Maui.IPropertyMapper<Microsoft.Maui.ICheckBox!, Microsoft.Maui.Handlers.ICheckBoxHandler!>!
static Microsoft.Maui.Handlers.ContentViewHandler.CommandMapper -> Microsoft.Maui.CommandMapper<Microsoft.Maui.IContentView!, Microsoft.Maui.Handlers.IContentViewHandler!>!
static Microsoft.Maui.Handlers.ContentViewHandler.MapContent(Microsoft.Maui.Handlers.IContentViewHandler! handler, Microsoft.Maui.IContentView! page) -> void
static Microsoft.Maui.Handlers.ContentViewHandler.Mapper -> Microsoft.Maui.IPropertyMapper<Microsoft.Maui.IContentView!, Microsoft.Maui.Handlers.IContentViewHandler!>!
static Microsoft.Maui.Handlers.DatePickerHandler.CommandMapper -> Microsoft.Maui.CommandMapper<Microsoft.Maui.IPicker!, Microsoft.Maui.Handlers.IDatePickerHandler!>!
static Microsoft.Maui.Handlers.DatePickerHandler.MapBackground(Microsoft.Maui.Handlers.IDatePickerHandler! handler, Microsoft.Maui.IDatePicker! datePicker) -> void
static Microsoft.Maui.Handlers.DatePickerHandler.MapCharacterSpacing(Microsoft.Maui.Handlers.IDatePickerHandler! handler, Microsoft.Maui.IDatePicker! datePicker) -> void
static Microsoft.Maui.Handlers.DatePickerHandler.MapDate(Microsoft.Maui.Handlers.IDatePickerHandler! handler, Microsoft.Maui.IDatePicker! datePicker) -> void
static Microsoft.Maui.Handlers.DatePickerHandler.MapFont(Microsoft.Maui.Handlers.IDatePickerHandler! handler, Microsoft.Maui.IDatePicker! datePicker) -> void
static Microsoft.Maui.Handlers.DatePickerHandler.MapFormat(Microsoft.Maui.Handlers.IDatePickerHandler! handler, Microsoft.Maui.IDatePicker! datePicker) -> void
static Microsoft.Maui.Handlers.DatePickerHandler.MapMaximumDate(Microsoft.Maui.Handlers.IDatePickerHandler! handler, Microsoft.Maui.IDatePicker! datePicker) -> void
static Microsoft.Maui.Handlers.DatePickerHandler.MapMinimumDate(Microsoft.Maui.Handlers.IDatePickerHandler! handler, Microsoft.Maui.IDatePicker! datePicker) -> void
static Microsoft.Maui.Handlers.DatePickerHandler.Mapper -> Microsoft.Maui.IPropertyMapper<Microsoft.Maui.IDatePicker!, Microsoft.Maui.Handlers.IDatePickerHandler!>!
static Microsoft.Maui.Handlers.DatePickerHandler.MapTextColor(Microsoft.Maui.Handlers.IDatePickerHandler! handler, Microsoft.Maui.IDatePicker! datePicker) -> void
static Microsoft.Maui.Handlers.EditorHandler.CommandMapper -> Microsoft.Maui.CommandMapper<Microsoft.Maui.IEditor!, Microsoft.Maui.Handlers.IEditorHandler!>!
static Microsoft.Maui.Handlers.EditorHandler.MapBackground(Microsoft.Maui.Handlers.IEditorHandler! handler, Microsoft.Maui.IEditor! editor) -> void
static Microsoft.Maui.Handlers.EditorHandler.MapCharacterSpacing(Microsoft.Maui.Handlers.IEditorHandler! handler, Microsoft.Maui.IEditor! editor) -> void
static Microsoft.Maui.Handlers.EditorHandler.MapCursorPosition(Microsoft.Maui.Handlers.IEditorHandler! handler, Microsoft.Maui.IEditor! editor) -> void
static Microsoft.Maui.Handlers.EditorHandler.MapFont(Microsoft.Maui.Handlers.IEditorHandler! handler, Microsoft.Maui.IEditor! editor) -> void
static Microsoft.Maui.Handlers.EditorHandler.MapHorizontalTextAlignment(Microsoft.Maui.Handlers.IEditorHandler! handler, Microsoft.Maui.IEditor! editor) -> void
static Microsoft.Maui.Handlers.EditorHandler.MapIsReadOnly(Microsoft.Maui.Handlers.IEditorHandler! handler, Microsoft.Maui.IEditor! editor) -> void
static Microsoft.Maui.Handlers.EditorHandler.MapIsSpellCheckEnabled(Microsoft.Maui.Handlers.IEditorHandler! handler, Microsoft.Maui.IEditor! editor) -> void
static Microsoft.Maui.Handlers.EditorHandler.MapIsTextPredictionEnabled(Microsoft.Maui.Handlers.IEditorHandler! handler, Microsoft.Maui.IEditor! editor) -> void
static Microsoft.Maui.Handlers.EditorHandler.MapKeyboard(Microsoft.Maui.Handlers.IEditorHandler! handler, Microsoft.Maui.IEditor! editor) -> void
static Microsoft.Maui.Handlers.EditorHandler.MapMaxLength(Microsoft.Maui.Handlers.IEditorHandler! handler, Microsoft.Maui.IEditor! editor) -> void
static Microsoft.Maui.Handlers.EditorHandler.Mapper -> Microsoft.Maui.IPropertyMapper<Microsoft.Maui.IEditor!, Microsoft.Maui.Handlers.IEditorHandler!>!
static Microsoft.Maui.Handlers.EditorHandler.MapPlaceholder(Microsoft.Maui.Handlers.IEditorHandler! handler, Microsoft.Maui.IEditor! editor) -> void
static Microsoft.Maui.Handlers.EditorHandler.MapPlaceholderColor(Microsoft.Maui.Handlers.IEditorHandler! handler, Microsoft.Maui.IEditor! editor) -> void
static Microsoft.Maui.Handlers.EditorHandler.MapSelectionLength(Microsoft.Maui.Handlers.IEditorHandler! handler, Microsoft.Maui.IEditor! editor) -> void
static Microsoft.Maui.Handlers.EditorHandler.MapText(Microsoft.Maui.Handlers.IEditorHandler! handler, Microsoft.Maui.IEditor! editor) -> void
static Microsoft.Maui.Handlers.EditorHandler.MapTextColor(Microsoft.Maui.Handlers.IEditorHandler! handler, Microsoft.Maui.IEditor! editor) -> void
static Microsoft.Maui.Handlers.EditorHandler.MapVerticalTextAlignment(Microsoft.Maui.Handlers.IEditorHandler! handler, Microsoft.Maui.IEditor! editor) -> void
static Microsoft.Maui.Handlers.ElementHandler.ElementCommandMapper -> Microsoft.Maui.CommandMapper<Microsoft.Maui.IElement!, Microsoft.Maui.IElementHandler!>!
static Microsoft.Maui.Handlers.ElementHandler.ElementMapper -> Microsoft.Maui.IPropertyMapper<Microsoft.Maui.IElement!, Microsoft.Maui.IElementHandler!>!
static Microsoft.Maui.Handlers.EntryHandler.CommandMapper -> Microsoft.Maui.CommandMapper<Microsoft.Maui.IEntry!, Microsoft.Maui.Handlers.IEntryHandler!>!
static Microsoft.Maui.Handlers.EntryHandler.MapBackground(Microsoft.Maui.Handlers.IEntryHandler! handler, Microsoft.Maui.IEntry! entry) -> void
static Microsoft.Maui.Handlers.EntryHandler.MapCharacterSpacing(Microsoft.Maui.Handlers.IEntryHandler! handler, Microsoft.Maui.IEntry! entry) -> void
static Microsoft.Maui.Handlers.EntryHandler.MapClearButtonVisibility(Microsoft.Maui.Handlers.IEntryHandler! handler, Microsoft.Maui.IEntry! entry) -> void
static Microsoft.Maui.Handlers.EntryHandler.MapCursorPosition(Microsoft.Maui.Handlers.IEntryHandler! handler, Microsoft.Maui.IEntry! entry) -> void
static Microsoft.Maui.Handlers.EntryHandler.MapFont(Microsoft.Maui.Handlers.IEntryHandler! handler, Microsoft.Maui.IEntry! entry) -> void
static Microsoft.Maui.Handlers.EntryHandler.MapHorizontalTextAlignment(Microsoft.Maui.Handlers.IEntryHandler! handler, Microsoft.Maui.IEntry! entry) -> void
static Microsoft.Maui.Handlers.EntryHandler.MapIsPassword(Microsoft.Maui.Handlers.IEntryHandler! handler, Microsoft.Maui.IEntry! entry) -> void
static Microsoft.Maui.Handlers.EntryHandler.MapIsReadOnly(Microsoft.Maui.Handlers.IEntryHandler! handler, Microsoft.Maui.IEntry! entry) -> void
static Microsoft.Maui.Handlers.EntryHandler.MapIsSpellCheckEnabled(Microsoft.Maui.Handlers.IEntryHandler! handler, Microsoft.Maui.IEntry! entry) -> void
static Microsoft.Maui.Handlers.EntryHandler.MapIsTextPredictionEnabled(Microsoft.Maui.Handlers.IEntryHandler! handler, Microsoft.Maui.IEntry! entry) -> void
static Microsoft.Maui.Handlers.EntryHandler.MapKeyboard(Microsoft.Maui.Handlers.IEntryHandler! handler, Microsoft.Maui.IEntry! entry) -> void
static Microsoft.Maui.Handlers.EntryHandler.MapMaxLength(Microsoft.Maui.Handlers.IEntryHandler! handler, Microsoft.Maui.IEntry! entry) -> void
static Microsoft.Maui.Handlers.EntryHandler.Mapper -> Microsoft.Maui.IPropertyMapper<Microsoft.Maui.IEntry!, Microsoft.Maui.Handlers.IEntryHandler!>!
static Microsoft.Maui.Handlers.EntryHandler.MapPlaceholder(Microsoft.Maui.Handlers.IEntryHandler! handler, Microsoft.Maui.IEntry! entry) -> void
static Microsoft.Maui.Handlers.EntryHandler.MapPlaceholderColor(Microsoft.Maui.Handlers.IEntryHandler! handler, Microsoft.Maui.IEntry! entry) -> void
static Microsoft.Maui.Handlers.EntryHandler.MapReturnType(Microsoft.Maui.Handlers.IEntryHandler! handler, Microsoft.Maui.IEntry! entry) -> void
static Microsoft.Maui.Handlers.EntryHandler.MapSelectionLength(Microsoft.Maui.Handlers.IEntryHandler! handler, Microsoft.Maui.IEntry! entry) -> void
static Microsoft.Maui.Handlers.EntryHandler.MapText(Microsoft.Maui.Handlers.IEntryHandler! handler, Microsoft.Maui.IEntry! entry) -> void
static Microsoft.Maui.Handlers.EntryHandler.MapTextColor(Microsoft.Maui.Handlers.IEntryHandler! handler, Microsoft.Maui.IEntry! entry) -> void
static Microsoft.Maui.Handlers.EntryHandler.MapVerticalTextAlignment(Microsoft.Maui.Handlers.IEntryHandler! handler, Microsoft.Maui.IEntry! entry) -> void
static Microsoft.Maui.Handlers.FlyoutViewHandler.CommandMapper -> Microsoft.Maui.CommandMapper<Microsoft.Maui.IFlyoutView!, Microsoft.Maui.Handlers.IFlyoutViewHandler!>!
static Microsoft.Maui.Handlers.FlyoutViewHandler.MapDetail(Microsoft.Maui.Handlers.IFlyoutViewHandler! handler, Microsoft.Maui.IFlyoutView! flyoutView) -> void
static Microsoft.Maui.Handlers.FlyoutViewHandler.MapFlyout(Microsoft.Maui.Handlers.IFlyoutViewHandler! handler, Microsoft.Maui.IFlyoutView! flyoutView) -> void
static Microsoft.Maui.Handlers.FlyoutViewHandler.MapFlyoutBehavior(Microsoft.Maui.Handlers.IFlyoutViewHandler! handler, Microsoft.Maui.IFlyoutView! flyoutView) -> void
static Microsoft.Maui.Handlers.FlyoutViewHandler.MapFlyoutWidth(Microsoft.Maui.Handlers.IFlyoutViewHandler! handler, Microsoft.Maui.IFlyoutView! flyoutView) -> void
static Microsoft.Maui.Handlers.FlyoutViewHandler.MapIsGestureEnabled(Microsoft.Maui.Handlers.IFlyoutViewHandler! handler, Microsoft.Maui.IFlyoutView! view) -> void
static Microsoft.Maui.Handlers.FlyoutViewHandler.MapIsPresented(Microsoft.Maui.Handlers.IFlyoutViewHandler! handler, Microsoft.Maui.IFlyoutView! flyoutView) -> void
static Microsoft.Maui.Handlers.FlyoutViewHandler.Mapper -> Microsoft.Maui.IPropertyMapper<Microsoft.Maui.IFlyoutView!, Microsoft.Maui.Handlers.IFlyoutViewHandler!>!
static Microsoft.Maui.Handlers.GraphicsViewHandler.CommandMapper -> Microsoft.Maui.CommandMapper<Microsoft.Maui.IGraphicsView!, Microsoft.Maui.Handlers.IGraphicsViewHandler!>!
static Microsoft.Maui.Handlers.GraphicsViewHandler.MapDrawable(Microsoft.Maui.Handlers.IGraphicsViewHandler! handler, Microsoft.Maui.IGraphicsView! graphicsView) -> void
static Microsoft.Maui.Handlers.GraphicsViewHandler.MapFlowDirection(Microsoft.Maui.Handlers.IGraphicsViewHandler! handler, Microsoft.Maui.IGraphicsView! graphicsView) -> void
static Microsoft.Maui.Handlers.GraphicsViewHandler.MapInvalidate(Microsoft.Maui.Handlers.IGraphicsViewHandler! handler, Microsoft.Maui.IGraphicsView! graphicsView, object? arg) -> void
static Microsoft.Maui.Handlers.GraphicsViewHandler.Mapper -> Microsoft.Maui.IPropertyMapper<Microsoft.Maui.IGraphicsView!, Microsoft.Maui.Handlers.IGraphicsViewHandler!>!
static Microsoft.Maui.Handlers.ImageButtonHandler.CommandMapper -> Microsoft.Maui.CommandMapper<Microsoft.Maui.IImageButton!, Microsoft.Maui.Handlers.IImageButtonHandler!>!
static Microsoft.Maui.Handlers.ImageButtonHandler.ImageMapper -> Microsoft.Maui.IPropertyMapper<Microsoft.Maui.IImage!, Microsoft.Maui.Handlers.IImageHandler!>!
static Microsoft.Maui.Handlers.ImageButtonHandler.MapBackground(Microsoft.Maui.Handlers.IImageButtonHandler! handler, Microsoft.Maui.IImageButton! imageButton) -> void
static Microsoft.Maui.Handlers.ImageButtonHandler.MapCornerRadius(Microsoft.Maui.Handlers.IImageButtonHandler! handler, Microsoft.Maui.IButtonStroke! buttonStroke) -> void
static Microsoft.Maui.Handlers.ImageButtonHandler.MapPadding(Microsoft.Maui.Handlers.IImageButtonHandler! handler, Microsoft.Maui.IImageButton! imageButton) -> void
static Microsoft.Maui.Handlers.ImageButtonHandler.Mapper -> Microsoft.Maui.IPropertyMapper<Microsoft.Maui.IImageButton!, Microsoft.Maui.Handlers.IImageButtonHandler!>!
static Microsoft.Maui.Handlers.ImageButtonHandler.MapStrokeColor(Microsoft.Maui.Handlers.IImageButtonHandler! handler, Microsoft.Maui.IButtonStroke! buttonStroke) -> void
static Microsoft.Maui.Handlers.ImageButtonHandler.MapStrokeThickness(Microsoft.Maui.Handlers.IImageButtonHandler! handler, Microsoft.Maui.IButtonStroke! buttonStroke) -> void
static Microsoft.Maui.Handlers.ImageHandler.CommandMapper -> Microsoft.Maui.CommandMapper<Microsoft.Maui.IImage!, Microsoft.Maui.Handlers.IImageHandler!>!
static Microsoft.Maui.Handlers.ImageHandler.MapAspect(Microsoft.Maui.Handlers.IImageHandler! handler, Microsoft.Maui.IImage! image) -> void
static Microsoft.Maui.Handlers.ImageHandler.MapBackground(Microsoft.Maui.Handlers.IImageHandler! handler, Microsoft.Maui.IImage! image) -> void
static Microsoft.Maui.Handlers.ImageHandler.MapIsAnimationPlaying(Microsoft.Maui.Handlers.IImageHandler! handler, Microsoft.Maui.IImage! image) -> void
static Microsoft.Maui.Handlers.ImageHandler.Mapper -> Microsoft.Maui.IPropertyMapper<Microsoft.Maui.IImage!, Microsoft.Maui.Handlers.IImageHandler!>!
static Microsoft.Maui.Handlers.ImageHandler.MapSource(Microsoft.Maui.Handlers.IImageHandler! handler, Microsoft.Maui.IImage! image) -> void
static Microsoft.Maui.Handlers.ImageHandler.MapSourceAsync(Microsoft.Maui.Handlers.IImageHandler! handler, Microsoft.Maui.IImage! image) -> System.Threading.Tasks.Task!
static Microsoft.Maui.Handlers.IndicatorViewHandler.CommandMapper -> Microsoft.Maui.CommandMapper<Microsoft.Maui.IIndicatorView!, Microsoft.Maui.Handlers.IIndicatorViewHandler!>!
static Microsoft.Maui.Handlers.IndicatorViewHandler.MapCount(Microsoft.Maui.Handlers.IIndicatorViewHandler! handler, Microsoft.Maui.IIndicatorView! indicator) -> void
static Microsoft.Maui.Handlers.IndicatorViewHandler.MapHideSingle(Microsoft.Maui.Handlers.IIndicatorViewHandler! handler, Microsoft.Maui.IIndicatorView! indicator) -> void
static Microsoft.Maui.Handlers.IndicatorViewHandler.MapIndicatorColor(Microsoft.Maui.Handlers.IIndicatorViewHandler! handler, Microsoft.Maui.IIndicatorView! indicator) -> void
static Microsoft.Maui.Handlers.IndicatorViewHandler.MapIndicatorShape(Microsoft.Maui.Handlers.IIndicatorViewHandler! handler, Microsoft.Maui.IIndicatorView! indicator) -> void
static Microsoft.Maui.Handlers.IndicatorViewHandler.MapIndicatorSize(Microsoft.Maui.Handlers.IIndicatorViewHandler! handler, Microsoft.Maui.IIndicatorView! indicator) -> void
static Microsoft.Maui.Handlers.IndicatorViewHandler.MapMaximumVisible(Microsoft.Maui.Handlers.IIndicatorViewHandler! handler, Microsoft.Maui.IIndicatorView! indicator) -> void
static Microsoft.Maui.Handlers.IndicatorViewHandler.Mapper -> Microsoft.Maui.IPropertyMapper<Microsoft.Maui.IIndicatorView!, Microsoft.Maui.Handlers.IIndicatorViewHandler!>!
static Microsoft.Maui.Handlers.IndicatorViewHandler.MapPosition(Microsoft.Maui.Handlers.IIndicatorViewHandler! handler, Microsoft.Maui.IIndicatorView! indicator) -> void
static Microsoft.Maui.Handlers.IndicatorViewHandler.MapSelectedIndicatorColor(Microsoft.Maui.Handlers.IIndicatorViewHandler! handler, Microsoft.Maui.IIndicatorView! indicator) -> void
static Microsoft.Maui.Handlers.LabelHandler.CommandMapper -> Microsoft.Maui.CommandMapper<Microsoft.Maui.ILabel!, Microsoft.Maui.Handlers.ILabelHandler!>!
static Microsoft.Maui.Handlers.LabelHandler.MapBackground(Microsoft.Maui.Handlers.ILabelHandler! handler, Microsoft.Maui.ILabel! label) -> void
static Microsoft.Maui.Handlers.LabelHandler.MapCharacterSpacing(Microsoft.Maui.Handlers.ILabelHandler! handler, Microsoft.Maui.ILabel! label) -> void
static Microsoft.Maui.Handlers.LabelHandler.MapFont(Microsoft.Maui.Handlers.ILabelHandler! handler, Microsoft.Maui.ILabel! label) -> void
static Microsoft.Maui.Handlers.LabelHandler.MapHeight(Microsoft.Maui.Handlers.ILabelHandler! handler, Microsoft.Maui.ILabel! view) -> void
static Microsoft.Maui.Handlers.LabelHandler.MapHorizontalTextAlignment(Microsoft.Maui.Handlers.ILabelHandler! handler, Microsoft.Maui.ILabel! label) -> void
static Microsoft.Maui.Handlers.LabelHandler.MapLineHeight(Microsoft.Maui.Handlers.ILabelHandler! handler, Microsoft.Maui.ILabel! label) -> void
static Microsoft.Maui.Handlers.LabelHandler.MapOpacity(Microsoft.Maui.Handlers.ILabelHandler! handler, Microsoft.Maui.ILabel! label) -> void
static Microsoft.Maui.Handlers.LabelHandler.MapPadding(Microsoft.Maui.Handlers.ILabelHandler! handler, Microsoft.Maui.ILabel! label) -> void
static Microsoft.Maui.Handlers.LabelHandler.Mapper -> Microsoft.Maui.IPropertyMapper<Microsoft.Maui.ILabel!, Microsoft.Maui.Handlers.ILabelHandler!>!
static Microsoft.Maui.Handlers.LabelHandler.MapText(Microsoft.Maui.Handlers.ILabelHandler! handler, Microsoft.Maui.ILabel! label) -> void
static Microsoft.Maui.Handlers.LabelHandler.MapTextColor(Microsoft.Maui.Handlers.ILabelHandler! handler, Microsoft.Maui.ILabel! label) -> void
static Microsoft.Maui.Handlers.LabelHandler.MapTextDecorations(Microsoft.Maui.Handlers.ILabelHandler! handler, Microsoft.Maui.ILabel! label) -> void
static Microsoft.Maui.Handlers.LabelHandler.MapVerticalTextAlignment(Microsoft.Maui.Handlers.ILabelHandler! handler, Microsoft.Maui.ILabel! label) -> void
static Microsoft.Maui.Handlers.LayoutHandler.CommandMapper -> Microsoft.Maui.CommandMapper<Microsoft.Maui.ILayout!, Microsoft.Maui.ILayoutHandler!>!
static Microsoft.Maui.Handlers.LayoutHandler.MapAdd(Microsoft.Maui.ILayoutHandler! handler, Microsoft.Maui.ILayout! layout, object? arg) -> void
static Microsoft.Maui.Handlers.LayoutHandler.MapBackground(Microsoft.Maui.ILayoutHandler! handler, Microsoft.Maui.ILayout! layout) -> void
static Microsoft.Maui.Handlers.LayoutHandler.MapClear(Microsoft.Maui.ILayoutHandler! handler, Microsoft.Maui.ILayout! layout, object? arg) -> void
static Microsoft.Maui.Handlers.LayoutHandler.MapClipsToBounds(Microsoft.Maui.ILayoutHandler! handler, Microsoft.Maui.ILayout! layout) -> void
static Microsoft.Maui.Handlers.LayoutHandler.MapInputTransparent(Microsoft.Maui.ILayoutHandler! handler, Microsoft.Maui.ILayout! layout) -> void
static Microsoft.Maui.Handlers.LayoutHandler.MapInsert(Microsoft.Maui.ILayoutHandler! handler, Microsoft.Maui.ILayout! layout, object? arg) -> void
static Microsoft.Maui.Handlers.LayoutHandler.Mapper -> Microsoft.Maui.IPropertyMapper<Microsoft.Maui.ILayout!, Microsoft.Maui.ILayoutHandler!>!
static Microsoft.Maui.Handlers.LayoutHandler.MapRemove(Microsoft.Maui.ILayoutHandler! handler, Microsoft.Maui.ILayout! layout, object? arg) -> void
static Microsoft.Maui.Handlers.MenuBarHandler.CommandMapper -> Microsoft.Maui.CommandMapper<Microsoft.Maui.IMenuBar!, Microsoft.Maui.Handlers.IMenuBarHandler!>!
static Microsoft.Maui.Handlers.MenuBarHandler.MapAdd(Microsoft.Maui.Handlers.IMenuBarHandler! handler, Microsoft.Maui.IMenuBar! layout, object? arg) -> void
static Microsoft.Maui.Handlers.MenuBarHandler.MapClear(Microsoft.Maui.Handlers.IMenuBarHandler! handler, Microsoft.Maui.IMenuBar! layout, object? arg) -> void
static Microsoft.Maui.Handlers.MenuBarHandler.MapInsert(Microsoft.Maui.Handlers.IMenuBarHandler! handler, Microsoft.Maui.IMenuBar! layout, object? arg) -> void
static Microsoft.Maui.Handlers.MenuBarHandler.MapIsEnabled(Microsoft.Maui.Handlers.IMenuBarHandler! handler, Microsoft.Maui.IMenuBar! view) -> void
static Microsoft.Maui.Handlers.MenuBarHandler.Mapper -> Microsoft.Maui.IPropertyMapper<Microsoft.Maui.IMenuBar!, Microsoft.Maui.Handlers.IMenuBarHandler!>!
static Microsoft.Maui.Handlers.MenuBarHandler.MapRemove(Microsoft.Maui.Handlers.IMenuBarHandler! handler, Microsoft.Maui.IMenuBar! layout, object? arg) -> void
static Microsoft.Maui.Handlers.MenuBarItemHandler.CommandMapper -> Microsoft.Maui.CommandMapper<Microsoft.Maui.IMenuBarItem!, Microsoft.Maui.Handlers.IMenuBarItemHandler!>!
static Microsoft.Maui.Handlers.MenuBarItemHandler.MapAdd(Microsoft.Maui.Handlers.IMenuBarItemHandler! handler, Microsoft.Maui.IMenuBarItem! layout, object? arg) -> void
static Microsoft.Maui.Handlers.MenuBarItemHandler.MapClear(Microsoft.Maui.Handlers.IMenuBarItemHandler! handler, Microsoft.Maui.IMenuBarItem! layout, object? arg) -> void
static Microsoft.Maui.Handlers.MenuBarItemHandler.MapInsert(Microsoft.Maui.Handlers.IMenuBarItemHandler! handler, Microsoft.Maui.IMenuBarItem! layout, object? arg) -> void
static Microsoft.Maui.Handlers.MenuBarItemHandler.MapIsEnabled(Microsoft.Maui.Handlers.IMenuBarItemHandler! handler, Microsoft.Maui.IMenuBarItem! view) -> void
static Microsoft.Maui.Handlers.MenuBarItemHandler.Mapper -> Microsoft.Maui.IPropertyMapper<Microsoft.Maui.IMenuBarItem!, Microsoft.Maui.Handlers.IMenuBarItemHandler!>!
static Microsoft.Maui.Handlers.MenuBarItemHandler.MapRemove(Microsoft.Maui.Handlers.IMenuBarItemHandler! handler, Microsoft.Maui.IMenuBarItem! layout, object? arg) -> void
static Microsoft.Maui.Handlers.MenuBarItemHandler.MapText(Microsoft.Maui.Handlers.IMenuBarItemHandler! handler, Microsoft.Maui.IMenuBarItem! view) -> void
static Microsoft.Maui.Handlers.MenuFlyoutHandler.CommandMapper -> Microsoft.Maui.CommandMapper<Microsoft.Maui.IMenuFlyout!, Microsoft.Maui.Handlers.IMenuFlyoutHandler!>!
static Microsoft.Maui.Handlers.MenuFlyoutHandler.MapAdd(Microsoft.Maui.Handlers.IMenuFlyoutHandler! handler, Microsoft.Maui.IMenuFlyout! menuElement, object? arg) -> void
static Microsoft.Maui.Handlers.MenuFlyoutHandler.MapClear(Microsoft.Maui.Handlers.IMenuFlyoutHandler! handler, Microsoft.Maui.IMenuFlyout! menuElement, object? arg) -> void
static Microsoft.Maui.Handlers.MenuFlyoutHandler.MapInsert(Microsoft.Maui.Handlers.IMenuFlyoutHandler! handler, Microsoft.Maui.IMenuFlyout! menuElement, object? arg) -> void
static Microsoft.Maui.Handlers.MenuFlyoutHandler.Mapper -> Microsoft.Maui.IPropertyMapper<Microsoft.Maui.IMenuFlyout!, Microsoft.Maui.Handlers.IMenuFlyoutHandler!>!
static Microsoft.Maui.Handlers.MenuFlyoutHandler.MapRemove(Microsoft.Maui.Handlers.IMenuFlyoutHandler! handler, Microsoft.Maui.IMenuFlyout! menuElement, object? arg) -> void
static Microsoft.Maui.Handlers.MenuFlyoutItemHandler.CommandMapper -> Microsoft.Maui.CommandMapper<Microsoft.Maui.IMenuFlyoutItem!, Microsoft.Maui.Handlers.IMenuFlyoutItemHandler!>!
static Microsoft.Maui.Handlers.MenuFlyoutItemHandler.MapIsEnabled(Microsoft.Maui.Handlers.IMenuFlyoutItemHandler! handler, Microsoft.Maui.IMenuFlyoutItem! view) -> void
static Microsoft.Maui.Handlers.MenuFlyoutItemHandler.MapKeyboardAccelerators(Microsoft.Maui.Handlers.IMenuFlyoutItemHandler! handler, Microsoft.Maui.IMenuFlyoutItem! view) -> void
static Microsoft.Maui.Handlers.MenuFlyoutItemHandler.Mapper -> Microsoft.Maui.IPropertyMapper<Microsoft.Maui.IMenuFlyoutItem!, Microsoft.Maui.Handlers.IMenuFlyoutItemHandler!>!
static Microsoft.Maui.Handlers.MenuFlyoutItemHandler.MapSource(Microsoft.Maui.Handlers.IMenuFlyoutItemHandler! handler, Microsoft.Maui.IMenuFlyoutItem! view) -> void
static Microsoft.Maui.Handlers.MenuFlyoutItemHandler.MapText(Microsoft.Maui.Handlers.IMenuFlyoutItemHandler! handler, Microsoft.Maui.IMenuFlyoutItem! view) -> void
static Microsoft.Maui.Handlers.MenuFlyoutSeparatorHandler.CommandMapper -> Microsoft.Maui.CommandMapper<Microsoft.Maui.IMenuFlyoutSeparator!, Microsoft.Maui.Handlers.IMenuFlyoutSeparatorHandler!>!
static Microsoft.Maui.Handlers.MenuFlyoutSeparatorHandler.Mapper -> Microsoft.Maui.IPropertyMapper<Microsoft.Maui.IMenuFlyoutSeparator!, Microsoft.Maui.Handlers.IMenuFlyoutSeparatorHandler!>!
static Microsoft.Maui.Handlers.MenuFlyoutSubItemHandler.CommandMapper -> Microsoft.Maui.CommandMapper<Microsoft.Maui.IMenuFlyoutSubItem!, Microsoft.Maui.Handlers.IMenuFlyoutSubItemHandler!>!
static Microsoft.Maui.Handlers.MenuFlyoutSubItemHandler.MapAdd(Microsoft.Maui.Handlers.IMenuFlyoutSubItemHandler! handler, Microsoft.Maui.IMenuElement! layout, object? arg) -> void
static Microsoft.Maui.Handlers.MenuFlyoutSubItemHandler.MapClear(Microsoft.Maui.Handlers.IMenuFlyoutSubItemHandler! handler, Microsoft.Maui.IMenuElement! layout, object? arg) -> void
static Microsoft.Maui.Handlers.MenuFlyoutSubItemHandler.MapInsert(Microsoft.Maui.Handlers.IMenuFlyoutSubItemHandler! handler, Microsoft.Maui.IMenuElement! layout, object? arg) -> void
static Microsoft.Maui.Handlers.MenuFlyoutSubItemHandler.MapIsEnabled(Microsoft.Maui.Handlers.IMenuFlyoutSubItemHandler! handler, Microsoft.Maui.IMenuFlyoutSubItem! view) -> void
static Microsoft.Maui.Handlers.MenuFlyoutSubItemHandler.MapKeyboardAccelerators(Microsoft.Maui.Handlers.IMenuFlyoutSubItemHandler! handler, Microsoft.Maui.IMenuFlyoutSubItem! view) -> void
static Microsoft.Maui.Handlers.MenuFlyoutSubItemHandler.Mapper -> Microsoft.Maui.IPropertyMapper<Microsoft.Maui.IMenuFlyoutSubItem!, Microsoft.Maui.Handlers.IMenuFlyoutSubItemHandler!>!
static Microsoft.Maui.Handlers.MenuFlyoutSubItemHandler.MapRemove(Microsoft.Maui.Handlers.IMenuFlyoutSubItemHandler! handler, Microsoft.Maui.IMenuElement! layout, object? arg) -> void
static Microsoft.Maui.Handlers.MenuFlyoutSubItemHandler.MapSource(Microsoft.Maui.Handlers.IMenuFlyoutSubItemHandler! handler, Microsoft.Maui.IMenuFlyoutSubItem! view) -> void
static Microsoft.Maui.Handlers.MenuFlyoutSubItemHandler.MapText(Microsoft.Maui.Handlers.IMenuFlyoutSubItemHandler! handler, Microsoft.Maui.IMenuFlyoutSubItem! view) -> void
static Microsoft.Maui.Handlers.NavigationViewHandler.CommandMapper -> Microsoft.Maui.CommandMapper<Microsoft.Maui.IStackNavigationView!, Microsoft.Maui.Handlers.INavigationViewHandler!>!
static Microsoft.Maui.Handlers.NavigationViewHandler.Mapper -> Microsoft.Maui.IPropertyMapper<Microsoft.Maui.IStackNavigationView!, Microsoft.Maui.Handlers.INavigationViewHandler!>!
static Microsoft.Maui.Handlers.NavigationViewHandler.RequestNavigation(Microsoft.Maui.Handlers.INavigationViewHandler! arg1, Microsoft.Maui.IStackNavigation! arg2, object? arg3) -> void
static Microsoft.Maui.Handlers.PageHandler.CommandMapper -> Microsoft.Maui.CommandMapper<Microsoft.Maui.IContentView!, Microsoft.Maui.Handlers.IPageHandler!>!
static Microsoft.Maui.Handlers.PageHandler.Mapper -> Microsoft.Maui.IPropertyMapper<Microsoft.Maui.IContentView!, Microsoft.Maui.Handlers.IPageHandler!>!
static Microsoft.Maui.Handlers.PageHandler.MapTitle(Microsoft.Maui.Handlers.IPageHandler! handler, Microsoft.Maui.IContentView! page) -> void
static Microsoft.Maui.Handlers.PickerHandler.CommandMapper -> Microsoft.Maui.CommandMapper<Microsoft.Maui.IPicker!, Microsoft.Maui.Handlers.IPickerHandler!>!
static Microsoft.Maui.Handlers.PickerHandler.MapBackground(Microsoft.Maui.Handlers.IPickerHandler! handler, Microsoft.Maui.IPicker! picker) -> void
static Microsoft.Maui.Handlers.PickerHandler.MapCharacterSpacing(Microsoft.Maui.Handlers.IPickerHandler! handler, Microsoft.Maui.IPicker! picker) -> void
static Microsoft.Maui.Handlers.PickerHandler.MapFont(Microsoft.Maui.Handlers.IPickerHandler! handler, Microsoft.Maui.IPicker! picker) -> void
static Microsoft.Maui.Handlers.PickerHandler.MapHorizontalTextAlignment(Microsoft.Maui.Handlers.IPickerHandler! handler, Microsoft.Maui.IPicker! picker) -> void
static Microsoft.Maui.Handlers.PickerHandler.Mapper -> Microsoft.Maui.IPropertyMapper<Microsoft.Maui.IPicker!, Microsoft.Maui.Handlers.IPickerHandler!>!
static Microsoft.Maui.Handlers.PickerHandler.MapReload(Microsoft.Maui.Handlers.IPickerHandler! handler, Microsoft.Maui.IPicker! picker, object? args) -> void
static Microsoft.Maui.Handlers.PickerHandler.MapSelectedIndex(Microsoft.Maui.Handlers.IPickerHandler! handler, Microsoft.Maui.IPicker! picker) -> void
static Microsoft.Maui.Handlers.PickerHandler.MapTextColor(Microsoft.Maui.Handlers.IPickerHandler! handler, Microsoft.Maui.IPicker! picker) -> void
static Microsoft.Maui.Handlers.PickerHandler.MapTitle(Microsoft.Maui.Handlers.IPickerHandler! handler, Microsoft.Maui.IPicker! picker) -> void
static Microsoft.Maui.Handlers.PickerHandler.MapTitleColor(Microsoft.Maui.Handlers.IPickerHandler! handler, Microsoft.Maui.IPicker! picker) -> void
static Microsoft.Maui.Handlers.PickerHandler.MapVerticalTextAlignment(Microsoft.Maui.Handlers.IPickerHandler! handler, Microsoft.Maui.IPicker! picker) -> void
static Microsoft.Maui.Handlers.ProgressBarHandler.CommandMapper -> Microsoft.Maui.CommandMapper<Microsoft.Maui.IProgress!, Microsoft.Maui.Handlers.IProgressBarHandler!>!
static Microsoft.Maui.Handlers.ProgressBarHandler.Mapper -> Microsoft.Maui.IPropertyMapper<Microsoft.Maui.IProgress!, Microsoft.Maui.Handlers.IProgressBarHandler!>!
static Microsoft.Maui.Handlers.ProgressBarHandler.MapProgress(Microsoft.Maui.Handlers.IProgressBarHandler! handler, Microsoft.Maui.IProgress! progress) -> void
static Microsoft.Maui.Handlers.ProgressBarHandler.MapProgressColor(Microsoft.Maui.Handlers.IProgressBarHandler! handler, Microsoft.Maui.IProgress! progress) -> void
static Microsoft.Maui.Handlers.RadioButtonHandler.CommandMapper -> Microsoft.Maui.CommandMapper<Microsoft.Maui.IRadioButton!, Microsoft.Maui.Handlers.IRadioButtonHandler!>!
static Microsoft.Maui.Handlers.RadioButtonHandler.MapBackground(Microsoft.Maui.Handlers.IRadioButtonHandler! handler, Microsoft.Maui.IRadioButton! radioButton) -> void
static Microsoft.Maui.Handlers.RadioButtonHandler.MapCharacterSpacing(Microsoft.Maui.Handlers.IRadioButtonHandler! handler, Microsoft.Maui.ITextStyle! textStyle) -> void
static Microsoft.Maui.Handlers.RadioButtonHandler.MapContent(Microsoft.Maui.Handlers.IRadioButtonHandler! handler, Microsoft.Maui.IRadioButton! radioButton) -> void
static Microsoft.Maui.Handlers.RadioButtonHandler.MapCornerRadius(Microsoft.Maui.Handlers.IRadioButtonHandler! handler, Microsoft.Maui.IRadioButton! radioButton) -> void
static Microsoft.Maui.Handlers.RadioButtonHandler.MapFont(Microsoft.Maui.Handlers.IRadioButtonHandler! handler, Microsoft.Maui.ITextStyle! button) -> void
static Microsoft.Maui.Handlers.RadioButtonHandler.MapIsChecked(Microsoft.Maui.Handlers.IRadioButtonHandler! handler, Microsoft.Maui.IRadioButton! radioButton) -> void
static Microsoft.Maui.Handlers.RadioButtonHandler.Mapper -> Microsoft.Maui.IPropertyMapper<Microsoft.Maui.IRadioButton!, Microsoft.Maui.Handlers.IRadioButtonHandler!>!
static Microsoft.Maui.Handlers.RadioButtonHandler.MapStrokeColor(Microsoft.Maui.Handlers.IRadioButtonHandler! handler, Microsoft.Maui.IRadioButton! radioButton) -> void
static Microsoft.Maui.Handlers.RadioButtonHandler.MapStrokeThickness(Microsoft.Maui.Handlers.IRadioButtonHandler! handler, Microsoft.Maui.IRadioButton! radioButton) -> void
static Microsoft.Maui.Handlers.RadioButtonHandler.MapTextColor(Microsoft.Maui.Handlers.IRadioButtonHandler! handler, Microsoft.Maui.ITextStyle! textStyle) -> void
static Microsoft.Maui.Handlers.RefreshViewHandler.CommandMapper -> Microsoft.Maui.CommandMapper<Microsoft.Maui.IRefreshView!, Microsoft.Maui.Handlers.IRefreshViewHandler!>!
static Microsoft.Maui.Handlers.RefreshViewHandler.MapContent(Microsoft.Maui.Handlers.IRefreshViewHandler! handler, Microsoft.Maui.IRefreshView! refreshView) -> void
static Microsoft.Maui.Handlers.RefreshViewHandler.MapIsRefreshing(Microsoft.Maui.Handlers.IRefreshViewHandler! handler, Microsoft.Maui.IRefreshView! refreshView) -> void
static Microsoft.Maui.Handlers.RefreshViewHandler.Mapper -> Microsoft.Maui.IPropertyMapper<Microsoft.Maui.IRefreshView!, Microsoft.Maui.Handlers.IRefreshViewHandler!>!
static Microsoft.Maui.Handlers.RefreshViewHandler.MapRefreshColor(Microsoft.Maui.Handlers.IRefreshViewHandler! handler, Microsoft.Maui.IRefreshView! refreshView) -> void
static Microsoft.Maui.Handlers.RefreshViewHandler.MapRefreshViewBackground(Microsoft.Maui.Handlers.IRefreshViewHandler! handler, Microsoft.Maui.IView! view) -> void
static Microsoft.Maui.Handlers.ScrollViewHandler.CommandMapper -> Microsoft.Maui.CommandMapper<Microsoft.Maui.IScrollView!, Microsoft.Maui.Handlers.IScrollViewHandler!>!
static Microsoft.Maui.Handlers.ScrollViewHandler.MapContent(Microsoft.Maui.Handlers.IScrollViewHandler! handler, Microsoft.Maui.IScrollView! scrollView) -> void
static Microsoft.Maui.Handlers.ScrollViewHandler.MapHorizontalScrollBarVisibility(Microsoft.Maui.Handlers.IScrollViewHandler! handler, Microsoft.Maui.IScrollView! scrollView) -> void
static Microsoft.Maui.Handlers.ScrollViewHandler.MapOrientation(Microsoft.Maui.Handlers.IScrollViewHandler! handler, Microsoft.Maui.IScrollView! scrollView) -> void
static Microsoft.Maui.Handlers.ScrollViewHandler.Mapper -> Microsoft.Maui.IPropertyMapper<Microsoft.Maui.IScrollView!, Microsoft.Maui.Handlers.IScrollViewHandler!>!
static Microsoft.Maui.Handlers.ScrollViewHandler.MapRequestScrollTo(Microsoft.Maui.Handlers.IScrollViewHandler! handler, Microsoft.Maui.IScrollView! scrollView, object? args) -> void
static Microsoft.Maui.Handlers.ScrollViewHandler.MapVerticalScrollBarVisibility(Microsoft.Maui.Handlers.IScrollViewHandler! handler, Microsoft.Maui.IScrollView! scrollView) -> void
static Microsoft.Maui.Handlers.SearchBarHandler.CommandMapper -> Microsoft.Maui.CommandMapper<Microsoft.Maui.ISearchBar!, Microsoft.Maui.Handlers.ISearchBarHandler!>!
static Microsoft.Maui.Handlers.SearchBarHandler.MapBackground(Microsoft.Maui.Handlers.ISearchBarHandler! handler, Microsoft.Maui.ISearchBar! searchBar) -> void
static Microsoft.Maui.Handlers.SearchBarHandler.MapCancelButtonColor(Microsoft.Maui.Handlers.ISearchBarHandler! handler, Microsoft.Maui.ISearchBar! searchBar) -> void
static Microsoft.Maui.Handlers.SearchBarHandler.MapCharacterSpacing(Microsoft.Maui.Handlers.ISearchBarHandler! handler, Microsoft.Maui.ISearchBar! searchBar) -> void
static Microsoft.Maui.Handlers.SearchBarHandler.MapFont(Microsoft.Maui.Handlers.ISearchBarHandler! handler, Microsoft.Maui.ISearchBar! searchBar) -> void
static Microsoft.Maui.Handlers.SearchBarHandler.MapHorizontalTextAlignment(Microsoft.Maui.Handlers.ISearchBarHandler! handler, Microsoft.Maui.ISearchBar! searchBar) -> void
static Microsoft.Maui.Handlers.SearchBarHandler.MapIsEnabled(Microsoft.Maui.Handlers.ISearchBarHandler! handler, Microsoft.Maui.ISearchBar! searchBar) -> void
static Microsoft.Maui.Handlers.SearchBarHandler.MapIsReadOnly(Microsoft.Maui.Handlers.ISearchBarHandler! handler, Microsoft.Maui.ISearchBar! searchBar) -> void
static Microsoft.Maui.Handlers.SearchBarHandler.MapIsSpellCheckEnabled(Microsoft.Maui.Handlers.ISearchBarHandler! handler, Microsoft.Maui.ISearchBar! searchBar) -> void
static Microsoft.Maui.Handlers.SearchBarHandler.MapIsTextPredictionEnabled(Microsoft.Maui.Handlers.ISearchBarHandler! handler, Microsoft.Maui.ISearchBar! searchBar) -> void
static Microsoft.Maui.Handlers.SearchBarHandler.MapKeyboard(Microsoft.Maui.Handlers.ISearchBarHandler! handler, Microsoft.Maui.ISearchBar! searchBar) -> void
static Microsoft.Maui.Handlers.SearchBarHandler.MapMaxLength(Microsoft.Maui.Handlers.ISearchBarHandler! handler, Microsoft.Maui.ISearchBar! searchBar) -> void
static Microsoft.Maui.Handlers.SearchBarHandler.Mapper -> Microsoft.Maui.IPropertyMapper<Microsoft.Maui.ISearchBar!, Microsoft.Maui.Handlers.ISearchBarHandler!>!
static Microsoft.Maui.Handlers.SearchBarHandler.MapPlaceholder(Microsoft.Maui.Handlers.ISearchBarHandler! handler, Microsoft.Maui.ISearchBar! searchBar) -> void
static Microsoft.Maui.Handlers.SearchBarHandler.MapPlaceholderColor(Microsoft.Maui.Handlers.ISearchBarHandler! handler, Microsoft.Maui.ISearchBar! searchBar) -> void
static Microsoft.Maui.Handlers.SearchBarHandler.MapText(Microsoft.Maui.Handlers.ISearchBarHandler! handler, Microsoft.Maui.ISearchBar! searchBar) -> void
static Microsoft.Maui.Handlers.SearchBarHandler.MapTextColor(Microsoft.Maui.Handlers.ISearchBarHandler! handler, Microsoft.Maui.ISearchBar! searchBar) -> void
static Microsoft.Maui.Handlers.SearchBarHandler.MapVerticalTextAlignment(Microsoft.Maui.Handlers.ISearchBarHandler! handler, Microsoft.Maui.ISearchBar! searchBar) -> void
static Microsoft.Maui.Handlers.ShapeViewHandler.CommandMapper -> Microsoft.Maui.CommandMapper<Microsoft.Maui.IShapeView!, Microsoft.Maui.Handlers.IShapeViewHandler!>!
static Microsoft.Maui.Handlers.ShapeViewHandler.MapAspect(Microsoft.Maui.Handlers.IShapeViewHandler! handler, Microsoft.Maui.IShapeView! shapeView) -> void
static Microsoft.Maui.Handlers.ShapeViewHandler.MapBackground(Microsoft.Maui.Handlers.IShapeViewHandler! handler, Microsoft.Maui.IShapeView! shapeView) -> void
static Microsoft.Maui.Handlers.ShapeViewHandler.MapFill(Microsoft.Maui.Handlers.IShapeViewHandler! handler, Microsoft.Maui.IShapeView! shapeView) -> void
static Microsoft.Maui.Handlers.ShapeViewHandler.Mapper -> Microsoft.Maui.IPropertyMapper<Microsoft.Maui.IShapeView!, Microsoft.Maui.Handlers.IShapeViewHandler!>!
static Microsoft.Maui.Handlers.ShapeViewHandler.MapShape(Microsoft.Maui.Handlers.IShapeViewHandler! handler, Microsoft.Maui.IShapeView! shapeView) -> void
static Microsoft.Maui.Handlers.ShapeViewHandler.MapStroke(Microsoft.Maui.Handlers.IShapeViewHandler! handler, Microsoft.Maui.IShapeView! shapeView) -> void
static Microsoft.Maui.Handlers.ShapeViewHandler.MapStrokeDashOffset(Microsoft.Maui.Handlers.IShapeViewHandler! handler, Microsoft.Maui.IShapeView! shapeView) -> void
static Microsoft.Maui.Handlers.ShapeViewHandler.MapStrokeDashPattern(Microsoft.Maui.Handlers.IShapeViewHandler! handler, Microsoft.Maui.IShapeView! shapeView) -> void
static Microsoft.Maui.Handlers.ShapeViewHandler.MapStrokeLineCap(Microsoft.Maui.Handlers.IShapeViewHandler! handler, Microsoft.Maui.IShapeView! shapeView) -> void
static Microsoft.Maui.Handlers.ShapeViewHandler.MapStrokeLineJoin(Microsoft.Maui.Handlers.IShapeViewHandler! handler, Microsoft.Maui.IShapeView! shapeView) -> void
static Microsoft.Maui.Handlers.ShapeViewHandler.MapStrokeMiterLimit(Microsoft.Maui.Handlers.IShapeViewHandler! handler, Microsoft.Maui.IShapeView! shapeView) -> void
static Microsoft.Maui.Handlers.ShapeViewHandler.MapStrokeThickness(Microsoft.Maui.Handlers.IShapeViewHandler! handler, Microsoft.Maui.IShapeView! shapeView) -> void
static Microsoft.Maui.Handlers.SliderHandler.CommandMapper -> Microsoft.Maui.CommandMapper<Microsoft.Maui.ISlider!, Microsoft.Maui.Handlers.ISliderHandler!>!
static Microsoft.Maui.Handlers.SliderHandler.MapMaximum(Microsoft.Maui.Handlers.ISliderHandler! handler, Microsoft.Maui.ISlider! slider) -> void
static Microsoft.Maui.Handlers.SliderHandler.MapMaximumTrackColor(Microsoft.Maui.Handlers.ISliderHandler! handler, Microsoft.Maui.ISlider! slider) -> void
static Microsoft.Maui.Handlers.SliderHandler.MapMinimum(Microsoft.Maui.Handlers.ISliderHandler! handler, Microsoft.Maui.ISlider! slider) -> void
static Microsoft.Maui.Handlers.SliderHandler.MapMinimumTrackColor(Microsoft.Maui.Handlers.ISliderHandler! handler, Microsoft.Maui.ISlider! slider) -> void
static Microsoft.Maui.Handlers.SliderHandler.Mapper -> Microsoft.Maui.IPropertyMapper<Microsoft.Maui.ISlider!, Microsoft.Maui.Handlers.ISliderHandler!>!
static Microsoft.Maui.Handlers.SliderHandler.MapThumbColor(Microsoft.Maui.Handlers.ISliderHandler! handler, Microsoft.Maui.ISlider! slider) -> void
static Microsoft.Maui.Handlers.SliderHandler.MapThumbImageSource(Microsoft.Maui.Handlers.ISliderHandler! handler, Microsoft.Maui.ISlider! slider) -> void
static Microsoft.Maui.Handlers.SliderHandler.MapValue(Microsoft.Maui.Handlers.ISliderHandler! handler, Microsoft.Maui.ISlider! slider) -> void
static Microsoft.Maui.Handlers.StepperHandler.CommandMapper -> Microsoft.Maui.CommandMapper<Microsoft.Maui.IStepper!, Microsoft.Maui.Handlers.IStepperHandler!>!
static Microsoft.Maui.Handlers.StepperHandler.Mapper -> Microsoft.Maui.IPropertyMapper<Microsoft.Maui.IStepper!, Microsoft.Maui.Handlers.IStepperHandler!>!
static Microsoft.Maui.Handlers.SwipeItemMenuItemHandler.CommandMapper -> Microsoft.Maui.CommandMapper<Microsoft.Maui.ISwipeItemMenuItem!, Microsoft.Maui.Handlers.ISwipeItemMenuItemHandler!>!
static Microsoft.Maui.Handlers.SwipeItemMenuItemHandler.MapBackground(Microsoft.Maui.Handlers.ISwipeItemMenuItemHandler! handler, Microsoft.Maui.ISwipeItemMenuItem! view) -> void
static Microsoft.Maui.Handlers.SwipeItemMenuItemHandler.MapCharacterSpacing(Microsoft.Maui.Handlers.ISwipeItemMenuItemHandler! handler, Microsoft.Maui.ITextStyle! view) -> void
static Microsoft.Maui.Handlers.SwipeItemMenuItemHandler.MapFont(Microsoft.Maui.Handlers.ISwipeItemMenuItemHandler! handler, Microsoft.Maui.ITextStyle! view) -> void
static Microsoft.Maui.Handlers.SwipeItemMenuItemHandler.Mapper -> Microsoft.Maui.IPropertyMapper<Microsoft.Maui.ISwipeItemMenuItem!, Microsoft.Maui.Handlers.ISwipeItemMenuItemHandler!>!
static Microsoft.Maui.Handlers.SwipeItemMenuItemHandler.MapSource(Microsoft.Maui.Handlers.ISwipeItemMenuItemHandler! handler, Microsoft.Maui.ISwipeItemMenuItem! image) -> void
static Microsoft.Maui.Handlers.SwipeItemMenuItemHandler.MapSourceAsync(Microsoft.Maui.Handlers.ISwipeItemMenuItemHandler! handler, Microsoft.Maui.ISwipeItemMenuItem! image) -> System.Threading.Tasks.Task!
static Microsoft.Maui.Handlers.SwipeItemMenuItemHandler.MapText(Microsoft.Maui.Handlers.ISwipeItemMenuItemHandler! handler, Microsoft.Maui.ISwipeItemMenuItem! view) -> void
static Microsoft.Maui.Handlers.SwipeItemMenuItemHandler.MapTextColor(Microsoft.Maui.Handlers.ISwipeItemMenuItemHandler! handler, Microsoft.Maui.ISwipeItemMenuItem! view) -> void
static Microsoft.Maui.Handlers.SwipeItemMenuItemHandler.MapVisibility(Microsoft.Maui.Handlers.ISwipeItemMenuItemHandler! handler, Microsoft.Maui.ISwipeItemMenuItem! view) -> void
static Microsoft.Maui.Handlers.SwipeItemViewHandler.CommandMapper -> Microsoft.Maui.CommandMapper<Microsoft.Maui.ISwipeItemView!, Microsoft.Maui.Handlers.ISwipeItemViewHandler!>!
static Microsoft.Maui.Handlers.SwipeItemViewHandler.MapContent(Microsoft.Maui.Handlers.ISwipeItemViewHandler! handler, Microsoft.Maui.ISwipeItemView! page) -> void
static Microsoft.Maui.Handlers.SwipeItemViewHandler.Mapper -> Microsoft.Maui.IPropertyMapper<Microsoft.Maui.ISwipeItemView!, Microsoft.Maui.Handlers.ISwipeItemViewHandler!>!
static Microsoft.Maui.Handlers.SwipeItemViewHandler.MapVisibility(Microsoft.Maui.Handlers.ISwipeItemViewHandler! handler, Microsoft.Maui.ISwipeItemView! view) -> void
static Microsoft.Maui.Handlers.SwipeViewHandler.CommandMapper -> Microsoft.Maui.CommandMapper<Microsoft.Maui.ISwipeView!, Microsoft.Maui.Handlers.ISwipeViewHandler!>!
static Microsoft.Maui.Handlers.SwipeViewHandler.MapBottomItems(Microsoft.Maui.Handlers.ISwipeViewHandler! handler, Microsoft.Maui.ISwipeView! view) -> void
static Microsoft.Maui.Handlers.SwipeViewHandler.MapContent(Microsoft.Maui.Handlers.ISwipeViewHandler! handler, Microsoft.Maui.ISwipeView! view) -> void
static Microsoft.Maui.Handlers.SwipeViewHandler.MapLeftItems(Microsoft.Maui.Handlers.ISwipeViewHandler! handler, Microsoft.Maui.ISwipeView! view) -> void
static Microsoft.Maui.Handlers.SwipeViewHandler.Mapper -> Microsoft.Maui.IPropertyMapper<Microsoft.Maui.ISwipeView!, Microsoft.Maui.Handlers.ISwipeViewHandler!>!
static Microsoft.Maui.Handlers.SwipeViewHandler.MapRequestClose(Microsoft.Maui.Handlers.ISwipeViewHandler! handler, Microsoft.Maui.ISwipeView! swipeView, object? args) -> void
static Microsoft.Maui.Handlers.SwipeViewHandler.MapRequestOpen(Microsoft.Maui.Handlers.ISwipeViewHandler! handler, Microsoft.Maui.ISwipeView! swipeView, object? args) -> void
static Microsoft.Maui.Handlers.SwipeViewHandler.MapRightItems(Microsoft.Maui.Handlers.ISwipeViewHandler! handler, Microsoft.Maui.ISwipeView! view) -> void
static Microsoft.Maui.Handlers.SwipeViewHandler.MapSwipeTransitionMode(Microsoft.Maui.Handlers.ISwipeViewHandler! handler, Microsoft.Maui.ISwipeView! swipeView) -> void
static Microsoft.Maui.Handlers.SwipeViewHandler.MapTopItems(Microsoft.Maui.Handlers.ISwipeViewHandler! handler, Microsoft.Maui.ISwipeView! view) -> void
static Microsoft.Maui.Handlers.SwitchHandler.CommandMapper -> Microsoft.Maui.CommandMapper<Microsoft.Maui.ISwitch!, Microsoft.Maui.Handlers.ISwitchHandler!>!
static Microsoft.Maui.Handlers.SwitchHandler.MapIsOn(Microsoft.Maui.Handlers.ISwitchHandler! handler, Microsoft.Maui.ISwitch! view) -> void
static Microsoft.Maui.Handlers.SwitchHandler.Mapper -> Microsoft.Maui.IPropertyMapper<Microsoft.Maui.ISwitch!, Microsoft.Maui.Handlers.ISwitchHandler!>!
static Microsoft.Maui.Handlers.SwitchHandler.MapThumbColor(Microsoft.Maui.Handlers.ISwitchHandler! handler, Microsoft.Maui.ISwitch! view) -> void
static Microsoft.Maui.Handlers.SwitchHandler.MapTrackColor(Microsoft.Maui.Handlers.ISwitchHandler! handler, Microsoft.Maui.ISwitch! view) -> void
static Microsoft.Maui.Handlers.TabbedViewHandler.CommandMapper -> Microsoft.Maui.CommandMapper<Microsoft.Maui.ITabbedView!, Microsoft.Maui.Handlers.ITabbedViewHandler!>!
static Microsoft.Maui.Handlers.TabbedViewHandler.Mapper -> Microsoft.Maui.IPropertyMapper<Microsoft.Maui.ITabbedView!, Microsoft.Maui.Handlers.ITabbedViewHandler!>!
static Microsoft.Maui.Handlers.TimePickerHandler.CommandMapper -> Microsoft.Maui.CommandMapper<Microsoft.Maui.ITimePicker!, Microsoft.Maui.Handlers.ITimePickerHandler!>!
static Microsoft.Maui.Handlers.TimePickerHandler.MapCharacterSpacing(Microsoft.Maui.Handlers.ITimePickerHandler! handler, Microsoft.Maui.ITimePicker! timePicker) -> void
static Microsoft.Maui.Handlers.TimePickerHandler.MapFont(Microsoft.Maui.Handlers.ITimePickerHandler! handler, Microsoft.Maui.ITimePicker! timePicker) -> void
static Microsoft.Maui.Handlers.TimePickerHandler.MapFormat(Microsoft.Maui.Handlers.ITimePickerHandler! handler, Microsoft.Maui.ITimePicker! timePicker) -> void
static Microsoft.Maui.Handlers.TimePickerHandler.Mapper -> Microsoft.Maui.IPropertyMapper<Microsoft.Maui.ITimePicker!, Microsoft.Maui.Handlers.ITimePickerHandler!>!
static Microsoft.Maui.Handlers.TimePickerHandler.MapTextColor(Microsoft.Maui.Handlers.ITimePickerHandler! handler, Microsoft.Maui.ITimePicker! timePicker) -> void
static Microsoft.Maui.Handlers.TimePickerHandler.MapTime(Microsoft.Maui.Handlers.ITimePickerHandler! handler, Microsoft.Maui.ITimePicker! timePicker) -> void
static Microsoft.Maui.Handlers.ToolbarHandler.CommandMapper -> Microsoft.Maui.CommandMapper<Microsoft.Maui.IToolbar!, Microsoft.Maui.Handlers.IToolbarHandler!>!
static Microsoft.Maui.Handlers.ToolbarHandler.Mapper -> Microsoft.Maui.IPropertyMapper<Microsoft.Maui.IToolbar!, Microsoft.Maui.Handlers.IToolbarHandler!>!
static Microsoft.Maui.Handlers.ToolbarHandler.MapTitle(Microsoft.Maui.Handlers.IToolbarHandler! arg1, Microsoft.Maui.IToolbar! arg2) -> void
static Microsoft.Maui.Handlers.ViewHandler.MapAnchorX(Microsoft.Maui.IViewHandler! handler, Microsoft.Maui.IView! view) -> void
static Microsoft.Maui.Handlers.ViewHandler.MapAnchorY(Microsoft.Maui.IViewHandler! handler, Microsoft.Maui.IView! view) -> void
static Microsoft.Maui.Handlers.ViewHandler.MapAutomationId(Microsoft.Maui.IViewHandler! handler, Microsoft.Maui.IView! view) -> void
static Microsoft.Maui.Handlers.ViewHandler.MapBackground(Microsoft.Maui.IViewHandler! handler, Microsoft.Maui.IView! view) -> void
static Microsoft.Maui.Handlers.ViewHandler.MapBorderView(Microsoft.Maui.IViewHandler! handler, Microsoft.Maui.IView! view) -> void
static Microsoft.Maui.Handlers.ViewHandler.MapClip(Microsoft.Maui.IViewHandler! handler, Microsoft.Maui.IView! view) -> void
static Microsoft.Maui.Handlers.ViewHandler.MapContainerView(Microsoft.Maui.IViewHandler! handler, Microsoft.Maui.IView! view) -> void
static Microsoft.Maui.Handlers.ViewHandler.MapContextFlyout(Microsoft.Maui.IViewHandler! handler, Microsoft.Maui.IView! view) -> void
static Microsoft.Maui.Handlers.ViewHandler.MapFlowDirection(Microsoft.Maui.IViewHandler! handler, Microsoft.Maui.IView! view) -> void
static Microsoft.Maui.Handlers.ViewHandler.MapFocus(Microsoft.Maui.IViewHandler! handler, Microsoft.Maui.IView! view, object? args) -> void
static Microsoft.Maui.Handlers.ViewHandler.MapFrame(Microsoft.Maui.IViewHandler! handler, Microsoft.Maui.IView! view, object? args) -> void
static Microsoft.Maui.Handlers.ViewHandler.MapHeight(Microsoft.Maui.IViewHandler! handler, Microsoft.Maui.IView! view) -> void
static Microsoft.Maui.Handlers.ViewHandler.MapInputTransparent(Microsoft.Maui.IViewHandler! handler, Microsoft.Maui.IView! view) -> void
static Microsoft.Maui.Handlers.ViewHandler.MapInvalidateMeasure(Microsoft.Maui.IViewHandler! handler, Microsoft.Maui.IView! view, object? args) -> void
static Microsoft.Maui.Handlers.ViewHandler.MapIsEnabled(Microsoft.Maui.IViewHandler! handler, Microsoft.Maui.IView! view) -> void
static Microsoft.Maui.Handlers.ViewHandler.MapMaximumHeight(Microsoft.Maui.IViewHandler! handler, Microsoft.Maui.IView! view) -> void
static Microsoft.Maui.Handlers.ViewHandler.MapMaximumWidth(Microsoft.Maui.IViewHandler! handler, Microsoft.Maui.IView! view) -> void
static Microsoft.Maui.Handlers.ViewHandler.MapMinimumHeight(Microsoft.Maui.IViewHandler! handler, Microsoft.Maui.IView! view) -> void
static Microsoft.Maui.Handlers.ViewHandler.MapMinimumWidth(Microsoft.Maui.IViewHandler! handler, Microsoft.Maui.IView! view) -> void
static Microsoft.Maui.Handlers.ViewHandler.MapOpacity(Microsoft.Maui.IViewHandler! handler, Microsoft.Maui.IView! view) -> void
static Microsoft.Maui.Handlers.ViewHandler.MapRotation(Microsoft.Maui.IViewHandler! handler, Microsoft.Maui.IView! view) -> void
static Microsoft.Maui.Handlers.ViewHandler.MapRotationX(Microsoft.Maui.IViewHandler! handler, Microsoft.Maui.IView! view) -> void
static Microsoft.Maui.Handlers.ViewHandler.MapRotationY(Microsoft.Maui.IViewHandler! handler, Microsoft.Maui.IView! view) -> void
static Microsoft.Maui.Handlers.ViewHandler.MapScale(Microsoft.Maui.IViewHandler! handler, Microsoft.Maui.IView! view) -> void
static Microsoft.Maui.Handlers.ViewHandler.MapScaleX(Microsoft.Maui.IViewHandler! handler, Microsoft.Maui.IView! view) -> void
static Microsoft.Maui.Handlers.ViewHandler.MapScaleY(Microsoft.Maui.IViewHandler! handler, Microsoft.Maui.IView! view) -> void
static Microsoft.Maui.Handlers.ViewHandler.MapSemantics(Microsoft.Maui.IViewHandler! handler, Microsoft.Maui.IView! view) -> void
static Microsoft.Maui.Handlers.ViewHandler.MapShadow(Microsoft.Maui.IViewHandler! handler, Microsoft.Maui.IView! view) -> void
static Microsoft.Maui.Handlers.ViewHandler.MapToolbar(Microsoft.Maui.IViewHandler! handler, Microsoft.Maui.IView! view) -> void
static Microsoft.Maui.Handlers.ViewHandler.MapToolTip(Microsoft.Maui.IViewHandler! handler, Microsoft.Maui.IView! view) -> void
static Microsoft.Maui.Handlers.ViewHandler.MapTranslationX(Microsoft.Maui.IViewHandler! handler, Microsoft.Maui.IView! view) -> void
static Microsoft.Maui.Handlers.ViewHandler.MapTranslationY(Microsoft.Maui.IViewHandler! handler, Microsoft.Maui.IView! view) -> void
static Microsoft.Maui.Handlers.ViewHandler.MapUnfocus(Microsoft.Maui.IViewHandler! handler, Microsoft.Maui.IView! view, object? args) -> void
static Microsoft.Maui.Handlers.ViewHandler.MapVisibility(Microsoft.Maui.IViewHandler! handler, Microsoft.Maui.IView! view) -> void
static Microsoft.Maui.Handlers.ViewHandler.MapWidth(Microsoft.Maui.IViewHandler! handler, Microsoft.Maui.IView! view) -> void
static Microsoft.Maui.Handlers.ViewHandler.MapZIndex(Microsoft.Maui.IViewHandler! handler, Microsoft.Maui.IView! view, object? args) -> void
static Microsoft.Maui.Handlers.ViewHandler.ViewCommandMapper -> Microsoft.Maui.CommandMapper<Microsoft.Maui.IView!, Microsoft.Maui.IViewHandler!>!
static Microsoft.Maui.Handlers.ViewHandler.ViewMapper -> Microsoft.Maui.IPropertyMapper<Microsoft.Maui.IView!, Microsoft.Maui.IViewHandler!>!
static Microsoft.Maui.Handlers.ViewHandler<TVirtualView, TPlatformView>.PlatformViewFactory.get -> System.Func<Microsoft.Maui.Handlers.ViewHandler<TVirtualView!, TPlatformView!>!, TPlatformView!>?
static Microsoft.Maui.Handlers.ViewHandler<TVirtualView, TPlatformView>.PlatformViewFactory.set -> void
static Microsoft.Maui.Handlers.WebViewHandler.CommandMapper -> Microsoft.Maui.CommandMapper<Microsoft.Maui.IWebView!, Microsoft.Maui.Handlers.IWebViewHandler!>!
static Microsoft.Maui.Handlers.WebViewHandler.MapEval(Microsoft.Maui.Handlers.IWebViewHandler! handler, Microsoft.Maui.IWebView! webView, object? arg) -> void
static Microsoft.Maui.Handlers.WebViewHandler.MapEvaluateJavaScriptAsync(Microsoft.Maui.Handlers.IWebViewHandler! handler, Microsoft.Maui.IWebView! webView, object? arg) -> void
static Microsoft.Maui.Handlers.WebViewHandler.MapGoBack(Microsoft.Maui.Handlers.IWebViewHandler! handler, Microsoft.Maui.IWebView! webView, object? arg) -> void
static Microsoft.Maui.Handlers.WebViewHandler.MapGoForward(Microsoft.Maui.Handlers.IWebViewHandler! handler, Microsoft.Maui.IWebView! webView, object? arg) -> void
static Microsoft.Maui.Handlers.WebViewHandler.Mapper -> Microsoft.Maui.IPropertyMapper<Microsoft.Maui.IWebView!, Microsoft.Maui.Handlers.IWebViewHandler!>!
static Microsoft.Maui.Handlers.WebViewHandler.MapReload(Microsoft.Maui.Handlers.IWebViewHandler! handler, Microsoft.Maui.IWebView! webView, object? arg) -> void
static Microsoft.Maui.Handlers.WebViewHandler.MapSource(Microsoft.Maui.Handlers.IWebViewHandler! handler, Microsoft.Maui.IWebView! webView) -> void
static Microsoft.Maui.Handlers.WebViewHandler.MapUserAgent(Microsoft.Maui.Handlers.IWebViewHandler! handler, Microsoft.Maui.IWebView! webView) -> void
static Microsoft.Maui.Handlers.WindowHandler.CommandMapper -> Microsoft.Maui.CommandMapper<Microsoft.Maui.IWindow!, Microsoft.Maui.Handlers.IWindowHandler!>!
static Microsoft.Maui.Handlers.WindowHandler.MapContent(Microsoft.Maui.Handlers.IWindowHandler! handler, Microsoft.Maui.IWindow! window) -> void
static Microsoft.Maui.Handlers.WindowHandler.MapFlowDirection(Microsoft.Maui.Handlers.IWindowHandler! handler, Microsoft.Maui.IWindow! view) -> void
static Microsoft.Maui.Handlers.WindowHandler.MapHeight(Microsoft.Maui.Handlers.IWindowHandler! handler, Microsoft.Maui.IWindow! view) -> void
static Microsoft.Maui.Handlers.WindowHandler.MapMaximumHeight(Microsoft.Maui.Handlers.IWindowHandler! handler, Microsoft.Maui.IWindow! view) -> void
static Microsoft.Maui.Handlers.WindowHandler.MapMaximumWidth(Microsoft.Maui.Handlers.IWindowHandler! handler, Microsoft.Maui.IWindow! view) -> void
static Microsoft.Maui.Handlers.WindowHandler.MapMenuBar(Microsoft.Maui.Handlers.IWindowHandler! handler, Microsoft.Maui.IWindow! view) -> void
static Microsoft.Maui.Handlers.WindowHandler.MapMinimumHeight(Microsoft.Maui.Handlers.IWindowHandler! handler, Microsoft.Maui.IWindow! view) -> void
static Microsoft.Maui.Handlers.WindowHandler.MapMinimumWidth(Microsoft.Maui.Handlers.IWindowHandler! handler, Microsoft.Maui.IWindow! view) -> void
static Microsoft.Maui.Handlers.WindowHandler.Mapper -> Microsoft.Maui.IPropertyMapper<Microsoft.Maui.IWindow!, Microsoft.Maui.Handlers.IWindowHandler!>!
static Microsoft.Maui.Handlers.WindowHandler.MapRequestDisplayDensity(Microsoft.Maui.Handlers.IWindowHandler! handler, Microsoft.Maui.IWindow! window, object? args) -> void
static Microsoft.Maui.Handlers.WindowHandler.MapTitle(Microsoft.Maui.Handlers.IWindowHandler! handler, Microsoft.Maui.IWindow! window) -> void
static Microsoft.Maui.Handlers.WindowHandler.MapToolbar(Microsoft.Maui.Handlers.IWindowHandler! handler, Microsoft.Maui.IWindow! view) -> void
static Microsoft.Maui.Handlers.WindowHandler.MapWidth(Microsoft.Maui.Handlers.IWindowHandler! handler, Microsoft.Maui.IWindow! view) -> void
static Microsoft.Maui.Handlers.WindowHandler.MapX(Microsoft.Maui.Handlers.IWindowHandler! handler, Microsoft.Maui.IWindow! view) -> void
static Microsoft.Maui.Handlers.WindowHandler.MapY(Microsoft.Maui.Handlers.IWindowHandler! handler, Microsoft.Maui.IWindow! view) -> void
static Microsoft.Maui.Hosting.AppHostBuilderExtensions.ConfigureAnimations(this Microsoft.Maui.Hosting.MauiAppBuilder! builder) -> Microsoft.Maui.Hosting.MauiAppBuilder!
static Microsoft.Maui.Hosting.AppHostBuilderExtensions.ConfigureDispatching(this Microsoft.Maui.Hosting.MauiAppBuilder! builder) -> Microsoft.Maui.Hosting.MauiAppBuilder!
static Microsoft.Maui.Hosting.EssentialsExtensions.AddAppAction(this Microsoft.Maui.Hosting.IEssentialsBuilder! essentials, string! id, string! title, string? subtitle = null, string? icon = null) -> Microsoft.Maui.Hosting.IEssentialsBuilder!
static Microsoft.Maui.Hosting.EssentialsExtensions.ConfigureEssentials(this Microsoft.Maui.Hosting.MauiAppBuilder! builder, System.Action<Microsoft.Maui.Hosting.IEssentialsBuilder!>? configureDelegate = null) -> Microsoft.Maui.Hosting.MauiAppBuilder!
static Microsoft.Maui.Hosting.FontCollectionExtensions.AddEmbeddedResourceFont(this Microsoft.Maui.Hosting.IFontCollection! fontCollection, System.Reflection.Assembly! assembly, string! filename, string? alias = null) -> Microsoft.Maui.Hosting.IFontCollection!
static Microsoft.Maui.Hosting.FontCollectionExtensions.AddFont(this Microsoft.Maui.Hosting.IFontCollection! fontCollection, string! filename, string? alias = null) -> Microsoft.Maui.Hosting.IFontCollection!
static Microsoft.Maui.Hosting.FontsMauiAppBuilderExtensions.ConfigureFonts(this Microsoft.Maui.Hosting.MauiAppBuilder! builder, System.Action<Microsoft.Maui.Hosting.IFontCollection!>? configureDelegate) -> Microsoft.Maui.Hosting.MauiAppBuilder!
static Microsoft.Maui.Hosting.FontsMauiAppBuilderExtensions.ConfigureFonts(this Microsoft.Maui.Hosting.MauiAppBuilder! builder) -> Microsoft.Maui.Hosting.MauiAppBuilder!
static Microsoft.Maui.Hosting.HandlerMauiAppBuilderExtensions.ConfigureMauiHandlers(this Microsoft.Extensions.DependencyInjection.IServiceCollection! services, System.Action<Microsoft.Maui.Hosting.IMauiHandlersCollection!>? configureDelegate) -> Microsoft.Extensions.DependencyInjection.IServiceCollection!
static Microsoft.Maui.Hosting.HandlerMauiAppBuilderExtensions.ConfigureMauiHandlers(this Microsoft.Maui.Hosting.MauiAppBuilder! builder, System.Action<Microsoft.Maui.Hosting.IMauiHandlersCollection!>? configureDelegate) -> Microsoft.Maui.Hosting.MauiAppBuilder!
static Microsoft.Maui.Hosting.ImageSourceServiceCollectionExtensions.AddService<TImageSource, TImageSourceService>(this Microsoft.Maui.Hosting.IImageSourceServiceCollection! services) -> Microsoft.Maui.Hosting.IImageSourceServiceCollection!
static Microsoft.Maui.Hosting.ImageSourceServiceCollectionExtensions.AddService<TImageSource>(this Microsoft.Maui.Hosting.IImageSourceServiceCollection! services, System.Func<System.IServiceProvider!, Microsoft.Maui.IImageSourceService<TImageSource>!>! implementationFactory) -> Microsoft.Maui.Hosting.IImageSourceServiceCollection!
static Microsoft.Maui.Hosting.ImageSourcesMauiAppBuilderExtensions.ConfigureImageSources(this Microsoft.Maui.Hosting.MauiAppBuilder! builder, System.Action<Microsoft.Maui.Hosting.IImageSourceServiceCollection!>? configureDelegate) -> Microsoft.Maui.Hosting.MauiAppBuilder!
static Microsoft.Maui.Hosting.ImageSourcesMauiAppBuilderExtensions.ConfigureImageSources(this Microsoft.Maui.Hosting.MauiAppBuilder! builder) -> Microsoft.Maui.Hosting.MauiAppBuilder!
static Microsoft.Maui.Hosting.MauiApp.CreateBuilder(bool useDefaults = true) -> Microsoft.Maui.Hosting.MauiAppBuilder!
static Microsoft.Maui.Hosting.MauiHandlersCollectionExtensions.AddHandler(this Microsoft.Maui.Hosting.IMauiHandlersCollection! handlersCollection, System.Type! viewType, System.Type! handlerType) -> Microsoft.Maui.Hosting.IMauiHandlersCollection!
static Microsoft.Maui.Hosting.MauiHandlersCollectionExtensions.AddHandler<TType, TTypeRender>(this Microsoft.Maui.Hosting.IMauiHandlersCollection! handlersCollection) -> Microsoft.Maui.Hosting.IMauiHandlersCollection!
static Microsoft.Maui.Hosting.MauiHandlersCollectionExtensions.AddHandler<TType>(this Microsoft.Maui.Hosting.IMauiHandlersCollection! handlersCollection, System.Func<System.IServiceProvider!, Microsoft.Maui.IElementHandler!>! handlerImplementationFactory) -> Microsoft.Maui.Hosting.IMauiHandlersCollection!
static Microsoft.Maui.Hosting.MauiHandlersCollectionExtensions.TryAddHandler(this Microsoft.Maui.Hosting.IMauiHandlersCollection! handlersCollection, System.Type! viewType, System.Type! handlerType) -> Microsoft.Maui.Hosting.IMauiHandlersCollection!
static Microsoft.Maui.Hosting.MauiHandlersCollectionExtensions.TryAddHandler<TType, TTypeRender>(this Microsoft.Maui.Hosting.IMauiHandlersCollection! handlersCollection) -> Microsoft.Maui.Hosting.IMauiHandlersCollection!
static Microsoft.Maui.Hosting.MauiHandlersCollectionExtensions.TryAddHandler<TType>(this Microsoft.Maui.Hosting.IMauiHandlersCollection! handlersCollection, System.Func<System.IServiceProvider!, Microsoft.Maui.IElementHandler!>! handlerImplementationFactory) -> Microsoft.Maui.Hosting.IMauiHandlersCollection!
static Microsoft.Maui.HotReload.HotReloadExtensions.CheckHandlers(this Microsoft.Maui.IView? view) -> void
static Microsoft.Maui.HotReload.HotReloadExtensions.GetOnHotReloadMethods(this System.Type! type) -> System.Collections.Generic.List<System.Reflection.MethodInfo!>!
static Microsoft.Maui.HotReload.MauiHotReloadHelper.AddActiveView(Microsoft.Maui.HotReload.IHotReloadableView! view) -> void
static Microsoft.Maui.HotReload.MauiHotReloadHelper.ClearCache(System.Type![]! types) -> void
static Microsoft.Maui.HotReload.MauiHotReloadHelper.GetReplacedView(Microsoft.Maui.HotReload.IHotReloadableView! view) -> Microsoft.Maui.IView!
static Microsoft.Maui.HotReload.MauiHotReloadHelper.IsEnabled.get -> bool
static Microsoft.Maui.HotReload.MauiHotReloadHelper.IsEnabled.set -> void
static Microsoft.Maui.HotReload.MauiHotReloadHelper.IsReplacedView(Microsoft.Maui.HotReload.IHotReloadableView! view, Microsoft.Maui.IView! newView) -> bool
static Microsoft.Maui.HotReload.MauiHotReloadHelper.Register(Microsoft.Maui.HotReload.IHotReloadableView! view, params object![]! parameters) -> void
static Microsoft.Maui.HotReload.MauiHotReloadHelper.RegisterHandlers(Microsoft.Maui.Hosting.IMauiHandlersCollection! handlerService) -> void
static Microsoft.Maui.HotReload.MauiHotReloadHelper.RegisterReplacedView(string! oldViewType, System.Type! newViewType) -> void
static Microsoft.Maui.HotReload.MauiHotReloadHelper.Reset() -> void
static Microsoft.Maui.HotReload.MauiHotReloadHelper.TriggerReload() -> void
static Microsoft.Maui.HotReload.MauiHotReloadHelper.UnRegister(Microsoft.Maui.HotReload.IHotReloadableView! view) -> void
static Microsoft.Maui.HotReload.MauiHotReloadHelper.UpdateApplication(System.Type![]! types) -> void
static Microsoft.Maui.ImageSourceExtensions.GetPlatformImageAsync(this Microsoft.Maui.IImageSource? imageSource, Microsoft.Maui.IMauiContext! mauiContext) -> System.Threading.Tasks.Task<Microsoft.Maui.IImageSourceServiceResult<Microsoft.UI.Xaml.Media.ImageSource!>?>!
static Microsoft.Maui.ImageSourceExtensions.GetPlatformImageAsync(this Microsoft.Maui.IImageSourceService! imageSourceService, Microsoft.Maui.IImageSource? imageSource, Microsoft.Maui.IMauiContext! mauiContext) -> System.Threading.Tasks.Task<Microsoft.Maui.IImageSourceServiceResult<Microsoft.UI.Xaml.Media.ImageSource!>?>!
static Microsoft.Maui.ImageSourceExtensions.LoadImage(this Microsoft.Maui.IImageSource? source, Microsoft.Maui.IMauiContext! mauiContext, System.Action<Microsoft.Maui.IImageSourceServiceResult<Microsoft.UI.Xaml.Media.ImageSource!>?>? finished = null) -> void
static Microsoft.Maui.ImageSourceServiceProviderExtensions.GetImageSourceService(this Microsoft.Maui.IImageSourceServiceProvider! provider, Microsoft.Maui.IImageSource! imageSource) -> Microsoft.Maui.IImageSourceService?
static Microsoft.Maui.ImageSourceServiceProviderExtensions.GetImageSourceService<T>(this Microsoft.Maui.IImageSourceServiceProvider! provider) -> Microsoft.Maui.IImageSourceService?
static Microsoft.Maui.ImageSourceServiceProviderExtensions.GetRequiredImageSourceService(this Microsoft.Maui.IImageSourceServiceProvider! provider, Microsoft.Maui.IImageSource! imageSource) -> Microsoft.Maui.IImageSourceService!
static Microsoft.Maui.ImageSourceServiceProviderExtensions.GetRequiredImageSourceService(this Microsoft.Maui.IImageSourceServiceProvider! provider, System.Type! imageSourceType) -> Microsoft.Maui.IImageSourceService!
static Microsoft.Maui.ImageSourceServiceProviderExtensions.GetRequiredImageSourceService<T>(this Microsoft.Maui.IImageSourceServiceProvider! provider) -> Microsoft.Maui.IImageSourceService!
static Microsoft.Maui.IPickerExtension.GetItemsAsArray(this Microsoft.Maui.IPicker! picker) -> string![]!
static Microsoft.Maui.IPickerExtension.GetItemsAsList(this Microsoft.Maui.IPicker! picker) -> System.Collections.Generic.List<string!>!
static Microsoft.Maui.ITextInputExtensions.UpdateText(this Microsoft.Maui.ITextInput! textInput, string? text) -> void
static Microsoft.Maui.Keyboard.Chat.get -> Microsoft.Maui.Keyboard!
static Microsoft.Maui.Keyboard.Create(Microsoft.Maui.KeyboardFlags flags) -> Microsoft.Maui.Keyboard!
static Microsoft.Maui.Keyboard.Default.get -> Microsoft.Maui.Keyboard!
static Microsoft.Maui.Keyboard.Email.get -> Microsoft.Maui.Keyboard!
static Microsoft.Maui.Keyboard.Numeric.get -> Microsoft.Maui.Keyboard!
static Microsoft.Maui.Keyboard.Plain.get -> Microsoft.Maui.Keyboard!
static Microsoft.Maui.Keyboard.Telephone.get -> Microsoft.Maui.Keyboard!
static Microsoft.Maui.Keyboard.Text.get -> Microsoft.Maui.Keyboard!
static Microsoft.Maui.Keyboard.Url.get -> Microsoft.Maui.Keyboard!
static Microsoft.Maui.Layouts.FlexBasis.implicit operator Microsoft.Maui.Layouts.FlexBasis(float length) -> Microsoft.Maui.Layouts.FlexBasis
static Microsoft.Maui.Layouts.FlexBasis.operator !=(Microsoft.Maui.Layouts.FlexBasis left, Microsoft.Maui.Layouts.FlexBasis right) -> bool
static Microsoft.Maui.Layouts.FlexBasis.operator ==(Microsoft.Maui.Layouts.FlexBasis left, Microsoft.Maui.Layouts.FlexBasis right) -> bool
static Microsoft.Maui.Layouts.LayoutExtensions.AdjustForFill(this Microsoft.Maui.Graphics.Size size, Microsoft.Maui.Graphics.Rect bounds, Microsoft.Maui.IView! view) -> Microsoft.Maui.Graphics.Size
static Microsoft.Maui.Layouts.LayoutExtensions.ArrangeContent(this Microsoft.Maui.IContentView! contentView, Microsoft.Maui.Graphics.Rect bounds) -> void
static Microsoft.Maui.Layouts.LayoutExtensions.ArrangeContentUnbounded(this Microsoft.Maui.IContentView! contentView, Microsoft.Maui.Graphics.Rect bounds) -> Microsoft.Maui.Graphics.Size
static Microsoft.Maui.Layouts.LayoutExtensions.ComputeDesiredSize(this Microsoft.Maui.IView! view, double widthConstraint, double heightConstraint) -> Microsoft.Maui.Graphics.Size
static Microsoft.Maui.Layouts.LayoutExtensions.ComputeFrame(this Microsoft.Maui.IView! view, Microsoft.Maui.Graphics.Rect bounds) -> Microsoft.Maui.Graphics.Rect
static Microsoft.Maui.Layouts.LayoutExtensions.MeasureContent(this Microsoft.Maui.IContentView! contentView, double widthConstraint, double heightConstraint) -> Microsoft.Maui.Graphics.Size
static Microsoft.Maui.Layouts.LayoutExtensions.MeasureContent(this Microsoft.Maui.IContentView! contentView, Microsoft.Maui.Thickness inset, double widthConstraint, double heightConstraint) -> Microsoft.Maui.Graphics.Size
static Microsoft.Maui.Layouts.LayoutManager.ResolveConstraints(double externalConstraint, double explicitLength, double measuredLength, double min = 0, double max = Infinity) -> double
static Microsoft.Maui.Layouts.StackLayoutManager.MeasureSpacing(double spacing, int childCount) -> double
static Microsoft.Maui.LifecycleEvents.LifecycleBuilderExtensions.AddEvent(this Microsoft.Maui.LifecycleEvents.ILifecycleBuilder! builder, string! eventName, System.Action! action) -> Microsoft.Maui.LifecycleEvents.ILifecycleBuilder!
static Microsoft.Maui.LifecycleEvents.LifecycleBuilderExtensions.AddEvent<TDelegate>(this Microsoft.Maui.LifecycleEvents.ILifecycleBuilder! builder, string! eventName, TDelegate! action) -> Microsoft.Maui.LifecycleEvents.ILifecycleBuilder!
static Microsoft.Maui.LifecycleEvents.LifecycleEventServiceExtensions.InvokeEvents(this Microsoft.Maui.LifecycleEvents.ILifecycleEventService! lifecycleService, string! eventName) -> void
static Microsoft.Maui.LifecycleEvents.LifecycleEventServiceExtensions.InvokeEvents<TDelegate>(this Microsoft.Maui.LifecycleEvents.ILifecycleEventService! lifecycleService, string! eventName, System.Action<TDelegate!>! action) -> void
static Microsoft.Maui.LifecycleEvents.MauiAppHostBuilderExtensions.ConfigureLifecycleEvents(this Microsoft.Maui.Hosting.MauiAppBuilder! builder, System.Action<Microsoft.Maui.LifecycleEvents.ILifecycleBuilder!>? configureDelegate) -> Microsoft.Maui.Hosting.MauiAppBuilder!
static Microsoft.Maui.LifecycleEvents.WindowsLifecycleBuilderExtensions.OnActivated(this Microsoft.Maui.LifecycleEvents.IWindowsLifecycleBuilder! lifecycle, Microsoft.Maui.LifecycleEvents.WindowsLifecycle.OnActivated! del) -> Microsoft.Maui.LifecycleEvents.IWindowsLifecycleBuilder!
static Microsoft.Maui.LifecycleEvents.WindowsLifecycleBuilderExtensions.OnClosed(this Microsoft.Maui.LifecycleEvents.IWindowsLifecycleBuilder! lifecycle, Microsoft.Maui.LifecycleEvents.WindowsLifecycle.OnClosed! del) -> Microsoft.Maui.LifecycleEvents.IWindowsLifecycleBuilder!
static Microsoft.Maui.LifecycleEvents.WindowsLifecycleBuilderExtensions.OnLaunched(this Microsoft.Maui.LifecycleEvents.IWindowsLifecycleBuilder! lifecycle, Microsoft.Maui.LifecycleEvents.WindowsLifecycle.OnLaunched! del) -> Microsoft.Maui.LifecycleEvents.IWindowsLifecycleBuilder!
static Microsoft.Maui.LifecycleEvents.WindowsLifecycleBuilderExtensions.OnLaunching(this Microsoft.Maui.LifecycleEvents.IWindowsLifecycleBuilder! lifecycle, Microsoft.Maui.LifecycleEvents.WindowsLifecycle.OnLaunching! del) -> Microsoft.Maui.LifecycleEvents.IWindowsLifecycleBuilder!
static Microsoft.Maui.LifecycleEvents.WindowsLifecycleBuilderExtensions.OnPlatformMessage(this Microsoft.Maui.LifecycleEvents.IWindowsLifecycleBuilder! lifecycle, Microsoft.Maui.LifecycleEvents.WindowsLifecycle.OnPlatformMessage! del) -> Microsoft.Maui.LifecycleEvents.IWindowsLifecycleBuilder!
static Microsoft.Maui.LifecycleEvents.WindowsLifecycleBuilderExtensions.OnPlatformWindowSubclassed(this Microsoft.Maui.LifecycleEvents.IWindowsLifecycleBuilder! lifecycle, Microsoft.Maui.LifecycleEvents.WindowsLifecycle.OnPlatformWindowSubclassed! del) -> Microsoft.Maui.LifecycleEvents.IWindowsLifecycleBuilder!
static Microsoft.Maui.LifecycleEvents.WindowsLifecycleBuilderExtensions.OnResumed(this Microsoft.Maui.LifecycleEvents.IWindowsLifecycleBuilder! lifecycle, Microsoft.Maui.LifecycleEvents.WindowsLifecycle.OnResumed! del) -> Microsoft.Maui.LifecycleEvents.IWindowsLifecycleBuilder!
static Microsoft.Maui.LifecycleEvents.WindowsLifecycleBuilderExtensions.OnVisibilityChanged(this Microsoft.Maui.LifecycleEvents.IWindowsLifecycleBuilder! lifecycle, Microsoft.Maui.LifecycleEvents.WindowsLifecycle.OnVisibilityChanged! del) -> Microsoft.Maui.LifecycleEvents.IWindowsLifecycleBuilder!
static Microsoft.Maui.LifecycleEvents.WindowsLifecycleBuilderExtensions.OnWindowCreated(this Microsoft.Maui.LifecycleEvents.IWindowsLifecycleBuilder! lifecycle, Microsoft.Maui.LifecycleEvents.WindowsLifecycle.OnWindowCreated! del) -> Microsoft.Maui.LifecycleEvents.IWindowsLifecycleBuilder!
static Microsoft.Maui.LifecycleEvents.WindowsLifecycleExtensions.AddWindows(this Microsoft.Maui.LifecycleEvents.ILifecycleBuilder! builder, System.Action<Microsoft.Maui.LifecycleEvents.IWindowsLifecycleBuilder!>! configureDelegate) -> Microsoft.Maui.LifecycleEvents.ILifecycleBuilder!
static Microsoft.Maui.MauiWinUIApplication.Current.get -> Microsoft.Maui.MauiWinUIApplication!
static Microsoft.Maui.Platform.ActivityIndicatorExtensions.UpdateColor(this Microsoft.UI.Xaml.Controls.ProgressRing! platformActivityIndicator, Microsoft.Maui.IActivityIndicator! activityIndicator, object? foregroundDefault) -> void
static Microsoft.Maui.Platform.ActivityIndicatorExtensions.UpdateColor(this Microsoft.UI.Xaml.Controls.ProgressRing! platformActivityIndicator, Microsoft.Maui.IActivityIndicator! activityIndicator) -> void
static Microsoft.Maui.Platform.ActivityIndicatorExtensions.UpdateHeight(this Microsoft.UI.Xaml.Controls.ProgressRing! platformActivityIndicator, Microsoft.Maui.IActivityIndicator! activityIndicator) -> void
static Microsoft.Maui.Platform.ActivityIndicatorExtensions.UpdateIsRunning(this Microsoft.UI.Xaml.Controls.ProgressRing! platformActivityIndicator, Microsoft.Maui.IActivityIndicator! virtualView) -> void
static Microsoft.Maui.Platform.ActivityIndicatorExtensions.UpdateWidth(this Microsoft.UI.Xaml.Controls.ProgressRing! platformActivityIndicator, Microsoft.Maui.IActivityIndicator! activityIndicator) -> void
static Microsoft.Maui.Platform.AlignmentExtensions.ToPlatform(this Microsoft.Maui.TextAlignment alignment, bool isLtr = true) -> Microsoft.UI.Xaml.TextAlignment
static Microsoft.Maui.Platform.AlignmentExtensions.ToPlatformHorizontalAlignment(this Microsoft.Maui.TextAlignment alignment) -> Microsoft.UI.Xaml.HorizontalAlignment
static Microsoft.Maui.Platform.AlignmentExtensions.ToPlatformVerticalAlignment(this Microsoft.Maui.TextAlignment alignment) -> Microsoft.UI.Xaml.VerticalAlignment
static Microsoft.Maui.Platform.ApplicationExtensions.CreatePlatformWindow(this Microsoft.UI.Xaml.Application! platformApplication, Microsoft.Maui.IApplication! application, Microsoft.Maui.Handlers.OpenWindowRequest? args) -> void
static Microsoft.Maui.Platform.ApplicationExtensions.CreatePlatformWindow(this Microsoft.UI.Xaml.Application! platformApplication, Microsoft.Maui.IApplication! application, Microsoft.UI.Xaml.LaunchActivatedEventArgs? args) -> void
static Microsoft.Maui.Platform.AspectExtensions.ToStretch(this Microsoft.Maui.Aspect aspect) -> Microsoft.UI.Xaml.Media.Stretch
static Microsoft.Maui.Platform.BorderExtensions.UpdateBackground(this Microsoft.UI.Xaml.Shapes.Path! borderPath, Microsoft.Maui.Graphics.Paint? background) -> void
static Microsoft.Maui.Platform.BorderExtensions.UpdateBorderDashOffset(this Microsoft.UI.Xaml.Shapes.Path! borderPath, double borderDashOffset) -> void
static Microsoft.Maui.Platform.BorderExtensions.UpdateBorderShape(this Microsoft.UI.Xaml.Shapes.Path! borderPath, Microsoft.Maui.Graphics.IShape? borderShape, double width, double height) -> void
static Microsoft.Maui.Platform.BorderExtensions.UpdateStroke(this Microsoft.UI.Xaml.Shapes.Path! borderPath, Microsoft.Maui.Graphics.Paint? borderBrush) -> void
static Microsoft.Maui.Platform.BorderExtensions.UpdateStrokeDashPattern(this Microsoft.UI.Xaml.Shapes.Path! borderPath, float[]? borderDashArray) -> void
static Microsoft.Maui.Platform.BorderExtensions.UpdateStrokeLineCap(this Microsoft.UI.Xaml.Shapes.Path! borderPath, Microsoft.Maui.Graphics.LineCap strokeLineCap) -> void
static Microsoft.Maui.Platform.BorderExtensions.UpdateStrokeLineJoin(this Microsoft.UI.Xaml.Shapes.Path! borderPath, Microsoft.Maui.Graphics.LineJoin strokeLineJoin) -> void
static Microsoft.Maui.Platform.BorderExtensions.UpdateStrokeMiterLimit(this Microsoft.UI.Xaml.Shapes.Path! borderPath, double strokeMiterLimit) -> void
static Microsoft.Maui.Platform.BorderExtensions.UpdateStrokeThickness(this Microsoft.UI.Xaml.Shapes.Path! borderPath, double borderWidth) -> void
static Microsoft.Maui.Platform.ButtonExtensions.GetContent<T>(this Microsoft.UI.Xaml.Controls.Primitives.ButtonBase! platformButton) -> T?
static Microsoft.Maui.Platform.ButtonExtensions.UpdateBackground(this Microsoft.UI.Xaml.Controls.Button! platformButton, Microsoft.Maui.IButton! button) -> void
static Microsoft.Maui.Platform.ButtonExtensions.UpdateCharacterSpacing(this Microsoft.UI.Xaml.Controls.Primitives.ButtonBase! platformButton, Microsoft.Maui.ITextStyle! button) -> void
static Microsoft.Maui.Platform.ButtonExtensions.UpdateCornerRadius(this Microsoft.UI.Xaml.Controls.Button! platformButton, Microsoft.Maui.IButtonStroke! buttonStroke) -> void
static Microsoft.Maui.Platform.ButtonExtensions.UpdateImageSource(this Microsoft.UI.Xaml.Controls.Button! platformButton, Microsoft.UI.Xaml.Media.ImageSource? nativeImageSource) -> void
static Microsoft.Maui.Platform.ButtonExtensions.UpdatePadding(this Microsoft.UI.Xaml.Controls.Button! platformButton, Microsoft.Maui.IPadding! padding) -> void
static Microsoft.Maui.Platform.ButtonExtensions.UpdateStrokeColor(this Microsoft.UI.Xaml.Controls.Button! platformButton, Microsoft.Maui.IButtonStroke! buttonStroke) -> void
static Microsoft.Maui.Platform.ButtonExtensions.UpdateStrokeThickness(this Microsoft.UI.Xaml.Controls.Button! platformButton, Microsoft.Maui.IButtonStroke! buttonStroke) -> void
static Microsoft.Maui.Platform.ButtonExtensions.UpdateText(this Microsoft.UI.Xaml.Controls.Button! platformButton, Microsoft.Maui.IText! text) -> void
static Microsoft.Maui.Platform.ButtonExtensions.UpdateText(this Microsoft.UI.Xaml.Controls.Button! platformButton, string! text) -> void
static Microsoft.Maui.Platform.ButtonExtensions.UpdateTextColor(this Microsoft.UI.Xaml.Controls.Primitives.ButtonBase! platformButton, Microsoft.Maui.Graphics.Color! textColor) -> void
static Microsoft.Maui.Platform.ButtonExtensions.UpdateTextColor(this Microsoft.UI.Xaml.Controls.Primitives.ButtonBase! platformButton, Microsoft.Maui.ITextStyle! button) -> void
static Microsoft.Maui.Platform.CharacterSpacingExtensions.ToEm(this double pt) -> int
static Microsoft.Maui.Platform.CheckBoxExtensions.UpdateForeground(this Microsoft.UI.Xaml.Controls.CheckBox! platformCheckBox, Microsoft.Maui.ICheckBox! check) -> void
static Microsoft.Maui.Platform.CheckBoxExtensions.UpdateIsChecked(this Microsoft.UI.Xaml.Controls.CheckBox! platformCheckBox, Microsoft.Maui.ICheckBox! check) -> void
static Microsoft.Maui.Platform.ColorExtensions.GetContrastingColor(this Windows.UI.Color color) -> Windows.UI.Color
static Microsoft.Maui.Platform.ColorExtensions.IsDefault(this Microsoft.Maui.Graphics.Color? color) -> bool
static Microsoft.Maui.Platform.ColorExtensions.ToColor(this Microsoft.UI.Xaml.Media.SolidColorBrush! solidColorBrush) -> Microsoft.Maui.Graphics.Color!
static Microsoft.Maui.Platform.ColorExtensions.ToColor(this Windows.UI.Color color) -> Microsoft.Maui.Graphics.Color!
static Microsoft.Maui.Platform.ColorExtensions.ToPlatform(this Microsoft.Maui.Graphics.Color! color) -> Microsoft.UI.Xaml.Media.Brush!
static Microsoft.Maui.Platform.ColorExtensions.ToWindowsColor(this Microsoft.Maui.Graphics.Color! color) -> Windows.UI.Color
static Microsoft.Maui.Platform.ControlExtensions.UpdateBackground(this Microsoft.UI.Xaml.Controls.Border! platformControl, Microsoft.Maui.Graphics.Paint? paint, Microsoft.UI.Xaml.Media.Brush? defaultBrush = null) -> void
static Microsoft.Maui.Platform.ControlExtensions.UpdateBackground(this Microsoft.UI.Xaml.Controls.Control! platformControl, Microsoft.Maui.Graphics.Paint? paint, Microsoft.UI.Xaml.Media.Brush? defaultBrush = null) -> void
static Microsoft.Maui.Platform.ControlExtensions.UpdateBackground(this Microsoft.UI.Xaml.Controls.Control! platformControl, Microsoft.Maui.IView! view, Microsoft.UI.Xaml.Media.Brush? defaultBrush = null) -> void
static Microsoft.Maui.Platform.ControlExtensions.UpdateBackground(this Microsoft.UI.Xaml.Controls.Panel! platformControl, Microsoft.Maui.Graphics.Paint? paint, Microsoft.UI.Xaml.Media.Brush? defaultBrush = null) -> void
static Microsoft.Maui.Platform.ControlExtensions.UpdateBackgroundImageSourceAsync(this Microsoft.UI.Xaml.Controls.Control! platformView, Microsoft.Maui.IImageSource? imageSource, Microsoft.Maui.IImageSourceServiceProvider? provider) -> System.Threading.Tasks.Task!
static Microsoft.Maui.Platform.ControlExtensions.UpdateBackgroundImageSourceAsync(this Microsoft.UI.Xaml.Controls.Panel! platformView, Microsoft.Maui.IImageSource? imageSource, Microsoft.Maui.IImageSourceServiceProvider? provider) -> System.Threading.Tasks.Task!
static Microsoft.Maui.Platform.ControlExtensions.UpdateCharacterSpacing(this Microsoft.UI.Xaml.Controls.Control! nativeControl, Microsoft.Maui.ITextStyle! text) -> void
static Microsoft.Maui.Platform.ControlExtensions.UpdateFont(this Microsoft.UI.Xaml.Controls.Control! platformButton, Microsoft.Maui.ITextStyle! textStyle, Microsoft.Maui.IFontManager! fontManager) -> void
static Microsoft.Maui.Platform.ControlExtensions.UpdateFont(this Microsoft.UI.Xaml.Controls.Control! platformControl, Microsoft.Maui.Font font, Microsoft.Maui.IFontManager! fontManager) -> void
static Microsoft.Maui.Platform.ControlExtensions.UpdateForegroundColor(this Microsoft.UI.Xaml.Controls.Control! platformControl, Microsoft.Maui.Graphics.Color! color, Microsoft.UI.Xaml.Media.Brush? defaultBrush = null) -> void
static Microsoft.Maui.Platform.ControlExtensions.UpdateIsEnabled(this Microsoft.UI.Xaml.Controls.Control! platformControl, bool isEnabled) -> void
static Microsoft.Maui.Platform.ControlExtensions.UpdatePadding(this Microsoft.UI.Xaml.Controls.Control! platformControl, Microsoft.Maui.IPadding! padding, Microsoft.UI.Xaml.Thickness? defaultThickness = null) -> void
static Microsoft.Maui.Platform.ControlExtensions.UpdatePadding(this Microsoft.UI.Xaml.Controls.Control! platformControl, Microsoft.Maui.Thickness padding, Microsoft.UI.Xaml.Thickness? defaultThickness = null) -> void
static Microsoft.Maui.Platform.ControlExtensions.UpdateTextColor(this Microsoft.UI.Xaml.Controls.Control! nativeControl, Microsoft.Maui.ITextStyle! text) -> void
static Microsoft.Maui.Platform.DatePickerExtensions.UpdateCharacterSpacing(this Microsoft.UI.Xaml.Controls.CalendarDatePicker! platformDatePicker, Microsoft.Maui.IDatePicker! datePicker) -> void
static Microsoft.Maui.Platform.DatePickerExtensions.UpdateDate(this Microsoft.UI.Xaml.Controls.CalendarDatePicker! platformDatePicker, Microsoft.Maui.IDatePicker! datePicker) -> void
static Microsoft.Maui.Platform.DatePickerExtensions.UpdateDate(this Microsoft.UI.Xaml.Controls.CalendarDatePicker! platformDatePicker, System.DateTime dateTime) -> void
static Microsoft.Maui.Platform.DatePickerExtensions.UpdateFont(this Microsoft.UI.Xaml.Controls.CalendarDatePicker! platformDatePicker, Microsoft.Maui.IDatePicker! datePicker, Microsoft.Maui.IFontManager! fontManager) -> void
static Microsoft.Maui.Platform.DatePickerExtensions.UpdateMaximumDate(this Microsoft.UI.Xaml.Controls.CalendarDatePicker! platformDatePicker, Microsoft.Maui.IDatePicker! datePicker) -> void
static Microsoft.Maui.Platform.DatePickerExtensions.UpdateMinimumDate(this Microsoft.UI.Xaml.Controls.CalendarDatePicker! platformDatePicker, Microsoft.Maui.IDatePicker! datePicker) -> void
static Microsoft.Maui.Platform.DatePickerExtensions.UpdateTextColor(this Microsoft.UI.Xaml.Controls.CalendarDatePicker! platformDatePicker, Microsoft.Maui.IDatePicker! datePicker) -> void
static Microsoft.Maui.Platform.ElementExtensions.SetApplicationHandler(this Microsoft.UI.Xaml.Application! platformApplication, Microsoft.Maui.IApplication! application, Microsoft.Maui.IMauiContext! context) -> void
static Microsoft.Maui.Platform.ElementExtensions.SetWindowHandler(this Microsoft.UI.Xaml.Window! platformWindow, Microsoft.Maui.IWindow! window, Microsoft.Maui.IMauiContext! context) -> void
static Microsoft.Maui.Platform.ElementExtensions.ToHandler(this Microsoft.Maui.IElement! view, Microsoft.Maui.IMauiContext! context) -> Microsoft.Maui.IElementHandler!
static Microsoft.Maui.Platform.ElementExtensions.ToPlatform(this Microsoft.Maui.IElement! view, Microsoft.Maui.IMauiContext! context) -> Microsoft.UI.Xaml.FrameworkElement!
static Microsoft.Maui.Platform.FontExtensions.ToFontStyle(this Microsoft.Maui.Font fontAttributes) -> Windows.UI.Text.FontStyle
static Microsoft.Maui.Platform.FontExtensions.ToFontWeight(this Microsoft.Maui.Font font) -> Windows.UI.Text.FontWeight
static Microsoft.Maui.Platform.GraphicsExtensions.AsPoint(this Microsoft.Maui.Graphics.PointF target, float ppu) -> Windows.Foundation.Point
static Microsoft.Maui.Platform.GraphicsExtensions.AsPoint(this Microsoft.Maui.Graphics.PointF target) -> Windows.Foundation.Point
static Microsoft.Maui.Platform.GraphicsViewExtensions.UpdateDrawable(this Microsoft.Maui.Graphics.Win2D.W2DGraphicsView! PlatformGraphicsView, Microsoft.Maui.IGraphicsView! graphicsView) -> void
static Microsoft.Maui.Platform.ImageExtensions.GetImageSourceSize(this Microsoft.UI.Xaml.Media.ImageSource! source, Microsoft.UI.Xaml.FrameworkElement? element = null) -> Microsoft.Maui.Graphics.Size
static Microsoft.Maui.Platform.ImageExtensions.ToIconSource(this Microsoft.Maui.IImageSource! source, Microsoft.Maui.IMauiContext! mauiContext) -> Microsoft.UI.Xaml.Controls.IconSource?
static Microsoft.Maui.Platform.ImageViewExtensions.Clear(this Microsoft.UI.Xaml.Controls.Image! imageView) -> void
static Microsoft.Maui.Platform.ImageViewExtensions.UpdateAspect(this Microsoft.UI.Xaml.Controls.Image! imageView, Microsoft.Maui.IImage! image) -> void
static Microsoft.Maui.Platform.ImageViewExtensions.UpdateIsAnimationPlaying(this Microsoft.UI.Xaml.Controls.Image! imageView, Microsoft.Maui.IImageSourcePart! image) -> void
static Microsoft.Maui.Platform.KeyboardAcceleratorExtensions.ToPlatform(this Microsoft.Maui.IKeyboardAccelerator! keyboardAccelerator) -> Microsoft.UI.Xaml.Input.KeyboardAccelerator?
static Microsoft.Maui.Platform.KeyboardAcceleratorExtensions.ToPlatform(this System.Collections.Generic.IReadOnlyList<Microsoft.Maui.IKeyboardAccelerator!>! keyboardAccelerators) -> System.Collections.Generic.IList<Microsoft.UI.Xaml.Input.KeyboardAccelerator!>?
static Microsoft.Maui.Platform.KeyboardAcceleratorExtensions.UpdateKeyboardAccelerators(this Microsoft.UI.Xaml.Controls.MenuFlyoutItemBase! platformView, Microsoft.Maui.IMenuFlyoutItem! menuFlyoutItem) -> void
static Microsoft.Maui.Platform.KeyboardExtensions.ToInputScope(this Microsoft.Maui.Keyboard! self) -> Microsoft.UI.Xaml.Input.InputScope!
static Microsoft.Maui.Platform.KeyboardExtensions.ToInputScopeName(this Microsoft.Maui.Keyboard! self) -> Microsoft.UI.Xaml.Input.InputScopeName!
static Microsoft.Maui.Platform.LayoutPanelExtensions.UpdateClipsToBounds(this Microsoft.Maui.Platform.LayoutPanel! layoutPanel, Microsoft.Maui.ILayout! layout) -> void
static Microsoft.Maui.Platform.MauiAutoSuggestBox.GetIsReadOnly(Microsoft.UI.Xaml.DependencyObject! obj) -> bool
static Microsoft.Maui.Platform.MauiAutoSuggestBox.InvalidateAttachedProperties(Microsoft.UI.Xaml.DependencyObject! obj) -> void
static Microsoft.Maui.Platform.MauiAutoSuggestBox.SetIsReadOnly(Microsoft.UI.Xaml.DependencyObject! obj, bool value) -> void
static Microsoft.Maui.Platform.MauiTextBox.GetIsDeleteButtonEnabled(Microsoft.UI.Xaml.DependencyObject! obj) -> bool
static Microsoft.Maui.Platform.MauiTextBox.GetVerticalTextAlignment(Microsoft.UI.Xaml.DependencyObject! obj) -> Microsoft.UI.Xaml.VerticalAlignment
static Microsoft.Maui.Platform.MauiTextBox.InvalidateAttachedProperties(Microsoft.UI.Xaml.DependencyObject! obj) -> void
static Microsoft.Maui.Platform.MauiTextBox.SetIsDeleteButtonEnabled(Microsoft.UI.Xaml.DependencyObject! obj, bool value) -> void
static Microsoft.Maui.Platform.MauiTextBox.SetVerticalTextAlignment(Microsoft.UI.Xaml.DependencyObject! obj, Microsoft.UI.Xaml.VerticalAlignment value) -> void
static Microsoft.Maui.Platform.NavigationViewExtensions.UpdateFlyoutBehavior(this Microsoft.Maui.Platform.MauiNavigationView! navigationView, Microsoft.Maui.IFlyoutView! flyoutView) -> void
static Microsoft.Maui.Platform.NavigationViewExtensions.UpdateFlyoutIconAsync(this Microsoft.Maui.Platform.MauiNavigationView! navigationView, Microsoft.Maui.IImageSource? imageSource, Microsoft.Maui.IImageSourceServiceProvider? provider) -> System.Threading.Tasks.Task!
static Microsoft.Maui.Platform.NavigationViewExtensions.UpdateFlyoutIconAsync(this Microsoft.UI.Xaml.Controls.AnimatedIcon! platformView, Microsoft.Maui.IImageSource? imageSource, Microsoft.Maui.IImageSourceServiceProvider? provider) -> System.Threading.Tasks.Task!
static Microsoft.Maui.Platform.NavigationViewExtensions.UpdateFlyoutVerticalScrollMode(this Microsoft.Maui.Platform.MauiNavigationView! navigationView, Microsoft.UI.Xaml.Controls.ScrollMode scrollMode) -> void
static Microsoft.Maui.Platform.NavigationViewExtensions.UpdateFlyoutWidth(this Microsoft.Maui.Platform.MauiNavigationView! navigationView, Microsoft.Maui.IFlyoutView! flyoutView) -> void
static Microsoft.Maui.Platform.NavigationViewExtensions.UpdatePaneBackground(this Microsoft.Maui.Platform.MauiNavigationView! navigationView, Microsoft.Maui.Graphics.Paint? paint) -> void
static Microsoft.Maui.Platform.NavigationViewExtensions.UpdateTopNavAreaBackground(this Microsoft.Maui.Platform.MauiNavigationView! navigationView, Microsoft.Maui.Graphics.Paint? paint) -> void
static Microsoft.Maui.Platform.NavigationViewExtensions.UpdateTopNavigationViewItemBackgroundSelectedColor(this Microsoft.Maui.Platform.MauiNavigationView! navigationView, Microsoft.Maui.Graphics.Paint? paint) -> void
static Microsoft.Maui.Platform.NavigationViewExtensions.UpdateTopNavigationViewItemBackgroundUnselectedColor(this Microsoft.Maui.Platform.MauiNavigationView! navigationView, Microsoft.Maui.Graphics.Paint? paint) -> void
static Microsoft.Maui.Platform.NavigationViewExtensions.UpdateTopNavigationViewItemSelectedColor(this Microsoft.Maui.Platform.MauiNavigationView! navigationView, Microsoft.Maui.Graphics.Paint? paint) -> void
static Microsoft.Maui.Platform.NavigationViewExtensions.UpdateTopNavigationViewItemTextColor(this Microsoft.Maui.Platform.MauiNavigationView! navigationView, Microsoft.Maui.Graphics.Paint? paint) -> void
static Microsoft.Maui.Platform.NavigationViewExtensions.UpdateTopNavigationViewItemTextSelectedColor(this Microsoft.Maui.Platform.MauiNavigationView! navigationView, Microsoft.Maui.Graphics.Paint? paint) -> void
static Microsoft.Maui.Platform.NavigationViewExtensions.UpdateTopNavigationViewItemUnselectedColor(this Microsoft.Maui.Platform.MauiNavigationView! navigationView, Microsoft.Maui.Graphics.Paint? paint) -> void
static Microsoft.Maui.Platform.PickerExtensions.UpdateBackground(this Microsoft.UI.Xaml.Controls.ComboBox! nativeComboBox, Microsoft.Maui.IPicker! picker) -> void
static Microsoft.Maui.Platform.PickerExtensions.UpdateCharacterSpacing(this Microsoft.UI.Xaml.Controls.ComboBox! nativeComboBox, Microsoft.Maui.IPicker! picker) -> void
static Microsoft.Maui.Platform.PickerExtensions.UpdateFont(this Microsoft.UI.Xaml.Controls.ComboBox! nativeComboBox, Microsoft.Maui.IPicker! picker, Microsoft.Maui.IFontManager! fontManager) -> void
static Microsoft.Maui.Platform.PickerExtensions.UpdateHorizontalTextAlignment(this Microsoft.UI.Xaml.Controls.ComboBox! nativeComboBox, Microsoft.Maui.IPicker! picker) -> void
static Microsoft.Maui.Platform.PickerExtensions.UpdateSelectedIndex(this Microsoft.UI.Xaml.Controls.ComboBox! nativeComboBox, Microsoft.Maui.IPicker! picker) -> void
static Microsoft.Maui.Platform.PickerExtensions.UpdateTextColor(this Microsoft.UI.Xaml.Controls.ComboBox! nativeComboBox, Microsoft.Maui.IPicker! picker) -> void
static Microsoft.Maui.Platform.PickerExtensions.UpdateTitle(this Microsoft.UI.Xaml.Controls.ComboBox! nativeComboBox, Microsoft.Maui.IPicker! picker) -> void
static Microsoft.Maui.Platform.PickerExtensions.UpdateVerticalTextAlignment(this Microsoft.UI.Xaml.Controls.ComboBox! nativeComboBox, Microsoft.Maui.IPicker! picker) -> void
static Microsoft.Maui.Platform.PrimitiveExtensions.ToPlatform(this Microsoft.Maui.Graphics.Point point) -> Windows.Foundation.Point
static Microsoft.Maui.Platform.PrimitiveExtensions.ToPlatform(this Microsoft.Maui.Thickness thickness) -> Microsoft.UI.Xaml.Thickness
static Microsoft.Maui.Platform.PrimitiveExtensions.ToPoint(this Windows.Foundation.Point point) -> Microsoft.Maui.Graphics.Point
static Microsoft.Maui.Platform.PrimitiveExtensions.ToThickness(this Microsoft.UI.Xaml.Thickness thickness) -> Microsoft.Maui.Thickness
static Microsoft.Maui.Platform.ProgressBarExtensions.UpdateProgress(this Microsoft.UI.Xaml.Controls.ProgressBar! platformProgressBar, Microsoft.Maui.IProgress! progress) -> void
static Microsoft.Maui.Platform.ProgressBarExtensions.UpdateProgressColor(this Microsoft.UI.Xaml.Controls.ProgressBar! platformProgressBar, Microsoft.Maui.IProgress! progress) -> void
static Microsoft.Maui.Platform.RadioButtonExtensions.UpdateBackground(this Microsoft.UI.Xaml.Controls.RadioButton! platformRadioButton, Microsoft.Maui.IRadioButton! button) -> void
static Microsoft.Maui.Platform.RadioButtonExtensions.UpdateContent(this Microsoft.UI.Xaml.Controls.RadioButton! platformRadioButton, Microsoft.Maui.IRadioButton! radioButton) -> void
static Microsoft.Maui.Platform.RadioButtonExtensions.UpdateCornerRadius(this Microsoft.UI.Xaml.Controls.RadioButton! nativeRadioButton, Microsoft.Maui.IRadioButton! radioButton) -> void
static Microsoft.Maui.Platform.RadioButtonExtensions.UpdateIsChecked(this Microsoft.UI.Xaml.Controls.RadioButton! platformRadioButton, Microsoft.Maui.IRadioButton! radioButton) -> void
static Microsoft.Maui.Platform.RadioButtonExtensions.UpdateStrokeColor(this Microsoft.UI.Xaml.Controls.RadioButton! platformRadioButton, Microsoft.Maui.IRadioButton! radioButton) -> void
static Microsoft.Maui.Platform.RadioButtonExtensions.UpdateStrokeThickness(this Microsoft.UI.Xaml.Controls.RadioButton! nativeRadioButton, Microsoft.Maui.IRadioButton! radioButton) -> void
static Microsoft.Maui.Platform.RadioButtonExtensions.UpdateTextColor(this Microsoft.UI.Xaml.Controls.RadioButton! platformRadioButton, Microsoft.Maui.ITextStyle! button) -> void
static Microsoft.Maui.Platform.ScrollViewerExtensions.ToWindowsScrollBarVisibility(this Microsoft.Maui.ScrollBarVisibility visibility) -> Microsoft.UI.Xaml.Controls.ScrollBarVisibility
static Microsoft.Maui.Platform.ScrollViewerExtensions.UpdateContent(this Microsoft.UI.Xaml.Controls.ScrollViewer! scrollViewer, Microsoft.Maui.IView? content, Microsoft.Maui.IMauiContext! context) -> void
static Microsoft.Maui.Platform.ScrollViewerExtensions.UpdateScrollBarVisibility(this Microsoft.UI.Xaml.Controls.ScrollViewer! scrollViewer, Microsoft.Maui.ScrollOrientation orientation, Microsoft.Maui.ScrollBarVisibility horizontalScrollBarVisibility) -> void
static Microsoft.Maui.Platform.SearchBarExtensions.UpdateBackground(this Microsoft.UI.Xaml.Controls.AutoSuggestBox! platformControl, Microsoft.Maui.ISearchBar! searchBar) -> void
static Microsoft.Maui.Platform.SearchBarExtensions.UpdateCharacterSpacing(this Microsoft.UI.Xaml.Controls.AutoSuggestBox! platformControl, Microsoft.Maui.ISearchBar! searchBar) -> void
static Microsoft.Maui.Platform.SearchBarExtensions.UpdateFont(this Microsoft.UI.Xaml.Controls.AutoSuggestBox! platformControl, Microsoft.Maui.ISearchBar! searchBar, Microsoft.Maui.IFontManager! fontManager) -> void
static Microsoft.Maui.Platform.SearchBarExtensions.UpdateHorizontalTextAlignment(this Microsoft.UI.Xaml.Controls.AutoSuggestBox! platformControl, Microsoft.Maui.ISearchBar! searchBar) -> void
static Microsoft.Maui.Platform.SearchBarExtensions.UpdateIsEnabled(this Microsoft.UI.Xaml.Controls.AutoSuggestBox! platformControl, Microsoft.Maui.ISearchBar! searchBar) -> void
static Microsoft.Maui.Platform.SearchBarExtensions.UpdateIsReadOnly(this Microsoft.UI.Xaml.Controls.AutoSuggestBox! platformControl, Microsoft.Maui.ISearchBar! searchBar) -> void
static Microsoft.Maui.Platform.SearchBarExtensions.UpdateIsSpellCheckEnabled(this Microsoft.UI.Xaml.Controls.AutoSuggestBox! platformControl, Microsoft.Maui.ISearchBar! searchBar) -> void
static Microsoft.Maui.Platform.SearchBarExtensions.UpdateIsTextPredictionEnabled(this Microsoft.UI.Xaml.Controls.AutoSuggestBox! platformControl, Microsoft.Maui.ISearchBar! searchBar) -> void
static Microsoft.Maui.Platform.SearchBarExtensions.UpdateKeyboard(this Microsoft.UI.Xaml.Controls.AutoSuggestBox! platformControl, Microsoft.Maui.ISearchBar! searchBar) -> void
static Microsoft.Maui.Platform.SearchBarExtensions.UpdateMaxLength(this Microsoft.UI.Xaml.Controls.AutoSuggestBox! platformControl, Microsoft.Maui.ISearchBar! searchBar) -> void
static Microsoft.Maui.Platform.SearchBarExtensions.UpdatePlaceholder(this Microsoft.UI.Xaml.Controls.AutoSuggestBox! platformControl, Microsoft.Maui.ISearchBar! searchBar) -> void
static Microsoft.Maui.Platform.SearchBarExtensions.UpdatePlaceholderColor(this Microsoft.UI.Xaml.Controls.AutoSuggestBox! platformControl, Microsoft.Maui.ISearchBar! searchBar) -> void
static Microsoft.Maui.Platform.SearchBarExtensions.UpdateText(this Microsoft.UI.Xaml.Controls.AutoSuggestBox! platformControl, Microsoft.Maui.ISearchBar! searchBar) -> void
static Microsoft.Maui.Platform.SearchBarExtensions.UpdateTextColor(this Microsoft.UI.Xaml.Controls.AutoSuggestBox! platformControl, Microsoft.Maui.ISearchBar! searchBar) -> void
static Microsoft.Maui.Platform.SearchBarExtensions.UpdateVerticalTextAlignment(this Microsoft.UI.Xaml.Controls.AutoSuggestBox! platformControl, Microsoft.Maui.ISearchBar! searchBar) -> void
static Microsoft.Maui.Platform.ShapesExtensions.InvalidateShape(this Microsoft.Maui.Graphics.Win2D.W2DGraphicsView! platformView, Microsoft.Maui.IShapeView! shapeView) -> void
static Microsoft.Maui.Platform.ShapesExtensions.UpdateShape(this Microsoft.Maui.Graphics.Win2D.W2DGraphicsView! platformView, Microsoft.Maui.IShapeView! shapeView) -> void
static Microsoft.Maui.Platform.SizeExtensions.ToPlatform(this Microsoft.Maui.Graphics.Size size) -> Windows.Foundation.Size
static Microsoft.Maui.Platform.SliderExtensions.UpdateMaximum(this Microsoft.UI.Xaml.Controls.Slider! nativeSlider, Microsoft.Maui.ISlider! slider) -> void
static Microsoft.Maui.Platform.SliderExtensions.UpdateMaximumTrackColor(this Microsoft.UI.Xaml.Controls.Slider! platformSlider, Microsoft.Maui.ISlider! slider) -> void
static Microsoft.Maui.Platform.SliderExtensions.UpdateMinimum(this Microsoft.UI.Xaml.Controls.Slider! nativeSlider, Microsoft.Maui.ISlider! slider) -> void
static Microsoft.Maui.Platform.SliderExtensions.UpdateMinimumTrackColor(this Microsoft.UI.Xaml.Controls.Slider! platformSlider, Microsoft.Maui.ISlider! slider) -> void
static Microsoft.Maui.Platform.SliderExtensions.UpdateThumbColor(this Microsoft.UI.Xaml.Controls.Slider! platformSlider, Microsoft.Maui.ISlider! slider) -> void
static Microsoft.Maui.Platform.SliderExtensions.UpdateValue(this Microsoft.UI.Xaml.Controls.Slider! nativeSlider, Microsoft.Maui.ISlider! slider) -> void
static Microsoft.Maui.Platform.StepperExtensions.UpdateBackground(this Microsoft.Maui.Platform.MauiStepper! platformStepper, Microsoft.Maui.IStepper! stepper) -> void
static Microsoft.Maui.Platform.StepperExtensions.UpdateInterval(this Microsoft.Maui.Platform.MauiStepper! platformStepper, Microsoft.Maui.IStepper! stepper) -> void
static Microsoft.Maui.Platform.StepperExtensions.UpdateMaximum(this Microsoft.Maui.Platform.MauiStepper! platformStepper, Microsoft.Maui.IStepper! stepper) -> void
static Microsoft.Maui.Platform.StepperExtensions.UpdateMinimum(this Microsoft.Maui.Platform.MauiStepper! platformStepper, Microsoft.Maui.IStepper! stepper) -> void
static Microsoft.Maui.Platform.StepperExtensions.UpdateValue(this Microsoft.Maui.Platform.MauiStepper! platformStepper, Microsoft.Maui.IStepper! stepper) -> void
static Microsoft.Maui.Platform.StrokeExtensions.UpdateStroke(this Microsoft.Maui.Platform.ContentPanel! platformView, Microsoft.Maui.IBorderStroke! border) -> void
static Microsoft.Maui.Platform.StrokeExtensions.UpdateStrokeDashOffset(this Microsoft.Maui.Platform.ContentPanel! platformView, Microsoft.Maui.IBorderStroke! border) -> void
static Microsoft.Maui.Platform.StrokeExtensions.UpdateStrokeDashPattern(this Microsoft.Maui.Platform.ContentPanel! platformView, Microsoft.Maui.IBorderStroke! border) -> void
static Microsoft.Maui.Platform.StrokeExtensions.UpdateStrokeLineCap(this Microsoft.Maui.Platform.ContentPanel! platformView, Microsoft.Maui.IBorderStroke! border) -> void
static Microsoft.Maui.Platform.StrokeExtensions.UpdateStrokeLineJoin(this Microsoft.Maui.Platform.ContentPanel! platformView, Microsoft.Maui.IBorderStroke! border) -> void
static Microsoft.Maui.Platform.StrokeExtensions.UpdateStrokeMiterLimit(this Microsoft.Maui.Platform.ContentPanel! platformView, Microsoft.Maui.IBorderStroke! border) -> void
static Microsoft.Maui.Platform.StrokeExtensions.UpdateStrokeShape(this Microsoft.Maui.Platform.ContentPanel! platformView, Microsoft.Maui.IBorderStroke! border) -> void
static Microsoft.Maui.Platform.StrokeExtensions.UpdateStrokeThickness(this Microsoft.Maui.Platform.ContentPanel! platformView, Microsoft.Maui.IBorderStroke! border) -> void
static Microsoft.Maui.Platform.SwipeViewExtensions.GetTextColor(this Microsoft.Maui.ISwipeItemMenuItem! swipeItemMenuItem) -> Microsoft.Maui.Graphics.Color?
static Microsoft.Maui.Platform.SwipeViewExtensions.ToPlatform(this Microsoft.Maui.SwipeBehaviorOnInvoked swipeBehaviorOnInvoked) -> Microsoft.UI.Xaml.Controls.SwipeBehaviorOnInvoked
static Microsoft.Maui.Platform.SwipeViewExtensions.ToPlatform(this Microsoft.Maui.SwipeMode swipeMode) -> Microsoft.UI.Xaml.Controls.SwipeMode
static Microsoft.Maui.Platform.SwipeViewExtensions.UpdateBackground(this Microsoft.UI.Xaml.Controls.SwipeItem! platformControl, Microsoft.Maui.Graphics.Paint? paint, Microsoft.UI.Xaml.Media.Brush? defaultBrush = null) -> void
static Microsoft.Maui.Platform.SwipeViewExtensions.UpdateTextColor(this Microsoft.UI.Xaml.Controls.SwipeItem! platformControl, Microsoft.Maui.ISwipeItemMenuItem! view) -> void
static Microsoft.Maui.Platform.SwitchExtensions.UpdateIsToggled(this Microsoft.UI.Xaml.Controls.ToggleSwitch! toggleSwitch, Microsoft.Maui.ISwitch! view) -> void
static Microsoft.Maui.Platform.SwitchExtensions.UpdateThumbColor(this Microsoft.UI.Xaml.Controls.ToggleSwitch! toggleSwitch, Microsoft.Maui.ISwitch! view) -> void
static Microsoft.Maui.Platform.SwitchExtensions.UpdateTrackColor(this Microsoft.UI.Xaml.Controls.ToggleSwitch! toggleSwitch, Microsoft.Maui.ISwitch! view) -> void
static Microsoft.Maui.Platform.TextBlockExtensions.UpdateCharacterSpacing(this Microsoft.UI.Xaml.Controls.TextBlock! platformControl, Microsoft.Maui.ITextStyle! label) -> void
static Microsoft.Maui.Platform.TextBlockExtensions.UpdateFont(this Microsoft.UI.Xaml.Controls.TextBlock! platformControl, Microsoft.Maui.Font font, Microsoft.Maui.IFontManager! fontManager) -> void
static Microsoft.Maui.Platform.TextBlockExtensions.UpdateFont(this Microsoft.UI.Xaml.Controls.TextBlock! platformControl, Microsoft.Maui.IText! text, Microsoft.Maui.IFontManager! fontManager) -> void
static Microsoft.Maui.Platform.TextBlockExtensions.UpdateHorizontalTextAlignment(this Microsoft.UI.Xaml.Controls.TextBlock! platformControl, Microsoft.Maui.ILabel! label) -> void
static Microsoft.Maui.Platform.TextBlockExtensions.UpdateLineHeight(this Microsoft.UI.Xaml.Controls.TextBlock! platformControl, Microsoft.Maui.ILabel! label) -> void
static Microsoft.Maui.Platform.TextBlockExtensions.UpdatePadding(this Microsoft.UI.Xaml.Controls.TextBlock! platformControl, Microsoft.Maui.ILabel! label) -> void
static Microsoft.Maui.Platform.TextBlockExtensions.UpdateText(this Microsoft.UI.Xaml.Controls.TextBlock! platformControl, Microsoft.Maui.ILabel! label) -> void
static Microsoft.Maui.Platform.TextBlockExtensions.UpdateTextColor(this Microsoft.UI.Xaml.Controls.TextBlock! platformControl, Microsoft.Maui.ITextStyle! text) -> void
static Microsoft.Maui.Platform.TextBlockExtensions.UpdateTextDecorations(this Microsoft.UI.Xaml.Controls.TextBlock! platformControl, Microsoft.Maui.ILabel! label) -> void
static Microsoft.Maui.Platform.TextBlockExtensions.UpdateVerticalTextAlignment(this Microsoft.UI.Xaml.Controls.TextBlock! platformControl, Microsoft.Maui.ILabel! label) -> void
static Microsoft.Maui.Platform.TextBoxExtensions.UpdateBackground(this Microsoft.UI.Xaml.Controls.TextBox! textBox, Microsoft.Maui.IView! view) -> void
static Microsoft.Maui.Platform.TextBoxExtensions.UpdateCharacterSpacing(this Microsoft.UI.Xaml.Controls.TextBox! textBox, Microsoft.Maui.ITextStyle! textStyle) -> void
static Microsoft.Maui.Platform.TextBoxExtensions.UpdateClearButtonVisibility(this Microsoft.UI.Xaml.Controls.TextBox! textBox, Microsoft.Maui.IEntry! entry) -> void
static Microsoft.Maui.Platform.TextBoxExtensions.UpdateCursorPosition(this Microsoft.UI.Xaml.Controls.TextBox! textBox, Microsoft.Maui.ITextInput! entry) -> void
static Microsoft.Maui.Platform.TextBoxExtensions.UpdateFont(this Microsoft.UI.Xaml.Controls.TextBox! platformControl, Microsoft.Maui.IText! text, Microsoft.Maui.IFontManager! fontManager) -> void
static Microsoft.Maui.Platform.TextBoxExtensions.UpdateHorizontalTextAlignment(this Microsoft.UI.Xaml.Controls.TextBox! textBox, Microsoft.Maui.ITextAlignment! textAlignment) -> void
static Microsoft.Maui.Platform.TextBoxExtensions.UpdateIsPassword(this Microsoft.UI.Xaml.Controls.TextBox! platformControl, Microsoft.Maui.IEntry! entry) -> void
static Microsoft.Maui.Platform.TextBoxExtensions.UpdateIsReadOnly(this Microsoft.UI.Xaml.Controls.TextBox! textBox, Microsoft.Maui.ITextInput! textInput) -> void
static Microsoft.Maui.Platform.TextBoxExtensions.UpdateIsSpellCheckEnabled(this Microsoft.UI.Xaml.Controls.TextBox! textBox, Microsoft.Maui.ITextInput! textInput) -> void
static Microsoft.Maui.Platform.TextBoxExtensions.UpdateIsTextPredictionEnabled(this Microsoft.UI.Xaml.Controls.TextBox! textBox, Microsoft.Maui.ITextInput! textInput) -> void
static Microsoft.Maui.Platform.TextBoxExtensions.UpdateKeyboard(this Microsoft.UI.Xaml.Controls.TextBox! textBox, Microsoft.Maui.ITextInput! textInput) -> void
static Microsoft.Maui.Platform.TextBoxExtensions.UpdateMaxLength(this Microsoft.UI.Xaml.Controls.TextBox! textBox, Microsoft.Maui.ITextInput! textInput) -> void
static Microsoft.Maui.Platform.TextBoxExtensions.UpdatePlaceholder(this Microsoft.UI.Xaml.Controls.TextBox! textBox, Microsoft.Maui.IPlaceholder! placeholder) -> void
static Microsoft.Maui.Platform.TextBoxExtensions.UpdatePlaceholderColor(this Microsoft.UI.Xaml.Controls.TextBox! textBox, Microsoft.Maui.IPlaceholder! placeholder) -> void
static Microsoft.Maui.Platform.TextBoxExtensions.UpdateReturnType(this Microsoft.UI.Xaml.Controls.TextBox! textBox, Microsoft.Maui.ITextInput! textInput) -> void
static Microsoft.Maui.Platform.TextBoxExtensions.UpdateSelectionLength(this Microsoft.UI.Xaml.Controls.TextBox! textBox, Microsoft.Maui.ITextInput! entry) -> void
static Microsoft.Maui.Platform.TextBoxExtensions.UpdateText(this Microsoft.UI.Xaml.Controls.TextBox! platformControl, Microsoft.Maui.ITextInput! textInput) -> void
static Microsoft.Maui.Platform.TextBoxExtensions.UpdateTextColor(this Microsoft.UI.Xaml.Controls.TextBox! textBox, Microsoft.Maui.ITextStyle! textStyle) -> void
static Microsoft.Maui.Platform.TextBoxExtensions.UpdateVerticalTextAlignment(this Microsoft.UI.Xaml.Controls.TextBox! textBox, Microsoft.Maui.ITextAlignment! textAlignment) -> void
static Microsoft.Maui.Platform.TextElementExtensions.UpdateFont(this Microsoft.UI.Xaml.Documents.TextElement! platformControl, Microsoft.Maui.Font font, Microsoft.Maui.IFontManager! fontManager) -> void
static Microsoft.Maui.Platform.TimeExtensions.ToFormattedString(this Microsoft.Maui.ITimePicker! timePicker) -> string!
static Microsoft.Maui.Platform.TimeExtensions.ToFormattedString(this System.TimeSpan time, string! format, System.Globalization.CultureInfo? cultureInfo = null) -> string!
static Microsoft.Maui.Platform.TimePickerExtensions.UpdateCharacterSpacing(this Microsoft.UI.Xaml.Controls.TimePicker! platformTimePicker, Microsoft.Maui.ITimePicker! timePicker) -> void
static Microsoft.Maui.Platform.TimePickerExtensions.UpdateFont(this Microsoft.UI.Xaml.Controls.TimePicker! platformTimePicker, Microsoft.Maui.ITimePicker! timePicker, Microsoft.Maui.IFontManager! fontManager) -> void
static Microsoft.Maui.Platform.TimePickerExtensions.UpdateTextColor(this Microsoft.UI.Xaml.Controls.TimePicker! platformTimePicker, Microsoft.Maui.ITimePicker! timePicker) -> void
static Microsoft.Maui.Platform.TimePickerExtensions.UpdateTime(this Microsoft.UI.Xaml.Controls.TimePicker! nativeTimePicker, Microsoft.Maui.ITimePicker! timePicker) -> void
static Microsoft.Maui.Platform.TransformationExtensions.UpdateTransformation(this Microsoft.UI.Xaml.FrameworkElement! frameworkElement, Microsoft.Maui.IView! view) -> void
static Microsoft.Maui.Platform.ViewExtensions.Focus(this Microsoft.UI.Xaml.FrameworkElement! platformView, Microsoft.Maui.FocusRequest! request) -> void
static Microsoft.Maui.Platform.ViewExtensions.InvalidateMeasure(this Microsoft.UI.Xaml.FrameworkElement! platformView, Microsoft.Maui.IView! view) -> void
static Microsoft.Maui.Platform.ViewExtensions.ToHandler(this Microsoft.Maui.IView! view, Microsoft.Maui.IMauiContext! context) -> Microsoft.Maui.IPlatformViewHandler!
static Microsoft.Maui.Platform.ViewExtensions.TryMoveFocus(this Microsoft.UI.Xaml.FrameworkElement! platformView, Microsoft.UI.Xaml.Input.FocusNavigationDirection direction) -> void
static Microsoft.Maui.Platform.ViewExtensions.Unfocus(this Microsoft.UI.Xaml.FrameworkElement! platformView, Microsoft.Maui.IView! view) -> void
static Microsoft.Maui.Platform.ViewExtensions.UpdateAutomationId(this Microsoft.UI.Xaml.FrameworkElement! platformView, Microsoft.Maui.IView! view) -> void
static Microsoft.Maui.Platform.ViewExtensions.UpdateBackground(this Microsoft.Maui.Platform.ContentPanel! platformView, Microsoft.Maui.IBorderStroke! border) -> void
static Microsoft.Maui.Platform.ViewExtensions.UpdateBackground(this Microsoft.UI.Xaml.FrameworkElement! platformView, Microsoft.Maui.IView! view) -> void
static Microsoft.Maui.Platform.ViewExtensions.UpdateBackgroundImageSourceAsync(this Microsoft.UI.Xaml.FrameworkElement! platformView, Microsoft.Maui.IImageSource? imageSource, Microsoft.Maui.IImageSourceServiceProvider? provider) -> System.Threading.Tasks.Task!
static Microsoft.Maui.Platform.ViewExtensions.UpdateBorder(this Microsoft.UI.Xaml.FrameworkElement! platformView, Microsoft.Maui.IView! view) -> void
static Microsoft.Maui.Platform.ViewExtensions.UpdateClip(this Microsoft.UI.Xaml.FrameworkElement! platformView, Microsoft.Maui.IView! view) -> void
static Microsoft.Maui.Platform.ViewExtensions.UpdateFlowDirection(this Microsoft.UI.Xaml.FrameworkElement! platformView, Microsoft.Maui.IView! view) -> void
static Microsoft.Maui.Platform.ViewExtensions.UpdateHeight(this Microsoft.UI.Xaml.FrameworkElement! platformView, Microsoft.Maui.IView! view) -> void
static Microsoft.Maui.Platform.ViewExtensions.UpdateInputTransparent(this Microsoft.Maui.Platform.LayoutPanel! layoutPanel, Microsoft.Maui.ILayoutHandler! handler, Microsoft.Maui.ILayout! layout) -> void
static Microsoft.Maui.Platform.ViewExtensions.UpdateInputTransparent(this Microsoft.UI.Xaml.FrameworkElement! nativeView, Microsoft.Maui.IViewHandler! handler, Microsoft.Maui.IView! view) -> void
static Microsoft.Maui.Platform.ViewExtensions.UpdateIsEnabled(this Microsoft.UI.Xaml.FrameworkElement! platformView, Microsoft.Maui.IView! view) -> void
static Microsoft.Maui.Platform.ViewExtensions.UpdateMaximumHeight(this Microsoft.UI.Xaml.FrameworkElement! platformView, Microsoft.Maui.IView! view) -> void
static Microsoft.Maui.Platform.ViewExtensions.UpdateMaximumWidth(this Microsoft.UI.Xaml.FrameworkElement! platformView, Microsoft.Maui.IView! view) -> void
static Microsoft.Maui.Platform.ViewExtensions.UpdateMinimumHeight(this Microsoft.UI.Xaml.FrameworkElement! platformView, Microsoft.Maui.IView! view) -> void
static Microsoft.Maui.Platform.ViewExtensions.UpdateMinimumWidth(this Microsoft.UI.Xaml.FrameworkElement! platformView, Microsoft.Maui.IView! view) -> void
static Microsoft.Maui.Platform.ViewExtensions.UpdateOpacity(this Microsoft.UI.Xaml.FrameworkElement! platformView, Microsoft.Maui.IView! view) -> void
static Microsoft.Maui.Platform.ViewExtensions.UpdateSemantics(this Microsoft.UI.Xaml.FrameworkElement! platformView, Microsoft.Maui.IView! view) -> void
static Microsoft.Maui.Platform.ViewExtensions.UpdateShadow(this Microsoft.UI.Xaml.FrameworkElement! platformView, Microsoft.Maui.IView! view) -> void
static Microsoft.Maui.Platform.ViewExtensions.UpdateToolTip(this Microsoft.UI.Xaml.FrameworkElement! platformView, Microsoft.Maui.ToolTip? tooltip) -> void
static Microsoft.Maui.Platform.ViewExtensions.UpdateVisibility(this Microsoft.UI.Xaml.FrameworkElement! platformView, Microsoft.Maui.IView! view) -> void
static Microsoft.Maui.Platform.ViewExtensions.UpdateWidth(this Microsoft.UI.Xaml.FrameworkElement! platformView, Microsoft.Maui.IView! view) -> void
static Microsoft.Maui.Platform.WebViewExtensions.Eval(this Microsoft.UI.Xaml.Controls.WebView2! platformWebView, Microsoft.Maui.IWebView! webView, string! script) -> void
static Microsoft.Maui.Platform.WebViewExtensions.EvaluateJavaScript(this Microsoft.UI.Xaml.Controls.WebView2! webView, Microsoft.Maui.EvaluateJavaScriptAsyncRequest! request) -> void
static Microsoft.Maui.Platform.WebViewExtensions.UpdateGoBack(this Microsoft.UI.Xaml.Controls.WebView2! platformWebView, Microsoft.Maui.IWebView! webView) -> void
static Microsoft.Maui.Platform.WebViewExtensions.UpdateGoForward(this Microsoft.UI.Xaml.Controls.WebView2! platformWebView, Microsoft.Maui.IWebView! webView) -> void
static Microsoft.Maui.Platform.WebViewExtensions.UpdateReload(this Microsoft.UI.Xaml.Controls.WebView2! platformWebView, Microsoft.Maui.IWebView! webView) -> void
static Microsoft.Maui.Platform.WebViewExtensions.UpdateSource(this Microsoft.UI.Xaml.Controls.WebView2! platformWebView, Microsoft.Maui.IWebView! webView, Microsoft.Maui.IWebViewDelegate? webViewDelegate) -> void
static Microsoft.Maui.Platform.WebViewExtensions.UpdateSource(this Microsoft.UI.Xaml.Controls.WebView2! platformWebView, Microsoft.Maui.IWebView! webView) -> void
static Microsoft.Maui.Platform.WebViewExtensions.UpdateUserAgent(this Microsoft.UI.Xaml.Controls.WebView2! platformWebView, Microsoft.Maui.IWebView! webView) -> void
static Microsoft.Maui.Platform.WindowExtensions.GetAppWindow(this Microsoft.UI.Xaml.Window! platformWindow) -> Microsoft.UI.Windowing.AppWindow?
static Microsoft.Maui.Platform.WindowExtensions.GetDisplayDensity(this Microsoft.UI.Xaml.Window! platformWindow) -> float
static Microsoft.Maui.Platform.WindowExtensions.GetWindow(this Microsoft.UI.Xaml.Window! platformWindow) -> Microsoft.Maui.IWindow?
static Microsoft.Maui.Platform.WindowExtensions.GetWindowHandle(this Microsoft.UI.Xaml.Window! platformWindow) -> nint
static Microsoft.Maui.Platform.WindowExtensions.UpdateHeight(this Microsoft.UI.Xaml.Window! platformWindow, Microsoft.Maui.IWindow! window) -> void
static Microsoft.Maui.Platform.WindowExtensions.UpdateMaximumHeight(this Microsoft.UI.Xaml.Window! platformWindow, Microsoft.Maui.IWindow! window) -> void
static Microsoft.Maui.Platform.WindowExtensions.UpdateMaximumSize(this Microsoft.UI.Xaml.Window! platformWindow, Microsoft.Maui.IWindow! window) -> void
static Microsoft.Maui.Platform.WindowExtensions.UpdateMaximumWidth(this Microsoft.UI.Xaml.Window! platformWindow, Microsoft.Maui.IWindow! window) -> void
static Microsoft.Maui.Platform.WindowExtensions.UpdateMinimumHeight(this Microsoft.UI.Xaml.Window! platformWindow, Microsoft.Maui.IWindow! window) -> void
static Microsoft.Maui.Platform.WindowExtensions.UpdateMinimumSize(this Microsoft.UI.Xaml.Window! platformWindow, Microsoft.Maui.IWindow! window) -> void
static Microsoft.Maui.Platform.WindowExtensions.UpdateMinimumWidth(this Microsoft.UI.Xaml.Window! platformWindow, Microsoft.Maui.IWindow! window) -> void
static Microsoft.Maui.Platform.WindowExtensions.UpdatePosition(this Microsoft.UI.Xaml.Window! platformWindow, Microsoft.Maui.IWindow! window) -> void
static Microsoft.Maui.Platform.WindowExtensions.UpdateSize(this Microsoft.UI.Xaml.Window! platformWindow, Microsoft.Maui.IWindow! window) -> void
static Microsoft.Maui.Platform.WindowExtensions.UpdateTitle(this Microsoft.UI.Xaml.Window! platformWindow, Microsoft.Maui.IWindow! window) -> void
static Microsoft.Maui.Platform.WindowExtensions.UpdateWidth(this Microsoft.UI.Xaml.Window! platformWindow, Microsoft.Maui.IWindow! window) -> void
static Microsoft.Maui.Platform.WindowExtensions.UpdateX(this Microsoft.UI.Xaml.Window! platformWindow, Microsoft.Maui.IWindow! window) -> void
static Microsoft.Maui.Platform.WindowExtensions.UpdateY(this Microsoft.UI.Xaml.Window! platformWindow, Microsoft.Maui.IWindow! window) -> void
static Microsoft.Maui.Primitives.Dimension.IsExplicitSet(double value) -> bool
static Microsoft.Maui.Primitives.Dimension.IsMaximumSet(double value) -> bool
static Microsoft.Maui.Primitives.Dimension.IsMinimumSet(double value) -> bool
static Microsoft.Maui.Primitives.Dimension.ResolveMinimum(double value) -> double
static Microsoft.Maui.PropertyMapperExtensions.AppendToMapping<TVirtualView, TViewHandler>(this Microsoft.Maui.IPropertyMapper<Microsoft.Maui.IElement!, Microsoft.Maui.IElementHandler!>! propertyMapper, string! key, System.Action<TViewHandler, TVirtualView>! method) -> void
static Microsoft.Maui.PropertyMapperExtensions.AppendToMapping<TVirtualView, TViewHandler>(this Microsoft.Maui.IPropertyMapper<TVirtualView, TViewHandler>! propertyMapper, string! key, System.Action<TViewHandler, TVirtualView>! method) -> void
static Microsoft.Maui.PropertyMapperExtensions.ModifyMapping<TVirtualView, TViewHandler>(this Microsoft.Maui.IPropertyMapper<Microsoft.Maui.IElement!, Microsoft.Maui.IElementHandler!>! propertyMapper, string! key, System.Action<TViewHandler, TVirtualView, System.Action<Microsoft.Maui.IElementHandler!, Microsoft.Maui.IElement!>?>! method) -> void
static Microsoft.Maui.PropertyMapperExtensions.ModifyMapping<TVirtualView, TViewHandler>(this Microsoft.Maui.IPropertyMapper<TVirtualView, TViewHandler>! propertyMapper, string! key, System.Action<TViewHandler, TVirtualView, System.Action<Microsoft.Maui.IElementHandler!, Microsoft.Maui.IElement!>?>! method) -> void
static Microsoft.Maui.PropertyMapperExtensions.PrependToMapping<TVirtualView, TViewHandler>(this Microsoft.Maui.IPropertyMapper<Microsoft.Maui.IElement!, Microsoft.Maui.IElementHandler!>! propertyMapper, string! key, System.Action<TViewHandler, TVirtualView>! method) -> void
static Microsoft.Maui.PropertyMapperExtensions.PrependToMapping<TVirtualView, TViewHandler>(this Microsoft.Maui.IPropertyMapper<TVirtualView, TViewHandler>! propertyMapper, string! key, System.Action<TViewHandler, TVirtualView>! method) -> void
static Microsoft.Maui.PropertyMapperExtensions.ReplaceMapping<TVirtualView, TViewHandler>(this Microsoft.Maui.IPropertyMapper<Microsoft.Maui.IElement!, Microsoft.Maui.IElementHandler!>! propertyMapper, string! key, System.Action<TViewHandler, TVirtualView>! method) -> void
static Microsoft.Maui.SemanticExtensions.SetSemanticFocus(this Microsoft.Maui.IView! element) -> void
static Microsoft.Maui.SizeRequest.implicit operator Microsoft.Maui.Graphics.Size(Microsoft.Maui.SizeRequest size) -> Microsoft.Maui.Graphics.Size
static Microsoft.Maui.SizeRequest.implicit operator Microsoft.Maui.SizeRequest(Microsoft.Maui.Graphics.Size size) -> Microsoft.Maui.SizeRequest
static Microsoft.Maui.SizeRequest.operator !=(Microsoft.Maui.SizeRequest left, Microsoft.Maui.SizeRequest right) -> bool
static Microsoft.Maui.SizeRequest.operator ==(Microsoft.Maui.SizeRequest left, Microsoft.Maui.SizeRequest right) -> bool
static Microsoft.Maui.SoftInputExtensions.HideSoftInputAsync(this Microsoft.Maui.ITextInput! targetView, System.Threading.CancellationToken token) -> System.Threading.Tasks.Task<bool>!
static Microsoft.Maui.SoftInputExtensions.IsSoftInputShowing(this Microsoft.Maui.ITextInput! targetView) -> bool
static Microsoft.Maui.SoftInputExtensions.ShowSoftInputAsync(this Microsoft.Maui.ITextInput! targetView, System.Threading.CancellationToken token) -> System.Threading.Tasks.Task<bool>!
static Microsoft.Maui.Thickness.implicit operator Microsoft.Maui.Thickness(double uniformSize) -> Microsoft.Maui.Thickness
static Microsoft.Maui.Thickness.implicit operator Microsoft.Maui.Thickness(Microsoft.Maui.Graphics.Size size) -> Microsoft.Maui.Thickness
static Microsoft.Maui.Thickness.operator -(Microsoft.Maui.Thickness left, double addend) -> Microsoft.Maui.Thickness
static Microsoft.Maui.Thickness.operator !=(Microsoft.Maui.Thickness left, Microsoft.Maui.Thickness right) -> bool
static Microsoft.Maui.Thickness.operator +(Microsoft.Maui.Thickness left, double addend) -> Microsoft.Maui.Thickness
static Microsoft.Maui.Thickness.operator +(Microsoft.Maui.Thickness left, Microsoft.Maui.Thickness right) -> Microsoft.Maui.Thickness
static Microsoft.Maui.Thickness.operator ==(Microsoft.Maui.Thickness left, Microsoft.Maui.Thickness right) -> bool
static Microsoft.Maui.Thickness.Zero -> Microsoft.Maui.Thickness
static Microsoft.Maui.ViewExtensions.CaptureAsync(this Microsoft.Maui.IView! view) -> System.Threading.Tasks.Task<Microsoft.Maui.Media.IScreenshotResult?>!
static Microsoft.Maui.VisualDiagnostics.CaptureAsJpegAsync(Microsoft.Maui.IView! view, int quality = 80) -> System.Threading.Tasks.Task<byte[]?>!
static Microsoft.Maui.VisualDiagnostics.CaptureAsJpegAsync(Microsoft.Maui.IWindow! window, int quality = 80) -> System.Threading.Tasks.Task<byte[]?>!
static Microsoft.Maui.VisualDiagnostics.CaptureAsPngAsync(Microsoft.Maui.IView! view) -> System.Threading.Tasks.Task<byte[]?>!
static Microsoft.Maui.VisualDiagnostics.CaptureAsPngAsync(Microsoft.Maui.IWindow! window) -> System.Threading.Tasks.Task<byte[]?>!
static Microsoft.Maui.VisualDiagnostics.GetSourceInfo(object! obj) -> Microsoft.Maui.SourceInfo?
static Microsoft.Maui.VisualDiagnostics.OnChildAdded(Microsoft.Maui.IVisualTreeElement! parent, Microsoft.Maui.IVisualTreeElement! child) -> void
static Microsoft.Maui.VisualDiagnostics.OnChildAdded(Microsoft.Maui.IVisualTreeElement? parent, Microsoft.Maui.IVisualTreeElement! child, int newLogicalIndex) -> void
static Microsoft.Maui.VisualDiagnostics.OnChildRemoved(Microsoft.Maui.IVisualTreeElement! parent, Microsoft.Maui.IVisualTreeElement! child, int oldLogicalIndex) -> void
static Microsoft.Maui.VisualDiagnostics.RegisterSourceInfo(object! target, System.Uri! uri, int lineNumber, int linePosition) -> void
static Microsoft.Maui.VisualDiagnostics.VisualTreeChanged -> System.EventHandler<Microsoft.Maui.VisualTreeChangeEventArgs!>?
static Microsoft.Maui.VisualTreeElementExtensions.GetVisualElementWindow(this Microsoft.Maui.IVisualTreeElement! element) -> Microsoft.Maui.IWindow?
static Microsoft.Maui.VisualTreeElementExtensions.GetVisualTreeDescendants(this Microsoft.Maui.IVisualTreeElement! visualElement) -> System.Collections.Generic.IReadOnlyList<Microsoft.Maui.IVisualTreeElement!>!
static Microsoft.Maui.VisualTreeElementExtensions.GetVisualTreeElements(this Microsoft.Maui.IVisualTreeElement! visualElement, double x, double y) -> System.Collections.Generic.IReadOnlyList<Microsoft.Maui.IVisualTreeElement!>!
static Microsoft.Maui.VisualTreeElementExtensions.GetVisualTreeElements(this Microsoft.Maui.IVisualTreeElement! visualElement, double x1, double y1, double x2, double y2) -> System.Collections.Generic.IReadOnlyList<Microsoft.Maui.IVisualTreeElement!>!
static Microsoft.Maui.VisualTreeElementExtensions.GetVisualTreeElements(this Microsoft.Maui.IVisualTreeElement! visualElement, Microsoft.Maui.Graphics.Point point) -> System.Collections.Generic.IReadOnlyList<Microsoft.Maui.IVisualTreeElement!>!
static Microsoft.Maui.VisualTreeElementExtensions.GetVisualTreeElements(this Microsoft.Maui.IVisualTreeElement! visualElement, Microsoft.Maui.Graphics.Rect rectangle) -> System.Collections.Generic.IReadOnlyList<Microsoft.Maui.IVisualTreeElement!>!
static Microsoft.Maui.WindowExtensions.CaptureAsync(this Microsoft.Maui.IWindow! window) -> System.Threading.Tasks.Task<Microsoft.Maui.Media.IScreenshotResult?>!
static readonly Microsoft.Maui.Animations.Lerp.Lerps -> System.Collections.Generic.Dictionary<System.Type!, Microsoft.Maui.Animations.Lerp!>!
static readonly Microsoft.Maui.Easing.BounceIn -> Microsoft.Maui.Easing!
static readonly Microsoft.Maui.Easing.BounceOut -> Microsoft.Maui.Easing!
static readonly Microsoft.Maui.Easing.CubicIn -> Microsoft.Maui.Easing!
static readonly Microsoft.Maui.Easing.CubicInOut -> Microsoft.Maui.Easing!
static readonly Microsoft.Maui.Easing.CubicOut -> Microsoft.Maui.Easing!
static readonly Microsoft.Maui.Easing.Linear -> Microsoft.Maui.Easing!
static readonly Microsoft.Maui.Easing.SinIn -> Microsoft.Maui.Easing!
static readonly Microsoft.Maui.Easing.SinInOut -> Microsoft.Maui.Easing!
static readonly Microsoft.Maui.Easing.SinOut -> Microsoft.Maui.Easing!
static readonly Microsoft.Maui.Easing.SpringIn -> Microsoft.Maui.Easing!
static readonly Microsoft.Maui.Easing.SpringOut -> Microsoft.Maui.Easing!
static readonly Microsoft.Maui.FontFile.Extensions -> string![]!
static readonly Microsoft.Maui.GridLength.Auto -> Microsoft.Maui.GridLength
static readonly Microsoft.Maui.GridLength.Star -> Microsoft.Maui.GridLength
static readonly Microsoft.Maui.Layouts.FlexBasis.Auto -> Microsoft.Maui.Layouts.FlexBasis
static readonly Microsoft.Maui.Platform.MauiAutoSuggestBox.IsReadOnlyProperty -> Microsoft.UI.Xaml.DependencyProperty!
static readonly Microsoft.Maui.Platform.MauiNavigationView.NavigationViewBackButtonMarginProperty -> Microsoft.UI.Xaml.DependencyProperty!
static readonly Microsoft.Maui.Platform.MauiPasswordTextBox.IsObfuscationDelayedProperty -> Microsoft.UI.Xaml.DependencyProperty!
static readonly Microsoft.Maui.Platform.MauiPasswordTextBox.IsPasswordProperty -> Microsoft.UI.Xaml.DependencyProperty!
static readonly Microsoft.Maui.Platform.MauiPasswordTextBox.PasswordProperty -> Microsoft.UI.Xaml.DependencyProperty!
static readonly Microsoft.Maui.Platform.MauiTextBox.IsDeleteButtonEnabledProperty -> Microsoft.UI.Xaml.DependencyProperty!
static readonly Microsoft.Maui.Platform.MauiTextBox.VerticalTextAlignmentProperty -> Microsoft.UI.Xaml.DependencyProperty!
static readonly Microsoft.Maui.Platform.MauiToolbar.IsBackButtonVisibleProperty -> Microsoft.UI.Xaml.DependencyProperty!
static readonly Microsoft.Maui.Platform.MauiToolbar.IsBackEnabledProperty -> Microsoft.UI.Xaml.DependencyProperty!
static readonly Microsoft.Maui.Platform.WindowRootView.AppTitleBarTemplateProperty -> Microsoft.UI.Xaml.DependencyProperty!
virtual Microsoft.Maui.Animations.Animation.CreateReverse() -> Microsoft.Maui.Animations.Animation!
virtual Microsoft.Maui.Animations.Animation.Dispose(bool disposing) -> void
virtual Microsoft.Maui.Animations.Animation.OnTick(double millisecondsSinceLastUpdate) -> void
virtual Microsoft.Maui.Animations.Animation.Reset() -> void
virtual Microsoft.Maui.Animations.Animation.Update(double percent) -> void
virtual Microsoft.Maui.Animations.AnimationManager.Dispose(bool disposing) -> void
virtual Microsoft.Maui.Animations.Ticker.IsRunning.get -> bool
virtual Microsoft.Maui.Animations.Ticker.MaxFps.get -> int
virtual Microsoft.Maui.Animations.Ticker.MaxFps.set -> void
virtual Microsoft.Maui.Animations.Ticker.OnSystemEnabledChanged() -> void
virtual Microsoft.Maui.Animations.Ticker.Start() -> void
virtual Microsoft.Maui.Animations.Ticker.Stop() -> void
virtual Microsoft.Maui.Animations.Ticker.SystemEnabled.get -> bool
virtual Microsoft.Maui.Animations.Ticker.SystemEnabled.set -> void
virtual Microsoft.Maui.CommandMapper.GetCommand(string! key) -> System.Action<Microsoft.Maui.IElementHandler!, Microsoft.Maui.IElement!, object?>?
virtual Microsoft.Maui.Handlers.ButtonHandler.ImageSourceLoader.get -> Microsoft.Maui.Platform.ImageSourcePartLoader!
virtual Microsoft.Maui.Handlers.ElementHandler.Invoke(string! command, object? args) -> void
virtual Microsoft.Maui.Handlers.ElementHandler.SetMauiContext(Microsoft.Maui.IMauiContext! mauiContext) -> void
virtual Microsoft.Maui.Handlers.ElementHandler.SetVirtualView(Microsoft.Maui.IElement! view) -> void
virtual Microsoft.Maui.Handlers.ElementHandler.UpdateValue(string! property) -> void
virtual Microsoft.Maui.Handlers.ElementHandler<TVirtualView, TPlatformView>.ConnectHandler(TPlatformView! platformView) -> void
virtual Microsoft.Maui.Handlers.ElementHandler<TVirtualView, TPlatformView>.DisconnectHandler(TPlatformView! platformView) -> void
virtual Microsoft.Maui.Handlers.ImageButtonHandler.OnImageFailed(object! sender, Microsoft.UI.Xaml.ExceptionRoutedEventArgs! exceptionRoutedEventArgs) -> void
virtual Microsoft.Maui.Handlers.ImageButtonHandler.SourceLoader.get -> Microsoft.Maui.Platform.ImageSourcePartLoader!
virtual Microsoft.Maui.Handlers.ImageHandler.SourceLoader.get -> Microsoft.Maui.Platform.ImageSourcePartLoader!
virtual Microsoft.Maui.Handlers.NavigationViewHandler.CreateNavigationManager() -> Microsoft.Maui.Platform.StackNavigationManager!
virtual Microsoft.Maui.Handlers.SwipeItemMenuItemHandler.SourceLoader.get -> Microsoft.Maui.Platform.ImageSourcePartLoader!
virtual Microsoft.Maui.Handlers.ViewHandler.NeedsContainer.get -> bool
virtual Microsoft.Maui.Handlers.ViewHandler<TVirtualView, TPlatformView>.ConnectHandler(TPlatformView! platformView) -> void
virtual Microsoft.Maui.Handlers.ViewHandler<TVirtualView, TPlatformView>.DisconnectHandler(TPlatformView! platformView) -> void
virtual Microsoft.Maui.Handlers.ViewHandler<TVirtualView, TPlatformView>.SetVirtualView(Microsoft.Maui.IView! view) -> void
virtual Microsoft.Maui.MauiWinUIWindow.OnActivated(object! sender, Microsoft.UI.Xaml.WindowActivatedEventArgs! args) -> void
virtual Microsoft.Maui.MauiWinUIWindow.OnClosed(object! sender, Microsoft.UI.Xaml.WindowEventArgs! args) -> void
virtual Microsoft.Maui.MauiWinUIWindow.OnVisibilityChanged(object! sender, Microsoft.UI.Xaml.WindowVisibilityChangedEventArgs! args) -> void
virtual Microsoft.Maui.Platform.MauiCancelButton.OnReadyChanged() -> void
virtual Microsoft.Maui.Platform.NavigationRootManager.Connect(Microsoft.UI.Xaml.UIElement! platformView) -> void
virtual Microsoft.Maui.Platform.NavigationRootManager.Disconnect() -> void
virtual Microsoft.Maui.Platform.StackNavigationManager.Connect(Microsoft.Maui.IStackNavigation! navigationView, Microsoft.UI.Xaml.Controls.Frame! navigationFrame) -> void
virtual Microsoft.Maui.Platform.StackNavigationManager.Disconnect(Microsoft.Maui.IStackNavigation! navigationView, Microsoft.UI.Xaml.Controls.Frame! navigationFrame) -> void
virtual Microsoft.Maui.Platform.StackNavigationManager.GetDestinationPageType() -> System.Type!
virtual Microsoft.Maui.Platform.StackNavigationManager.GetNavigationTransition(Microsoft.Maui.NavigationRequest! args) -> Microsoft.UI.Xaml.Media.Animation.NavigationTransitionInfo?
virtual Microsoft.Maui.Platform.StackNavigationManager.NavigateTo(Microsoft.Maui.NavigationRequest! args) -> void
virtual Microsoft.Maui.PropertyMapper.ClearKeyCache() -> void
virtual Microsoft.Maui.PropertyMapper.GetKeys() -> System.Collections.Generic.IEnumerable<string!>!
virtual Microsoft.Maui.PropertyMapper.GetProperty(string! key) -> System.Action<Microsoft.Maui.IElementHandler!, Microsoft.Maui.IElement!>?
virtual Microsoft.Maui.PropertyMapper.SetPropertyCore(string! key, System.Action<Microsoft.Maui.IElementHandler!, Microsoft.Maui.IElement!>! action) -> void
virtual Microsoft.Maui.PropertyMapper.UpdateKeys.get -> System.Collections.Generic.IReadOnlyCollection<string!>!
virtual Microsoft.Maui.PropertyMapper.UpdatePropertyCore(string! key, Microsoft.Maui.IElementHandler! viewHandler, Microsoft.Maui.IElement! virtualView) -> void
virtual Microsoft.Maui.RectangleAdorner.Contains(Microsoft.Maui.Graphics.Point point) -> bool
virtual Microsoft.Maui.RectangleAdorner.Draw(Microsoft.Maui.Graphics.ICanvas! canvas, Microsoft.Maui.Graphics.RectF dirtyRect) -> void
virtual Microsoft.Maui.WindowOverlay.AddWindowElement(Microsoft.Maui.IWindowOverlayElement! drawable) -> bool
virtual Microsoft.Maui.WindowOverlay.Deinitialize() -> bool
virtual Microsoft.Maui.WindowOverlay.HandleUIChange() -> void
virtual Microsoft.Maui.WindowOverlay.Initialize() -> bool
virtual Microsoft.Maui.WindowOverlay.RemoveWindowElement(Microsoft.Maui.IWindowOverlayElement! drawable) -> bool
virtual Microsoft.Maui.WindowOverlay.RemoveWindowElements() -> void
