#nullable enable
Microsoft.Maui.Converters.GridLengthTypeConverter
Microsoft.Maui.Converters.GridLengthTypeConverter.GridLengthTypeConverter() -> void
Microsoft.Maui.Converters.SafeAreaEdgesTypeConverter
Microsoft.Maui.Converters.SafeAreaEdgesTypeConverter.SafeAreaEdgesTypeConverter() -> void
Microsoft.Maui.Handlers.ContextFlyoutItemHandlerUpdate.ContextFlyoutItemHandlerUpdate(Microsoft.Maui.Handlers.ContextFlyoutItemHandlerUpdate! original) -> void
Microsoft.Maui.Handlers.ContextFlyoutItemHandlerUpdate.Deconstruct(out int Index, out Microsoft.Maui.IMenuElement! MenuElement) -> void
Microsoft.Maui.Handlers.DataFlowDirection
Microsoft.Maui.Handlers.DataFlowDirection.FromPlatform = 1 -> Microsoft.Maui.Handlers.DataFlowDirection
Microsoft.Maui.Handlers.DataFlowDirection.ToPlatform = 0 -> Microsoft.Maui.Handlers.DataFlowDirection
Microsoft.Maui.Handlers.LayoutHandlerUpdate.Deconstruct(out int Index, out Microsoft.Maui.IView! View) -> void
Microsoft.Maui.Handlers.LayoutHandlerUpdate.LayoutHandlerUpdate(Microsoft.Maui.Handlers.LayoutHandlerUpdate! original) -> void
Microsoft.Maui.Handlers.MenuBarHandlerUpdate.Deconstruct(out int Index, out Microsoft.Maui.IMenuBarItem! MenuBarItem) -> void
Microsoft.Maui.Handlers.MenuBarHandlerUpdate.MenuBarHandlerUpdate(Microsoft.Maui.Handlers.MenuBarHandlerUpdate! original) -> void
Microsoft.Maui.Handlers.MenuBarItemHandlerUpdate.Deconstruct(out int Index, out Microsoft.Maui.IMenuElement! MenuElement) -> void
Microsoft.Maui.Handlers.MenuBarItemHandlerUpdate.MenuBarItemHandlerUpdate(Microsoft.Maui.Handlers.MenuBarItemHandlerUpdate! original) -> void
Microsoft.Maui.Handlers.MenuFlyoutSubItemHandlerUpdate.Deconstruct(out int Index, out Microsoft.Maui.IMenuElement! MenuElement) -> void
Microsoft.Maui.Handlers.MenuFlyoutSubItemHandlerUpdate.MenuFlyoutSubItemHandlerUpdate(Microsoft.Maui.Handlers.MenuFlyoutSubItemHandlerUpdate! original) -> void
Microsoft.Maui.Handlers.OpenWindowRequest.Deconstruct(out Microsoft.Maui.IPersistedState? State, out Microsoft.UI.Xaml.LaunchActivatedEventArgs? LaunchArgs) -> void
Microsoft.Maui.Handlers.OpenWindowRequest.OpenWindowRequest(Microsoft.Maui.Handlers.OpenWindowRequest! original) -> void
Microsoft.Maui.Hosting.MauiAppBuilder.Environment.get -> Microsoft.Maui.Hosting.MauiHostEnvironment!
Microsoft.Maui.Hosting.MauiAppBuilder.Properties.get -> System.Collections.Generic.IDictionary<object!, object!>!
Microsoft.Maui.Hosting.MauiHostEnvironment
Microsoft.Maui.Hosting.MauiHostEnvironment.ApplicationName.get -> string!
Microsoft.Maui.Hosting.MauiHostEnvironment.ApplicationName.set -> void
Microsoft.Maui.Hosting.MauiHostEnvironment.ContentRootFileProvider.get -> Microsoft.Extensions.FileProviders.IFileProvider!
Microsoft.Maui.Hosting.MauiHostEnvironment.ContentRootFileProvider.set -> void
Microsoft.Maui.Hosting.MauiHostEnvironment.ContentRootPath.get -> string!
Microsoft.Maui.Hosting.MauiHostEnvironment.ContentRootPath.set -> void
Microsoft.Maui.Hosting.MauiHostEnvironment.EnvironmentName.get -> string!
Microsoft.Maui.Hosting.MauiHostEnvironment.EnvironmentName.set -> void
Microsoft.Maui.Hosting.MauiHostEnvironment.MauiHostEnvironment() -> void
*REMOVED*Microsoft.Maui.IDatePicker.Date.get -> System.DateTime
Microsoft.Maui.IDatePicker.Date.get -> System.DateTime?
Microsoft.Maui.IDatePicker.IsOpen.get -> bool
Microsoft.Maui.IDatePicker.IsOpen.set -> void
*REMOVED*Microsoft.Maui.IDatePicker.MaximumDate.get -> System.DateTime
Microsoft.Maui.IDatePicker.MaximumDate.get -> System.DateTime?
*REMOVED*Microsoft.Maui.IDatePicker.MinimumDate.get -> System.DateTime
Microsoft.Maui.IDatePicker.MinimumDate.get -> System.DateTime?
Microsoft.Maui.IInitializationAwareWebView
Microsoft.Maui.IInitializationAwareWebView.WebViewInitializationCompleted(Microsoft.Maui.WebViewInitializationCompletedEventArgs! args) -> void
Microsoft.Maui.IInitializationAwareWebView.WebViewInitializationStarted(Microsoft.Maui.WebViewInitializationStartedEventArgs! args) -> void
Microsoft.Maui.IPicker.IsOpen.get -> bool
Microsoft.Maui.IPicker.IsOpen.set -> void
Microsoft.Maui.IRefreshView.IsRefreshEnabled.get -> bool
Microsoft.Maui.ISearchBar.ReturnType.get -> Microsoft.Maui.ReturnType
Microsoft.Maui.ISearchBar.SearchIconColor.get -> Microsoft.Maui.Graphics.Color!
Microsoft.Maui.ITimePicker.IsOpen.get -> bool
Microsoft.Maui.ITimePicker.IsOpen.set -> void
*REMOVED*Microsoft.Maui.ITimePicker.Time.get -> System.TimeSpan
Microsoft.Maui.ITimePicker.Time.get -> System.TimeSpan?
Microsoft.Maui.IWebRequestInterceptingWebView
Microsoft.Maui.IWebRequestInterceptingWebView.WebResourceRequested(Microsoft.Maui.WebResourceRequestedEventArgs! args) -> bool
Microsoft.Maui.IWindow.IsMaximizable.get -> bool
Microsoft.Maui.IWindow.IsMinimizable.get -> bool
Microsoft.Maui.Platform.CalendarDatePickerExtensions
Microsoft.Maui.Platform.MauiSlider
Microsoft.Maui.Platform.MauiSlider.MauiSlider() -> void
~Microsoft.Maui.Platform.MauiSlider.ThumbImageSource.get -> Microsoft.UI.Xaml.Media.ImageSource
~Microsoft.Maui.Platform.MauiSlider.ThumbImageSource.set -> void
Microsoft.Maui.SafeAreaEdges
Microsoft.Maui.SafeAreaEdges.Bottom.get -> Microsoft.Maui.SafeAreaRegions
Microsoft.Maui.SafeAreaEdges.Equals(Microsoft.Maui.SafeAreaEdges other) -> bool
Microsoft.Maui.SafeAreaEdges.Left.get -> Microsoft.Maui.SafeAreaRegions
Microsoft.Maui.SafeAreaEdges.Right.get -> Microsoft.Maui.SafeAreaRegions
Microsoft.Maui.SafeAreaEdges.SafeAreaEdges() -> void
Microsoft.Maui.SafeAreaEdges.SafeAreaEdges(Microsoft.Maui.SafeAreaRegions horizontal, Microsoft.Maui.SafeAreaRegions vertical) -> void
Microsoft.Maui.SafeAreaEdges.SafeAreaEdges(Microsoft.Maui.SafeAreaRegions left, Microsoft.Maui.SafeAreaRegions top, Microsoft.Maui.SafeAreaRegions right, Microsoft.Maui.SafeAreaRegions bottom) -> void
Microsoft.Maui.SafeAreaEdges.SafeAreaEdges(Microsoft.Maui.SafeAreaRegions uniformValue) -> void
Microsoft.Maui.SafeAreaEdges.Top.get -> Microsoft.Maui.SafeAreaRegions
Microsoft.Maui.SafeAreaRegions
Microsoft.Maui.SafeAreaRegions.All = 32768 -> Microsoft.Maui.SafeAreaRegions
Microsoft.Maui.SafeAreaRegions.Container = 2 -> Microsoft.Maui.SafeAreaRegions
Microsoft.Maui.SafeAreaRegions.Default = -1 -> Microsoft.Maui.SafeAreaRegions
Microsoft.Maui.SafeAreaRegions.None = 0 -> Microsoft.Maui.SafeAreaRegions
Microsoft.Maui.SafeAreaRegions.SoftInput = 1 -> Microsoft.Maui.SafeAreaRegions
Microsoft.Maui.ScrollToRequest.Deconstruct(out double HorizontalOffset, out double VerticalOffset, out bool Instant) -> void
Microsoft.Maui.ScrollToRequest.ScrollToRequest(Microsoft.Maui.ScrollToRequest! original) -> void
Microsoft.Maui.SwipeViewCloseRequest.Deconstruct(out bool Animated) -> void
Microsoft.Maui.SwipeViewCloseRequest.SwipeViewCloseRequest(Microsoft.Maui.SwipeViewCloseRequest! original) -> void
Microsoft.Maui.SwipeViewOpenRequest.Deconstruct(out Microsoft.Maui.OpenSwipeItem OpenSwipeItem, out bool Animated) -> void
Microsoft.Maui.SwipeViewOpenRequest.SwipeViewOpenRequest(Microsoft.Maui.SwipeViewOpenRequest! original) -> void
Microsoft.Maui.SwipeViewSwipeChanging.Deconstruct(out Microsoft.Maui.SwipeDirection SwipeDirection, out double Offset) -> void
Microsoft.Maui.SwipeViewSwipeChanging.SwipeViewSwipeChanging(Microsoft.Maui.SwipeViewSwipeChanging! original) -> void
Microsoft.Maui.SwipeViewSwipeEnded.Deconstruct(out Microsoft.Maui.SwipeDirection SwipeDirection, out bool IsOpen) -> void
Microsoft.Maui.SwipeViewSwipeEnded.SwipeViewSwipeEnded(Microsoft.Maui.SwipeViewSwipeEnded! original) -> void
Microsoft.Maui.SwipeViewSwipeStarted.Deconstruct(out Microsoft.Maui.SwipeDirection SwipeDirection) -> void
Microsoft.Maui.SwipeViewSwipeStarted.SwipeViewSwipeStarted(Microsoft.Maui.SwipeViewSwipeStarted! original) -> void
Microsoft.Maui.WebResourceRequestedEventArgs
Microsoft.Maui.WebResourceRequestedEventArgs.RequestEventArgs.get -> Microsoft.Web.WebView2.Core.CoreWebView2WebResourceRequestedEventArgs!
Microsoft.Maui.WebResourceRequestedEventArgs.Sender.get -> Microsoft.Web.WebView2.Core.CoreWebView2!
Microsoft.Maui.WebViewInitializationCompletedEventArgs
Microsoft.Maui.WebViewInitializationCompletedEventArgs.Sender.get -> Microsoft.Web.WebView2.Core.CoreWebView2!
Microsoft.Maui.WebViewInitializationCompletedEventArgs.Settings.get -> Microsoft.Web.WebView2.Core.CoreWebView2Settings!
Microsoft.Maui.WebViewInitializationStartedEventArgs
Microsoft.Maui.WebViewInitializationStartedEventArgs.BrowserExecutableFolder.get -> string?
Microsoft.Maui.WebViewInitializationStartedEventArgs.BrowserExecutableFolder.set -> void
Microsoft.Maui.WebViewInitializationStartedEventArgs.EnvironmentOptions.get -> Microsoft.Web.WebView2.Core.CoreWebView2EnvironmentOptions?
Microsoft.Maui.WebViewInitializationStartedEventArgs.EnvironmentOptions.set -> void
Microsoft.Maui.WebViewInitializationStartedEventArgs.IsInPrivateModeEnabled.get -> bool
Microsoft.Maui.WebViewInitializationStartedEventArgs.IsInPrivateModeEnabled.set -> void
Microsoft.Maui.WebViewInitializationStartedEventArgs.ProfileName.get -> string?
Microsoft.Maui.WebViewInitializationStartedEventArgs.ProfileName.set -> void
Microsoft.Maui.WebViewInitializationStartedEventArgs.ScriptLocale.get -> string?
Microsoft.Maui.WebViewInitializationStartedEventArgs.ScriptLocale.set -> void
Microsoft.Maui.WebViewInitializationStartedEventArgs.UserDataFolder.get -> string?
Microsoft.Maui.WebViewInitializationStartedEventArgs.UserDataFolder.set -> void
override Microsoft.Maui.Converters.EasingTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext? context, System.Type! sourceType) -> bool
override Microsoft.Maui.Converters.EasingTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext? context, System.Type? destinationType) -> bool
override Microsoft.Maui.Converters.EasingTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext? context, System.Globalization.CultureInfo? culture, object! value) -> object?
override Microsoft.Maui.Converters.EasingTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext? context, System.Globalization.CultureInfo? culture, object? value, System.Type! destinationType) -> object?
override Microsoft.Maui.Converters.EasingTypeConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext? context) -> System.ComponentModel.TypeConverter.StandardValuesCollection?
override Microsoft.Maui.Converters.EasingTypeConverter.GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext? context) -> bool
override Microsoft.Maui.Converters.EasingTypeConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext? context) -> bool
override Microsoft.Maui.Converters.FlexAlignContentTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext? context, System.Type! sourceType) -> bool
override Microsoft.Maui.Converters.FlexAlignContentTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext? context, System.Type? destinationType) -> bool
override Microsoft.Maui.Converters.FlexAlignContentTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext? context, System.Globalization.CultureInfo? culture, object! value) -> object?
override Microsoft.Maui.Converters.FlexAlignContentTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext? context, System.Globalization.CultureInfo? culture, object? value, System.Type! destinationType) -> object?
override Microsoft.Maui.Converters.FlexAlignItemsTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext? context, System.Type! sourceType) -> bool
override Microsoft.Maui.Converters.FlexAlignItemsTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext? context, System.Type? destinationType) -> bool
override Microsoft.Maui.Converters.FlexAlignItemsTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext? context, System.Globalization.CultureInfo? culture, object! value) -> object?
override Microsoft.Maui.Converters.FlexAlignItemsTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext? context, System.Globalization.CultureInfo? culture, object? value, System.Type! destinationType) -> object?
override Microsoft.Maui.Converters.FlexAlignSelfTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext? context, System.Type! sourceType) -> bool
override Microsoft.Maui.Converters.FlexAlignSelfTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext? context, System.Type? destinationType) -> bool
override Microsoft.Maui.Converters.FlexAlignSelfTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext? context, System.Globalization.CultureInfo? culture, object! value) -> object?
override Microsoft.Maui.Converters.FlexAlignSelfTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext? context, System.Globalization.CultureInfo? culture, object? value, System.Type! destinationType) -> object?
override Microsoft.Maui.Converters.FlexBasisTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext? context, System.Type! sourceType) -> bool
override Microsoft.Maui.Converters.FlexBasisTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext? context, System.Type? destinationType) -> bool
override Microsoft.Maui.Converters.FlexBasisTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext? context, System.Globalization.CultureInfo? culture, object! value) -> object?
override Microsoft.Maui.Converters.FlexBasisTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext? context, System.Globalization.CultureInfo? culture, object? value, System.Type! destinationType) -> object?
override Microsoft.Maui.Converters.FlexDirectionTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext? context, System.Type! sourceType) -> bool
override Microsoft.Maui.Converters.FlexDirectionTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext? context, System.Type? destinationType) -> bool
override Microsoft.Maui.Converters.FlexDirectionTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext? context, System.Globalization.CultureInfo? culture, object! value) -> object?
override Microsoft.Maui.Converters.FlexDirectionTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext? context, System.Globalization.CultureInfo? culture, object? value, System.Type! destinationType) -> object?
override Microsoft.Maui.Converters.FlexJustifyTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext? context, System.Type! sourceType) -> bool
override Microsoft.Maui.Converters.FlexJustifyTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext? context, System.Type? destinationType) -> bool
override Microsoft.Maui.Converters.FlexJustifyTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext? context, System.Globalization.CultureInfo? culture, object! value) -> object?
override Microsoft.Maui.Converters.FlexJustifyTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext? context, System.Globalization.CultureInfo? culture, object? value, System.Type! destinationType) -> object?
override Microsoft.Maui.Converters.FlexWrapTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext? context, System.Type! sourceType) -> bool
override Microsoft.Maui.Converters.FlexWrapTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext? context, System.Type? destinationType) -> bool
override Microsoft.Maui.Converters.FlexWrapTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext? context, System.Globalization.CultureInfo? culture, object! value) -> object?
override Microsoft.Maui.Converters.FlexWrapTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext? context, System.Globalization.CultureInfo? culture, object? value, System.Type! destinationType) -> object?
override Microsoft.Maui.Converters.GridLengthTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext? context, System.Type? sourceType) -> bool
override Microsoft.Maui.Converters.GridLengthTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext? context, System.Type? destinationType) -> bool
override Microsoft.Maui.Converters.GridLengthTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext? context, System.Globalization.CultureInfo? culture, object? value) -> object!
override Microsoft.Maui.Converters.GridLengthTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext? context, System.Globalization.CultureInfo? culture, object? value, System.Type? destinationType) -> object!
override Microsoft.Maui.Converters.SafeAreaEdgesTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext? context, System.Type! sourceType) -> bool
override Microsoft.Maui.Converters.SafeAreaEdgesTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext? context, System.Type? destinationType) -> bool
override Microsoft.Maui.Converters.SafeAreaEdgesTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext? context, System.Globalization.CultureInfo? culture, object? value) -> object!
override Microsoft.Maui.Converters.SafeAreaEdgesTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext? context, System.Globalization.CultureInfo? culture, object? value, System.Type! destinationType) -> object!
override Microsoft.Maui.Converters.ThicknessTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext? context, System.Type! sourceType) -> bool
override Microsoft.Maui.Converters.ThicknessTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext? context, System.Type? destinationType) -> bool
override Microsoft.Maui.Converters.ThicknessTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext? context, System.Globalization.CultureInfo? culture, object! value) -> object?
override Microsoft.Maui.Converters.ThicknessTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext? context, System.Globalization.CultureInfo? culture, object? value, System.Type! destinationType) -> object?
override Microsoft.Maui.Handlers.ImageHandler.GetDesiredSize(double widthConstraint, double heightConstraint) -> Microsoft.Maui.Graphics.Size
override Microsoft.Maui.Handlers.ContextFlyoutItemHandlerUpdate.Equals(object? obj) -> bool
override Microsoft.Maui.Handlers.ContextFlyoutItemHandlerUpdate.GetHashCode() -> int
override Microsoft.Maui.Handlers.ContextFlyoutItemHandlerUpdate.ToString() -> string!
override Microsoft.Maui.Handlers.LayoutHandlerUpdate.Equals(object? obj) -> bool
override Microsoft.Maui.Handlers.LayoutHandlerUpdate.GetHashCode() -> int
override Microsoft.Maui.Handlers.LayoutHandlerUpdate.ToString() -> string!
override Microsoft.Maui.Handlers.MenuBarHandlerUpdate.Equals(object? obj) -> bool
override Microsoft.Maui.Handlers.MenuBarHandlerUpdate.GetHashCode() -> int
override Microsoft.Maui.Handlers.MenuBarHandlerUpdate.ToString() -> string!
override Microsoft.Maui.Handlers.MenuBarItemHandlerUpdate.Equals(object? obj) -> bool
override Microsoft.Maui.Handlers.MenuBarItemHandlerUpdate.GetHashCode() -> int
override Microsoft.Maui.Handlers.MenuBarItemHandlerUpdate.ToString() -> string!
override Microsoft.Maui.Handlers.MenuFlyoutSubItemHandlerUpdate.Equals(object? obj) -> bool
override Microsoft.Maui.Handlers.MenuFlyoutSubItemHandlerUpdate.GetHashCode() -> int
override Microsoft.Maui.Handlers.MenuFlyoutSubItemHandlerUpdate.ToString() -> string!
override Microsoft.Maui.Handlers.OpenWindowRequest.Equals(object? obj) -> bool
override Microsoft.Maui.Handlers.OpenWindowRequest.GetHashCode() -> int
override Microsoft.Maui.Handlers.OpenWindowRequest.ToString() -> string!
override Microsoft.Maui.Platform.MauiSlider.OnApplyTemplate() -> void
override Microsoft.Maui.SafeAreaEdges.Equals(object? obj) -> bool
override Microsoft.Maui.SafeAreaEdges.GetHashCode() -> int
override Microsoft.Maui.SafeAreaEdges.ToString() -> string!
override Microsoft.Maui.ScrollToRequest.Equals(object? obj) -> bool
override Microsoft.Maui.ScrollToRequest.GetHashCode() -> int
override Microsoft.Maui.ScrollToRequest.ToString() -> string!
override Microsoft.Maui.SwipeViewCloseRequest.Equals(object? obj) -> bool
override Microsoft.Maui.SwipeViewCloseRequest.GetHashCode() -> int
override Microsoft.Maui.SwipeViewCloseRequest.ToString() -> string!
override Microsoft.Maui.SwipeViewOpenRequest.Equals(object? obj) -> bool
override Microsoft.Maui.SwipeViewOpenRequest.GetHashCode() -> int
override Microsoft.Maui.SwipeViewOpenRequest.ToString() -> string!
override Microsoft.Maui.SwipeViewSwipeChanging.Equals(object? obj) -> bool
override Microsoft.Maui.SwipeViewSwipeChanging.GetHashCode() -> int
override Microsoft.Maui.SwipeViewSwipeChanging.ToString() -> string!
override Microsoft.Maui.SwipeViewSwipeEnded.Equals(object? obj) -> bool
override Microsoft.Maui.SwipeViewSwipeEnded.GetHashCode() -> int
override Microsoft.Maui.SwipeViewSwipeEnded.ToString() -> string!
override Microsoft.Maui.SwipeViewSwipeStarted.Equals(object? obj) -> bool
override Microsoft.Maui.SwipeViewSwipeStarted.GetHashCode() -> int
override Microsoft.Maui.SwipeViewSwipeStarted.ToString() -> string!
*REMOVED*readonly Microsoft.Maui.PropertyMapper._mapper -> System.Collections.Generic.Dictionary<string!, System.Action<Microsoft.Maui.IElementHandler!, Microsoft.Maui.IElement!>!>!
static Microsoft.Maui.Handlers.ContextFlyoutItemHandlerUpdate.operator !=(Microsoft.Maui.Handlers.ContextFlyoutItemHandlerUpdate? left, Microsoft.Maui.Handlers.ContextFlyoutItemHandlerUpdate? right) -> bool
static Microsoft.Maui.Handlers.ContextFlyoutItemHandlerUpdate.operator ==(Microsoft.Maui.Handlers.ContextFlyoutItemHandlerUpdate? left, Microsoft.Maui.Handlers.ContextFlyoutItemHandlerUpdate? right) -> bool
static Microsoft.Maui.Handlers.GraphicsViewHandler.MapBackground(Microsoft.Maui.Handlers.IGraphicsViewHandler! handler, Microsoft.Maui.IGraphicsView! graphicsView) -> void
static Microsoft.Maui.Handlers.LayoutHandlerUpdate.operator !=(Microsoft.Maui.Handlers.LayoutHandlerUpdate? left, Microsoft.Maui.Handlers.LayoutHandlerUpdate? right) -> bool
static Microsoft.Maui.Handlers.LayoutHandlerUpdate.operator ==(Microsoft.Maui.Handlers.LayoutHandlerUpdate? left, Microsoft.Maui.Handlers.LayoutHandlerUpdate? right) -> bool
static Microsoft.Maui.Handlers.MenuBarHandlerUpdate.operator !=(Microsoft.Maui.Handlers.MenuBarHandlerUpdate? left, Microsoft.Maui.Handlers.MenuBarHandlerUpdate? right) -> bool
static Microsoft.Maui.Handlers.MenuBarHandlerUpdate.operator ==(Microsoft.Maui.Handlers.MenuBarHandlerUpdate? left, Microsoft.Maui.Handlers.MenuBarHandlerUpdate? right) -> bool
static Microsoft.Maui.Handlers.MenuBarItemHandlerUpdate.operator !=(Microsoft.Maui.Handlers.MenuBarItemHandlerUpdate? left, Microsoft.Maui.Handlers.MenuBarItemHandlerUpdate? right) -> bool
static Microsoft.Maui.Handlers.MenuBarItemHandlerUpdate.operator ==(Microsoft.Maui.Handlers.MenuBarItemHandlerUpdate? left, Microsoft.Maui.Handlers.MenuBarItemHandlerUpdate? right) -> bool
static Microsoft.Maui.Handlers.MenuFlyoutSubItemHandlerUpdate.operator !=(Microsoft.Maui.Handlers.MenuFlyoutSubItemHandlerUpdate? left, Microsoft.Maui.Handlers.MenuFlyoutSubItemHandlerUpdate? right) -> bool
static Microsoft.Maui.Handlers.MenuFlyoutSubItemHandlerUpdate.operator ==(Microsoft.Maui.Handlers.MenuFlyoutSubItemHandlerUpdate? left, Microsoft.Maui.Handlers.MenuFlyoutSubItemHandlerUpdate? right) -> bool
static Microsoft.Maui.Handlers.OpenWindowRequest.operator !=(Microsoft.Maui.Handlers.OpenWindowRequest? left, Microsoft.Maui.Handlers.OpenWindowRequest? right) -> bool
static Microsoft.Maui.Handlers.OpenWindowRequest.operator ==(Microsoft.Maui.Handlers.OpenWindowRequest? left, Microsoft.Maui.Handlers.OpenWindowRequest? right) -> bool
static Microsoft.Maui.Handlers.SearchBarHandler.MapReturnType(Microsoft.Maui.Handlers.ISearchBarHandler! handler, Microsoft.Maui.ISearchBar! searchBar) -> void
static Microsoft.Maui.Handlers.TimePickerHandler.MapBackground(Microsoft.Maui.Handlers.ITimePickerHandler! handler, Microsoft.Maui.ITimePicker! timePicker) -> void
static Microsoft.Maui.Handlers.WindowHandler.MapIsMaximizable(Microsoft.Maui.Handlers.IWindowHandler! handler, Microsoft.Maui.IWindow! window) -> void
static Microsoft.Maui.Handlers.WindowHandler.MapIsMinimizable(Microsoft.Maui.Handlers.IWindowHandler! handler, Microsoft.Maui.IWindow! window) -> void
static Microsoft.Maui.Hosting.AppHostBuilderExtensions.ConfigureEnvironmentVariables(this Microsoft.Maui.Hosting.MauiAppBuilder! builder) -> Microsoft.Maui.Hosting.MauiAppBuilder!
static Microsoft.Maui.Platform.CalendarDatePickerExtensions.ToDateFormat(this string! dateFormat) -> string!
static Microsoft.Maui.Platform.DatePickerExtensions.UpdateBackground(this Microsoft.UI.Xaml.Controls.CalendarDatePicker! platformDatePicker, Microsoft.Maui.IDatePicker! datePicker) -> void
*REMOVED*static Microsoft.Maui.Platform.ScrollViewerExtensions.UpdateScrollBarVisibility(this Microsoft.UI.Xaml.Controls.ScrollViewer! scrollViewer, Microsoft.Maui.ScrollOrientation orientation, Microsoft.Maui.ScrollBarVisibility horizontalScrollBarVisibility) -> void
static Microsoft.Maui.Platform.ScrollViewerExtensions.UpdateScrollBarVisibility(this Microsoft.UI.Xaml.Controls.ScrollViewer! scrollViewer, Microsoft.Maui.ScrollOrientation orientation, Microsoft.Maui.ScrollBarVisibility visibility) -> void
static Microsoft.Maui.Platform.SearchBarExtensions.UpdateReturnType(this Microsoft.UI.Xaml.Controls.AutoSuggestBox! platformControl, Microsoft.Maui.ISearchBar! searchBar) -> void
static Microsoft.Maui.Platform.TextBoxExtensions.GetCursorPosition(this Microsoft.UI.Xaml.Controls.TextBox! textBox, int cursorOffset = 0) -> int
static Microsoft.Maui.Platform.TimePickerExtensions.UpdateBackground(this Microsoft.UI.Xaml.Controls.TimePicker! platformTimePicker, Microsoft.Maui.ITimePicker! timePicker) -> void
static Microsoft.Maui.SafeAreaEdges.All.get -> Microsoft.Maui.SafeAreaEdges
static Microsoft.Maui.SafeAreaEdges.Default.get -> Microsoft.Maui.SafeAreaEdges
static Microsoft.Maui.SafeAreaEdges.None.get -> Microsoft.Maui.SafeAreaEdges
static Microsoft.Maui.SafeAreaEdges.operator !=(Microsoft.Maui.SafeAreaEdges left, Microsoft.Maui.SafeAreaEdges right) -> bool
static Microsoft.Maui.SafeAreaEdges.operator ==(Microsoft.Maui.SafeAreaEdges left, Microsoft.Maui.SafeAreaEdges right) -> bool
static Microsoft.Maui.ScrollToRequest.operator !=(Microsoft.Maui.ScrollToRequest? left, Microsoft.Maui.ScrollToRequest? right) -> bool
static Microsoft.Maui.ScrollToRequest.operator ==(Microsoft.Maui.ScrollToRequest? left, Microsoft.Maui.ScrollToRequest? right) -> bool
static Microsoft.Maui.SwipeViewCloseRequest.operator !=(Microsoft.Maui.SwipeViewCloseRequest? left, Microsoft.Maui.SwipeViewCloseRequest? right) -> bool
static Microsoft.Maui.SwipeViewCloseRequest.operator ==(Microsoft.Maui.SwipeViewCloseRequest? left, Microsoft.Maui.SwipeViewCloseRequest? right) -> bool
static Microsoft.Maui.SwipeViewOpenRequest.operator !=(Microsoft.Maui.SwipeViewOpenRequest? left, Microsoft.Maui.SwipeViewOpenRequest? right) -> bool
static Microsoft.Maui.SwipeViewOpenRequest.operator ==(Microsoft.Maui.SwipeViewOpenRequest? left, Microsoft.Maui.SwipeViewOpenRequest? right) -> bool
static Microsoft.Maui.SwipeViewSwipeChanging.operator !=(Microsoft.Maui.SwipeViewSwipeChanging? left, Microsoft.Maui.SwipeViewSwipeChanging? right) -> bool
static Microsoft.Maui.SwipeViewSwipeChanging.operator ==(Microsoft.Maui.SwipeViewSwipeChanging? left, Microsoft.Maui.SwipeViewSwipeChanging? right) -> bool
static Microsoft.Maui.SwipeViewSwipeEnded.operator !=(Microsoft.Maui.SwipeViewSwipeEnded? left, Microsoft.Maui.SwipeViewSwipeEnded? right) -> bool
static Microsoft.Maui.SwipeViewSwipeEnded.operator ==(Microsoft.Maui.SwipeViewSwipeEnded? left, Microsoft.Maui.SwipeViewSwipeEnded? right) -> bool
static Microsoft.Maui.SwipeViewSwipeStarted.operator !=(Microsoft.Maui.SwipeViewSwipeStarted? left, Microsoft.Maui.SwipeViewSwipeStarted? right) -> bool
static Microsoft.Maui.SwipeViewSwipeStarted.operator ==(Microsoft.Maui.SwipeViewSwipeStarted? left, Microsoft.Maui.SwipeViewSwipeStarted? right) -> bool
~static readonly Microsoft.Maui.Platform.MauiSlider.ThumbImageSourceProperty -> Microsoft.UI.Xaml.DependencyProperty
virtual Microsoft.Maui.Animations.Lerp.LerpDelegate.Invoke(object! start, object! end, double progress) -> object!
virtual Microsoft.Maui.Handlers.ContextFlyoutItemHandlerUpdate.<Clone>$() -> Microsoft.Maui.Handlers.ContextFlyoutItemHandlerUpdate!
virtual Microsoft.Maui.Handlers.ContextFlyoutItemHandlerUpdate.EqualityContract.get -> System.Type!
virtual Microsoft.Maui.Handlers.ContextFlyoutItemHandlerUpdate.Equals(Microsoft.Maui.Handlers.ContextFlyoutItemHandlerUpdate? other) -> bool
virtual Microsoft.Maui.Handlers.ContextFlyoutItemHandlerUpdate.PrintMembers(System.Text.StringBuilder! builder) -> bool
virtual Microsoft.Maui.Handlers.LayoutHandlerUpdate.<Clone>$() -> Microsoft.Maui.Handlers.LayoutHandlerUpdate!
virtual Microsoft.Maui.Handlers.LayoutHandlerUpdate.EqualityContract.get -> System.Type!
virtual Microsoft.Maui.Handlers.LayoutHandlerUpdate.Equals(Microsoft.Maui.Handlers.LayoutHandlerUpdate? other) -> bool
virtual Microsoft.Maui.Handlers.LayoutHandlerUpdate.PrintMembers(System.Text.StringBuilder! builder) -> bool
virtual Microsoft.Maui.Handlers.MenuBarHandlerUpdate.<Clone>$() -> Microsoft.Maui.Handlers.MenuBarHandlerUpdate!
virtual Microsoft.Maui.Handlers.MenuBarHandlerUpdate.EqualityContract.get -> System.Type!
virtual Microsoft.Maui.Handlers.MenuBarHandlerUpdate.Equals(Microsoft.Maui.Handlers.MenuBarHandlerUpdate? other) -> bool
virtual Microsoft.Maui.Handlers.MenuBarHandlerUpdate.PrintMembers(System.Text.StringBuilder! builder) -> bool
virtual Microsoft.Maui.Handlers.MenuBarItemHandlerUpdate.<Clone>$() -> Microsoft.Maui.Handlers.MenuBarItemHandlerUpdate!
virtual Microsoft.Maui.Handlers.MenuBarItemHandlerUpdate.EqualityContract.get -> System.Type!
virtual Microsoft.Maui.Handlers.MenuBarItemHandlerUpdate.Equals(Microsoft.Maui.Handlers.MenuBarItemHandlerUpdate? other) -> bool
virtual Microsoft.Maui.Handlers.MenuBarItemHandlerUpdate.PrintMembers(System.Text.StringBuilder! builder) -> bool
virtual Microsoft.Maui.Handlers.MenuFlyoutSubItemHandlerUpdate.<Clone>$() -> Microsoft.Maui.Handlers.MenuFlyoutSubItemHandlerUpdate!
virtual Microsoft.Maui.Handlers.MenuFlyoutSubItemHandlerUpdate.EqualityContract.get -> System.Type!
virtual Microsoft.Maui.Handlers.MenuFlyoutSubItemHandlerUpdate.Equals(Microsoft.Maui.Handlers.MenuFlyoutSubItemHandlerUpdate? other) -> bool
virtual Microsoft.Maui.Handlers.MenuFlyoutSubItemHandlerUpdate.PrintMembers(System.Text.StringBuilder! builder) -> bool
virtual Microsoft.Maui.Handlers.OpenWindowRequest.<Clone>$() -> Microsoft.Maui.Handlers.OpenWindowRequest!
virtual Microsoft.Maui.Handlers.OpenWindowRequest.EqualityContract.get -> System.Type!
virtual Microsoft.Maui.Handlers.OpenWindowRequest.Equals(Microsoft.Maui.Handlers.OpenWindowRequest? other) -> bool
virtual Microsoft.Maui.Handlers.OpenWindowRequest.PrintMembers(System.Text.StringBuilder! builder) -> bool
virtual Microsoft.Maui.LifecycleEvents.WindowsLifecycle.OnActivated.Invoke(Microsoft.UI.Xaml.Window! window, Microsoft.UI.Xaml.WindowActivatedEventArgs! args) -> void
virtual Microsoft.Maui.LifecycleEvents.WindowsLifecycle.OnClosed.Invoke(Microsoft.UI.Xaml.Window! window, Microsoft.UI.Xaml.WindowEventArgs! args) -> void
virtual Microsoft.Maui.LifecycleEvents.WindowsLifecycle.OnLaunched.Invoke(Microsoft.UI.Xaml.Application! application, Microsoft.UI.Xaml.LaunchActivatedEventArgs! args) -> void
virtual Microsoft.Maui.LifecycleEvents.WindowsLifecycle.OnLaunching.Invoke(Microsoft.UI.Xaml.Application! application, Microsoft.UI.Xaml.LaunchActivatedEventArgs! args) -> void
virtual Microsoft.Maui.LifecycleEvents.WindowsLifecycle.OnPlatformMessage.Invoke(Microsoft.UI.Xaml.Window! window, Microsoft.Maui.Platform.WindowsPlatformMessageEventArgs! args) -> void
virtual Microsoft.Maui.LifecycleEvents.WindowsLifecycle.OnPlatformWindowSubclassed.Invoke(Microsoft.UI.Xaml.Window! window, Microsoft.Maui.Platform.WindowsPlatformWindowSubclassedEventArgs! args) -> void
virtual Microsoft.Maui.LifecycleEvents.WindowsLifecycle.OnResumed.Invoke(Microsoft.UI.Xaml.Window! window) -> void
virtual Microsoft.Maui.LifecycleEvents.WindowsLifecycle.OnVisibilityChanged.Invoke(Microsoft.UI.Xaml.Window! window, Microsoft.UI.Xaml.WindowVisibilityChangedEventArgs! args) -> void
virtual Microsoft.Maui.LifecycleEvents.WindowsLifecycle.OnWindowCreated.Invoke(Microsoft.UI.Xaml.Window! window) -> void
*REMOVED*virtual Microsoft.Maui.PropertyMapper.ClearKeyCache() -> void
*REMOVED*virtual Microsoft.Maui.PropertyMapper.UpdateKeys.get -> System.Collections.Generic.IReadOnlyCollection<string!>!
virtual Microsoft.Maui.ScrollToRequest.<Clone>$() -> Microsoft.Maui.ScrollToRequest!
virtual Microsoft.Maui.ScrollToRequest.EqualityContract.get -> System.Type!
virtual Microsoft.Maui.ScrollToRequest.Equals(Microsoft.Maui.ScrollToRequest? other) -> bool
virtual Microsoft.Maui.ScrollToRequest.PrintMembers(System.Text.StringBuilder! builder) -> bool
virtual Microsoft.Maui.SwipeViewCloseRequest.<Clone>$() -> Microsoft.Maui.SwipeViewCloseRequest!
virtual Microsoft.Maui.SwipeViewCloseRequest.EqualityContract.get -> System.Type!
virtual Microsoft.Maui.SwipeViewCloseRequest.Equals(Microsoft.Maui.SwipeViewCloseRequest? other) -> bool
virtual Microsoft.Maui.SwipeViewCloseRequest.PrintMembers(System.Text.StringBuilder! builder) -> bool
virtual Microsoft.Maui.SwipeViewOpenRequest.<Clone>$() -> Microsoft.Maui.SwipeViewOpenRequest!
virtual Microsoft.Maui.SwipeViewOpenRequest.EqualityContract.get -> System.Type!
virtual Microsoft.Maui.SwipeViewOpenRequest.Equals(Microsoft.Maui.SwipeViewOpenRequest? other) -> bool
virtual Microsoft.Maui.SwipeViewOpenRequest.PrintMembers(System.Text.StringBuilder! builder) -> bool
virtual Microsoft.Maui.SwipeViewSwipeChanging.<Clone>$() -> Microsoft.Maui.SwipeViewSwipeChanging!
virtual Microsoft.Maui.SwipeViewSwipeChanging.EqualityContract.get -> System.Type!
virtual Microsoft.Maui.SwipeViewSwipeChanging.Equals(Microsoft.Maui.SwipeViewSwipeChanging? other) -> bool
virtual Microsoft.Maui.SwipeViewSwipeChanging.PrintMembers(System.Text.StringBuilder! builder) -> bool
virtual Microsoft.Maui.SwipeViewSwipeEnded.<Clone>$() -> Microsoft.Maui.SwipeViewSwipeEnded!
virtual Microsoft.Maui.SwipeViewSwipeEnded.EqualityContract.get -> System.Type!
virtual Microsoft.Maui.SwipeViewSwipeEnded.Equals(Microsoft.Maui.SwipeViewSwipeEnded? other) -> bool
virtual Microsoft.Maui.SwipeViewSwipeEnded.PrintMembers(System.Text.StringBuilder! builder) -> bool
virtual Microsoft.Maui.SwipeViewSwipeStarted.<Clone>$() -> Microsoft.Maui.SwipeViewSwipeStarted!
virtual Microsoft.Maui.SwipeViewSwipeStarted.EqualityContract.get -> System.Type!
virtual Microsoft.Maui.SwipeViewSwipeStarted.Equals(Microsoft.Maui.SwipeViewSwipeStarted? other) -> bool
virtual Microsoft.Maui.SwipeViewSwipeStarted.PrintMembers(System.Text.StringBuilder! builder) -> bool
