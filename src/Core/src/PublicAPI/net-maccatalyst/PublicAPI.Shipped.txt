#nullable enable
~override Microsoft.Maui.Converters.EasingTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Type sourceType) -> bool
~override Microsoft.Maui.Converters.EasingTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Type destinationType) -> bool
~override Microsoft.Maui.Converters.EasingTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value) -> object
~override Microsoft.Maui.Converters.EasingTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, System.Type destinationType) -> object
~override Microsoft.Maui.Converters.EasingTypeConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext context) -> System.ComponentModel.TypeConverter.StandardValuesCollection
~override Microsoft.Maui.Converters.EasingTypeConverter.GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext context) -> bool
~override Microsoft.Maui.Converters.EasingTypeConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext context) -> bool
~override Microsoft.Maui.Converters.FlexAlignContentTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Type sourceType) -> bool
~override Microsoft.Maui.Converters.FlexAlignContentTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Type destinationType) -> bool
~override Microsoft.Maui.Converters.FlexAlignContentTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value) -> object
~override Microsoft.Maui.Converters.FlexAlignContentTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, System.Type destinationType) -> object
~override Microsoft.Maui.Converters.FlexAlignItemsTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Type sourceType) -> bool
~override Microsoft.Maui.Converters.FlexAlignItemsTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Type destinationType) -> bool
~override Microsoft.Maui.Converters.FlexAlignItemsTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value) -> object
~override Microsoft.Maui.Converters.FlexAlignItemsTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, System.Type destinationType) -> object
~override Microsoft.Maui.Converters.FlexAlignSelfTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Type sourceType) -> bool
~override Microsoft.Maui.Converters.FlexAlignSelfTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Type destinationType) -> bool
~override Microsoft.Maui.Converters.FlexAlignSelfTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value) -> object
~override Microsoft.Maui.Converters.FlexAlignSelfTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, System.Type destinationType) -> object
~override Microsoft.Maui.Converters.FlexBasisTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Type sourceType) -> bool
~override Microsoft.Maui.Converters.FlexBasisTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Type destinationType) -> bool
~override Microsoft.Maui.Converters.FlexBasisTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value) -> object
~override Microsoft.Maui.Converters.FlexBasisTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, System.Type destinationType) -> object
~override Microsoft.Maui.Converters.FlexDirectionTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Type sourceType) -> bool
~override Microsoft.Maui.Converters.FlexDirectionTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Type destinationType) -> bool
~override Microsoft.Maui.Converters.FlexDirectionTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value) -> object
~override Microsoft.Maui.Converters.FlexDirectionTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, System.Type destinationType) -> object
~override Microsoft.Maui.Converters.FlexJustifyTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Type sourceType) -> bool
~override Microsoft.Maui.Converters.FlexJustifyTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Type destinationType) -> bool
~override Microsoft.Maui.Converters.FlexJustifyTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value) -> object
~override Microsoft.Maui.Converters.FlexJustifyTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, System.Type destinationType) -> object
~override Microsoft.Maui.Converters.FlexWrapTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Type sourceType) -> bool
~override Microsoft.Maui.Converters.FlexWrapTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Type destinationType) -> bool
~override Microsoft.Maui.Converters.FlexWrapTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value) -> object
~override Microsoft.Maui.Converters.FlexWrapTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, System.Type destinationType) -> object
~override Microsoft.Maui.Converters.ThicknessTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Type sourceType) -> bool
~override Microsoft.Maui.Converters.ThicknessTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Type destinationType) -> bool
~override Microsoft.Maui.Converters.ThicknessTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value) -> object
~override Microsoft.Maui.Converters.ThicknessTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, System.Type destinationType) -> object
abstract Microsoft.Maui.Handlers.ElementHandler<TVirtualView, TPlatformView>.CreatePlatformElement() -> TPlatformView!
abstract Microsoft.Maui.Handlers.ViewHandler.GetDesiredSize(double widthConstraint, double heightConstraint) -> Microsoft.Maui.Graphics.Size
abstract Microsoft.Maui.Handlers.ViewHandler.PlatformArrange(Microsoft.Maui.Graphics.Rect frame) -> void
abstract Microsoft.Maui.Handlers.ViewHandler.RemoveContainer() -> void
abstract Microsoft.Maui.Handlers.ViewHandler.SetupContainer() -> void
abstract Microsoft.Maui.Handlers.ViewHandler<TVirtualView, TPlatformView>.CreatePlatformView() -> TPlatformView!
abstract Microsoft.Maui.ImageSourceService.GetImageAsync(Microsoft.Maui.IImageSource! imageSource, float scale = 1, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<Microsoft.Maui.IImageSourceServiceResult<UIKit.UIImage!>?>!
abstract Microsoft.Maui.Layouts.LayoutManager.ArrangeChildren(Microsoft.Maui.Graphics.Rect bounds) -> Microsoft.Maui.Graphics.Size
abstract Microsoft.Maui.Layouts.LayoutManager.Measure(double widthConstraint, double heightConstraint) -> Microsoft.Maui.Graphics.Size
abstract Microsoft.Maui.MauiUIApplicationDelegate.CreateMauiApp() -> Microsoft.Maui.Hosting.MauiApp!
const Microsoft.Maui.Platform.ButtonExtensions.AlmostZero = 1E-05 -> double
const Microsoft.Maui.Primitives.Dimension.Maximum = Infinity -> double
const Microsoft.Maui.Primitives.Dimension.Minimum = 0 -> double
const Microsoft.Maui.Primitives.Dimension.Unset = NaN -> double
Microsoft.Maui.ActivationState
Microsoft.Maui.ActivationState.ActivationState(Microsoft.Maui.IMauiContext! context, Foundation.NSDictionary![]? states) -> void
Microsoft.Maui.ActivationState.ActivationState(Microsoft.Maui.IMauiContext! context, Microsoft.Maui.IPersistedState! state) -> void
Microsoft.Maui.ActivationState.ActivationState(Microsoft.Maui.IMauiContext! context) -> void
Microsoft.Maui.ActivationState.Context.get -> Microsoft.Maui.IMauiContext!
Microsoft.Maui.ActivationState.State.get -> Microsoft.Maui.IPersistedState!
Microsoft.Maui.Animations.Animation
Microsoft.Maui.Animations.Animation.Add(double beginAt, double duration, Microsoft.Maui.Animations.Animation! animation) -> void
Microsoft.Maui.Animations.Animation.Animation() -> void
Microsoft.Maui.Animations.Animation.Animation(System.Action<double>! callback, double start = 0, double duration = 1, Microsoft.Maui.Easing? easing = null, System.Action? finished = null) -> void
Microsoft.Maui.Animations.Animation.Animation(System.Collections.Generic.List<Microsoft.Maui.Animations.Animation!>! animations) -> void
Microsoft.Maui.Animations.Animation.AnimationManager.get -> Microsoft.Maui.Animations.IAnimationManager?
Microsoft.Maui.Animations.Animation.animationManger -> Microsoft.Maui.Animations.IAnimationManager?
Microsoft.Maui.Animations.Animation.childrenAnimations -> System.Collections.Generic.List<Microsoft.Maui.Animations.Animation!>!
Microsoft.Maui.Animations.Animation.Commit(Microsoft.Maui.Animations.IAnimationManager! animationManger) -> void
Microsoft.Maui.Animations.Animation.CreateAutoReversing() -> Microsoft.Maui.Animations.Animation!
Microsoft.Maui.Animations.Animation.CurrentTime.get -> double
Microsoft.Maui.Animations.Animation.CurrentTime.set -> void
Microsoft.Maui.Animations.Animation.Dispose() -> void
Microsoft.Maui.Animations.Animation.Duration.get -> double
Microsoft.Maui.Animations.Animation.Duration.set -> void
Microsoft.Maui.Animations.Animation.Easing.get -> Microsoft.Maui.Easing!
Microsoft.Maui.Animations.Animation.Easing.set -> void
Microsoft.Maui.Animations.Animation.Finished.get -> System.Action?
Microsoft.Maui.Animations.Animation.Finished.set -> void
Microsoft.Maui.Animations.Animation.GetEnumerator() -> System.Collections.IEnumerator!
Microsoft.Maui.Animations.Animation.HasFinished.get -> bool
Microsoft.Maui.Animations.Animation.HasFinished.set -> void
Microsoft.Maui.Animations.Animation.IsDisposed.get -> bool
Microsoft.Maui.Animations.Animation.IsPaused.get -> bool
Microsoft.Maui.Animations.Animation.Name.get -> string?
Microsoft.Maui.Animations.Animation.Name.set -> void
Microsoft.Maui.Animations.Animation.Pause() -> void
Microsoft.Maui.Animations.Animation.Progress.get -> double
Microsoft.Maui.Animations.Animation.Progress.set -> void
Microsoft.Maui.Animations.Animation.RemoveFromParent() -> void
Microsoft.Maui.Animations.Animation.Repeats.get -> bool
Microsoft.Maui.Animations.Animation.Repeats.set -> void
Microsoft.Maui.Animations.Animation.Resume() -> void
Microsoft.Maui.Animations.Animation.StartDelay.get -> double
Microsoft.Maui.Animations.Animation.StartDelay.set -> void
Microsoft.Maui.Animations.Animation.Step.get -> System.Action<double>?
Microsoft.Maui.Animations.Animation.Step.set -> void
Microsoft.Maui.Animations.Animation.Tick(double milliseconds) -> void
Microsoft.Maui.Animations.AnimationLerpingExtensions
Microsoft.Maui.Animations.AnimationManager
Microsoft.Maui.Animations.AnimationManager.Add(Microsoft.Maui.Animations.Animation! animation) -> void
Microsoft.Maui.Animations.AnimationManager.AnimationManager(Microsoft.Maui.Animations.ITicker! ticker) -> void
Microsoft.Maui.Animations.AnimationManager.AutoStartTicker.get -> bool
Microsoft.Maui.Animations.AnimationManager.AutoStartTicker.set -> void
Microsoft.Maui.Animations.AnimationManager.Dispose() -> void
Microsoft.Maui.Animations.AnimationManager.Remove(Microsoft.Maui.Animations.Animation! animation) -> void
Microsoft.Maui.Animations.AnimationManager.SpeedModifier.get -> double
Microsoft.Maui.Animations.AnimationManager.SpeedModifier.set -> void
Microsoft.Maui.Animations.AnimationManager.Ticker.get -> Microsoft.Maui.Animations.ITicker!
Microsoft.Maui.Animations.IAnimationManager
Microsoft.Maui.Animations.IAnimationManager.Add(Microsoft.Maui.Animations.Animation! animation) -> void
Microsoft.Maui.Animations.IAnimationManager.AutoStartTicker.get -> bool
Microsoft.Maui.Animations.IAnimationManager.AutoStartTicker.set -> void
Microsoft.Maui.Animations.IAnimationManager.Remove(Microsoft.Maui.Animations.Animation! animation) -> void
Microsoft.Maui.Animations.IAnimationManager.SpeedModifier.get -> double
Microsoft.Maui.Animations.IAnimationManager.SpeedModifier.set -> void
Microsoft.Maui.Animations.IAnimationManager.Ticker.get -> Microsoft.Maui.Animations.ITicker!
Microsoft.Maui.Animations.IAnimator
Microsoft.Maui.Animations.IAnimator.AddAnimation(Microsoft.Maui.Animations.Animation! animation) -> void
Microsoft.Maui.Animations.IAnimator.RemoveAnimation(Microsoft.Maui.Animations.Animation! animation) -> void
Microsoft.Maui.Animations.ITicker
Microsoft.Maui.Animations.ITicker.Fire.get -> System.Action?
Microsoft.Maui.Animations.ITicker.Fire.set -> void
Microsoft.Maui.Animations.ITicker.IsRunning.get -> bool
Microsoft.Maui.Animations.ITicker.MaxFps.get -> int
Microsoft.Maui.Animations.ITicker.MaxFps.set -> void
Microsoft.Maui.Animations.ITicker.Start() -> void
Microsoft.Maui.Animations.ITicker.Stop() -> void
Microsoft.Maui.Animations.ITicker.SystemEnabled.get -> bool
Microsoft.Maui.Animations.Lerp
Microsoft.Maui.Animations.Lerp.Calculate.get -> Microsoft.Maui.Animations.Lerp.LerpDelegate?
Microsoft.Maui.Animations.Lerp.Calculate.set -> void
Microsoft.Maui.Animations.Lerp.Lerp() -> void
Microsoft.Maui.Animations.Lerp.LerpDelegate
Microsoft.Maui.Animations.LerpingAnimation
Microsoft.Maui.Animations.LerpingAnimation.CurrentValue.get -> object?
Microsoft.Maui.Animations.LerpingAnimation.CurrentValue.set -> void
Microsoft.Maui.Animations.LerpingAnimation.EndValue.get -> object?
Microsoft.Maui.Animations.LerpingAnimation.EndValue.set -> void
Microsoft.Maui.Animations.LerpingAnimation.Lerp.get -> Microsoft.Maui.Animations.Lerp?
Microsoft.Maui.Animations.LerpingAnimation.Lerp.set -> void
Microsoft.Maui.Animations.LerpingAnimation.LerpingAnimation() -> void
Microsoft.Maui.Animations.LerpingAnimation.LerpingAnimation(System.Action<double>! callback, double start = 0, double end = 1, Microsoft.Maui.Easing? easing = null, System.Action? finished = null) -> void
Microsoft.Maui.Animations.LerpingAnimation.LerpingAnimation(System.Collections.Generic.List<Microsoft.Maui.Animations.Animation!>! animations) -> void
Microsoft.Maui.Animations.LerpingAnimation.StartValue.get -> object?
Microsoft.Maui.Animations.LerpingAnimation.StartValue.set -> void
Microsoft.Maui.Animations.LerpingAnimation.ValueChanged.get -> System.Action?
Microsoft.Maui.Animations.LerpingAnimation.ValueChanged.set -> void
Microsoft.Maui.Animations.PlatformTicker
Microsoft.Maui.Animations.PlatformTicker.PlatformTicker() -> void
Microsoft.Maui.Animations.Ticker
Microsoft.Maui.Animations.Ticker.Fire.get -> System.Action?
Microsoft.Maui.Animations.Ticker.Fire.set -> void
Microsoft.Maui.Animations.Ticker.Ticker() -> void
Microsoft.Maui.Aspect
Microsoft.Maui.Aspect.AspectFill = 1 -> Microsoft.Maui.Aspect
Microsoft.Maui.Aspect.AspectFit = 0 -> Microsoft.Maui.Aspect
Microsoft.Maui.Aspect.Center = 3 -> Microsoft.Maui.Aspect
Microsoft.Maui.Aspect.Fill = 2 -> Microsoft.Maui.Aspect
Microsoft.Maui.ClearButtonVisibility
Microsoft.Maui.ClearButtonVisibility.Never = 0 -> Microsoft.Maui.ClearButtonVisibility
Microsoft.Maui.ClearButtonVisibility.WhileEditing = 1 -> Microsoft.Maui.ClearButtonVisibility
Microsoft.Maui.CommandMapper
Microsoft.Maui.CommandMapper.Chained.get -> Microsoft.Maui.CommandMapper?
Microsoft.Maui.CommandMapper.Chained.set -> void
Microsoft.Maui.CommandMapper.CommandMapper() -> void
Microsoft.Maui.CommandMapper.CommandMapper(Microsoft.Maui.CommandMapper! chained) -> void
Microsoft.Maui.CommandMapper.Invoke(Microsoft.Maui.IElementHandler! viewHandler, Microsoft.Maui.IElement? virtualView, string! property, object? args) -> void
Microsoft.Maui.CommandMapper<TVirtualView, TViewHandler>
Microsoft.Maui.CommandMapper<TVirtualView, TViewHandler>.Add(string! key, System.Action<TViewHandler, TVirtualView, object?>! action) -> void
Microsoft.Maui.CommandMapper<TVirtualView, TViewHandler>.Add(string! key, System.Action<TViewHandler, TVirtualView>! action) -> void
Microsoft.Maui.CommandMapper<TVirtualView, TViewHandler>.CommandMapper() -> void
Microsoft.Maui.CommandMapper<TVirtualView, TViewHandler>.CommandMapper(Microsoft.Maui.CommandMapper! chained) -> void
Microsoft.Maui.CommandMapper<TVirtualView, TViewHandler>.this[string! key].get -> System.Action<TViewHandler, TVirtualView, object?>!
Microsoft.Maui.CommandMapper<TVirtualView, TViewHandler>.this[string! key].set -> void
Microsoft.Maui.CommandMapper<TVirtualView>
Microsoft.Maui.CommandMapper<TVirtualView>.CommandMapper() -> void
Microsoft.Maui.CommandMapper<TVirtualView>.CommandMapper(Microsoft.Maui.CommandMapper! chained) -> void
Microsoft.Maui.CommandMapperExtensions
Microsoft.Maui.Converters.CornerRadiusTypeConverter
Microsoft.Maui.Converters.CornerRadiusTypeConverter.CornerRadiusTypeConverter() -> void
Microsoft.Maui.Converters.EasingTypeConverter
Microsoft.Maui.Converters.EasingTypeConverter.EasingTypeConverter() -> void
Microsoft.Maui.Converters.FlexAlignContentTypeConverter
Microsoft.Maui.Converters.FlexAlignContentTypeConverter.FlexAlignContentTypeConverter() -> void
Microsoft.Maui.Converters.FlexAlignItemsTypeConverter
Microsoft.Maui.Converters.FlexAlignItemsTypeConverter.FlexAlignItemsTypeConverter() -> void
Microsoft.Maui.Converters.FlexAlignSelfTypeConverter
Microsoft.Maui.Converters.FlexAlignSelfTypeConverter.FlexAlignSelfTypeConverter() -> void
Microsoft.Maui.Converters.FlexBasisTypeConverter
Microsoft.Maui.Converters.FlexBasisTypeConverter.FlexBasisTypeConverter() -> void
Microsoft.Maui.Converters.FlexDirectionTypeConverter
Microsoft.Maui.Converters.FlexDirectionTypeConverter.FlexDirectionTypeConverter() -> void
Microsoft.Maui.Converters.FlexJustifyTypeConverter
Microsoft.Maui.Converters.FlexJustifyTypeConverter.FlexJustifyTypeConverter() -> void
Microsoft.Maui.Converters.FlexWrapTypeConverter
Microsoft.Maui.Converters.FlexWrapTypeConverter.FlexWrapTypeConverter() -> void
Microsoft.Maui.Converters.KeyboardTypeConverter
Microsoft.Maui.Converters.KeyboardTypeConverter.KeyboardTypeConverter() -> void
Microsoft.Maui.Converters.ThicknessTypeConverter
Microsoft.Maui.Converters.ThicknessTypeConverter.ThicknessTypeConverter() -> void
Microsoft.Maui.CornerRadius
Microsoft.Maui.CornerRadius.BottomLeft.get -> double
Microsoft.Maui.CornerRadius.BottomRight.get -> double
Microsoft.Maui.CornerRadius.CornerRadius() -> void
Microsoft.Maui.CornerRadius.CornerRadius(double topLeft, double topRight, double bottomLeft, double bottomRight) -> void
Microsoft.Maui.CornerRadius.CornerRadius(double uniformRadius) -> void
Microsoft.Maui.CornerRadius.Deconstruct(out double topLeft, out double topRight, out double bottomLeft, out double bottomRight) -> void
Microsoft.Maui.CornerRadius.TopLeft.get -> double
Microsoft.Maui.CornerRadius.TopRight.get -> double
Microsoft.Maui.Crc64
Microsoft.Maui.CustomKeyboard
Microsoft.Maui.CustomKeyboard.Flags.get -> Microsoft.Maui.KeyboardFlags
Microsoft.Maui.Dispatching.Dispatcher
Microsoft.Maui.Dispatching.Dispatcher.CreateTimer() -> Microsoft.Maui.Dispatching.IDispatcherTimer!
Microsoft.Maui.Dispatching.Dispatcher.Dispatch(System.Action! action) -> bool
Microsoft.Maui.Dispatching.Dispatcher.DispatchDelayed(System.TimeSpan delay, System.Action! action) -> bool
Microsoft.Maui.Dispatching.Dispatcher.IsDispatchRequired.get -> bool
Microsoft.Maui.Dispatching.DispatcherExtensions
Microsoft.Maui.Dispatching.DispatcherProvider
Microsoft.Maui.Dispatching.DispatcherProvider.DispatcherProvider() -> void
Microsoft.Maui.Dispatching.DispatcherProvider.GetForCurrentThread() -> Microsoft.Maui.Dispatching.IDispatcher?
Microsoft.Maui.Dispatching.IDispatcher
Microsoft.Maui.Dispatching.IDispatcher.CreateTimer() -> Microsoft.Maui.Dispatching.IDispatcherTimer!
Microsoft.Maui.Dispatching.IDispatcher.Dispatch(System.Action! action) -> bool
Microsoft.Maui.Dispatching.IDispatcher.DispatchDelayed(System.TimeSpan delay, System.Action! action) -> bool
Microsoft.Maui.Dispatching.IDispatcher.IsDispatchRequired.get -> bool
Microsoft.Maui.Dispatching.IDispatcherProvider
Microsoft.Maui.Dispatching.IDispatcherProvider.GetForCurrentThread() -> Microsoft.Maui.Dispatching.IDispatcher?
Microsoft.Maui.Dispatching.IDispatcherTimer
Microsoft.Maui.Dispatching.IDispatcherTimer.Interval.get -> System.TimeSpan
Microsoft.Maui.Dispatching.IDispatcherTimer.Interval.set -> void
Microsoft.Maui.Dispatching.IDispatcherTimer.IsRepeating.get -> bool
Microsoft.Maui.Dispatching.IDispatcherTimer.IsRepeating.set -> void
Microsoft.Maui.Dispatching.IDispatcherTimer.IsRunning.get -> bool
Microsoft.Maui.Dispatching.IDispatcherTimer.Start() -> void
Microsoft.Maui.Dispatching.IDispatcherTimer.Stop() -> void
Microsoft.Maui.Dispatching.IDispatcherTimer.Tick -> System.EventHandler!
Microsoft.Maui.DisplayDensityRequest
Microsoft.Maui.DisplayDensityRequest.DisplayDensityRequest() -> void
Microsoft.Maui.Easing
Microsoft.Maui.Easing.Ease(double v) -> double
Microsoft.Maui.Easing.Easing(System.Func<double, double>! easingFunc) -> void
Microsoft.Maui.EmbeddedFont
Microsoft.Maui.EmbeddedFont.EmbeddedFont() -> void
Microsoft.Maui.EmbeddedFont.FontName.get -> string?
Microsoft.Maui.EmbeddedFont.FontName.set -> void
Microsoft.Maui.EmbeddedFont.ResourceStream.get -> System.IO.Stream?
Microsoft.Maui.EmbeddedFont.ResourceStream.set -> void
Microsoft.Maui.EmbeddedFontLoader
Microsoft.Maui.EmbeddedFontLoader.EmbeddedFontLoader() -> void
Microsoft.Maui.EmbeddedFontLoader.EmbeddedFontLoader(System.IServiceProvider? serviceProvider = null) -> void
Microsoft.Maui.EmbeddedFontLoader.LoadFont(Microsoft.Maui.EmbeddedFont! font) -> string?
Microsoft.Maui.EvaluateJavaScriptAsyncRequest
Microsoft.Maui.EvaluateJavaScriptAsyncRequest.EvaluateJavaScriptAsyncRequest(string! script) -> void
Microsoft.Maui.EvaluateJavaScriptAsyncRequest.Script.get -> string!
Microsoft.Maui.FileImageSourceService
Microsoft.Maui.FileImageSourceService.FileImageSourceService() -> void
Microsoft.Maui.FileImageSourceService.FileImageSourceService(Microsoft.Extensions.Logging.ILogger<Microsoft.Maui.FileImageSourceService!>? logger = null) -> void
Microsoft.Maui.FileImageSourceService.GetImageAsync(Microsoft.Maui.IFileImageSource! imageSource, float scale = 1, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<Microsoft.Maui.IImageSourceServiceResult<UIKit.UIImage!>?>!
Microsoft.Maui.FileSystemEmbeddedFontLoader
Microsoft.Maui.FileSystemEmbeddedFontLoader.FileSystemEmbeddedFontLoader(string! rootPath, System.IServiceProvider? serviceProvider = null) -> void
Microsoft.Maui.FileSystemEmbeddedFontLoader.LoadFont(Microsoft.Maui.EmbeddedFont! font) -> string?
Microsoft.Maui.FilterMode
Microsoft.Maui.FilterMode.Multiply = 1 -> Microsoft.Maui.FilterMode
Microsoft.Maui.FilterMode.SrcAtop = 2 -> Microsoft.Maui.FilterMode
Microsoft.Maui.FilterMode.SrcIn = 0 -> Microsoft.Maui.FilterMode
Microsoft.Maui.FlowDirection
Microsoft.Maui.FlowDirection.LeftToRight = 1 -> Microsoft.Maui.FlowDirection
Microsoft.Maui.FlowDirection.MatchParent = 0 -> Microsoft.Maui.FlowDirection
Microsoft.Maui.FlowDirection.RightToLeft = 2 -> Microsoft.Maui.FlowDirection
Microsoft.Maui.FlyoutBehavior
Microsoft.Maui.FlyoutBehavior.Disabled = 0 -> Microsoft.Maui.FlyoutBehavior
Microsoft.Maui.FlyoutBehavior.Flyout = 1 -> Microsoft.Maui.FlyoutBehavior
Microsoft.Maui.FlyoutBehavior.Locked = 2 -> Microsoft.Maui.FlyoutBehavior
Microsoft.Maui.FocusRequest
Microsoft.Maui.FocusRequest.FocusRequest() -> void
Microsoft.Maui.FocusRequest.FocusRequest(bool isFocused) -> void
Microsoft.Maui.FocusRequest.IsFocused.get -> bool
Microsoft.Maui.FocusRequest.IsFocused.set -> void
Microsoft.Maui.Font
Microsoft.Maui.Font.AutoScalingEnabled.get -> bool
Microsoft.Maui.Font.Family.get -> string?
Microsoft.Maui.Font.Font() -> void
Microsoft.Maui.Font.IsDefault.get -> bool
Microsoft.Maui.Font.Size.get -> double
Microsoft.Maui.Font.Slant.get -> Microsoft.Maui.FontSlant
Microsoft.Maui.Font.Weight.get -> Microsoft.Maui.FontWeight
Microsoft.Maui.Font.WithAutoScaling(bool enabled) -> Microsoft.Maui.Font
Microsoft.Maui.Font.WithSize(double size) -> Microsoft.Maui.Font
Microsoft.Maui.Font.WithSlant(Microsoft.Maui.FontSlant fontSlant) -> Microsoft.Maui.Font
Microsoft.Maui.Font.WithWeight(Microsoft.Maui.FontWeight weight, Microsoft.Maui.FontSlant fontSlant) -> Microsoft.Maui.Font
Microsoft.Maui.Font.WithWeight(Microsoft.Maui.FontWeight weight) -> Microsoft.Maui.Font
Microsoft.Maui.FontFile
Microsoft.Maui.FontFile.Extension.get -> string?
Microsoft.Maui.FontFile.Extension.set -> void
Microsoft.Maui.FontFile.FileName.get -> string?
Microsoft.Maui.FontFile.FileName.set -> void
Microsoft.Maui.FontFile.FileNameWithExtension() -> string!
Microsoft.Maui.FontFile.FileNameWithExtension(string? extension) -> string!
Microsoft.Maui.FontFile.FontFile() -> void
Microsoft.Maui.FontFile.GetPostScriptNameWithSpaces() -> string!
Microsoft.Maui.FontFile.PostScriptName.get -> string?
Microsoft.Maui.FontFile.PostScriptName.set -> void
Microsoft.Maui.FontImageSourceService
Microsoft.Maui.FontImageSourceService.FontImageSourceService(Microsoft.Maui.IFontManager! fontManager, Microsoft.Extensions.Logging.ILogger<Microsoft.Maui.FontImageSourceService!>? logger = null) -> void
Microsoft.Maui.FontImageSourceService.FontImageSourceService(Microsoft.Maui.IFontManager! fontManager) -> void
Microsoft.Maui.FontImageSourceService.FontManager.get -> Microsoft.Maui.IFontManager!
Microsoft.Maui.FontImageSourceService.GetImageAsync(Microsoft.Maui.IFontImageSource! imageSource, float scale = 1, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<Microsoft.Maui.IImageSourceServiceResult<UIKit.UIImage!>?>!
Microsoft.Maui.FontManager
Microsoft.Maui.FontManager.DefaultFont.get -> UIKit.UIFont!
Microsoft.Maui.FontManager.DefaultFontSize.get -> double
Microsoft.Maui.FontManager.FontManager(Microsoft.Maui.IFontRegistrar! fontRegistrar, System.IServiceProvider? serviceProvider = null) -> void
Microsoft.Maui.FontManager.GetFont(Microsoft.Maui.Font font, double defaultFontSize = 0) -> UIKit.UIFont!
Microsoft.Maui.FontRegistrar
Microsoft.Maui.FontRegistrar.FontRegistrar(Microsoft.Maui.IEmbeddedFontLoader! fontLoader, System.IServiceProvider? serviceProvider = null) -> void
Microsoft.Maui.FontRegistrar.GetFont(string! font) -> string?
Microsoft.Maui.FontRegistrar.Register(string! filename, string? alias, System.Reflection.Assembly! assembly) -> void
Microsoft.Maui.FontRegistrar.Register(string! filename, string? alias) -> void
Microsoft.Maui.FontSlant
Microsoft.Maui.FontSlant.Default = 0 -> Microsoft.Maui.FontSlant
Microsoft.Maui.FontSlant.Italic = 1 -> Microsoft.Maui.FontSlant
Microsoft.Maui.FontSlant.Oblique = 2 -> Microsoft.Maui.FontSlant
Microsoft.Maui.FontWeight
Microsoft.Maui.FontWeight.Black = 900 -> Microsoft.Maui.FontWeight
Microsoft.Maui.FontWeight.Bold = 700 -> Microsoft.Maui.FontWeight
Microsoft.Maui.FontWeight.Heavy = 800 -> Microsoft.Maui.FontWeight
Microsoft.Maui.FontWeight.Light = 300 -> Microsoft.Maui.FontWeight
Microsoft.Maui.FontWeight.Medium = 500 -> Microsoft.Maui.FontWeight
Microsoft.Maui.FontWeight.Regular = 400 -> Microsoft.Maui.FontWeight
Microsoft.Maui.FontWeight.Semibold = 600 -> Microsoft.Maui.FontWeight
Microsoft.Maui.FontWeight.Thin = 100 -> Microsoft.Maui.FontWeight
Microsoft.Maui.FontWeight.Ultralight = 200 -> Microsoft.Maui.FontWeight
Microsoft.Maui.GestureStatus
Microsoft.Maui.GestureStatus.Canceled = 3 -> Microsoft.Maui.GestureStatus
Microsoft.Maui.GestureStatus.Completed = 2 -> Microsoft.Maui.GestureStatus
Microsoft.Maui.GestureStatus.Running = 1 -> Microsoft.Maui.GestureStatus
Microsoft.Maui.GestureStatus.Started = 0 -> Microsoft.Maui.GestureStatus
Microsoft.Maui.Graphics.IShape
Microsoft.Maui.Graphics.IShape.PathForBounds(Microsoft.Maui.Graphics.Rect bounds) -> Microsoft.Maui.Graphics.PathF!
Microsoft.Maui.Graphics.PaintExtensions
Microsoft.Maui.Graphics.ShapeDrawable
Microsoft.Maui.Graphics.ShapeDrawable.Draw(Microsoft.Maui.Graphics.ICanvas! canvas, Microsoft.Maui.Graphics.RectF dirtyRect) -> void
Microsoft.Maui.Graphics.ShapeDrawable.ShapeDrawable() -> void
Microsoft.Maui.Graphics.ShapeDrawable.ShapeDrawable(Microsoft.Maui.IShapeView? shape) -> void
Microsoft.Maui.Graphics.ShapeDrawable.UpdateRenderTransform(System.Numerics.Matrix3x2? renderTransform) -> void
Microsoft.Maui.Graphics.ShapeDrawable.UpdateShapeView(Microsoft.Maui.IShapeView? shape) -> void
Microsoft.Maui.Graphics.ShapeDrawable.UpdateWindingMode(Microsoft.Maui.Graphics.WindingMode windingMode) -> void
Microsoft.Maui.GridLength
Microsoft.Maui.GridLength.GridLength() -> void
Microsoft.Maui.GridLength.GridLength(double value, Microsoft.Maui.GridUnitType type) -> void
Microsoft.Maui.GridLength.GridLength(double value) -> void
Microsoft.Maui.GridLength.GridUnitType.get -> Microsoft.Maui.GridUnitType
Microsoft.Maui.GridLength.IsAbsolute.get -> bool
Microsoft.Maui.GridLength.IsAuto.get -> bool
Microsoft.Maui.GridLength.IsStar.get -> bool
Microsoft.Maui.GridLength.Value.get -> double
Microsoft.Maui.GridUnitType
Microsoft.Maui.GridUnitType.Absolute = 0 -> Microsoft.Maui.GridUnitType
Microsoft.Maui.GridUnitType.Auto = 2 -> Microsoft.Maui.GridUnitType
Microsoft.Maui.GridUnitType.Star = 1 -> Microsoft.Maui.GridUnitType
Microsoft.Maui.Handlers.ActivityIndicatorHandler
Microsoft.Maui.Handlers.ActivityIndicatorHandler.ActivityIndicatorHandler() -> void
Microsoft.Maui.Handlers.ActivityIndicatorHandler.ActivityIndicatorHandler(Microsoft.Maui.IPropertyMapper? mapper, Microsoft.Maui.CommandMapper? commandMapper) -> void
Microsoft.Maui.Handlers.ActivityIndicatorHandler.ActivityIndicatorHandler(Microsoft.Maui.IPropertyMapper? mapper) -> void
Microsoft.Maui.Handlers.ApplicationHandler
Microsoft.Maui.Handlers.ApplicationHandler.ApplicationHandler() -> void
Microsoft.Maui.Handlers.ApplicationHandler.ApplicationHandler(Microsoft.Maui.IPropertyMapper? mapper, Microsoft.Maui.CommandMapper? commandMapper) -> void
Microsoft.Maui.Handlers.ApplicationHandler.ApplicationHandler(Microsoft.Maui.IPropertyMapper? mapper) -> void
Microsoft.Maui.Handlers.BorderHandler
Microsoft.Maui.Handlers.BorderHandler.BorderHandler() -> void
Microsoft.Maui.Handlers.BorderHandler.BorderHandler(Microsoft.Maui.IPropertyMapper? mapper, Microsoft.Maui.CommandMapper? commandMapper) -> void
Microsoft.Maui.Handlers.BorderHandler.BorderHandler(Microsoft.Maui.IPropertyMapper? mapper) -> void
Microsoft.Maui.Handlers.ButtonHandler
Microsoft.Maui.Handlers.ButtonHandler.ButtonHandler() -> void
Microsoft.Maui.Handlers.ButtonHandler.ButtonHandler(Microsoft.Maui.IPropertyMapper? mapper, Microsoft.Maui.CommandMapper? commandMapper) -> void
Microsoft.Maui.Handlers.ButtonHandler.ButtonHandler(Microsoft.Maui.IPropertyMapper? mapper) -> void
Microsoft.Maui.Handlers.CheckBoxHandler
Microsoft.Maui.Handlers.CheckBoxHandler.CheckBoxHandler() -> void
Microsoft.Maui.Handlers.CheckBoxHandler.CheckBoxHandler(Microsoft.Maui.IPropertyMapper? mapper, Microsoft.Maui.CommandMapper? commandMapper) -> void
Microsoft.Maui.Handlers.CheckBoxHandler.CheckBoxHandler(Microsoft.Maui.IPropertyMapper? mapper) -> void
Microsoft.Maui.Handlers.ContentViewHandler
Microsoft.Maui.Handlers.ContentViewHandler.ContentViewHandler() -> void
Microsoft.Maui.Handlers.ContentViewHandler.ContentViewHandler(Microsoft.Maui.IPropertyMapper? mapper, Microsoft.Maui.CommandMapper? commandMapper) -> void
Microsoft.Maui.Handlers.ContentViewHandler.ContentViewHandler(Microsoft.Maui.IPropertyMapper? mapper) -> void
Microsoft.Maui.Handlers.ContextFlyoutItemHandlerUpdate
Microsoft.Maui.Handlers.ContextFlyoutItemHandlerUpdate.ContextFlyoutItemHandlerUpdate(int Index, Microsoft.Maui.IMenuElement! MenuElement) -> void
Microsoft.Maui.Handlers.ContextFlyoutItemHandlerUpdate.Index.get -> int
Microsoft.Maui.Handlers.ContextFlyoutItemHandlerUpdate.Index.init -> void
Microsoft.Maui.Handlers.ContextFlyoutItemHandlerUpdate.MenuElement.get -> Microsoft.Maui.IMenuElement!
Microsoft.Maui.Handlers.ContextFlyoutItemHandlerUpdate.MenuElement.init -> void
Microsoft.Maui.Handlers.DatePickerHandler
Microsoft.Maui.Handlers.DatePickerHandler.DatePickerHandler() -> void
Microsoft.Maui.Handlers.DatePickerHandler.DatePickerHandler(Microsoft.Maui.IPropertyMapper? mapper, Microsoft.Maui.CommandMapper? commandMapper) -> void
Microsoft.Maui.Handlers.DatePickerHandler.DatePickerHandler(Microsoft.Maui.IPropertyMapper? mapper) -> void
Microsoft.Maui.Handlers.EditorHandler
Microsoft.Maui.Handlers.EditorHandler.EditorHandler() -> void
Microsoft.Maui.Handlers.EditorHandler.EditorHandler(Microsoft.Maui.IPropertyMapper? mapper, Microsoft.Maui.CommandMapper? commandMapper) -> void
Microsoft.Maui.Handlers.EditorHandler.EditorHandler(Microsoft.Maui.IPropertyMapper? mapper) -> void
Microsoft.Maui.Handlers.ElementHandler
Microsoft.Maui.Handlers.ElementHandler.ElementHandler(Microsoft.Maui.IPropertyMapper! mapper, Microsoft.Maui.CommandMapper? commandMapper = null) -> void
Microsoft.Maui.Handlers.ElementHandler.MauiContext.get -> Microsoft.Maui.IMauiContext?
Microsoft.Maui.Handlers.ElementHandler.PlatformView.get -> object?
Microsoft.Maui.Handlers.ElementHandler.Services.get -> System.IServiceProvider?
Microsoft.Maui.Handlers.ElementHandler.VirtualView.get -> Microsoft.Maui.IElement?
Microsoft.Maui.Handlers.ElementHandler<TVirtualView, TPlatformView>
Microsoft.Maui.Handlers.ElementHandler<TVirtualView, TPlatformView>.ElementHandler(Microsoft.Maui.IPropertyMapper! mapper, Microsoft.Maui.CommandMapper? commandMapper = null) -> void
Microsoft.Maui.Handlers.ElementHandler<TVirtualView, TPlatformView>.PlatformView.get -> TPlatformView!
Microsoft.Maui.Handlers.ElementHandler<TVirtualView, TPlatformView>.VirtualView.get -> TVirtualView!
Microsoft.Maui.Handlers.EntryHandler
Microsoft.Maui.Handlers.EntryHandler.EntryHandler() -> void
Microsoft.Maui.Handlers.EntryHandler.EntryHandler(Microsoft.Maui.IPropertyMapper? mapper, Microsoft.Maui.CommandMapper? commandMapper) -> void
Microsoft.Maui.Handlers.EntryHandler.EntryHandler(Microsoft.Maui.IPropertyMapper? mapper) -> void
Microsoft.Maui.Handlers.FlyoutViewHandler
Microsoft.Maui.Handlers.FlyoutViewHandler.FlyoutViewHandler() -> void
Microsoft.Maui.Handlers.FlyoutViewHandler.FlyoutViewHandler(Microsoft.Maui.IPropertyMapper? mapper, Microsoft.Maui.CommandMapper? commandMapper) -> void
Microsoft.Maui.Handlers.FlyoutViewHandler.FlyoutViewHandler(Microsoft.Maui.IPropertyMapper? mapper) -> void
Microsoft.Maui.Handlers.GraphicsViewHandler
Microsoft.Maui.Handlers.GraphicsViewHandler.GraphicsViewHandler() -> void
Microsoft.Maui.Handlers.GraphicsViewHandler.GraphicsViewHandler(Microsoft.Maui.IPropertyMapper? mapper, Microsoft.Maui.CommandMapper? commandMapper) -> void
Microsoft.Maui.Handlers.GraphicsViewHandler.GraphicsViewHandler(Microsoft.Maui.IPropertyMapper? mapper) -> void
Microsoft.Maui.Handlers.IActivityIndicatorHandler
Microsoft.Maui.Handlers.IActivityIndicatorHandler.PlatformView.get -> Microsoft.Maui.Platform.MauiActivityIndicator!
Microsoft.Maui.Handlers.IActivityIndicatorHandler.VirtualView.get -> Microsoft.Maui.IActivityIndicator!
Microsoft.Maui.Handlers.IBorderHandler
Microsoft.Maui.Handlers.IBorderHandler.PlatformView.get -> Microsoft.Maui.Platform.ContentView!
Microsoft.Maui.Handlers.IBorderHandler.VirtualView.get -> Microsoft.Maui.IBorderView!
Microsoft.Maui.Handlers.IButtonHandler
Microsoft.Maui.Handlers.IButtonHandler.ImageSourceLoader.get -> Microsoft.Maui.Platform.ImageSourcePartLoader!
Microsoft.Maui.Handlers.IButtonHandler.PlatformView.get -> UIKit.UIButton!
Microsoft.Maui.Handlers.IButtonHandler.VirtualView.get -> Microsoft.Maui.IButton!
Microsoft.Maui.Handlers.ICheckBoxHandler
Microsoft.Maui.Handlers.ICheckBoxHandler.PlatformView.get -> Microsoft.Maui.Platform.MauiCheckBox!
Microsoft.Maui.Handlers.ICheckBoxHandler.VirtualView.get -> Microsoft.Maui.ICheckBox!
Microsoft.Maui.Handlers.IContentViewHandler
Microsoft.Maui.Handlers.IContentViewHandler.PlatformView.get -> Microsoft.Maui.Platform.ContentView!
Microsoft.Maui.Handlers.IContentViewHandler.VirtualView.get -> Microsoft.Maui.IContentView!
Microsoft.Maui.Handlers.IDatePickerHandler
Microsoft.Maui.Handlers.IDatePickerHandler.PlatformView.get -> UIKit.UIDatePicker!
Microsoft.Maui.Handlers.IDatePickerHandler.VirtualView.get -> Microsoft.Maui.IDatePicker!
Microsoft.Maui.Handlers.IEditorHandler
Microsoft.Maui.Handlers.IEditorHandler.PlatformView.get -> Microsoft.Maui.Platform.MauiTextView!
Microsoft.Maui.Handlers.IEditorHandler.VirtualView.get -> Microsoft.Maui.IEditor!
Microsoft.Maui.Handlers.IEntryHandler
Microsoft.Maui.Handlers.IEntryHandler.PlatformView.get -> Microsoft.Maui.Platform.MauiTextField!
Microsoft.Maui.Handlers.IEntryHandler.VirtualView.get -> Microsoft.Maui.IEntry!
Microsoft.Maui.Handlers.IFlyoutViewHandler
Microsoft.Maui.Handlers.IFlyoutViewHandler.PlatformView.get -> UIKit.UIView!
Microsoft.Maui.Handlers.IFlyoutViewHandler.VirtualView.get -> Microsoft.Maui.IFlyoutView!
Microsoft.Maui.Handlers.IGraphicsViewHandler
Microsoft.Maui.Handlers.IGraphicsViewHandler.PlatformView.get -> Microsoft.Maui.Platform.PlatformTouchGraphicsView!
Microsoft.Maui.Handlers.IGraphicsViewHandler.VirtualView.get -> Microsoft.Maui.IGraphicsView!
Microsoft.Maui.Handlers.IImageButtonHandler
Microsoft.Maui.Handlers.IImageButtonHandler.PlatformView.get -> UIKit.UIButton!
Microsoft.Maui.Handlers.IImageButtonHandler.VirtualView.get -> Microsoft.Maui.IImageButton!
Microsoft.Maui.Handlers.IImageHandler
Microsoft.Maui.Handlers.IImageHandler.OnWindowChanged() -> void
Microsoft.Maui.Handlers.IImageHandler.PlatformView.get -> UIKit.UIImageView!
Microsoft.Maui.Handlers.IImageHandler.SourceLoader.get -> Microsoft.Maui.Platform.ImageSourcePartLoader!
Microsoft.Maui.Handlers.IImageHandler.VirtualView.get -> Microsoft.Maui.IImage!
Microsoft.Maui.Handlers.IIndicatorViewHandler
Microsoft.Maui.Handlers.IIndicatorViewHandler.PlatformView.get -> Microsoft.Maui.Platform.MauiPageControl!
Microsoft.Maui.Handlers.IIndicatorViewHandler.VirtualView.get -> Microsoft.Maui.IIndicatorView!
Microsoft.Maui.Handlers.ILabelHandler
Microsoft.Maui.Handlers.ILabelHandler.PlatformView.get -> Microsoft.Maui.Platform.MauiLabel!
Microsoft.Maui.Handlers.ILabelHandler.VirtualView.get -> Microsoft.Maui.ILabel!
Microsoft.Maui.Handlers.ImageButtonHandler
Microsoft.Maui.Handlers.ImageButtonHandler.ImageButtonHandler() -> void
Microsoft.Maui.Handlers.ImageButtonHandler.ImageButtonHandler(Microsoft.Maui.IPropertyMapper? mapper, Microsoft.Maui.CommandMapper? commandMapper) -> void
Microsoft.Maui.Handlers.ImageButtonHandler.ImageButtonHandler(Microsoft.Maui.IPropertyMapper? mapper) -> void
Microsoft.Maui.Handlers.ImageHandler
Microsoft.Maui.Handlers.ImageHandler.ImageHandler() -> void
Microsoft.Maui.Handlers.ImageHandler.ImageHandler(Microsoft.Maui.IPropertyMapper? mapper, Microsoft.Maui.CommandMapper? commandMapper) -> void
Microsoft.Maui.Handlers.ImageHandler.ImageHandler(Microsoft.Maui.IPropertyMapper? mapper) -> void
Microsoft.Maui.Handlers.ImageHandler.OnWindowChanged() -> void
Microsoft.Maui.Handlers.IMenuBarHandler
Microsoft.Maui.Handlers.IMenuBarHandler.Add(Microsoft.Maui.IMenuBarItem! view) -> void
Microsoft.Maui.Handlers.IMenuBarHandler.Clear() -> void
Microsoft.Maui.Handlers.IMenuBarHandler.Insert(int index, Microsoft.Maui.IMenuBarItem! view) -> void
Microsoft.Maui.Handlers.IMenuBarHandler.PlatformView.get -> UIKit.IUIMenuBuilder!
Microsoft.Maui.Handlers.IMenuBarHandler.Remove(Microsoft.Maui.IMenuBarItem! view) -> void
Microsoft.Maui.Handlers.IMenuBarHandler.VirtualView.get -> Microsoft.Maui.IMenuBar!
Microsoft.Maui.Handlers.IMenuBarItemHandler
Microsoft.Maui.Handlers.IMenuBarItemHandler.Add(Microsoft.Maui.IMenuElement! view) -> void
Microsoft.Maui.Handlers.IMenuBarItemHandler.Clear() -> void
Microsoft.Maui.Handlers.IMenuBarItemHandler.Insert(int index, Microsoft.Maui.IMenuElement! view) -> void
Microsoft.Maui.Handlers.IMenuBarItemHandler.PlatformView.get -> UIKit.UIMenu!
Microsoft.Maui.Handlers.IMenuBarItemHandler.Remove(Microsoft.Maui.IMenuElement! view) -> void
Microsoft.Maui.Handlers.IMenuBarItemHandler.VirtualView.get -> Microsoft.Maui.IMenuBarItem!
Microsoft.Maui.Handlers.IMenuFlyoutHandler
Microsoft.Maui.Handlers.IMenuFlyoutHandler.Add(Microsoft.Maui.IMenuElement! view) -> void
Microsoft.Maui.Handlers.IMenuFlyoutHandler.Clear() -> void
Microsoft.Maui.Handlers.IMenuFlyoutHandler.Insert(int index, Microsoft.Maui.IMenuElement! view) -> void
Microsoft.Maui.Handlers.IMenuFlyoutHandler.PlatformView.get -> object!
Microsoft.Maui.Handlers.IMenuFlyoutHandler.Remove(Microsoft.Maui.IMenuElement! view) -> void
Microsoft.Maui.Handlers.IMenuFlyoutHandler.VirtualView.get -> Microsoft.Maui.IMenuFlyout!
Microsoft.Maui.Handlers.IMenuFlyoutItemHandler
Microsoft.Maui.Handlers.IMenuFlyoutItemHandler.PlatformView.get -> UIKit.UIMenuElement!
Microsoft.Maui.Handlers.IMenuFlyoutItemHandler.VirtualView.get -> Microsoft.Maui.IMenuFlyoutItem!
Microsoft.Maui.Handlers.IMenuFlyoutSeparatorHandler
Microsoft.Maui.Handlers.IMenuFlyoutSeparatorHandler.PlatformView.get -> UIKit.UIMenu!
Microsoft.Maui.Handlers.IMenuFlyoutSeparatorHandler.VirtualView.get -> Microsoft.Maui.IMenuFlyoutSeparator!
Microsoft.Maui.Handlers.IMenuFlyoutSubItemHandler
Microsoft.Maui.Handlers.IMenuFlyoutSubItemHandler.Add(Microsoft.Maui.IMenuElement! view) -> void
Microsoft.Maui.Handlers.IMenuFlyoutSubItemHandler.Clear() -> void
Microsoft.Maui.Handlers.IMenuFlyoutSubItemHandler.Insert(int index, Microsoft.Maui.IMenuElement! view) -> void
Microsoft.Maui.Handlers.IMenuFlyoutSubItemHandler.PlatformView.get -> UIKit.UIMenu!
Microsoft.Maui.Handlers.IMenuFlyoutSubItemHandler.Remove(Microsoft.Maui.IMenuElement! view) -> void
Microsoft.Maui.Handlers.IMenuFlyoutSubItemHandler.VirtualView.get -> Microsoft.Maui.IMenuFlyoutSubItem!
Microsoft.Maui.Handlers.INavigationViewHandler
Microsoft.Maui.Handlers.INavigationViewHandler.PlatformView.get -> UIKit.UIView!
Microsoft.Maui.Handlers.INavigationViewHandler.VirtualView.get -> Microsoft.Maui.IStackNavigationView!
Microsoft.Maui.Handlers.IndicatorViewHandler
Microsoft.Maui.Handlers.IndicatorViewHandler.IndicatorViewHandler() -> void
Microsoft.Maui.Handlers.IndicatorViewHandler.IndicatorViewHandler(Microsoft.Maui.IPropertyMapper? mapper, Microsoft.Maui.CommandMapper? commandMapper) -> void
Microsoft.Maui.Handlers.IndicatorViewHandler.IndicatorViewHandler(Microsoft.Maui.IPropertyMapper? mapper) -> void
Microsoft.Maui.Handlers.IPageHandler
Microsoft.Maui.Handlers.IPickerHandler
Microsoft.Maui.Handlers.IPickerHandler.PlatformView.get -> Microsoft.Maui.Platform.MauiPicker!
Microsoft.Maui.Handlers.IPickerHandler.VirtualView.get -> Microsoft.Maui.IPicker!
Microsoft.Maui.Handlers.IProgressBarHandler
Microsoft.Maui.Handlers.IProgressBarHandler.PlatformView.get -> UIKit.UIProgressView!
Microsoft.Maui.Handlers.IProgressBarHandler.VirtualView.get -> Microsoft.Maui.IProgress!
Microsoft.Maui.Handlers.IRadioButtonHandler
Microsoft.Maui.Handlers.IRadioButtonHandler.PlatformView.get -> Microsoft.Maui.Platform.ContentView!
Microsoft.Maui.Handlers.IRadioButtonHandler.VirtualView.get -> Microsoft.Maui.IRadioButton!
Microsoft.Maui.Handlers.IRefreshViewHandler
Microsoft.Maui.Handlers.IRefreshViewHandler.PlatformView.get -> Microsoft.Maui.Platform.MauiRefreshView!
Microsoft.Maui.Handlers.IRefreshViewHandler.VirtualView.get -> Microsoft.Maui.IRefreshView!
Microsoft.Maui.Handlers.IScrollViewHandler
Microsoft.Maui.Handlers.IScrollViewHandler.PlatformView.get -> UIKit.UIScrollView!
Microsoft.Maui.Handlers.IScrollViewHandler.VirtualView.get -> Microsoft.Maui.IScrollView!
Microsoft.Maui.Handlers.ISearchBarHandler
Microsoft.Maui.Handlers.ISearchBarHandler.PlatformView.get -> Microsoft.Maui.Platform.MauiSearchBar!
Microsoft.Maui.Handlers.ISearchBarHandler.QueryEditor.get -> UIKit.UITextField?
Microsoft.Maui.Handlers.ISearchBarHandler.VirtualView.get -> Microsoft.Maui.ISearchBar!
Microsoft.Maui.Handlers.IShapeViewHandler
Microsoft.Maui.Handlers.IShapeViewHandler.PlatformView.get -> Microsoft.Maui.Platform.MauiShapeView!
Microsoft.Maui.Handlers.IShapeViewHandler.VirtualView.get -> Microsoft.Maui.IShapeView!
Microsoft.Maui.Handlers.ISliderHandler
Microsoft.Maui.Handlers.ISliderHandler.PlatformView.get -> UIKit.UISlider!
Microsoft.Maui.Handlers.ISliderHandler.VirtualView.get -> Microsoft.Maui.ISlider!
Microsoft.Maui.Handlers.IStepperHandler
Microsoft.Maui.Handlers.IStepperHandler.PlatformView.get -> UIKit.UIStepper!
Microsoft.Maui.Handlers.IStepperHandler.VirtualView.get -> Microsoft.Maui.IStepper!
Microsoft.Maui.Handlers.ISwipeItemMenuItemHandler
Microsoft.Maui.Handlers.ISwipeItemMenuItemHandler.PlatformView.get -> UIKit.UIButton!
Microsoft.Maui.Handlers.ISwipeItemMenuItemHandler.SourceLoader.get -> Microsoft.Maui.Platform.ImageSourcePartLoader?
Microsoft.Maui.Handlers.ISwipeItemMenuItemHandler.VirtualView.get -> Microsoft.Maui.ISwipeItemMenuItem!
Microsoft.Maui.Handlers.ISwipeItemViewHandler
Microsoft.Maui.Handlers.ISwipeItemViewHandler.PlatformView.get -> Microsoft.Maui.Platform.ContentView!
Microsoft.Maui.Handlers.ISwipeItemViewHandler.VirtualView.get -> Microsoft.Maui.ISwipeItemView!
Microsoft.Maui.Handlers.ISwipeViewHandler
Microsoft.Maui.Handlers.ISwipeViewHandler.PlatformView.get -> Microsoft.Maui.Platform.MauiSwipeView!
Microsoft.Maui.Handlers.ISwipeViewHandler.VirtualView.get -> Microsoft.Maui.ISwipeView!
Microsoft.Maui.Handlers.ISwitchHandler
Microsoft.Maui.Handlers.ISwitchHandler.PlatformView.get -> UIKit.UISwitch!
Microsoft.Maui.Handlers.ISwitchHandler.VirtualView.get -> Microsoft.Maui.ISwitch!
Microsoft.Maui.Handlers.ITabbedViewHandler
Microsoft.Maui.Handlers.ITabbedViewHandler.VirtualView.get -> Microsoft.Maui.ITabbedView!
Microsoft.Maui.Handlers.ITimePickerHandler
Microsoft.Maui.Handlers.ITimePickerHandler.PlatformView.get -> UIKit.UIDatePicker!
Microsoft.Maui.Handlers.ITimePickerHandler.VirtualView.get -> Microsoft.Maui.ITimePicker!
Microsoft.Maui.Handlers.IToolbarHandler
Microsoft.Maui.Handlers.IToolbarHandler.PlatformView.get -> UIKit.UINavigationBar!
Microsoft.Maui.Handlers.IToolbarHandler.VirtualView.get -> Microsoft.Maui.IToolbar!
Microsoft.Maui.Handlers.IWebViewHandler
Microsoft.Maui.Handlers.IWebViewHandler.PlatformView.get -> WebKit.WKWebView!
Microsoft.Maui.Handlers.IWebViewHandler.VirtualView.get -> Microsoft.Maui.IWebView!
Microsoft.Maui.Handlers.IWindowHandler
Microsoft.Maui.Handlers.IWindowHandler.PlatformView.get -> UIKit.UIWindow!
Microsoft.Maui.Handlers.IWindowHandler.VirtualView.get -> Microsoft.Maui.IWindow!
Microsoft.Maui.Handlers.LabelHandler
Microsoft.Maui.Handlers.LabelHandler.LabelHandler() -> void
Microsoft.Maui.Handlers.LabelHandler.LabelHandler(Microsoft.Maui.IPropertyMapper? mapper, Microsoft.Maui.CommandMapper? commandMapper) -> void
Microsoft.Maui.Handlers.LabelHandler.LabelHandler(Microsoft.Maui.IPropertyMapper? mapper) -> void
Microsoft.Maui.Handlers.LayoutHandler
Microsoft.Maui.Handlers.LayoutHandler.Add(Microsoft.Maui.IView! child) -> void
Microsoft.Maui.Handlers.LayoutHandler.Clear() -> void
Microsoft.Maui.Handlers.LayoutHandler.Insert(int index, Microsoft.Maui.IView! child) -> void
Microsoft.Maui.Handlers.LayoutHandler.LayoutHandler() -> void
Microsoft.Maui.Handlers.LayoutHandler.LayoutHandler(Microsoft.Maui.IPropertyMapper? mapper = null, Microsoft.Maui.CommandMapper? commandMapper = null) -> void
Microsoft.Maui.Handlers.LayoutHandler.Remove(Microsoft.Maui.IView! child) -> void
Microsoft.Maui.Handlers.LayoutHandler.Update(int index, Microsoft.Maui.IView! child) -> void
Microsoft.Maui.Handlers.LayoutHandler.UpdateZIndex(Microsoft.Maui.IView! child) -> void
Microsoft.Maui.Handlers.LayoutHandlerUpdate
Microsoft.Maui.Handlers.LayoutHandlerUpdate.Index.get -> int
Microsoft.Maui.Handlers.LayoutHandlerUpdate.Index.init -> void
Microsoft.Maui.Handlers.LayoutHandlerUpdate.LayoutHandlerUpdate(int Index, Microsoft.Maui.IView! View) -> void
Microsoft.Maui.Handlers.LayoutHandlerUpdate.View.get -> Microsoft.Maui.IView!
Microsoft.Maui.Handlers.LayoutHandlerUpdate.View.init -> void
Microsoft.Maui.Handlers.MenuBarHandler
Microsoft.Maui.Handlers.MenuBarHandler.Add(Microsoft.Maui.IMenuBarItem! view) -> void
Microsoft.Maui.Handlers.MenuBarHandler.Clear() -> void
Microsoft.Maui.Handlers.MenuBarHandler.Insert(int index, Microsoft.Maui.IMenuBarItem! view) -> void
Microsoft.Maui.Handlers.MenuBarHandler.MenuBarHandler() -> void
Microsoft.Maui.Handlers.MenuBarHandler.MenuBarHandler(Microsoft.Maui.IPropertyMapper! mapper, Microsoft.Maui.CommandMapper? commandMapper = null) -> void
Microsoft.Maui.Handlers.MenuBarHandler.Remove(Microsoft.Maui.IMenuBarItem! view) -> void
Microsoft.Maui.Handlers.MenuBarHandlerUpdate
Microsoft.Maui.Handlers.MenuBarHandlerUpdate.Index.get -> int
Microsoft.Maui.Handlers.MenuBarHandlerUpdate.Index.init -> void
Microsoft.Maui.Handlers.MenuBarHandlerUpdate.MenuBarHandlerUpdate(int Index, Microsoft.Maui.IMenuBarItem! MenuBarItem) -> void
Microsoft.Maui.Handlers.MenuBarHandlerUpdate.MenuBarItem.get -> Microsoft.Maui.IMenuBarItem!
Microsoft.Maui.Handlers.MenuBarHandlerUpdate.MenuBarItem.init -> void
Microsoft.Maui.Handlers.MenuBarItemHandler
Microsoft.Maui.Handlers.MenuBarItemHandler.Add(Microsoft.Maui.IMenuElement! view) -> void
Microsoft.Maui.Handlers.MenuBarItemHandler.Clear() -> void
Microsoft.Maui.Handlers.MenuBarItemHandler.Insert(int index, Microsoft.Maui.IMenuElement! view) -> void
Microsoft.Maui.Handlers.MenuBarItemHandler.MenuBarItemHandler() -> void
Microsoft.Maui.Handlers.MenuBarItemHandler.MenuBarItemHandler(Microsoft.Maui.IPropertyMapper! mapper, Microsoft.Maui.CommandMapper? commandMapper = null) -> void
Microsoft.Maui.Handlers.MenuBarItemHandler.Remove(Microsoft.Maui.IMenuElement! view) -> void
Microsoft.Maui.Handlers.MenuBarItemHandlerUpdate
Microsoft.Maui.Handlers.MenuBarItemHandlerUpdate.Index.get -> int
Microsoft.Maui.Handlers.MenuBarItemHandlerUpdate.Index.init -> void
Microsoft.Maui.Handlers.MenuBarItemHandlerUpdate.MenuBarItemHandlerUpdate(int Index, Microsoft.Maui.IMenuElement! MenuElement) -> void
Microsoft.Maui.Handlers.MenuBarItemHandlerUpdate.MenuElement.get -> Microsoft.Maui.IMenuElement!
Microsoft.Maui.Handlers.MenuBarItemHandlerUpdate.MenuElement.init -> void
Microsoft.Maui.Handlers.MenuFlyoutHandler
Microsoft.Maui.Handlers.MenuFlyoutHandler.Add(Microsoft.Maui.IMenuElement! view) -> void
Microsoft.Maui.Handlers.MenuFlyoutHandler.Clear() -> void
Microsoft.Maui.Handlers.MenuFlyoutHandler.Insert(int index, Microsoft.Maui.IMenuElement! view) -> void
Microsoft.Maui.Handlers.MenuFlyoutHandler.MenuFlyoutHandler() -> void
Microsoft.Maui.Handlers.MenuFlyoutHandler.MenuFlyoutHandler(Microsoft.Maui.IPropertyMapper! mapper, Microsoft.Maui.CommandMapper? commandMapper = null) -> void
Microsoft.Maui.Handlers.MenuFlyoutHandler.Remove(Microsoft.Maui.IMenuElement! view) -> void
Microsoft.Maui.Handlers.MenuFlyoutItemHandler
Microsoft.Maui.Handlers.MenuFlyoutItemHandler.MenuFlyoutItemHandler() -> void
Microsoft.Maui.Handlers.MenuFlyoutSeparatorHandler
Microsoft.Maui.Handlers.MenuFlyoutSeparatorHandler.MenuFlyoutSeparatorHandler() -> void
Microsoft.Maui.Handlers.MenuFlyoutSeparatorHandler.MenuFlyoutSeparatorHandler(Microsoft.Maui.IPropertyMapper! mapper, Microsoft.Maui.CommandMapper? commandMapper = null) -> void
Microsoft.Maui.Handlers.MenuFlyoutSubItemHandler
Microsoft.Maui.Handlers.MenuFlyoutSubItemHandler.Add(Microsoft.Maui.IMenuElement! view) -> void
Microsoft.Maui.Handlers.MenuFlyoutSubItemHandler.Clear() -> void
Microsoft.Maui.Handlers.MenuFlyoutSubItemHandler.Insert(int index, Microsoft.Maui.IMenuElement! view) -> void
Microsoft.Maui.Handlers.MenuFlyoutSubItemHandler.MenuFlyoutSubItemHandler() -> void
Microsoft.Maui.Handlers.MenuFlyoutSubItemHandler.MenuFlyoutSubItemHandler(Microsoft.Maui.IPropertyMapper! mapper, Microsoft.Maui.CommandMapper? commandMapper = null) -> void
Microsoft.Maui.Handlers.MenuFlyoutSubItemHandler.Remove(Microsoft.Maui.IMenuElement! view) -> void
Microsoft.Maui.Handlers.MenuFlyoutSubItemHandlerUpdate
Microsoft.Maui.Handlers.MenuFlyoutSubItemHandlerUpdate.Index.get -> int
Microsoft.Maui.Handlers.MenuFlyoutSubItemHandlerUpdate.Index.init -> void
Microsoft.Maui.Handlers.MenuFlyoutSubItemHandlerUpdate.MenuElement.get -> Microsoft.Maui.IMenuElement!
Microsoft.Maui.Handlers.MenuFlyoutSubItemHandlerUpdate.MenuElement.init -> void
Microsoft.Maui.Handlers.MenuFlyoutSubItemHandlerUpdate.MenuFlyoutSubItemHandlerUpdate(int Index, Microsoft.Maui.IMenuElement! MenuElement) -> void
Microsoft.Maui.Handlers.NavigationViewHandler
Microsoft.Maui.Handlers.NavigationViewHandler.NavigationStack.get -> System.Collections.Generic.IReadOnlyList<Microsoft.Maui.IView!>!
Microsoft.Maui.Handlers.NavigationViewHandler.NavigationView.get -> Microsoft.Maui.IStackNavigationView!
Microsoft.Maui.Handlers.NavigationViewHandler.NavigationViewHandler() -> void
Microsoft.Maui.Handlers.NavigationViewHandler.NavigationViewHandler(Microsoft.Maui.IPropertyMapper? mapper, Microsoft.Maui.CommandMapper? commandMapper) -> void
Microsoft.Maui.Handlers.NavigationViewHandler.NavigationViewHandler(Microsoft.Maui.IPropertyMapper? mapper) -> void
Microsoft.Maui.Handlers.OpenWindowRequest
Microsoft.Maui.Handlers.OpenWindowRequest.OpenWindowRequest(Microsoft.Maui.IPersistedState? State = null) -> void
Microsoft.Maui.Handlers.OpenWindowRequest.State.get -> Microsoft.Maui.IPersistedState?
Microsoft.Maui.Handlers.OpenWindowRequest.State.init -> void
Microsoft.Maui.Handlers.PageHandler
Microsoft.Maui.Handlers.PageHandler.PageHandler() -> void
Microsoft.Maui.Handlers.PageHandler.PageHandler(Microsoft.Maui.IPropertyMapper? mapper, Microsoft.Maui.CommandMapper? commandMapper) -> void
Microsoft.Maui.Handlers.PageHandler.PageHandler(Microsoft.Maui.IPropertyMapper? mapper) -> void
Microsoft.Maui.Handlers.PickerHandler
Microsoft.Maui.Handlers.PickerHandler.PickerHandler() -> void
Microsoft.Maui.Handlers.PickerHandler.PickerHandler(Microsoft.Maui.IPropertyMapper? mapper, Microsoft.Maui.CommandMapper? commandMapper) -> void
Microsoft.Maui.Handlers.PickerHandler.PickerHandler(Microsoft.Maui.IPropertyMapper? mapper) -> void
Microsoft.Maui.Handlers.PickerSource
Microsoft.Maui.Handlers.PickerSource.Handler.get -> Microsoft.Maui.Handlers.PickerHandler?
Microsoft.Maui.Handlers.PickerSource.Handler.set -> void
Microsoft.Maui.Handlers.PickerSource.PickerSource(Microsoft.Maui.Handlers.PickerHandler? handler) -> void
Microsoft.Maui.Handlers.PickerSource.SelectedIndex.get -> int
Microsoft.Maui.Handlers.ProgressBarHandler
Microsoft.Maui.Handlers.ProgressBarHandler.ProgressBarHandler() -> void
Microsoft.Maui.Handlers.ProgressBarHandler.ProgressBarHandler(Microsoft.Maui.IPropertyMapper? mapper, Microsoft.Maui.CommandMapper? commandMapper) -> void
Microsoft.Maui.Handlers.ProgressBarHandler.ProgressBarHandler(Microsoft.Maui.IPropertyMapper? mapper) -> void
Microsoft.Maui.Handlers.RadioButtonHandler
Microsoft.Maui.Handlers.RadioButtonHandler.RadioButtonHandler() -> void
Microsoft.Maui.Handlers.RadioButtonHandler.RadioButtonHandler(Microsoft.Maui.IPropertyMapper? mapper, Microsoft.Maui.CommandMapper? commandMapper) -> void
Microsoft.Maui.Handlers.RadioButtonHandler.RadioButtonHandler(Microsoft.Maui.IPropertyMapper? mapper) -> void
Microsoft.Maui.Handlers.RefreshViewHandler
Microsoft.Maui.Handlers.RefreshViewHandler.RefreshViewHandler() -> void
Microsoft.Maui.Handlers.RefreshViewHandler.RefreshViewHandler(Microsoft.Maui.IPropertyMapper? mapper, Microsoft.Maui.CommandMapper? commandMapper) -> void
Microsoft.Maui.Handlers.RefreshViewHandler.RefreshViewHandler(Microsoft.Maui.IPropertyMapper? mapper) -> void
Microsoft.Maui.Handlers.ScrollViewHandler
Microsoft.Maui.Handlers.ScrollViewHandler.ScrollViewHandler() -> void
Microsoft.Maui.Handlers.ScrollViewHandler.ScrollViewHandler(Microsoft.Maui.IPropertyMapper? mapper, Microsoft.Maui.CommandMapper? commandMapper) -> void
Microsoft.Maui.Handlers.ScrollViewHandler.ScrollViewHandler(Microsoft.Maui.IPropertyMapper? mapper) -> void
Microsoft.Maui.Handlers.SearchBarHandler
Microsoft.Maui.Handlers.SearchBarHandler.QueryEditor.get -> UIKit.UITextField?
Microsoft.Maui.Handlers.SearchBarHandler.SearchBarHandler() -> void
Microsoft.Maui.Handlers.SearchBarHandler.SearchBarHandler(Microsoft.Maui.IPropertyMapper? mapper, Microsoft.Maui.CommandMapper? commandMapper) -> void
Microsoft.Maui.Handlers.SearchBarHandler.SearchBarHandler(Microsoft.Maui.IPropertyMapper? mapper) -> void
Microsoft.Maui.Handlers.ShapeViewHandler
Microsoft.Maui.Handlers.ShapeViewHandler.ShapeViewHandler() -> void
Microsoft.Maui.Handlers.ShapeViewHandler.ShapeViewHandler(Microsoft.Maui.IPropertyMapper? mapper, Microsoft.Maui.CommandMapper? commandMapper) -> void
Microsoft.Maui.Handlers.ShapeViewHandler.ShapeViewHandler(Microsoft.Maui.IPropertyMapper? mapper) -> void
Microsoft.Maui.Handlers.SliderHandler
Microsoft.Maui.Handlers.SliderHandler.SliderHandler() -> void
Microsoft.Maui.Handlers.SliderHandler.SliderHandler(Microsoft.Maui.IPropertyMapper? mapper, Microsoft.Maui.CommandMapper? commandMapper) -> void
Microsoft.Maui.Handlers.SliderHandler.SliderHandler(Microsoft.Maui.IPropertyMapper? mapper) -> void
Microsoft.Maui.Handlers.StepperHandler
Microsoft.Maui.Handlers.StepperHandler.StepperHandler() -> void
Microsoft.Maui.Handlers.StepperHandler.StepperHandler(Microsoft.Maui.IPropertyMapper? mapper, Microsoft.Maui.CommandMapper? commandMapper) -> void
Microsoft.Maui.Handlers.StepperHandler.StepperHandler(Microsoft.Maui.IPropertyMapper? mapper) -> void
Microsoft.Maui.Handlers.SwipeItemButton
Microsoft.Maui.Handlers.SwipeItemButton.FrameChanged -> System.EventHandler?
Microsoft.Maui.Handlers.SwipeItemButton.SwipeItemButton() -> void
Microsoft.Maui.Handlers.SwipeItemMenuItemHandler
Microsoft.Maui.Handlers.SwipeItemMenuItemHandler.SwipeItemMenuItemHandler() -> void
Microsoft.Maui.Handlers.SwipeItemMenuItemHandler.SwipeItemMenuItemHandler(Microsoft.Maui.IPropertyMapper? mapper, Microsoft.Maui.CommandMapper? commandMapper) -> void
Microsoft.Maui.Handlers.SwipeItemMenuItemHandler.SwipeItemMenuItemHandler(Microsoft.Maui.IPropertyMapper? mapper) -> void
Microsoft.Maui.Handlers.SwipeItemViewHandler
Microsoft.Maui.Handlers.SwipeItemViewHandler.SwipeItemViewHandler() -> void
Microsoft.Maui.Handlers.SwipeItemViewHandler.SwipeItemViewHandler(Microsoft.Maui.IPropertyMapper? mapper, Microsoft.Maui.CommandMapper? commandMapper) -> void
Microsoft.Maui.Handlers.SwipeItemViewHandler.SwipeItemViewHandler(Microsoft.Maui.IPropertyMapper? mapper) -> void
Microsoft.Maui.Handlers.SwipeViewHandler
Microsoft.Maui.Handlers.SwipeViewHandler.SwipeViewHandler() -> void
Microsoft.Maui.Handlers.SwipeViewHandler.SwipeViewHandler(Microsoft.Maui.IPropertyMapper? mapper, Microsoft.Maui.CommandMapper? commandMapper) -> void
Microsoft.Maui.Handlers.SwipeViewHandler.SwipeViewHandler(Microsoft.Maui.IPropertyMapper? mapper) -> void
Microsoft.Maui.Handlers.SwitchHandler
Microsoft.Maui.Handlers.SwitchHandler.SwitchHandler() -> void
Microsoft.Maui.Handlers.SwitchHandler.SwitchHandler(Microsoft.Maui.IPropertyMapper? mapper, Microsoft.Maui.CommandMapper? commandMapper) -> void
Microsoft.Maui.Handlers.SwitchHandler.SwitchHandler(Microsoft.Maui.IPropertyMapper? mapper) -> void
Microsoft.Maui.Handlers.TabbedViewHandler
Microsoft.Maui.Handlers.TabbedViewHandler.TabbedViewHandler() -> void
Microsoft.Maui.Handlers.TabbedViewHandler.TabbedViewHandler(Microsoft.Maui.IPropertyMapper? mapper, Microsoft.Maui.CommandMapper? commandMapper) -> void
Microsoft.Maui.Handlers.TabbedViewHandler.TabbedViewHandler(Microsoft.Maui.IPropertyMapper? mapper) -> void
Microsoft.Maui.Handlers.TimePickerHandler
Microsoft.Maui.Handlers.TimePickerHandler.TimePickerHandler() -> void
Microsoft.Maui.Handlers.TimePickerHandler.TimePickerHandler(Microsoft.Maui.IPropertyMapper? mapper, Microsoft.Maui.CommandMapper? commandMapper) -> void
Microsoft.Maui.Handlers.TimePickerHandler.TimePickerHandler(Microsoft.Maui.IPropertyMapper? mapper) -> void
Microsoft.Maui.Handlers.ToolbarHandler
Microsoft.Maui.Handlers.ToolbarHandler.ToolbarHandler() -> void
Microsoft.Maui.Handlers.ToolbarHandler.ToolbarHandler(Microsoft.Maui.IPropertyMapper? mapper, Microsoft.Maui.CommandMapper? commandMapper) -> void
Microsoft.Maui.Handlers.ToolbarHandler.ToolbarHandler(Microsoft.Maui.IPropertyMapper? mapper) -> void
Microsoft.Maui.Handlers.ViewHandler
Microsoft.Maui.Handlers.ViewHandler.ContainerView.get -> UIKit.UIView?
Microsoft.Maui.Handlers.ViewHandler.HasContainer.get -> bool
Microsoft.Maui.Handlers.ViewHandler.HasContainer.set -> void
Microsoft.Maui.Handlers.ViewHandler.PlatformView.get -> UIKit.UIView?
Microsoft.Maui.Handlers.ViewHandler.ViewHandler(Microsoft.Maui.IPropertyMapper! mapper, Microsoft.Maui.CommandMapper? commandMapper = null) -> void
Microsoft.Maui.Handlers.ViewHandler.VirtualView.get -> Microsoft.Maui.IView?
Microsoft.Maui.Handlers.ViewHandler<TVirtualView, TPlatformView>
Microsoft.Maui.Handlers.ViewHandler<TVirtualView, TPlatformView>.ContainerView.get -> Microsoft.Maui.Platform.WrapperView?
Microsoft.Maui.Handlers.ViewHandler<TVirtualView, TPlatformView>.ContainerView.set -> void
Microsoft.Maui.Handlers.ViewHandler<TVirtualView, TPlatformView>.PlatformView.get -> TPlatformView!
Microsoft.Maui.Handlers.ViewHandler<TVirtualView, TPlatformView>.ViewController.get -> UIKit.UIViewController?
Microsoft.Maui.Handlers.ViewHandler<TVirtualView, TPlatformView>.ViewController.set -> void
Microsoft.Maui.Handlers.ViewHandler<TVirtualView, TPlatformView>.ViewHandler(Microsoft.Maui.IPropertyMapper! mapper, Microsoft.Maui.CommandMapper? commandMapper = null) -> void
Microsoft.Maui.Handlers.ViewHandler<TVirtualView, TPlatformView>.VirtualView.get -> TVirtualView!
Microsoft.Maui.Handlers.WebViewHandler
Microsoft.Maui.Handlers.WebViewHandler.WebViewHandler() -> void
Microsoft.Maui.Handlers.WebViewHandler.WebViewHandler(Microsoft.Maui.IPropertyMapper? mapper = null, Microsoft.Maui.CommandMapper? commandMapper = null) -> void
Microsoft.Maui.Handlers.WindowHandler
Microsoft.Maui.Handlers.WindowHandler.WindowHandler() -> void
Microsoft.Maui.Handlers.WindowHandler.WindowHandler(Microsoft.Maui.IPropertyMapper? mapper, Microsoft.Maui.CommandMapper? commandMapper) -> void
Microsoft.Maui.Handlers.WindowHandler.WindowHandler(Microsoft.Maui.IPropertyMapper? mapper) -> void
Microsoft.Maui.Hosting.AppHostBuilderExtensions
Microsoft.Maui.Hosting.EssentialsExtensions
Microsoft.Maui.Hosting.FontCollectionExtensions
Microsoft.Maui.Hosting.FontDescriptor
Microsoft.Maui.Hosting.FontDescriptor.Alias.get -> string?
Microsoft.Maui.Hosting.FontDescriptor.Assembly.get -> System.Reflection.Assembly?
Microsoft.Maui.Hosting.FontDescriptor.Filename.get -> string!
Microsoft.Maui.Hosting.FontDescriptor.FontDescriptor(string! filename, string? alias, System.Reflection.Assembly? assembly) -> void
Microsoft.Maui.Hosting.FontsMauiAppBuilderExtensions
Microsoft.Maui.Hosting.HandlerMauiAppBuilderExtensions
Microsoft.Maui.Hosting.IEssentialsBuilder
Microsoft.Maui.Hosting.IEssentialsBuilder.AddAppAction(Microsoft.Maui.ApplicationModel.AppAction! appAction) -> Microsoft.Maui.Hosting.IEssentialsBuilder!
Microsoft.Maui.Hosting.IEssentialsBuilder.OnAppAction(System.Action<Microsoft.Maui.ApplicationModel.AppAction!>! action) -> Microsoft.Maui.Hosting.IEssentialsBuilder!
Microsoft.Maui.Hosting.IEssentialsBuilder.UseMapServiceToken(string! token) -> Microsoft.Maui.Hosting.IEssentialsBuilder!
Microsoft.Maui.Hosting.IEssentialsBuilder.UseVersionTracking() -> Microsoft.Maui.Hosting.IEssentialsBuilder!
Microsoft.Maui.Hosting.IFontCollection
Microsoft.Maui.Hosting.IImageSourceServiceCollection
Microsoft.Maui.Hosting.ImageSourceServiceCollectionExtensions
Microsoft.Maui.Hosting.ImageSourcesMauiAppBuilderExtensions
Microsoft.Maui.Hosting.IMauiHandlersCollection
Microsoft.Maui.Hosting.IMauiInitializeScopedService
Microsoft.Maui.Hosting.IMauiInitializeScopedService.Initialize(System.IServiceProvider! services) -> void
Microsoft.Maui.Hosting.IMauiInitializeService
Microsoft.Maui.Hosting.IMauiInitializeService.Initialize(System.IServiceProvider! services) -> void
Microsoft.Maui.Hosting.IMauiServiceCollection
Microsoft.Maui.Hosting.IMauiServiceCollection.TryGetService(System.Type! serviceType, out Microsoft.Extensions.DependencyInjection.ServiceDescriptor? descriptor) -> bool
Microsoft.Maui.Hosting.MauiApp
Microsoft.Maui.Hosting.MauiApp.Configuration.get -> Microsoft.Extensions.Configuration.IConfiguration!
Microsoft.Maui.Hosting.MauiApp.Dispose() -> void
Microsoft.Maui.Hosting.MauiApp.DisposeAsync() -> System.Threading.Tasks.ValueTask
Microsoft.Maui.Hosting.MauiApp.Services.get -> System.IServiceProvider!
Microsoft.Maui.Hosting.MauiAppBuilder
Microsoft.Maui.Hosting.MauiAppBuilder.Build() -> Microsoft.Maui.Hosting.MauiApp!
Microsoft.Maui.Hosting.MauiAppBuilder.Configuration.get -> Microsoft.Extensions.Configuration.ConfigurationManager!
Microsoft.Maui.Hosting.MauiAppBuilder.ConfigureContainer<TBuilder>(Microsoft.Extensions.DependencyInjection.IServiceProviderFactory<TBuilder>! factory, System.Action<TBuilder>? configure = null) -> void
Microsoft.Maui.Hosting.MauiAppBuilder.Logging.get -> Microsoft.Extensions.Logging.ILoggingBuilder!
Microsoft.Maui.Hosting.MauiAppBuilder.Services.get -> Microsoft.Extensions.DependencyInjection.IServiceCollection!
Microsoft.Maui.Hosting.MauiHandlersCollectionExtensions
Microsoft.Maui.HotReload.HotReloadExtensions
Microsoft.Maui.HotReload.IHotReloadableView
Microsoft.Maui.HotReload.IHotReloadableView.Reload() -> void
Microsoft.Maui.HotReload.IHotReloadableView.ReloadHandler.get -> Microsoft.Maui.HotReload.IReloadHandler!
Microsoft.Maui.HotReload.IHotReloadableView.ReloadHandler.set -> void
Microsoft.Maui.HotReload.IHotReloadableView.TransferState(Microsoft.Maui.IView! newView) -> void
Microsoft.Maui.HotReload.IReloadHandler
Microsoft.Maui.HotReload.IReloadHandler.Reload() -> void
Microsoft.Maui.HotReload.MauiHotReloadHelper
Microsoft.Maui.HotReload.OnHotReloadAttribute
Microsoft.Maui.HotReload.OnHotReloadAttribute.OnHotReloadAttribute() -> void
Microsoft.Maui.IAbsoluteLayout
Microsoft.Maui.IAbsoluteLayout.GetLayoutBounds(Microsoft.Maui.IView! view) -> Microsoft.Maui.Graphics.Rect
Microsoft.Maui.IAbsoluteLayout.GetLayoutFlags(Microsoft.Maui.IView! view) -> Microsoft.Maui.Layouts.AbsoluteLayoutFlags
Microsoft.Maui.IActivationState
Microsoft.Maui.IActivationState.Context.get -> Microsoft.Maui.IMauiContext!
Microsoft.Maui.IActivationState.State.get -> Microsoft.Maui.IPersistedState!
Microsoft.Maui.IActivityIndicator
Microsoft.Maui.IActivityIndicator.Color.get -> Microsoft.Maui.Graphics.Color!
Microsoft.Maui.IActivityIndicator.IsRunning.get -> bool
Microsoft.Maui.IAdorner
Microsoft.Maui.IAdorner.Density.get -> float
Microsoft.Maui.IAdorner.VisualView.get -> Microsoft.Maui.IView!
Microsoft.Maui.IApplication
Microsoft.Maui.IApplication.CloseWindow(Microsoft.Maui.IWindow! window) -> void
Microsoft.Maui.IApplication.CreateWindow(Microsoft.Maui.IActivationState? activationState) -> Microsoft.Maui.IWindow!
Microsoft.Maui.IApplication.OpenWindow(Microsoft.Maui.IWindow! window) -> void
Microsoft.Maui.IApplication.ThemeChanged() -> void
Microsoft.Maui.IApplication.UserAppTheme.get -> Microsoft.Maui.ApplicationModel.AppTheme
Microsoft.Maui.IApplication.Windows.get -> System.Collections.Generic.IReadOnlyList<Microsoft.Maui.IWindow!>!
Microsoft.Maui.IBorder
Microsoft.Maui.IBorder.Border.get -> Microsoft.Maui.IBorderStroke!
Microsoft.Maui.IBorderStroke
Microsoft.Maui.IBorderStroke.Shape.get -> Microsoft.Maui.Graphics.IShape?
Microsoft.Maui.IBorderView
Microsoft.Maui.IButton
Microsoft.Maui.IButton.Clicked() -> void
Microsoft.Maui.IButton.Pressed() -> void
Microsoft.Maui.IButton.Released() -> void
Microsoft.Maui.IButtonStroke
Microsoft.Maui.IButtonStroke.CornerRadius.get -> int
Microsoft.Maui.IButtonStroke.StrokeColor.get -> Microsoft.Maui.Graphics.Color!
Microsoft.Maui.IButtonStroke.StrokeThickness.get -> double
Microsoft.Maui.ICheckBox
Microsoft.Maui.ICheckBox.Foreground.get -> Microsoft.Maui.Graphics.Paint?
Microsoft.Maui.ICheckBox.IsChecked.get -> bool
Microsoft.Maui.ICheckBox.IsChecked.set -> void
Microsoft.Maui.ICommandMapper
Microsoft.Maui.ICommandMapper.GetCommand(string! key) -> System.Action<Microsoft.Maui.IElementHandler!, Microsoft.Maui.IElement!, object?>?
Microsoft.Maui.ICommandMapper.Invoke(Microsoft.Maui.IElementHandler! viewHandler, Microsoft.Maui.IElement? virtualView, string! property, object? args) -> void
Microsoft.Maui.ICommandMapper<TVirtualView, TViewHandler>
Microsoft.Maui.ICommandMapper<TVirtualView, TViewHandler>.Add(string! key, System.Action<TViewHandler, TVirtualView, object?>! action) -> void
Microsoft.Maui.ICommandMapper<TVirtualView, TViewHandler>.Add(string! key, System.Action<TViewHandler, TVirtualView>! action) -> void
Microsoft.Maui.IContainer
Microsoft.Maui.IContentView
Microsoft.Maui.IContentView.Content.get -> object?
Microsoft.Maui.IContentView.CrossPlatformArrange(Microsoft.Maui.Graphics.Rect bounds) -> Microsoft.Maui.Graphics.Size
Microsoft.Maui.IContentView.CrossPlatformMeasure(double widthConstraint, double heightConstraint) -> Microsoft.Maui.Graphics.Size
Microsoft.Maui.IContentView.PresentedContent.get -> Microsoft.Maui.IView?
Microsoft.Maui.IContextFlyoutElement
Microsoft.Maui.IContextFlyoutElement.ContextFlyout.get -> Microsoft.Maui.IFlyout?
Microsoft.Maui.ICrossPlatformLayout
Microsoft.Maui.ICrossPlatformLayout.CrossPlatformArrange(Microsoft.Maui.Graphics.Rect bounds) -> Microsoft.Maui.Graphics.Size
Microsoft.Maui.ICrossPlatformLayout.CrossPlatformMeasure(double widthConstraint, double heightConstraint) -> Microsoft.Maui.Graphics.Size
Microsoft.Maui.ICrossPlatformLayoutBacking
Microsoft.Maui.ICrossPlatformLayoutBacking.CrossPlatformLayout.get -> Microsoft.Maui.ICrossPlatformLayout?
Microsoft.Maui.ICrossPlatformLayoutBacking.CrossPlatformLayout.set -> void
Microsoft.Maui.IDatePicker
Microsoft.Maui.IDatePicker.Date.get -> System.DateTime
Microsoft.Maui.IDatePicker.Date.set -> void
Microsoft.Maui.IDatePicker.Format.get -> string!
Microsoft.Maui.IDatePicker.Format.set -> void
Microsoft.Maui.IDatePicker.MaximumDate.get -> System.DateTime
Microsoft.Maui.IDatePicker.MinimumDate.get -> System.DateTime
Microsoft.Maui.IEditor
Microsoft.Maui.IEditor.Completed() -> void
Microsoft.Maui.IElement
Microsoft.Maui.IElement.Handler.get -> Microsoft.Maui.IElementHandler?
Microsoft.Maui.IElement.Handler.set -> void
Microsoft.Maui.IElement.Parent.get -> Microsoft.Maui.IElement?
Microsoft.Maui.IElementHandler
Microsoft.Maui.IElementHandler.DisconnectHandler() -> void
Microsoft.Maui.IElementHandler.Invoke(string! command, object? args = null) -> void
Microsoft.Maui.IElementHandler.MauiContext.get -> Microsoft.Maui.IMauiContext?
Microsoft.Maui.IElementHandler.PlatformView.get -> object?
Microsoft.Maui.IElementHandler.SetMauiContext(Microsoft.Maui.IMauiContext! mauiContext) -> void
Microsoft.Maui.IElementHandler.SetVirtualView(Microsoft.Maui.IElement! view) -> void
Microsoft.Maui.IElementHandler.UpdateValue(string! property) -> void
Microsoft.Maui.IElementHandler.VirtualView.get -> Microsoft.Maui.IElement?
Microsoft.Maui.IEmbeddedFontLoader
Microsoft.Maui.IEmbeddedFontLoader.LoadFont(Microsoft.Maui.EmbeddedFont! font) -> string?
Microsoft.Maui.IEntry
Microsoft.Maui.IEntry.ClearButtonVisibility.get -> Microsoft.Maui.ClearButtonVisibility
Microsoft.Maui.IEntry.Completed() -> void
Microsoft.Maui.IEntry.IsPassword.get -> bool
Microsoft.Maui.IEntry.ReturnType.get -> Microsoft.Maui.ReturnType
Microsoft.Maui.IFileImageSource
Microsoft.Maui.IFileImageSource.File.get -> string!
Microsoft.Maui.IFlexLayout
Microsoft.Maui.IFlexLayout.AlignContent.get -> Microsoft.Maui.Layouts.FlexAlignContent
Microsoft.Maui.IFlexLayout.AlignItems.get -> Microsoft.Maui.Layouts.FlexAlignItems
Microsoft.Maui.IFlexLayout.Direction.get -> Microsoft.Maui.Layouts.FlexDirection
Microsoft.Maui.IFlexLayout.GetAlignSelf(Microsoft.Maui.IView! view) -> Microsoft.Maui.Layouts.FlexAlignSelf
Microsoft.Maui.IFlexLayout.GetBasis(Microsoft.Maui.IView! view) -> Microsoft.Maui.Layouts.FlexBasis
Microsoft.Maui.IFlexLayout.GetFlexFrame(Microsoft.Maui.IView! view) -> Microsoft.Maui.Graphics.Rect
Microsoft.Maui.IFlexLayout.GetGrow(Microsoft.Maui.IView! view) -> float
Microsoft.Maui.IFlexLayout.GetOrder(Microsoft.Maui.IView! view) -> int
Microsoft.Maui.IFlexLayout.GetShrink(Microsoft.Maui.IView! view) -> float
Microsoft.Maui.IFlexLayout.JustifyContent.get -> Microsoft.Maui.Layouts.FlexJustify
Microsoft.Maui.IFlexLayout.Layout(double width, double height) -> void
Microsoft.Maui.IFlexLayout.Position.get -> Microsoft.Maui.Layouts.FlexPosition
Microsoft.Maui.IFlexLayout.Wrap.get -> Microsoft.Maui.Layouts.FlexWrap
Microsoft.Maui.IFlyout
Microsoft.Maui.IFlyoutView
Microsoft.Maui.IFlyoutView.Detail.get -> Microsoft.Maui.IView!
Microsoft.Maui.IFlyoutView.Flyout.get -> Microsoft.Maui.IView!
Microsoft.Maui.IFlyoutView.FlyoutBehavior.get -> Microsoft.Maui.FlyoutBehavior
Microsoft.Maui.IFlyoutView.FlyoutWidth.get -> double
Microsoft.Maui.IFlyoutView.IsGestureEnabled.get -> bool
Microsoft.Maui.IFlyoutView.IsPresented.get -> bool
Microsoft.Maui.IFlyoutView.IsPresented.set -> void
Microsoft.Maui.IFontImageSource
Microsoft.Maui.IFontImageSource.Color.get -> Microsoft.Maui.Graphics.Color!
Microsoft.Maui.IFontImageSource.Font.get -> Microsoft.Maui.Font
Microsoft.Maui.IFontImageSource.Glyph.get -> string!
Microsoft.Maui.IFontManager
Microsoft.Maui.IFontManager.DefaultFont.get -> UIKit.UIFont!
Microsoft.Maui.IFontManager.DefaultFontSize.get -> double
Microsoft.Maui.IFontManager.GetFont(Microsoft.Maui.Font font, double defaultFontSize = 0) -> UIKit.UIFont!
Microsoft.Maui.IFontRegistrar
Microsoft.Maui.IFontRegistrar.GetFont(string! font) -> string?
Microsoft.Maui.IFontRegistrar.Register(string! filename, string? alias, System.Reflection.Assembly! assembly) -> void
Microsoft.Maui.IFontRegistrar.Register(string! filename, string? alias) -> void
Microsoft.Maui.IGraphicsView
Microsoft.Maui.IGraphicsView.CancelInteraction() -> void
Microsoft.Maui.IGraphicsView.DragInteraction(Microsoft.Maui.Graphics.PointF[]! points) -> void
Microsoft.Maui.IGraphicsView.Drawable.get -> Microsoft.Maui.Graphics.IDrawable!
Microsoft.Maui.IGraphicsView.EndHoverInteraction() -> void
Microsoft.Maui.IGraphicsView.EndInteraction(Microsoft.Maui.Graphics.PointF[]! points, bool isInsideBounds) -> void
Microsoft.Maui.IGraphicsView.Invalidate() -> void
Microsoft.Maui.IGraphicsView.MoveHoverInteraction(Microsoft.Maui.Graphics.PointF[]! points) -> void
Microsoft.Maui.IGraphicsView.StartHoverInteraction(Microsoft.Maui.Graphics.PointF[]! points) -> void
Microsoft.Maui.IGraphicsView.StartInteraction(Microsoft.Maui.Graphics.PointF[]! points) -> void
Microsoft.Maui.IGridColumnDefinition
Microsoft.Maui.IGridColumnDefinition.Width.get -> Microsoft.Maui.GridLength
Microsoft.Maui.IGridLayout
Microsoft.Maui.IGridLayout.ColumnDefinitions.get -> System.Collections.Generic.IReadOnlyList<Microsoft.Maui.IGridColumnDefinition!>!
Microsoft.Maui.IGridLayout.ColumnSpacing.get -> double
Microsoft.Maui.IGridLayout.GetColumn(Microsoft.Maui.IView! view) -> int
Microsoft.Maui.IGridLayout.GetColumnSpan(Microsoft.Maui.IView! view) -> int
Microsoft.Maui.IGridLayout.GetRow(Microsoft.Maui.IView! view) -> int
Microsoft.Maui.IGridLayout.GetRowSpan(Microsoft.Maui.IView! view) -> int
Microsoft.Maui.IGridLayout.RowDefinitions.get -> System.Collections.Generic.IReadOnlyList<Microsoft.Maui.IGridRowDefinition!>!
Microsoft.Maui.IGridLayout.RowSpacing.get -> double
Microsoft.Maui.IGridRowDefinition
Microsoft.Maui.IGridRowDefinition.Height.get -> Microsoft.Maui.GridLength
Microsoft.Maui.IImage
Microsoft.Maui.IImage.Aspect.get -> Microsoft.Maui.Aspect
Microsoft.Maui.IImage.IsOpaque.get -> bool
Microsoft.Maui.IImageButton
Microsoft.Maui.IImageSource
Microsoft.Maui.IImageSource.IsEmpty.get -> bool
Microsoft.Maui.IImageSourcePart
Microsoft.Maui.IImageSourcePart.IsAnimationPlaying.get -> bool
Microsoft.Maui.IImageSourcePart.Source.get -> Microsoft.Maui.IImageSource?
Microsoft.Maui.IImageSourcePart.UpdateIsLoading(bool isLoading) -> void
Microsoft.Maui.IImageSourcePartEvents
Microsoft.Maui.IImageSourcePartEvents.LoadingCompleted(bool successful) -> void
Microsoft.Maui.IImageSourcePartEvents.LoadingFailed(System.Exception! exception) -> void
Microsoft.Maui.IImageSourcePartEvents.LoadingStarted() -> void
Microsoft.Maui.IImageSourceService
Microsoft.Maui.IImageSourceService.GetImageAsync(Microsoft.Maui.IImageSource! imageSource, float scale = 1, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<Microsoft.Maui.IImageSourceServiceResult<UIKit.UIImage!>?>!
Microsoft.Maui.IImageSourceService<T>
Microsoft.Maui.IImageSourceServiceProvider
Microsoft.Maui.IImageSourceServiceProvider.GetImageSourceService(System.Type! imageSource) -> Microsoft.Maui.IImageSourceService?
Microsoft.Maui.IImageSourceServiceProvider.GetImageSourceServiceType(System.Type! imageSource) -> System.Type!
Microsoft.Maui.IImageSourceServiceProvider.GetImageSourceType(System.Type! imageSource) -> System.Type!
Microsoft.Maui.IImageSourceServiceProvider.HostServiceProvider.get -> System.IServiceProvider!
Microsoft.Maui.IImageSourceServiceResult
Microsoft.Maui.IImageSourceServiceResult.IsDisposed.get -> bool
Microsoft.Maui.IImageSourceServiceResult.IsResolutionDependent.get -> bool
Microsoft.Maui.IImageSourceServiceResult<T>
Microsoft.Maui.IImageSourceServiceResult<T>.Value.get -> T
Microsoft.Maui.IIndicatorView
Microsoft.Maui.IIndicatorView.Count.get -> int
Microsoft.Maui.IIndicatorView.HideSingle.get -> bool
Microsoft.Maui.IIndicatorView.IndicatorColor.get -> Microsoft.Maui.Graphics.Paint?
Microsoft.Maui.IIndicatorView.IndicatorSize.get -> double
Microsoft.Maui.IIndicatorView.IndicatorsShape.get -> Microsoft.Maui.Graphics.IShape!
Microsoft.Maui.IIndicatorView.MaximumVisible.get -> int
Microsoft.Maui.IIndicatorView.Position.get -> int
Microsoft.Maui.IIndicatorView.Position.set -> void
Microsoft.Maui.IIndicatorView.SelectedIndicatorColor.get -> Microsoft.Maui.Graphics.Paint?
Microsoft.Maui.IItemDelegate<T>
Microsoft.Maui.IItemDelegate<T>.GetCount() -> int
Microsoft.Maui.IItemDelegate<T>.GetItem(int index) -> T
Microsoft.Maui.IKeyboardAccelerator
Microsoft.Maui.IKeyboardAccelerator.Key.get -> string?
Microsoft.Maui.IKeyboardAccelerator.Modifiers.get -> Microsoft.Maui.KeyboardAcceleratorModifiers
Microsoft.Maui.ILabel
Microsoft.Maui.ILabel.LineHeight.get -> double
Microsoft.Maui.ILabel.TextDecorations.get -> Microsoft.Maui.TextDecorations
Microsoft.Maui.ILayout
Microsoft.Maui.ILayout.ClipsToBounds.get -> bool
Microsoft.Maui.ILayout.CrossPlatformArrange(Microsoft.Maui.Graphics.Rect bounds) -> Microsoft.Maui.Graphics.Size
Microsoft.Maui.ILayout.CrossPlatformMeasure(double widthConstraint, double heightConstraint) -> Microsoft.Maui.Graphics.Size
Microsoft.Maui.ILayoutHandler
Microsoft.Maui.ILayoutHandler.Add(Microsoft.Maui.IView! view) -> void
Microsoft.Maui.ILayoutHandler.Clear() -> void
Microsoft.Maui.ILayoutHandler.Insert(int index, Microsoft.Maui.IView! view) -> void
Microsoft.Maui.ILayoutHandler.PlatformView.get -> Microsoft.Maui.Platform.LayoutView!
Microsoft.Maui.ILayoutHandler.Remove(Microsoft.Maui.IView! view) -> void
Microsoft.Maui.ILayoutHandler.Update(int index, Microsoft.Maui.IView! view) -> void
Microsoft.Maui.ILayoutHandler.UpdateZIndex(Microsoft.Maui.IView! view) -> void
Microsoft.Maui.ILayoutHandler.VirtualView.get -> Microsoft.Maui.ILayout!
Microsoft.Maui.ImageSourceExtensions
Microsoft.Maui.ImageSourceService
Microsoft.Maui.ImageSourceService.ImageSourceService(Microsoft.Extensions.Logging.ILogger? logger = null) -> void
Microsoft.Maui.ImageSourceService.Logger.get -> Microsoft.Extensions.Logging.ILogger?
Microsoft.Maui.ImageSourceServiceLoadResult
Microsoft.Maui.ImageSourceServiceLoadResult.Dispose() -> void
Microsoft.Maui.ImageSourceServiceLoadResult.ImageSourceServiceLoadResult() -> void
Microsoft.Maui.ImageSourceServiceLoadResult.ImageSourceServiceLoadResult(bool resolutionDependent, System.Action? dispose = null) -> void
Microsoft.Maui.ImageSourceServiceLoadResult.ImageSourceServiceLoadResult(System.Action? dispose = null) -> void
Microsoft.Maui.ImageSourceServiceLoadResult.IsDisposed.get -> bool
Microsoft.Maui.ImageSourceServiceLoadResult.IsResolutionDependent.get -> bool
Microsoft.Maui.ImageSourceServiceProviderExtensions
Microsoft.Maui.ImageSourceServiceResult
Microsoft.Maui.ImageSourceServiceResult.Dispose() -> void
Microsoft.Maui.ImageSourceServiceResult.ImageSourceServiceResult(UIKit.UIImage! image, bool resolutionDependent, System.Action? dispose = null) -> void
Microsoft.Maui.ImageSourceServiceResult.ImageSourceServiceResult(UIKit.UIImage! image, System.Action? dispose = null) -> void
Microsoft.Maui.ImageSourceServiceResult.IsDisposed.get -> bool
Microsoft.Maui.ImageSourceServiceResult.IsResolutionDependent.get -> bool
Microsoft.Maui.ImageSourceServiceResult.Value.get -> UIKit.UIImage!
Microsoft.Maui.IMauiContext
Microsoft.Maui.IMauiContext.Handlers.get -> Microsoft.Maui.IMauiHandlersFactory!
Microsoft.Maui.IMauiContext.Services.get -> System.IServiceProvider!
Microsoft.Maui.IMauiFactory
Microsoft.Maui.IMauiHandlersFactory
Microsoft.Maui.IMauiHandlersFactory.GetCollection() -> Microsoft.Maui.Hosting.IMauiHandlersCollection!
Microsoft.Maui.IMauiHandlersFactory.GetHandler(System.Type! type) -> Microsoft.Maui.IElementHandler?
Microsoft.Maui.IMauiHandlersFactory.GetHandler<T>() -> Microsoft.Maui.IElementHandler?
Microsoft.Maui.IMauiHandlersFactory.GetHandlerType(System.Type! iview) -> System.Type?
Microsoft.Maui.IMenuBar
Microsoft.Maui.IMenuBar.IsEnabled.get -> bool
Microsoft.Maui.IMenuBarElement
Microsoft.Maui.IMenuBarElement.MenuBar.get -> Microsoft.Maui.IMenuBar?
Microsoft.Maui.IMenuBarItem
Microsoft.Maui.IMenuBarItem.IsEnabled.get -> bool
Microsoft.Maui.IMenuBarItem.Text.get -> string!
Microsoft.Maui.IMenuElement
Microsoft.Maui.IMenuElement.Clicked() -> void
Microsoft.Maui.IMenuElement.IsEnabled.get -> bool
Microsoft.Maui.IMenuFlyout
Microsoft.Maui.IMenuFlyoutItem
Microsoft.Maui.IMenuFlyoutItem.KeyboardAccelerators.get -> System.Collections.Generic.IReadOnlyList<Microsoft.Maui.IKeyboardAccelerator!>?
Microsoft.Maui.IMenuFlyoutSeparator
Microsoft.Maui.IMenuFlyoutSubItem
Microsoft.Maui.IPadding
Microsoft.Maui.IPadding.Padding.get -> Microsoft.Maui.Thickness
Microsoft.Maui.IPersistedState
Microsoft.Maui.IPicker
Microsoft.Maui.IPicker.Items.get -> System.Collections.Generic.IList<string!>!
Microsoft.Maui.IPicker.SelectedIndex.get -> int
Microsoft.Maui.IPicker.SelectedIndex.set -> void
Microsoft.Maui.IPicker.Title.get -> string!
Microsoft.Maui.IPicker.TitleColor.get -> Microsoft.Maui.Graphics.Color!
Microsoft.Maui.IPickerExtension
Microsoft.Maui.IPlaceholder
Microsoft.Maui.IPlaceholder.Placeholder.get -> string!
Microsoft.Maui.IPlaceholder.PlaceholderColor.get -> Microsoft.Maui.Graphics.Color!
Microsoft.Maui.IPlaceholder.PlaceholderColor.set -> void
Microsoft.Maui.IPlatformApplication
Microsoft.Maui.IPlatformApplication.Application.get -> Microsoft.Maui.IApplication!
Microsoft.Maui.IPlatformApplication.Current.get -> Microsoft.Maui.IPlatformApplication?
Microsoft.Maui.IPlatformApplication.Current.set -> void
Microsoft.Maui.IPlatformApplication.Services.get -> System.IServiceProvider!
Microsoft.Maui.IPlatformViewHandler
Microsoft.Maui.IPlatformViewHandler.ContainerView.get -> UIKit.UIView?
Microsoft.Maui.IPlatformViewHandler.PlatformView.get -> UIKit.UIView?
Microsoft.Maui.IPlatformViewHandler.ViewController.get -> UIKit.UIViewController?
Microsoft.Maui.IProgress
Microsoft.Maui.IProgress.Progress.get -> double
Microsoft.Maui.IProgress.ProgressColor.get -> Microsoft.Maui.Graphics.Color!
Microsoft.Maui.IPropertyMapper
Microsoft.Maui.IPropertyMapper.GetKeys() -> System.Collections.Generic.IEnumerable<string!>!
Microsoft.Maui.IPropertyMapper.GetProperty(string! key) -> System.Action<Microsoft.Maui.IElementHandler!, Microsoft.Maui.IElement!>?
Microsoft.Maui.IPropertyMapper.UpdateProperties(Microsoft.Maui.IElementHandler! elementHandler, Microsoft.Maui.IElement! virtualView) -> void
Microsoft.Maui.IPropertyMapper.UpdateProperty(Microsoft.Maui.IElementHandler! elementHandler, Microsoft.Maui.IElement! virtualView, string! property) -> void
Microsoft.Maui.IPropertyMapper<TVirtualView, TViewHandler>
Microsoft.Maui.IPropertyMapper<TVirtualView, TViewHandler>.Add(string! key, System.Action<TViewHandler, TVirtualView>! action) -> void
Microsoft.Maui.IPropertyMapperView
Microsoft.Maui.IPropertyMapperView.GetPropertyMapperOverrides() -> Microsoft.Maui.PropertyMapper!
Microsoft.Maui.IRadioButton
Microsoft.Maui.IRadioButton.IsChecked.get -> bool
Microsoft.Maui.IRadioButton.IsChecked.set -> void
Microsoft.Maui.IRange
Microsoft.Maui.IRange.Maximum.get -> double
Microsoft.Maui.IRange.Minimum.get -> double
Microsoft.Maui.IRange.Value.get -> double
Microsoft.Maui.IRange.Value.set -> void
Microsoft.Maui.IRefreshView
Microsoft.Maui.IRefreshView.Content.get -> Microsoft.Maui.IView!
Microsoft.Maui.IRefreshView.IsRefreshing.get -> bool
Microsoft.Maui.IRefreshView.IsRefreshing.set -> void
Microsoft.Maui.IRefreshView.RefreshColor.get -> Microsoft.Maui.Graphics.Paint?
Microsoft.Maui.IReplaceableView
Microsoft.Maui.IReplaceableView.ReplacedView.get -> Microsoft.Maui.IView!
Microsoft.Maui.ISafeAreaView
Microsoft.Maui.ISafeAreaView.IgnoreSafeArea.get -> bool
Microsoft.Maui.IScrollView
Microsoft.Maui.IScrollView.ContentSize.get -> Microsoft.Maui.Graphics.Size
Microsoft.Maui.IScrollView.HorizontalOffset.get -> double
Microsoft.Maui.IScrollView.HorizontalOffset.set -> void
Microsoft.Maui.IScrollView.HorizontalScrollBarVisibility.get -> Microsoft.Maui.ScrollBarVisibility
Microsoft.Maui.IScrollView.Orientation.get -> Microsoft.Maui.ScrollOrientation
Microsoft.Maui.IScrollView.RequestScrollTo(double horizontalOffset, double verticalOffset, bool instant) -> void
Microsoft.Maui.IScrollView.ScrollFinished() -> void
Microsoft.Maui.IScrollView.VerticalOffset.get -> double
Microsoft.Maui.IScrollView.VerticalOffset.set -> void
Microsoft.Maui.IScrollView.VerticalScrollBarVisibility.get -> Microsoft.Maui.ScrollBarVisibility
Microsoft.Maui.ISearchBar
Microsoft.Maui.ISearchBar.CancelButtonColor.get -> Microsoft.Maui.Graphics.Color!
Microsoft.Maui.ISearchBar.SearchButtonPressed() -> void
Microsoft.Maui.IShadow
Microsoft.Maui.IShadow.Offset.get -> Microsoft.Maui.Graphics.Point
Microsoft.Maui.IShadow.Opacity.get -> float
Microsoft.Maui.IShadow.Paint.get -> Microsoft.Maui.Graphics.Paint!
Microsoft.Maui.IShadow.Radius.get -> float
Microsoft.Maui.IShapeView
Microsoft.Maui.IShapeView.Aspect.get -> Microsoft.Maui.PathAspect
Microsoft.Maui.IShapeView.Fill.get -> Microsoft.Maui.Graphics.Paint?
Microsoft.Maui.IShapeView.Shape.get -> Microsoft.Maui.Graphics.IShape?
Microsoft.Maui.ISlider
Microsoft.Maui.ISlider.DragCompleted() -> void
Microsoft.Maui.ISlider.DragStarted() -> void
Microsoft.Maui.ISlider.MaximumTrackColor.get -> Microsoft.Maui.Graphics.Color!
Microsoft.Maui.ISlider.MinimumTrackColor.get -> Microsoft.Maui.Graphics.Color!
Microsoft.Maui.ISlider.ThumbColor.get -> Microsoft.Maui.Graphics.Color!
Microsoft.Maui.ISlider.ThumbImageSource.get -> Microsoft.Maui.IImageSource!
Microsoft.Maui.IStackLayout
Microsoft.Maui.IStackLayout.Spacing.get -> double
Microsoft.Maui.IStackNavigation
Microsoft.Maui.IStackNavigation.NavigationFinished(System.Collections.Generic.IReadOnlyList<Microsoft.Maui.IView!>! newStack) -> void
Microsoft.Maui.IStackNavigation.RequestNavigation(Microsoft.Maui.NavigationRequest! eventArgs) -> void
Microsoft.Maui.IStackNavigationView
Microsoft.Maui.IStepper
Microsoft.Maui.IStepper.Interval.get -> double
Microsoft.Maui.IStreamImageSource
Microsoft.Maui.IStreamImageSource.GetStreamAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<System.IO.Stream!>!
Microsoft.Maui.IStroke
Microsoft.Maui.IStroke.Stroke.get -> Microsoft.Maui.Graphics.Paint?
Microsoft.Maui.IStroke.StrokeDashOffset.get -> float
Microsoft.Maui.IStroke.StrokeDashPattern.get -> float[]?
Microsoft.Maui.IStroke.StrokeLineCap.get -> Microsoft.Maui.Graphics.LineCap
Microsoft.Maui.IStroke.StrokeLineJoin.get -> Microsoft.Maui.Graphics.LineJoin
Microsoft.Maui.IStroke.StrokeMiterLimit.get -> float
Microsoft.Maui.IStroke.StrokeThickness.get -> double
Microsoft.Maui.ISwipeItem
Microsoft.Maui.ISwipeItem.AutomationId.get -> string!
Microsoft.Maui.ISwipeItem.OnInvoked() -> void
Microsoft.Maui.ISwipeItemMenuItem
Microsoft.Maui.ISwipeItemMenuItem.Background.get -> Microsoft.Maui.Graphics.Paint?
Microsoft.Maui.ISwipeItemMenuItem.Visibility.get -> Microsoft.Maui.Visibility
Microsoft.Maui.ISwipeItems
Microsoft.Maui.ISwipeItems.Mode.get -> Microsoft.Maui.SwipeMode
Microsoft.Maui.ISwipeItems.SwipeBehaviorOnInvoked.get -> Microsoft.Maui.SwipeBehaviorOnInvoked
Microsoft.Maui.ISwipeItemView
Microsoft.Maui.ISwipeView
Microsoft.Maui.ISwipeView.BottomItems.get -> Microsoft.Maui.ISwipeItems!
Microsoft.Maui.ISwipeView.IsOpen.get -> bool
Microsoft.Maui.ISwipeView.IsOpen.set -> void
Microsoft.Maui.ISwipeView.LeftItems.get -> Microsoft.Maui.ISwipeItems!
Microsoft.Maui.ISwipeView.RequestClose(Microsoft.Maui.SwipeViewCloseRequest! swipeCloseRequest) -> void
Microsoft.Maui.ISwipeView.RequestOpen(Microsoft.Maui.SwipeViewOpenRequest! swipeOpenRequest) -> void
Microsoft.Maui.ISwipeView.RightItems.get -> Microsoft.Maui.ISwipeItems!
Microsoft.Maui.ISwipeView.SwipeChanging(Microsoft.Maui.SwipeViewSwipeChanging! swipeChanging) -> void
Microsoft.Maui.ISwipeView.SwipeEnded(Microsoft.Maui.SwipeViewSwipeEnded! swipeEnded) -> void
Microsoft.Maui.ISwipeView.SwipeStarted(Microsoft.Maui.SwipeViewSwipeStarted! swipeStarted) -> void
Microsoft.Maui.ISwipeView.SwipeTransitionMode.get -> Microsoft.Maui.SwipeTransitionMode
Microsoft.Maui.ISwipeView.Threshold.get -> double
Microsoft.Maui.ISwipeView.TopItems.get -> Microsoft.Maui.ISwipeItems!
Microsoft.Maui.ISwitch
Microsoft.Maui.ISwitch.IsOn.get -> bool
Microsoft.Maui.ISwitch.IsOn.set -> void
Microsoft.Maui.ISwitch.ThumbColor.get -> Microsoft.Maui.Graphics.Color!
Microsoft.Maui.ISwitch.TrackColor.get -> Microsoft.Maui.Graphics.Color!
Microsoft.Maui.ITabbedView
Microsoft.Maui.ItemDelegateList<T>
Microsoft.Maui.ItemDelegateList<T>.Count.get -> int
Microsoft.Maui.ItemDelegateList<T>.GetEnumerator() -> System.Collections.Generic.IEnumerator<T>!
Microsoft.Maui.ItemDelegateList<T>.ItemDelegate.get -> Microsoft.Maui.IItemDelegate<T>!
Microsoft.Maui.ItemDelegateList<T>.ItemDelegateList(Microsoft.Maui.IItemDelegate<T>! itemDelegate) -> void
Microsoft.Maui.ItemDelegateList<T>.this[int index].get -> T
Microsoft.Maui.ITemplatedIndicatorView
Microsoft.Maui.ITemplatedIndicatorView.IndicatorsLayoutOverride.get -> Microsoft.Maui.ILayout?
Microsoft.Maui.IText
Microsoft.Maui.IText.Text.get -> string!
Microsoft.Maui.ITextAlignment
Microsoft.Maui.ITextAlignment.HorizontalTextAlignment.get -> Microsoft.Maui.TextAlignment
Microsoft.Maui.ITextAlignment.VerticalTextAlignment.get -> Microsoft.Maui.TextAlignment
Microsoft.Maui.ITextButton
Microsoft.Maui.ITextInput
Microsoft.Maui.ITextInput.CursorPosition.get -> int
Microsoft.Maui.ITextInput.CursorPosition.set -> void
Microsoft.Maui.ITextInput.IsReadOnly.get -> bool
Microsoft.Maui.ITextInput.IsSpellCheckEnabled.get -> bool
Microsoft.Maui.ITextInput.IsTextPredictionEnabled.get -> bool
Microsoft.Maui.ITextInput.Keyboard.get -> Microsoft.Maui.Keyboard!
Microsoft.Maui.ITextInput.MaxLength.get -> int
Microsoft.Maui.ITextInput.SelectionLength.get -> int
Microsoft.Maui.ITextInput.SelectionLength.set -> void
Microsoft.Maui.ITextInput.Text.get -> string!
Microsoft.Maui.ITextInput.Text.set -> void
Microsoft.Maui.ITextInputExtensions
Microsoft.Maui.ITextStyle
Microsoft.Maui.ITextStyle.CharacterSpacing.get -> double
Microsoft.Maui.ITextStyle.Font.get -> Microsoft.Maui.Font
Microsoft.Maui.ITextStyle.TextColor.get -> Microsoft.Maui.Graphics.Color!
Microsoft.Maui.ITimePicker
Microsoft.Maui.ITimePicker.Format.get -> string!
Microsoft.Maui.ITimePicker.Time.get -> System.TimeSpan
Microsoft.Maui.ITimePicker.Time.set -> void
Microsoft.Maui.ITitledElement
Microsoft.Maui.ITitledElement.Title.get -> string?
Microsoft.Maui.IToolbar
Microsoft.Maui.IToolbar.BackButtonVisible.get -> bool
Microsoft.Maui.IToolbar.BackButtonVisible.set -> void
Microsoft.Maui.IToolbar.IsVisible.get -> bool
Microsoft.Maui.IToolbar.IsVisible.set -> void
Microsoft.Maui.IToolbar.Title.get -> string!
Microsoft.Maui.IToolbarElement
Microsoft.Maui.IToolbarElement.Toolbar.get -> Microsoft.Maui.IToolbar?
Microsoft.Maui.IToolTipElement
Microsoft.Maui.IToolTipElement.ToolTip.get -> Microsoft.Maui.ToolTip?
Microsoft.Maui.ITransform
Microsoft.Maui.ITransform.AnchorX.get -> double
Microsoft.Maui.ITransform.AnchorY.get -> double
Microsoft.Maui.ITransform.Rotation.get -> double
Microsoft.Maui.ITransform.RotationX.get -> double
Microsoft.Maui.ITransform.RotationY.get -> double
Microsoft.Maui.ITransform.Scale.get -> double
Microsoft.Maui.ITransform.ScaleX.get -> double
Microsoft.Maui.ITransform.ScaleY.get -> double
Microsoft.Maui.ITransform.TranslationX.get -> double
Microsoft.Maui.ITransform.TranslationY.get -> double
Microsoft.Maui.IUriImageSource
Microsoft.Maui.IUriImageSource.CacheValidity.get -> System.TimeSpan
Microsoft.Maui.IUriImageSource.CachingEnabled.get -> bool
Microsoft.Maui.IUriImageSource.Uri.get -> System.Uri!
Microsoft.Maui.IView
Microsoft.Maui.IView.Arrange(Microsoft.Maui.Graphics.Rect bounds) -> Microsoft.Maui.Graphics.Size
Microsoft.Maui.IView.AutomationId.get -> string!
Microsoft.Maui.IView.Background.get -> Microsoft.Maui.Graphics.Paint?
Microsoft.Maui.IView.Clip.get -> Microsoft.Maui.Graphics.IShape?
Microsoft.Maui.IView.DesiredSize.get -> Microsoft.Maui.Graphics.Size
Microsoft.Maui.IView.FlowDirection.get -> Microsoft.Maui.FlowDirection
Microsoft.Maui.IView.Focus() -> bool
Microsoft.Maui.IView.Frame.get -> Microsoft.Maui.Graphics.Rect
Microsoft.Maui.IView.Frame.set -> void
Microsoft.Maui.IView.Handler.get -> Microsoft.Maui.IViewHandler?
Microsoft.Maui.IView.Handler.set -> void
Microsoft.Maui.IView.Height.get -> double
Microsoft.Maui.IView.HorizontalLayoutAlignment.get -> Microsoft.Maui.Primitives.LayoutAlignment
Microsoft.Maui.IView.InputTransparent.get -> bool
Microsoft.Maui.IView.InvalidateArrange() -> void
Microsoft.Maui.IView.InvalidateMeasure() -> void
Microsoft.Maui.IView.IsEnabled.get -> bool
Microsoft.Maui.IView.IsFocused.get -> bool
Microsoft.Maui.IView.IsFocused.set -> void
Microsoft.Maui.IView.Margin.get -> Microsoft.Maui.Thickness
Microsoft.Maui.IView.MaximumHeight.get -> double
Microsoft.Maui.IView.MaximumWidth.get -> double
Microsoft.Maui.IView.Measure(double widthConstraint, double heightConstraint) -> Microsoft.Maui.Graphics.Size
Microsoft.Maui.IView.MinimumHeight.get -> double
Microsoft.Maui.IView.MinimumWidth.get -> double
Microsoft.Maui.IView.Opacity.get -> double
Microsoft.Maui.IView.Semantics.get -> Microsoft.Maui.Semantics?
Microsoft.Maui.IView.Shadow.get -> Microsoft.Maui.IShadow?
Microsoft.Maui.IView.Unfocus() -> void
Microsoft.Maui.IView.VerticalLayoutAlignment.get -> Microsoft.Maui.Primitives.LayoutAlignment
Microsoft.Maui.IView.Visibility.get -> Microsoft.Maui.Visibility
Microsoft.Maui.IView.Width.get -> double
Microsoft.Maui.IView.ZIndex.get -> int
Microsoft.Maui.IViewHandler
Microsoft.Maui.IViewHandler.ContainerView.get -> object?
Microsoft.Maui.IViewHandler.GetDesiredSize(double widthConstraint, double heightConstraint) -> Microsoft.Maui.Graphics.Size
Microsoft.Maui.IViewHandler.HasContainer.get -> bool
Microsoft.Maui.IViewHandler.HasContainer.set -> void
Microsoft.Maui.IViewHandler.PlatformArrange(Microsoft.Maui.Graphics.Rect frame) -> void
Microsoft.Maui.IViewHandler.VirtualView.get -> Microsoft.Maui.IView?
Microsoft.Maui.IVisualDiagnosticsOverlay
Microsoft.Maui.IVisualDiagnosticsOverlay.AddAdorner(Microsoft.Maui.IAdorner! adorner, bool scrollToElement) -> bool
Microsoft.Maui.IVisualDiagnosticsOverlay.AddAdorner(Microsoft.Maui.IVisualTreeElement! visualElement, bool scrollToElement) -> bool
Microsoft.Maui.IVisualDiagnosticsOverlay.AddScrollableElementHandler(Microsoft.Maui.IScrollView! view) -> void
Microsoft.Maui.IVisualDiagnosticsOverlay.AddScrollableElementHandlers() -> void
Microsoft.Maui.IVisualDiagnosticsOverlay.EnableElementSelector.get -> bool
Microsoft.Maui.IVisualDiagnosticsOverlay.EnableElementSelector.set -> void
Microsoft.Maui.IVisualDiagnosticsOverlay.Offset.get -> Microsoft.Maui.Graphics.Point
Microsoft.Maui.IVisualDiagnosticsOverlay.RemoveAdorner(Microsoft.Maui.IAdorner! adorner) -> bool
Microsoft.Maui.IVisualDiagnosticsOverlay.RemoveAdorners() -> void
Microsoft.Maui.IVisualDiagnosticsOverlay.RemoveAdorners(Microsoft.Maui.IVisualTreeElement! visualElement) -> bool
Microsoft.Maui.IVisualDiagnosticsOverlay.RemoveScrollableElementHandler() -> void
Microsoft.Maui.IVisualDiagnosticsOverlay.ScrollToElement.get -> bool
Microsoft.Maui.IVisualDiagnosticsOverlay.ScrollToElement.set -> void
Microsoft.Maui.IVisualDiagnosticsOverlay.ScrollToView(Microsoft.Maui.IVisualTreeElement! element) -> void
Microsoft.Maui.IVisualDiagnosticsOverlay.ScrollViews.get -> System.Collections.Generic.IReadOnlyCollection<Microsoft.Maui.IScrollView!>!
Microsoft.Maui.IVisualTreeElement
Microsoft.Maui.IVisualTreeElement.GetVisualChildren() -> System.Collections.Generic.IReadOnlyList<Microsoft.Maui.IVisualTreeElement!>!
Microsoft.Maui.IVisualTreeElement.GetVisualParent() -> Microsoft.Maui.IVisualTreeElement?
Microsoft.Maui.IWebView
Microsoft.Maui.IWebView.CanGoBack.get -> bool
Microsoft.Maui.IWebView.CanGoBack.set -> void
Microsoft.Maui.IWebView.CanGoForward.get -> bool
Microsoft.Maui.IWebView.CanGoForward.set -> void
Microsoft.Maui.IWebView.Cookies.get -> System.Net.CookieContainer!
Microsoft.Maui.IWebView.Eval(string! script) -> void
Microsoft.Maui.IWebView.EvaluateJavaScriptAsync(string! script) -> System.Threading.Tasks.Task<string!>!
Microsoft.Maui.IWebView.GoBack() -> void
Microsoft.Maui.IWebView.GoForward() -> void
Microsoft.Maui.IWebView.Navigated(Microsoft.Maui.WebNavigationEvent evnt, string! url, Microsoft.Maui.WebNavigationResult result) -> void
Microsoft.Maui.IWebView.Navigating(Microsoft.Maui.WebNavigationEvent evnt, string! url) -> bool
Microsoft.Maui.IWebView.Reload() -> void
Microsoft.Maui.IWebView.Source.get -> Microsoft.Maui.IWebViewSource!
Microsoft.Maui.IWebView.UserAgent.get -> string?
Microsoft.Maui.IWebView.UserAgent.set -> void
Microsoft.Maui.IWebViewDelegate
Microsoft.Maui.IWebViewDelegate.LoadHtml(string? html, string? baseUrl) -> void
Microsoft.Maui.IWebViewDelegate.LoadUrl(string? url) -> void
Microsoft.Maui.IWebViewSource
Microsoft.Maui.IWebViewSource.Load(Microsoft.Maui.IWebViewDelegate! webViewDelegate) -> void
Microsoft.Maui.IWindow
Microsoft.Maui.IWindow.Activated() -> void
Microsoft.Maui.IWindow.AddOverlay(Microsoft.Maui.IWindowOverlay! overlay) -> bool
Microsoft.Maui.IWindow.BackButtonClicked() -> bool
Microsoft.Maui.IWindow.Backgrounding(Microsoft.Maui.IPersistedState! state) -> void
Microsoft.Maui.IWindow.Content.get -> Microsoft.Maui.IView!
Microsoft.Maui.IWindow.Created() -> void
Microsoft.Maui.IWindow.Deactivated() -> void
Microsoft.Maui.IWindow.Destroying() -> void
Microsoft.Maui.IWindow.DisplayDensityChanged(float displayDensity) -> void
Microsoft.Maui.IWindow.FlowDirection.get -> Microsoft.Maui.FlowDirection
Microsoft.Maui.IWindow.FrameChanged(Microsoft.Maui.Graphics.Rect frame) -> void
Microsoft.Maui.IWindow.Height.get -> double
Microsoft.Maui.IWindow.MaximumHeight.get -> double
Microsoft.Maui.IWindow.MaximumWidth.get -> double
Microsoft.Maui.IWindow.MinimumHeight.get -> double
Microsoft.Maui.IWindow.MinimumWidth.get -> double
Microsoft.Maui.IWindow.Overlays.get -> System.Collections.Generic.IReadOnlyCollection<Microsoft.Maui.IWindowOverlay!>!
Microsoft.Maui.IWindow.RemoveOverlay(Microsoft.Maui.IWindowOverlay! overlay) -> bool
Microsoft.Maui.IWindow.RequestDisplayDensity() -> float
Microsoft.Maui.IWindow.Resumed() -> void
Microsoft.Maui.IWindow.Stopped() -> void
Microsoft.Maui.IWindow.VisualDiagnosticsOverlay.get -> Microsoft.Maui.IVisualDiagnosticsOverlay!
Microsoft.Maui.IWindow.Width.get -> double
Microsoft.Maui.IWindow.X.get -> double
Microsoft.Maui.IWindow.Y.get -> double
Microsoft.Maui.IWindowOverlay
Microsoft.Maui.IWindowOverlay.AddWindowElement(Microsoft.Maui.IWindowOverlayElement! element) -> bool
Microsoft.Maui.IWindowOverlay.Deinitialize() -> bool
Microsoft.Maui.IWindowOverlay.Density.get -> float
Microsoft.Maui.IWindowOverlay.DisableUITouchEventPassthrough.get -> bool
Microsoft.Maui.IWindowOverlay.DisableUITouchEventPassthrough.set -> void
Microsoft.Maui.IWindowOverlay.EnableDrawableTouchHandling.get -> bool
Microsoft.Maui.IWindowOverlay.EnableDrawableTouchHandling.set -> void
Microsoft.Maui.IWindowOverlay.HandleUIChange() -> void
Microsoft.Maui.IWindowOverlay.Initialize() -> bool
Microsoft.Maui.IWindowOverlay.Invalidate() -> void
Microsoft.Maui.IWindowOverlay.IsPlatformViewInitialized.get -> bool
Microsoft.Maui.IWindowOverlay.IsVisible.get -> bool
Microsoft.Maui.IWindowOverlay.IsVisible.set -> void
Microsoft.Maui.IWindowOverlay.RemoveWindowElement(Microsoft.Maui.IWindowOverlayElement! element) -> bool
Microsoft.Maui.IWindowOverlay.RemoveWindowElements() -> void
Microsoft.Maui.IWindowOverlay.Tapped -> System.EventHandler<Microsoft.Maui.WindowOverlayTappedEventArgs!>!
Microsoft.Maui.IWindowOverlay.Window.get -> Microsoft.Maui.IWindow!
Microsoft.Maui.IWindowOverlay.WindowElements.get -> System.Collections.Generic.IReadOnlyCollection<Microsoft.Maui.IWindowOverlayElement!>!
Microsoft.Maui.IWindowOverlayElement
Microsoft.Maui.IWindowOverlayElement.Contains(Microsoft.Maui.Graphics.Point point) -> bool
Microsoft.Maui.Keyboard
Microsoft.Maui.KeyboardAcceleratorModifiers
Microsoft.Maui.KeyboardAcceleratorModifiers.Alt = 4 -> Microsoft.Maui.KeyboardAcceleratorModifiers
Microsoft.Maui.KeyboardAcceleratorModifiers.Cmd = 8 -> Microsoft.Maui.KeyboardAcceleratorModifiers
Microsoft.Maui.KeyboardAcceleratorModifiers.Ctrl = 2 -> Microsoft.Maui.KeyboardAcceleratorModifiers
Microsoft.Maui.KeyboardAcceleratorModifiers.None = 0 -> Microsoft.Maui.KeyboardAcceleratorModifiers
Microsoft.Maui.KeyboardAcceleratorModifiers.Shift = 1 -> Microsoft.Maui.KeyboardAcceleratorModifiers
Microsoft.Maui.KeyboardAcceleratorModifiers.Windows = 16 -> Microsoft.Maui.KeyboardAcceleratorModifiers
Microsoft.Maui.KeyboardFlags
Microsoft.Maui.KeyboardFlags.All = -1 -> Microsoft.Maui.KeyboardFlags
Microsoft.Maui.KeyboardFlags.CapitalizeCharacter = 16 -> Microsoft.Maui.KeyboardFlags
Microsoft.Maui.KeyboardFlags.CapitalizeNone = 32 -> Microsoft.Maui.KeyboardFlags
Microsoft.Maui.KeyboardFlags.CapitalizeSentence = 1 -> Microsoft.Maui.KeyboardFlags
Microsoft.Maui.KeyboardFlags.CapitalizeWord = 8 -> Microsoft.Maui.KeyboardFlags
Microsoft.Maui.KeyboardFlags.None = 0 -> Microsoft.Maui.KeyboardFlags
Microsoft.Maui.KeyboardFlags.Spellcheck = 2 -> Microsoft.Maui.KeyboardFlags
Microsoft.Maui.KeyboardFlags.Suggestions = 4 -> Microsoft.Maui.KeyboardFlags
Microsoft.Maui.Layouts.AbsoluteLayoutFlags
Microsoft.Maui.Layouts.AbsoluteLayoutFlags.All = -1 -> Microsoft.Maui.Layouts.AbsoluteLayoutFlags
Microsoft.Maui.Layouts.AbsoluteLayoutFlags.HeightProportional = 8 -> Microsoft.Maui.Layouts.AbsoluteLayoutFlags
Microsoft.Maui.Layouts.AbsoluteLayoutFlags.None = 0 -> Microsoft.Maui.Layouts.AbsoluteLayoutFlags
Microsoft.Maui.Layouts.AbsoluteLayoutFlags.PositionProportional = Microsoft.Maui.Layouts.AbsoluteLayoutFlags.XProportional | Microsoft.Maui.Layouts.AbsoluteLayoutFlags.YProportional -> Microsoft.Maui.Layouts.AbsoluteLayoutFlags
Microsoft.Maui.Layouts.AbsoluteLayoutFlags.SizeProportional = Microsoft.Maui.Layouts.AbsoluteLayoutFlags.WidthProportional | Microsoft.Maui.Layouts.AbsoluteLayoutFlags.HeightProportional -> Microsoft.Maui.Layouts.AbsoluteLayoutFlags
Microsoft.Maui.Layouts.AbsoluteLayoutFlags.WidthProportional = 4 -> Microsoft.Maui.Layouts.AbsoluteLayoutFlags
Microsoft.Maui.Layouts.AbsoluteLayoutFlags.XProportional = 1 -> Microsoft.Maui.Layouts.AbsoluteLayoutFlags
Microsoft.Maui.Layouts.AbsoluteLayoutFlags.YProportional = 2 -> Microsoft.Maui.Layouts.AbsoluteLayoutFlags
Microsoft.Maui.Layouts.AbsoluteLayoutManager
Microsoft.Maui.Layouts.AbsoluteLayoutManager.AbsoluteLayout.get -> Microsoft.Maui.IAbsoluteLayout!
Microsoft.Maui.Layouts.AbsoluteLayoutManager.AbsoluteLayoutManager(Microsoft.Maui.IAbsoluteLayout! absoluteLayout) -> void
Microsoft.Maui.Layouts.FlexAlignContent
Microsoft.Maui.Layouts.FlexAlignContent.Center = 2 -> Microsoft.Maui.Layouts.FlexAlignContent
Microsoft.Maui.Layouts.FlexAlignContent.End = 4 -> Microsoft.Maui.Layouts.FlexAlignContent
Microsoft.Maui.Layouts.FlexAlignContent.SpaceAround = 6 -> Microsoft.Maui.Layouts.FlexAlignContent
Microsoft.Maui.Layouts.FlexAlignContent.SpaceBetween = 5 -> Microsoft.Maui.Layouts.FlexAlignContent
Microsoft.Maui.Layouts.FlexAlignContent.SpaceEvenly = 7 -> Microsoft.Maui.Layouts.FlexAlignContent
Microsoft.Maui.Layouts.FlexAlignContent.Start = 3 -> Microsoft.Maui.Layouts.FlexAlignContent
Microsoft.Maui.Layouts.FlexAlignContent.Stretch = 1 -> Microsoft.Maui.Layouts.FlexAlignContent
Microsoft.Maui.Layouts.FlexAlignItems
Microsoft.Maui.Layouts.FlexAlignItems.Center = 2 -> Microsoft.Maui.Layouts.FlexAlignItems
Microsoft.Maui.Layouts.FlexAlignItems.End = 4 -> Microsoft.Maui.Layouts.FlexAlignItems
Microsoft.Maui.Layouts.FlexAlignItems.Start = 3 -> Microsoft.Maui.Layouts.FlexAlignItems
Microsoft.Maui.Layouts.FlexAlignItems.Stretch = 1 -> Microsoft.Maui.Layouts.FlexAlignItems
Microsoft.Maui.Layouts.FlexAlignSelf
Microsoft.Maui.Layouts.FlexAlignSelf.Auto = 0 -> Microsoft.Maui.Layouts.FlexAlignSelf
Microsoft.Maui.Layouts.FlexAlignSelf.Center = 2 -> Microsoft.Maui.Layouts.FlexAlignSelf
Microsoft.Maui.Layouts.FlexAlignSelf.End = 4 -> Microsoft.Maui.Layouts.FlexAlignSelf
Microsoft.Maui.Layouts.FlexAlignSelf.Start = 3 -> Microsoft.Maui.Layouts.FlexAlignSelf
Microsoft.Maui.Layouts.FlexAlignSelf.Stretch = 1 -> Microsoft.Maui.Layouts.FlexAlignSelf
Microsoft.Maui.Layouts.FlexBasis
Microsoft.Maui.Layouts.FlexBasis.Equals(Microsoft.Maui.Layouts.FlexBasis other) -> bool
Microsoft.Maui.Layouts.FlexBasis.FlexBasis() -> void
Microsoft.Maui.Layouts.FlexBasis.FlexBasis(float length, bool isRelative = false) -> void
Microsoft.Maui.Layouts.FlexBasis.Length.get -> float
Microsoft.Maui.Layouts.FlexDirection
Microsoft.Maui.Layouts.FlexDirection.Column = 2 -> Microsoft.Maui.Layouts.FlexDirection
Microsoft.Maui.Layouts.FlexDirection.ColumnReverse = 3 -> Microsoft.Maui.Layouts.FlexDirection
Microsoft.Maui.Layouts.FlexDirection.Row = 0 -> Microsoft.Maui.Layouts.FlexDirection
Microsoft.Maui.Layouts.FlexDirection.RowReverse = 1 -> Microsoft.Maui.Layouts.FlexDirection
Microsoft.Maui.Layouts.FlexJustify
Microsoft.Maui.Layouts.FlexJustify.Center = 2 -> Microsoft.Maui.Layouts.FlexJustify
Microsoft.Maui.Layouts.FlexJustify.End = 4 -> Microsoft.Maui.Layouts.FlexJustify
Microsoft.Maui.Layouts.FlexJustify.SpaceAround = 6 -> Microsoft.Maui.Layouts.FlexJustify
Microsoft.Maui.Layouts.FlexJustify.SpaceBetween = 5 -> Microsoft.Maui.Layouts.FlexJustify
Microsoft.Maui.Layouts.FlexJustify.SpaceEvenly = 7 -> Microsoft.Maui.Layouts.FlexJustify
Microsoft.Maui.Layouts.FlexJustify.Start = 3 -> Microsoft.Maui.Layouts.FlexJustify
Microsoft.Maui.Layouts.FlexLayoutManager
Microsoft.Maui.Layouts.FlexLayoutManager.ArrangeChildren(Microsoft.Maui.Graphics.Rect bounds) -> Microsoft.Maui.Graphics.Size
Microsoft.Maui.Layouts.FlexLayoutManager.FlexLayoutManager(Microsoft.Maui.IFlexLayout! flexLayout) -> void
Microsoft.Maui.Layouts.FlexLayoutManager.Measure(double widthConstraint, double heightConstraint) -> Microsoft.Maui.Graphics.Size
Microsoft.Maui.Layouts.FlexPosition
Microsoft.Maui.Layouts.FlexPosition.Absolute = 1 -> Microsoft.Maui.Layouts.FlexPosition
Microsoft.Maui.Layouts.FlexPosition.Relative = 0 -> Microsoft.Maui.Layouts.FlexPosition
Microsoft.Maui.Layouts.FlexWrap
Microsoft.Maui.Layouts.FlexWrap.NoWrap = 0 -> Microsoft.Maui.Layouts.FlexWrap
Microsoft.Maui.Layouts.FlexWrap.Reverse = 2 -> Microsoft.Maui.Layouts.FlexWrap
Microsoft.Maui.Layouts.FlexWrap.Wrap = 1 -> Microsoft.Maui.Layouts.FlexWrap
Microsoft.Maui.Layouts.GridLayoutManager
Microsoft.Maui.Layouts.GridLayoutManager.Grid.get -> Microsoft.Maui.IGridLayout!
Microsoft.Maui.Layouts.GridLayoutManager.GridLayoutManager(Microsoft.Maui.IGridLayout! layout) -> void
Microsoft.Maui.Layouts.HorizontalStackLayoutManager
Microsoft.Maui.Layouts.HorizontalStackLayoutManager.HorizontalStackLayoutManager(Microsoft.Maui.IStackLayout! layout) -> void
Microsoft.Maui.Layouts.ILayoutManager
Microsoft.Maui.Layouts.ILayoutManager.ArrangeChildren(Microsoft.Maui.Graphics.Rect bounds) -> Microsoft.Maui.Graphics.Size
Microsoft.Maui.Layouts.ILayoutManager.Measure(double widthConstraint, double heightConstraint) -> Microsoft.Maui.Graphics.Size
Microsoft.Maui.Layouts.LayoutExtensions
Microsoft.Maui.Layouts.LayoutManager
Microsoft.Maui.Layouts.LayoutManager.Layout.get -> Microsoft.Maui.ILayout!
Microsoft.Maui.Layouts.LayoutManager.LayoutManager(Microsoft.Maui.ILayout! layout) -> void
Microsoft.Maui.Layouts.StackLayoutManager
Microsoft.Maui.Layouts.StackLayoutManager.Stack.get -> Microsoft.Maui.IStackLayout!
Microsoft.Maui.Layouts.StackLayoutManager.StackLayoutManager(Microsoft.Maui.IStackLayout! stack) -> void
Microsoft.Maui.Layouts.VerticalStackLayoutManager
Microsoft.Maui.Layouts.VerticalStackLayoutManager.VerticalStackLayoutManager(Microsoft.Maui.IStackLayout! stackLayout) -> void
Microsoft.Maui.LifecycleEvents.AppHostBuilderExtensions
Microsoft.Maui.LifecycleEvents.IiOSLifecycleBuilder
Microsoft.Maui.LifecycleEvents.ILifecycleBuilder
Microsoft.Maui.LifecycleEvents.ILifecycleBuilder.AddEvent<TDelegate>(string! eventName, TDelegate! action) -> void
Microsoft.Maui.LifecycleEvents.ILifecycleEventService
Microsoft.Maui.LifecycleEvents.ILifecycleEventService.ContainsEvent(string! eventName) -> bool
Microsoft.Maui.LifecycleEvents.ILifecycleEventService.GetEventDelegates<TDelegate>(string! eventName) -> System.Collections.Generic.IEnumerable<TDelegate!>!
Microsoft.Maui.LifecycleEvents.iOSLifecycle
Microsoft.Maui.LifecycleEvents.iOSLifecycle.ApplicationSignificantTimeChange
Microsoft.Maui.LifecycleEvents.iOSLifecycle.ContinueUserActivity
Microsoft.Maui.LifecycleEvents.iOSLifecycle.DidEnterBackground
Microsoft.Maui.LifecycleEvents.iOSLifecycle.FinishedLaunching
Microsoft.Maui.LifecycleEvents.iOSLifecycle.OnActivated
Microsoft.Maui.LifecycleEvents.iOSLifecycle.OnResignActivation
Microsoft.Maui.LifecycleEvents.iOSLifecycle.OpenUrl
Microsoft.Maui.LifecycleEvents.iOSLifecycle.PerformActionForShortcutItem
Microsoft.Maui.LifecycleEvents.iOSLifecycle.PerformFetch
Microsoft.Maui.LifecycleEvents.iOSLifecycle.SceneContinueUserActivity
Microsoft.Maui.LifecycleEvents.iOSLifecycle.SceneDidDisconnect
Microsoft.Maui.LifecycleEvents.iOSLifecycle.SceneDidEnterBackground
Microsoft.Maui.LifecycleEvents.iOSLifecycle.SceneDidFailToContinueUserActivity
Microsoft.Maui.LifecycleEvents.iOSLifecycle.SceneDidUpdateUserActivity
Microsoft.Maui.LifecycleEvents.iOSLifecycle.SceneOnActivated
Microsoft.Maui.LifecycleEvents.iOSLifecycle.SceneOnResignActivation
Microsoft.Maui.LifecycleEvents.iOSLifecycle.SceneOpenUrl
Microsoft.Maui.LifecycleEvents.iOSLifecycle.SceneRestoreInteractionState
Microsoft.Maui.LifecycleEvents.iOSLifecycle.SceneWillConnect
Microsoft.Maui.LifecycleEvents.iOSLifecycle.SceneWillContinueUserActivity
Microsoft.Maui.LifecycleEvents.iOSLifecycle.SceneWillEnterForeground
Microsoft.Maui.LifecycleEvents.iOSLifecycle.WillEnterForeground
Microsoft.Maui.LifecycleEvents.iOSLifecycle.WillFinishLaunching
Microsoft.Maui.LifecycleEvents.iOSLifecycle.WillTerminate
Microsoft.Maui.LifecycleEvents.iOSLifecycle.WindowSceneDidUpdateCoordinateSpace
Microsoft.Maui.LifecycleEvents.iOSLifecycleBuilderExtensions
Microsoft.Maui.LifecycleEvents.iOSLifecycleExtensions
Microsoft.Maui.LifecycleEvents.LifecycleBuilderExtensions
Microsoft.Maui.LifecycleEvents.LifecycleEventRegistration
Microsoft.Maui.LifecycleEvents.LifecycleEventRegistration.LifecycleEventRegistration(System.Action<Microsoft.Maui.LifecycleEvents.ILifecycleBuilder!>! registerAction) -> void
Microsoft.Maui.LifecycleEvents.LifecycleEventService
Microsoft.Maui.LifecycleEvents.LifecycleEventService.AddEvent<TDelegate>(string! eventName, TDelegate! action) -> void
Microsoft.Maui.LifecycleEvents.LifecycleEventService.ContainsEvent(string! eventName) -> bool
Microsoft.Maui.LifecycleEvents.LifecycleEventService.GetEventDelegates<TDelegate>(string! eventName) -> System.Collections.Generic.IEnumerable<TDelegate!>!
Microsoft.Maui.LifecycleEvents.LifecycleEventService.LifecycleEventService(System.Collections.Generic.IEnumerable<Microsoft.Maui.LifecycleEvents.LifecycleEventRegistration!>! registrations) -> void
Microsoft.Maui.LifecycleEvents.LifecycleEventServiceExtensions
Microsoft.Maui.LifecycleEvents.MauiAppHostBuilderExtensions
Microsoft.Maui.LineBreakMode
Microsoft.Maui.LineBreakMode.CharacterWrap = 2 -> Microsoft.Maui.LineBreakMode
Microsoft.Maui.LineBreakMode.HeadTruncation = 3 -> Microsoft.Maui.LineBreakMode
Microsoft.Maui.LineBreakMode.MiddleTruncation = 5 -> Microsoft.Maui.LineBreakMode
Microsoft.Maui.LineBreakMode.NoWrap = 0 -> Microsoft.Maui.LineBreakMode
Microsoft.Maui.LineBreakMode.TailTruncation = 4 -> Microsoft.Maui.LineBreakMode
Microsoft.Maui.LineBreakMode.WordWrap = 1 -> Microsoft.Maui.LineBreakMode
Microsoft.Maui.LockableObservableListWrapper
Microsoft.Maui.LockableObservableListWrapper.Add(string! item) -> void
Microsoft.Maui.LockableObservableListWrapper.Clear() -> void
Microsoft.Maui.LockableObservableListWrapper.Contains(string! item) -> bool
Microsoft.Maui.LockableObservableListWrapper.CopyTo(string![]! array, int arrayIndex) -> void
Microsoft.Maui.LockableObservableListWrapper.Count.get -> int
Microsoft.Maui.LockableObservableListWrapper.GetEnumerator() -> System.Collections.Generic.IEnumerator<string!>!
Microsoft.Maui.LockableObservableListWrapper.IndexOf(string! item) -> int
Microsoft.Maui.LockableObservableListWrapper.Insert(int index, string! item) -> void
Microsoft.Maui.LockableObservableListWrapper.InternalAdd(string! item) -> void
Microsoft.Maui.LockableObservableListWrapper.InternalClear() -> void
Microsoft.Maui.LockableObservableListWrapper.InternalInsert(int index, string! item) -> void
Microsoft.Maui.LockableObservableListWrapper.InternalRemove(string! item) -> bool
Microsoft.Maui.LockableObservableListWrapper.InternalRemoveAt(int index) -> void
Microsoft.Maui.LockableObservableListWrapper.IsLocked.get -> bool
Microsoft.Maui.LockableObservableListWrapper.IsLocked.set -> void
Microsoft.Maui.LockableObservableListWrapper.IsReadOnly.get -> bool
Microsoft.Maui.LockableObservableListWrapper.LockableObservableListWrapper() -> void
Microsoft.Maui.LockableObservableListWrapper.Remove(string! item) -> bool
Microsoft.Maui.LockableObservableListWrapper.RemoveAt(int index) -> void
Microsoft.Maui.LockableObservableListWrapper.this[int index].get -> string!
Microsoft.Maui.LockableObservableListWrapper.this[int index].set -> void
Microsoft.Maui.MauiContext
Microsoft.Maui.MauiContext.Handlers.get -> Microsoft.Maui.IMauiHandlersFactory!
Microsoft.Maui.MauiContext.MauiContext(System.IServiceProvider! services) -> void
Microsoft.Maui.MauiContext.Services.get -> System.IServiceProvider!
Microsoft.Maui.MauiUIApplicationDelegate
Microsoft.Maui.MauiUIApplicationDelegate.Application.get -> Microsoft.Maui.IApplication!
Microsoft.Maui.MauiUIApplicationDelegate.Application.set -> void
Microsoft.Maui.MauiUIApplicationDelegate.MauiUIApplicationDelegate() -> void
Microsoft.Maui.MauiUIApplicationDelegate.Services.get -> System.IServiceProvider!
Microsoft.Maui.MauiUIApplicationDelegate.Services.set -> void
Microsoft.Maui.MauiUISceneDelegate
Microsoft.Maui.MauiUISceneDelegate.MauiUISceneDelegate() -> void
Microsoft.Maui.MissingMapperAttribute
Microsoft.Maui.MissingMapperAttribute.Description.get -> string?
Microsoft.Maui.MissingMapperAttribute.Description.set -> void
Microsoft.Maui.MissingMapperAttribute.MissingMapperAttribute() -> void
Microsoft.Maui.MissingMapperAttribute.MissingMapperAttribute(string! description) -> void
Microsoft.Maui.NavigationRequest
Microsoft.Maui.NavigationRequest.Animated.get -> bool
Microsoft.Maui.NavigationRequest.NavigationRequest(System.Collections.Generic.IReadOnlyList<Microsoft.Maui.IView!>! newNavigationStack, bool animated) -> void
Microsoft.Maui.NavigationRequest.NavigationStack.get -> System.Collections.Generic.IReadOnlyList<Microsoft.Maui.IView!>!
Microsoft.Maui.OpenSwipeItem
Microsoft.Maui.OpenSwipeItem.BottomItems = 3 -> Microsoft.Maui.OpenSwipeItem
Microsoft.Maui.OpenSwipeItem.LeftItems = 0 -> Microsoft.Maui.OpenSwipeItem
Microsoft.Maui.OpenSwipeItem.RightItems = 2 -> Microsoft.Maui.OpenSwipeItem
Microsoft.Maui.OpenSwipeItem.TopItems = 1 -> Microsoft.Maui.OpenSwipeItem
Microsoft.Maui.PathAspect
Microsoft.Maui.PathAspect.AspectFill = 4 -> Microsoft.Maui.PathAspect
Microsoft.Maui.PathAspect.AspectFit = 3 -> Microsoft.Maui.PathAspect
Microsoft.Maui.PathAspect.Center = 1 -> Microsoft.Maui.PathAspect
Microsoft.Maui.PathAspect.None = 0 -> Microsoft.Maui.PathAspect
Microsoft.Maui.PathAspect.Stretch = 2 -> Microsoft.Maui.PathAspect
Microsoft.Maui.PersistedState
Microsoft.Maui.PersistedState.PersistedState() -> void
Microsoft.Maui.Platform.ActivityIndicatorExtensions
Microsoft.Maui.Platform.ApplicationExtensions
Microsoft.Maui.Platform.AspectExtensions
Microsoft.Maui.Platform.AttributedStringExtensions
Microsoft.Maui.Platform.ButtonExtensions
Microsoft.Maui.Platform.CheckBoxExtensions
Microsoft.Maui.Platform.CollectionViewExtensions
Microsoft.Maui.Platform.ColorExtensions
Microsoft.Maui.Platform.ContainerViewController
Microsoft.Maui.Platform.ContainerViewController.ContainerViewController() -> void
Microsoft.Maui.Platform.ContainerViewController.Context.get -> Microsoft.Maui.IMauiContext?
Microsoft.Maui.Platform.ContainerViewController.Context.set -> void
Microsoft.Maui.Platform.ContainerViewController.CurrentPlatformView.get -> UIKit.UIView?
Microsoft.Maui.Platform.ContainerViewController.CurrentView.get -> Microsoft.Maui.IElement?
Microsoft.Maui.Platform.ContainerViewController.CurrentView.set -> void
Microsoft.Maui.Platform.ContainerViewController.Reload() -> void
Microsoft.Maui.Platform.ContentView
Microsoft.Maui.Platform.ContentView.ContentView() -> void
Microsoft.Maui.Platform.CoreGraphicsExtensions
Microsoft.Maui.Platform.Culture
Microsoft.Maui.Platform.DateExtensions
Microsoft.Maui.Platform.DatePickerExtensions
Microsoft.Maui.Platform.ElementExtensions
Microsoft.Maui.Platform.FlowDirectionExtensions
Microsoft.Maui.Platform.GraphicsViewExtensions
Microsoft.Maui.Platform.IImageSourcePartSetter
Microsoft.Maui.Platform.IImageSourcePartSetter.Handler.get -> Microsoft.Maui.IElementHandler?
Microsoft.Maui.Platform.IImageSourcePartSetter.ImageSourcePart.get -> Microsoft.Maui.IImageSourcePart?
Microsoft.Maui.Platform.IImageSourcePartSetter.SetImageSource(UIKit.UIImage? platformImage) -> void
Microsoft.Maui.Platform.ImageSourcePartLoader
Microsoft.Maui.Platform.ImageSourcePartLoader.ImageSourcePartLoader(Microsoft.Maui.IElementHandler! handler, System.Func<Microsoft.Maui.IImageSourcePart?>! imageSourcePart, System.Action<UIKit.UIImage?>! setImage) -> void
Microsoft.Maui.Platform.ImageSourcePartLoader.ImageSourcePartLoader(Microsoft.Maui.Platform.IImageSourcePartSetter! setter) -> void
Microsoft.Maui.Platform.ImageSourcePartLoader.Reset() -> void
Microsoft.Maui.Platform.ImageSourcePartLoader.UpdateImageSourceAsync() -> System.Threading.Tasks.Task!
Microsoft.Maui.Platform.ImageViewExtensions
Microsoft.Maui.Platform.KeyboardAutoManagerScroll
Microsoft.Maui.Platform.KeyboardExtensions
Microsoft.Maui.Platform.LabelExtensions
Microsoft.Maui.Platform.LayerExtensions
Microsoft.Maui.Platform.LayoutView
Microsoft.Maui.Platform.LayoutView.LayoutView() -> void
Microsoft.Maui.Platform.LayoutViewExtensions
Microsoft.Maui.Platform.MauiActivityIndicator
Microsoft.Maui.Platform.MauiActivityIndicator.MauiActivityIndicator(CoreGraphics.CGRect rect, Microsoft.Maui.IActivityIndicator? virtualView) -> void
Microsoft.Maui.Platform.MauiBoxView
Microsoft.Maui.Platform.MauiBoxView.MauiBoxView() -> void
Microsoft.Maui.Platform.MauiCALayer
Microsoft.Maui.Platform.MauiCALayer.MauiCALayer() -> void
Microsoft.Maui.Platform.MauiCALayer.SetBackground(Microsoft.Maui.Graphics.ImagePaint! imagePaint) -> void
Microsoft.Maui.Platform.MauiCALayer.SetBackground(Microsoft.Maui.Graphics.LinearGradientPaint! linearGradientPaint) -> void
Microsoft.Maui.Platform.MauiCALayer.SetBackground(Microsoft.Maui.Graphics.Paint? paint) -> void
Microsoft.Maui.Platform.MauiCALayer.SetBackground(Microsoft.Maui.Graphics.PatternPaint! patternPaint) -> void
Microsoft.Maui.Platform.MauiCALayer.SetBackground(Microsoft.Maui.Graphics.RadialGradientPaint! radialGradientPaint) -> void
Microsoft.Maui.Platform.MauiCALayer.SetBackground(Microsoft.Maui.Graphics.SolidPaint! solidPaint) -> void
Microsoft.Maui.Platform.MauiCALayer.SetBorderBrush(Microsoft.Maui.Graphics.ImagePaint! imagePaint) -> void
Microsoft.Maui.Platform.MauiCALayer.SetBorderBrush(Microsoft.Maui.Graphics.LinearGradientPaint! linearGradientPaint) -> void
Microsoft.Maui.Platform.MauiCALayer.SetBorderBrush(Microsoft.Maui.Graphics.Paint? paint) -> void
Microsoft.Maui.Platform.MauiCALayer.SetBorderBrush(Microsoft.Maui.Graphics.PatternPaint! patternPaint) -> void
Microsoft.Maui.Platform.MauiCALayer.SetBorderBrush(Microsoft.Maui.Graphics.RadialGradientPaint! radialGradientPaint) -> void
Microsoft.Maui.Platform.MauiCALayer.SetBorderBrush(Microsoft.Maui.Graphics.SolidPaint! solidPaint) -> void
Microsoft.Maui.Platform.MauiCALayer.SetBorderDash(float[]? borderDashArray, double borderDashOffset) -> void
Microsoft.Maui.Platform.MauiCALayer.SetBorderLineCap(Microsoft.Maui.Graphics.LineCap lineCap) -> void
Microsoft.Maui.Platform.MauiCALayer.SetBorderLineJoin(Microsoft.Maui.Graphics.LineJoin lineJoin) -> void
Microsoft.Maui.Platform.MauiCALayer.SetBorderMiterLimit(float strokeMiterLimit) -> void
Microsoft.Maui.Platform.MauiCALayer.SetBorderShape(Microsoft.Maui.Graphics.IShape? shape) -> void
Microsoft.Maui.Platform.MauiCALayer.SetBorderWidth(double borderWidth) -> void
Microsoft.Maui.Platform.MauiCheckBox
Microsoft.Maui.Platform.MauiCheckBox.CheckBoxTintColor.get -> Microsoft.Maui.Graphics.Color?
Microsoft.Maui.Platform.MauiCheckBox.CheckBoxTintColor.set -> void
Microsoft.Maui.Platform.MauiCheckBox.CheckedChanged -> System.EventHandler?
Microsoft.Maui.Platform.MauiCheckBox.IsChecked.get -> bool
Microsoft.Maui.Platform.MauiCheckBox.IsChecked.set -> void
Microsoft.Maui.Platform.MauiCheckBox.IsEnabled.get -> bool
Microsoft.Maui.Platform.MauiCheckBox.IsEnabled.set -> void
Microsoft.Maui.Platform.MauiCheckBox.MauiCheckBox() -> void
Microsoft.Maui.Platform.MauiDatePicker
Microsoft.Maui.Platform.MauiDatePicker.MauiDatePicker() -> void
Microsoft.Maui.Platform.MauiImageView
Microsoft.Maui.Platform.MauiImageView.MauiImageView() -> void
Microsoft.Maui.Platform.MauiImageView.MauiImageView(CoreGraphics.CGRect frame) -> void
Microsoft.Maui.Platform.MauiImageView.MauiImageView(Microsoft.Maui.Handlers.IImageHandler! handler) -> void
Microsoft.Maui.Platform.MauiImageView.WindowChanged -> System.EventHandler?
Microsoft.Maui.Platform.MauiLabel
Microsoft.Maui.Platform.MauiLabel.MauiLabel() -> void
Microsoft.Maui.Platform.MauiLabel.MauiLabel(CoreGraphics.CGRect frame) -> void
Microsoft.Maui.Platform.MauiLabel.TextInsets.get -> UIKit.UIEdgeInsets
Microsoft.Maui.Platform.MauiLabel.TextInsets.set -> void
Microsoft.Maui.Platform.MauiPageControl
Microsoft.Maui.Platform.MauiPageControl.IndicatorSize.get -> double
Microsoft.Maui.Platform.MauiPageControl.IndicatorSize.set -> void
Microsoft.Maui.Platform.MauiPageControl.IsSquare.get -> bool
Microsoft.Maui.Platform.MauiPageControl.IsSquare.set -> void
Microsoft.Maui.Platform.MauiPageControl.MauiPageControl() -> void
Microsoft.Maui.Platform.MauiPageControl.SetIndicatorView(Microsoft.Maui.IIndicatorView? indicatorView) -> void
Microsoft.Maui.Platform.MauiPageControl.UpdateIndicatorCount() -> void
Microsoft.Maui.Platform.MauiPageControl.UpdateIndicatorSize() -> void
Microsoft.Maui.Platform.MauiPageControl.UpdatePosition() -> void
Microsoft.Maui.Platform.MauiPicker
Microsoft.Maui.Platform.MauiPicker.MauiPicker(UIKit.UIPickerView? uIPickerView) -> void
Microsoft.Maui.Platform.MauiPicker.UIPickerView.get -> UIKit.UIPickerView?
Microsoft.Maui.Platform.MauiPicker.UIPickerView.set -> void
Microsoft.Maui.Platform.MauiRefreshView
Microsoft.Maui.Platform.MauiRefreshView.IsRefreshing.get -> bool
Microsoft.Maui.Platform.MauiRefreshView.IsRefreshing.set -> void
Microsoft.Maui.Platform.MauiRefreshView.MauiRefreshView() -> void
Microsoft.Maui.Platform.MauiRefreshView.RefreshControl.get -> UIKit.UIRefreshControl!
Microsoft.Maui.Platform.MauiRefreshView.UpdateContent(Microsoft.Maui.IView? content, Microsoft.Maui.IMauiContext? mauiContext) -> void
Microsoft.Maui.Platform.MauiRefreshView.UpdateIsEnabled(bool isRefreshViewEnabled) -> void
Microsoft.Maui.Platform.MauiScrollView
Microsoft.Maui.Platform.MauiScrollView.MauiScrollView() -> void
Microsoft.Maui.Platform.MauiSearchBar
Microsoft.Maui.Platform.MauiSearchBar.MauiSearchBar() -> void
Microsoft.Maui.Platform.MauiSearchBar.MauiSearchBar(CoreGraphics.CGRect frame) -> void
Microsoft.Maui.Platform.MauiSearchBar.MauiSearchBar(Foundation.NSCoder! coder) -> void
Microsoft.Maui.Platform.MauiSearchBar.MauiSearchBar(Foundation.NSObjectFlag t) -> void
Microsoft.Maui.Platform.MauiSearchBar.MauiSearchBar(ObjCRuntime.NativeHandle handle) -> void
Microsoft.Maui.Platform.MauiSearchBar.TextSetOrChanged -> System.EventHandler<UIKit.UISearchBarTextChangedEventArgs!>?
Microsoft.Maui.Platform.MauiShapeView
Microsoft.Maui.Platform.MauiShapeView.MauiShapeView() -> void
Microsoft.Maui.Platform.MauiSwipeView
Microsoft.Maui.Platform.MauiSwipeView.MauiSwipeView() -> void
Microsoft.Maui.Platform.MauiTextField
Microsoft.Maui.Platform.MauiTextField.MauiTextField() -> void
Microsoft.Maui.Platform.MauiTextField.MauiTextField(CoreGraphics.CGRect frame) -> void
Microsoft.Maui.Platform.MauiTextField.TextPropertySet -> System.EventHandler?
Microsoft.Maui.Platform.MauiTextView
Microsoft.Maui.Platform.MauiTextView.AttributedPlaceholderText.get -> Foundation.NSAttributedString?
Microsoft.Maui.Platform.MauiTextView.AttributedPlaceholderText.set -> void
Microsoft.Maui.Platform.MauiTextView.MauiTextView() -> void
Microsoft.Maui.Platform.MauiTextView.MauiTextView(CoreGraphics.CGRect frame) -> void
Microsoft.Maui.Platform.MauiTextView.PlaceholderText.get -> string?
Microsoft.Maui.Platform.MauiTextView.PlaceholderText.set -> void
Microsoft.Maui.Platform.MauiTextView.PlaceholderTextColor.get -> UIKit.UIColor?
Microsoft.Maui.Platform.MauiTextView.PlaceholderTextColor.set -> void
Microsoft.Maui.Platform.MauiTextView.TextSetOrChanged -> System.EventHandler?
Microsoft.Maui.Platform.MauiTextView.VerticalTextAlignment.get -> Microsoft.Maui.TextAlignment
Microsoft.Maui.Platform.MauiTextView.VerticalTextAlignment.set -> void
Microsoft.Maui.Platform.MauiTimePicker
Microsoft.Maui.Platform.MauiTimePicker.Date.get -> Foundation.NSDate!
Microsoft.Maui.Platform.MauiTimePicker.MauiTimePicker() -> void
Microsoft.Maui.Platform.MauiTimePicker.Picker.get -> UIKit.UIDatePicker!
Microsoft.Maui.Platform.MauiTimePicker.UpdateTime(System.TimeSpan time) -> void
Microsoft.Maui.Platform.MauiView
Microsoft.Maui.Platform.MauiView.AdjustForSafeArea(CoreGraphics.CGRect bounds) -> CoreGraphics.CGRect
Microsoft.Maui.Platform.MauiView.CacheMeasureConstraints(double widthConstraint, double heightConstraint) -> void
Microsoft.Maui.Platform.MauiView.CrossPlatformLayout.get -> Microsoft.Maui.ICrossPlatformLayout?
Microsoft.Maui.Platform.MauiView.CrossPlatformLayout.set -> void
Microsoft.Maui.Platform.MauiView.InvalidateConstraintsCache() -> void
Microsoft.Maui.Platform.MauiView.IsMeasureValid(double widthConstraint, double heightConstraint) -> bool
Microsoft.Maui.Platform.MauiView.MauiView() -> void
Microsoft.Maui.Platform.MauiView.View.get -> Microsoft.Maui.IView?
Microsoft.Maui.Platform.MauiView.View.set -> void
Microsoft.Maui.Platform.MauiWebViewNavigationDelegate
Microsoft.Maui.Platform.MauiWebViewNavigationDelegate.DecidePolicy(WebKit.WKWebView! webView, WebKit.WKNavigationAction! navigationAction, System.Action<WebKit.WKNavigationActionPolicy>! decisionHandler) -> void
Microsoft.Maui.Platform.MauiWebViewNavigationDelegate.DidFailNavigation(WebKit.WKWebView! webView, WebKit.WKNavigation! navigation, Foundation.NSError! error) -> void
Microsoft.Maui.Platform.MauiWebViewNavigationDelegate.DidFailProvisionalNavigation(WebKit.WKWebView! webView, WebKit.WKNavigation! navigation, Foundation.NSError! error) -> void
Microsoft.Maui.Platform.MauiWebViewNavigationDelegate.DidFinishNavigation(WebKit.WKWebView! webView, WebKit.WKNavigation! navigation) -> void
Microsoft.Maui.Platform.MauiWebViewNavigationDelegate.MauiWebViewNavigationDelegate(Microsoft.Maui.Handlers.IWebViewHandler! handler) -> void
Microsoft.Maui.Platform.MauiWebViewUIDelegate
Microsoft.Maui.Platform.MauiWebViewUIDelegate.MauiWebViewUIDelegate(Microsoft.Maui.Handlers.IWebViewHandler! handler) -> void
Microsoft.Maui.Platform.MauiWKWebView
Microsoft.Maui.Platform.MauiWKWebView.CurrentUrl.get -> string?
Microsoft.Maui.Platform.MauiWKWebView.DidFinishNavigation(WebKit.WKWebView! webView, WebKit.WKNavigation! navigation) -> void
Microsoft.Maui.Platform.MauiWKWebView.LoadHtml(string? html, string? baseUrl) -> void
Microsoft.Maui.Platform.MauiWKWebView.LoadUrl(string? url) -> void
Microsoft.Maui.Platform.MauiWKWebView.MauiWKWebView(CoreGraphics.CGRect frame, Microsoft.Maui.Handlers.WebViewHandler! handler, WebKit.WKWebViewConfiguration! configuration) -> void
Microsoft.Maui.Platform.MauiWKWebView.MauiWKWebView(CoreGraphics.CGRect frame, Microsoft.Maui.Handlers.WebViewHandler! handler) -> void
Microsoft.Maui.Platform.MauiWKWebView.MauiWKWebView(Microsoft.Maui.Handlers.WebViewHandler! handler) -> void
Microsoft.Maui.Platform.MenuExtensions
Microsoft.Maui.Platform.NoCaretField
Microsoft.Maui.Platform.NoCaretField.NoCaretField() -> void
Microsoft.Maui.Platform.PageViewController
Microsoft.Maui.Platform.PageViewController.PageViewController(Microsoft.Maui.IView! page, Microsoft.Maui.IMauiContext! mauiContext) -> void
Microsoft.Maui.Platform.PickerExtensions
Microsoft.Maui.Platform.PlatformTouchGraphicsView
Microsoft.Maui.Platform.PlatformTouchGraphicsView.Connect(Microsoft.Maui.IGraphicsView! graphicsView) -> void
Microsoft.Maui.Platform.PlatformTouchGraphicsView.Disconnect() -> void
Microsoft.Maui.Platform.PlatformTouchGraphicsView.PlatformTouchGraphicsView() -> void
Microsoft.Maui.Platform.ProgressBarExtensions
Microsoft.Maui.Platform.ReturnTypeExtensions
Microsoft.Maui.Platform.ScrollViewExtensions
Microsoft.Maui.Platform.SearchBarExtensions
Microsoft.Maui.Platform.SemanticExtensions
Microsoft.Maui.Platform.ShapeViewExtensions
Microsoft.Maui.Platform.SliderExtensions
Microsoft.Maui.Platform.StepperExtensions
Microsoft.Maui.Platform.StrokeExtensions
Microsoft.Maui.Platform.SwipeViewExtensions
Microsoft.Maui.Platform.SwitchExtensions
Microsoft.Maui.Platform.TextAlignmentExtensions
Microsoft.Maui.Platform.TextFieldExtensions
Microsoft.Maui.Platform.TextViewExtensions
Microsoft.Maui.Platform.TimeExtensions
Microsoft.Maui.Platform.TimePickerExtensions
Microsoft.Maui.Platform.TransformationExtensions
Microsoft.Maui.Platform.UIEdgeInsetsExtensions
Microsoft.Maui.Platform.UIPageControlExtensions
Microsoft.Maui.Platform.ViewExtensions
Microsoft.Maui.Platform.WebViewExtensions
Microsoft.Maui.Platform.WindowExtensions
Microsoft.Maui.Platform.WrapperView
Microsoft.Maui.Platform.WrapperView.Border.get -> Microsoft.Maui.IBorderStroke?
Microsoft.Maui.Platform.WrapperView.Border.set -> void
Microsoft.Maui.Platform.WrapperView.Clip.get -> Microsoft.Maui.Graphics.IShape?
Microsoft.Maui.Platform.WrapperView.Clip.set -> void
Microsoft.Maui.Platform.WrapperView.Dispose() -> void
Microsoft.Maui.Platform.WrapperView.Shadow.get -> Microsoft.Maui.IShadow?
Microsoft.Maui.Platform.WrapperView.Shadow.set -> void
Microsoft.Maui.Platform.WrapperView.WrapperView() -> void
Microsoft.Maui.Platform.WrapperView.WrapperView(CoreGraphics.CGRect frame) -> void
Microsoft.Maui.PortHandlerAttribute
Microsoft.Maui.PortHandlerAttribute.Description.get -> string?
Microsoft.Maui.PortHandlerAttribute.Description.set -> void
Microsoft.Maui.PortHandlerAttribute.PortHandlerAttribute() -> void
Microsoft.Maui.PortHandlerAttribute.PortHandlerAttribute(string! description) -> void
Microsoft.Maui.Primitives.Dimension
Microsoft.Maui.Primitives.LayoutAlignment
Microsoft.Maui.Primitives.LayoutAlignment.Center = 2 -> Microsoft.Maui.Primitives.LayoutAlignment
Microsoft.Maui.Primitives.LayoutAlignment.End = 3 -> Microsoft.Maui.Primitives.LayoutAlignment
Microsoft.Maui.Primitives.LayoutAlignment.Fill = 0 -> Microsoft.Maui.Primitives.LayoutAlignment
Microsoft.Maui.Primitives.LayoutAlignment.Start = 1 -> Microsoft.Maui.Primitives.LayoutAlignment
Microsoft.Maui.PropertyMapper
Microsoft.Maui.PropertyMapper.Chained.get -> Microsoft.Maui.IPropertyMapper![]?
Microsoft.Maui.PropertyMapper.Chained.set -> void
Microsoft.Maui.PropertyMapper.PropertyMapper() -> void
Microsoft.Maui.PropertyMapper.PropertyMapper(params Microsoft.Maui.IPropertyMapper![]? chained) -> void
Microsoft.Maui.PropertyMapper.UpdateProperties(Microsoft.Maui.IElementHandler! viewHandler, Microsoft.Maui.IElement? virtualView) -> void
Microsoft.Maui.PropertyMapper.UpdateProperty(Microsoft.Maui.IElementHandler! viewHandler, Microsoft.Maui.IElement? virtualView, string! property) -> void
Microsoft.Maui.PropertyMapper<TVirtualView, TViewHandler>
Microsoft.Maui.PropertyMapper<TVirtualView, TViewHandler>.Add(string! key, System.Action<TViewHandler, TVirtualView>! action) -> void
Microsoft.Maui.PropertyMapper<TVirtualView, TViewHandler>.PropertyMapper() -> void
Microsoft.Maui.PropertyMapper<TVirtualView, TViewHandler>.PropertyMapper(params Microsoft.Maui.IPropertyMapper![]! chained) -> void
Microsoft.Maui.PropertyMapper<TVirtualView, TViewHandler>.this[string! key].get -> System.Action<TViewHandler, TVirtualView>!
Microsoft.Maui.PropertyMapper<TVirtualView, TViewHandler>.this[string! key].set -> void
Microsoft.Maui.PropertyMapper<TVirtualView>
Microsoft.Maui.PropertyMapper<TVirtualView>.PropertyMapper() -> void
Microsoft.Maui.PropertyMapper<TVirtualView>.PropertyMapper(params Microsoft.Maui.PropertyMapper![]! chained) -> void
Microsoft.Maui.PropertyMapperExtensions
Microsoft.Maui.RectangleAdorner
Microsoft.Maui.RectangleAdorner.Density.get -> float
Microsoft.Maui.RectangleAdorner.DrawnRectangle.get -> Microsoft.Maui.Graphics.Rect
Microsoft.Maui.RectangleAdorner.FillColor.get -> Microsoft.Maui.Graphics.Color!
Microsoft.Maui.RectangleAdorner.Offset.get -> Microsoft.Maui.Graphics.Point
Microsoft.Maui.RectangleAdorner.RectangleAdorner(Microsoft.Maui.IView! view, float density = 1, Microsoft.Maui.Graphics.Point? offset = null, Microsoft.Maui.Graphics.Color? fillColor = null, Microsoft.Maui.Graphics.Color? strokeColor = null) -> void
Microsoft.Maui.RectangleAdorner.StrokeColor.get -> Microsoft.Maui.Graphics.Color!
Microsoft.Maui.RectangleAdorner.VisualView.get -> Microsoft.Maui.IView!
Microsoft.Maui.RectangleGridAdorner
Microsoft.Maui.RectangleGridAdorner.RectangleGridAdorner(Microsoft.Maui.IView! view, float density = 1, Microsoft.Maui.Graphics.Point? offset = null, Microsoft.Maui.Graphics.Color? fillColor = null, Microsoft.Maui.Graphics.Color? strokeColor = null) -> void
Microsoft.Maui.RetrievePlatformValueRequest<T>
Microsoft.Maui.RetrievePlatformValueRequest<T>.Result.get -> T
Microsoft.Maui.RetrievePlatformValueRequest<T>.RetrievePlatformValueRequest() -> void
Microsoft.Maui.RetrievePlatformValueRequest<T>.SetResult(T result) -> void
Microsoft.Maui.RetrievePlatformValueRequest<T>.TrySetResult(T result) -> bool
Microsoft.Maui.ReturnType
Microsoft.Maui.ReturnType.Default = 0 -> Microsoft.Maui.ReturnType
Microsoft.Maui.ReturnType.Done = 1 -> Microsoft.Maui.ReturnType
Microsoft.Maui.ReturnType.Go = 2 -> Microsoft.Maui.ReturnType
Microsoft.Maui.ReturnType.Next = 3 -> Microsoft.Maui.ReturnType
Microsoft.Maui.ReturnType.Search = 4 -> Microsoft.Maui.ReturnType
Microsoft.Maui.ReturnType.Send = 5 -> Microsoft.Maui.ReturnType
Microsoft.Maui.ScrollBarVisibility
Microsoft.Maui.ScrollBarVisibility.Always = 1 -> Microsoft.Maui.ScrollBarVisibility
Microsoft.Maui.ScrollBarVisibility.Default = 0 -> Microsoft.Maui.ScrollBarVisibility
Microsoft.Maui.ScrollBarVisibility.Never = 2 -> Microsoft.Maui.ScrollBarVisibility
Microsoft.Maui.ScrollOrientation
Microsoft.Maui.ScrollOrientation.Both = 2 -> Microsoft.Maui.ScrollOrientation
Microsoft.Maui.ScrollOrientation.Horizontal = 1 -> Microsoft.Maui.ScrollOrientation
Microsoft.Maui.ScrollOrientation.Neither = 3 -> Microsoft.Maui.ScrollOrientation
Microsoft.Maui.ScrollOrientation.Vertical = 0 -> Microsoft.Maui.ScrollOrientation
Microsoft.Maui.ScrollToRequest
Microsoft.Maui.ScrollToRequest.HorizontalOffset.get -> double
Microsoft.Maui.ScrollToRequest.HorizontalOffset.init -> void
Microsoft.Maui.ScrollToRequest.Instant.get -> bool
Microsoft.Maui.ScrollToRequest.Instant.init -> void
Microsoft.Maui.ScrollToRequest.ScrollToRequest(double HorizontalOffset, double VerticalOffset, bool Instant) -> void
Microsoft.Maui.ScrollToRequest.VerticalOffset.get -> double
Microsoft.Maui.ScrollToRequest.VerticalOffset.init -> void
Microsoft.Maui.SemanticExtensions
Microsoft.Maui.SemanticHeadingLevel
Microsoft.Maui.SemanticHeadingLevel.Level1 = 1 -> Microsoft.Maui.SemanticHeadingLevel
Microsoft.Maui.SemanticHeadingLevel.Level2 = 2 -> Microsoft.Maui.SemanticHeadingLevel
Microsoft.Maui.SemanticHeadingLevel.Level3 = 3 -> Microsoft.Maui.SemanticHeadingLevel
Microsoft.Maui.SemanticHeadingLevel.Level4 = 4 -> Microsoft.Maui.SemanticHeadingLevel
Microsoft.Maui.SemanticHeadingLevel.Level5 = 5 -> Microsoft.Maui.SemanticHeadingLevel
Microsoft.Maui.SemanticHeadingLevel.Level6 = 6 -> Microsoft.Maui.SemanticHeadingLevel
Microsoft.Maui.SemanticHeadingLevel.Level7 = 7 -> Microsoft.Maui.SemanticHeadingLevel
Microsoft.Maui.SemanticHeadingLevel.Level8 = 8 -> Microsoft.Maui.SemanticHeadingLevel
Microsoft.Maui.SemanticHeadingLevel.Level9 = 9 -> Microsoft.Maui.SemanticHeadingLevel
Microsoft.Maui.SemanticHeadingLevel.None = 0 -> Microsoft.Maui.SemanticHeadingLevel
Microsoft.Maui.Semantics
Microsoft.Maui.Semantics.Description.get -> string?
Microsoft.Maui.Semantics.Description.set -> void
Microsoft.Maui.Semantics.HeadingLevel.get -> Microsoft.Maui.SemanticHeadingLevel
Microsoft.Maui.Semantics.HeadingLevel.set -> void
Microsoft.Maui.Semantics.Hint.get -> string?
Microsoft.Maui.Semantics.Hint.set -> void
Microsoft.Maui.Semantics.IsHeading.get -> bool
Microsoft.Maui.Semantics.Semantics() -> void
Microsoft.Maui.SizeRequest
Microsoft.Maui.SizeRequest.Equals(Microsoft.Maui.SizeRequest other) -> bool
Microsoft.Maui.SizeRequest.Minimum.get -> Microsoft.Maui.Graphics.Size
Microsoft.Maui.SizeRequest.Minimum.set -> void
Microsoft.Maui.SizeRequest.Request.get -> Microsoft.Maui.Graphics.Size
Microsoft.Maui.SizeRequest.Request.set -> void
Microsoft.Maui.SizeRequest.SizeRequest() -> void
Microsoft.Maui.SizeRequest.SizeRequest(Microsoft.Maui.Graphics.Size request, Microsoft.Maui.Graphics.Size minimum) -> void
Microsoft.Maui.SizeRequest.SizeRequest(Microsoft.Maui.Graphics.Size request) -> void
Microsoft.Maui.SoftInputExtensions
Microsoft.Maui.SourceInfo
Microsoft.Maui.SourceInfo.Deconstruct(out System.Uri! sourceUri, out int lineNumber, out int linePosition) -> void
Microsoft.Maui.SourceInfo.LineNumber.get -> int
Microsoft.Maui.SourceInfo.LinePosition.get -> int
Microsoft.Maui.SourceInfo.SourceInfo(System.Uri! sourceUri, int lineNumber, int linePosition) -> void
Microsoft.Maui.SourceInfo.SourceUri.get -> System.Uri!
Microsoft.Maui.StreamImageSourceService
Microsoft.Maui.StreamImageSourceService.GetImageAsync(Microsoft.Maui.IStreamImageSource! imageSource, float scale = 1, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<Microsoft.Maui.IImageSourceServiceResult<UIKit.UIImage!>?>!
Microsoft.Maui.StreamImageSourceService.StreamImageSourceService() -> void
Microsoft.Maui.StreamImageSourceService.StreamImageSourceService(Microsoft.Extensions.Logging.ILogger<Microsoft.Maui.StreamImageSourceService!>? logger = null) -> void
Microsoft.Maui.SwipeBehaviorOnInvoked
Microsoft.Maui.SwipeBehaviorOnInvoked.Auto = 0 -> Microsoft.Maui.SwipeBehaviorOnInvoked
Microsoft.Maui.SwipeBehaviorOnInvoked.Close = 1 -> Microsoft.Maui.SwipeBehaviorOnInvoked
Microsoft.Maui.SwipeBehaviorOnInvoked.RemainOpen = 2 -> Microsoft.Maui.SwipeBehaviorOnInvoked
Microsoft.Maui.SwipeDirection
Microsoft.Maui.SwipeDirection.Down = 8 -> Microsoft.Maui.SwipeDirection
Microsoft.Maui.SwipeDirection.Left = 2 -> Microsoft.Maui.SwipeDirection
Microsoft.Maui.SwipeDirection.Right = 1 -> Microsoft.Maui.SwipeDirection
Microsoft.Maui.SwipeDirection.Up = 4 -> Microsoft.Maui.SwipeDirection
Microsoft.Maui.SwipeMode
Microsoft.Maui.SwipeMode.Execute = 1 -> Microsoft.Maui.SwipeMode
Microsoft.Maui.SwipeMode.Reveal = 0 -> Microsoft.Maui.SwipeMode
Microsoft.Maui.SwipeTransitionMode
Microsoft.Maui.SwipeTransitionMode.Drag = 1 -> Microsoft.Maui.SwipeTransitionMode
Microsoft.Maui.SwipeTransitionMode.Reveal = 0 -> Microsoft.Maui.SwipeTransitionMode
Microsoft.Maui.SwipeViewCloseRequest
Microsoft.Maui.SwipeViewCloseRequest.Animated.get -> bool
Microsoft.Maui.SwipeViewCloseRequest.Animated.init -> void
Microsoft.Maui.SwipeViewCloseRequest.SwipeViewCloseRequest(bool Animated) -> void
Microsoft.Maui.SwipeViewOpenRequest
Microsoft.Maui.SwipeViewOpenRequest.Animated.get -> bool
Microsoft.Maui.SwipeViewOpenRequest.Animated.init -> void
Microsoft.Maui.SwipeViewOpenRequest.OpenSwipeItem.get -> Microsoft.Maui.OpenSwipeItem
Microsoft.Maui.SwipeViewOpenRequest.OpenSwipeItem.init -> void
Microsoft.Maui.SwipeViewOpenRequest.SwipeViewOpenRequest(Microsoft.Maui.OpenSwipeItem OpenSwipeItem, bool Animated) -> void
Microsoft.Maui.SwipeViewSwipeChanging
Microsoft.Maui.SwipeViewSwipeChanging.Offset.get -> double
Microsoft.Maui.SwipeViewSwipeChanging.Offset.init -> void
Microsoft.Maui.SwipeViewSwipeChanging.SwipeDirection.get -> Microsoft.Maui.SwipeDirection
Microsoft.Maui.SwipeViewSwipeChanging.SwipeDirection.init -> void
Microsoft.Maui.SwipeViewSwipeChanging.SwipeViewSwipeChanging(Microsoft.Maui.SwipeDirection SwipeDirection, double Offset) -> void
Microsoft.Maui.SwipeViewSwipeEnded
Microsoft.Maui.SwipeViewSwipeEnded.IsOpen.get -> bool
Microsoft.Maui.SwipeViewSwipeEnded.IsOpen.init -> void
Microsoft.Maui.SwipeViewSwipeEnded.SwipeDirection.get -> Microsoft.Maui.SwipeDirection
Microsoft.Maui.SwipeViewSwipeEnded.SwipeDirection.init -> void
Microsoft.Maui.SwipeViewSwipeEnded.SwipeViewSwipeEnded(Microsoft.Maui.SwipeDirection SwipeDirection, bool IsOpen) -> void
Microsoft.Maui.SwipeViewSwipeStarted
Microsoft.Maui.SwipeViewSwipeStarted.SwipeDirection.get -> Microsoft.Maui.SwipeDirection
Microsoft.Maui.SwipeViewSwipeStarted.SwipeDirection.init -> void
Microsoft.Maui.SwipeViewSwipeStarted.SwipeViewSwipeStarted(Microsoft.Maui.SwipeDirection SwipeDirection) -> void
Microsoft.Maui.TextAlignment
Microsoft.Maui.TextAlignment.Center = 1 -> Microsoft.Maui.TextAlignment
Microsoft.Maui.TextAlignment.End = 2 -> Microsoft.Maui.TextAlignment
Microsoft.Maui.TextAlignment.Start = 0 -> Microsoft.Maui.TextAlignment
Microsoft.Maui.TextDecorations
Microsoft.Maui.TextDecorations.None = 0 -> Microsoft.Maui.TextDecorations
Microsoft.Maui.TextDecorations.Strikethrough = 2 -> Microsoft.Maui.TextDecorations
Microsoft.Maui.TextDecorations.Underline = 1 -> Microsoft.Maui.TextDecorations
Microsoft.Maui.TextTransform
Microsoft.Maui.TextTransform.Default = 1 -> Microsoft.Maui.TextTransform
Microsoft.Maui.TextTransform.Lowercase = 2 -> Microsoft.Maui.TextTransform
Microsoft.Maui.TextTransform.None = 0 -> Microsoft.Maui.TextTransform
Microsoft.Maui.TextTransform.Uppercase = 3 -> Microsoft.Maui.TextTransform
Microsoft.Maui.TextType
Microsoft.Maui.TextType.Html = 1 -> Microsoft.Maui.TextType
Microsoft.Maui.TextType.Text = 0 -> Microsoft.Maui.TextType
Microsoft.Maui.Thickness
Microsoft.Maui.Thickness.Bottom.get -> double
Microsoft.Maui.Thickness.Bottom.set -> void
Microsoft.Maui.Thickness.Deconstruct(out double left, out double top, out double right, out double bottom) -> void
Microsoft.Maui.Thickness.HorizontalThickness.get -> double
Microsoft.Maui.Thickness.IsEmpty.get -> bool
Microsoft.Maui.Thickness.IsNaN.get -> bool
Microsoft.Maui.Thickness.Left.get -> double
Microsoft.Maui.Thickness.Left.set -> void
Microsoft.Maui.Thickness.Right.get -> double
Microsoft.Maui.Thickness.Right.set -> void
Microsoft.Maui.Thickness.Thickness() -> void
Microsoft.Maui.Thickness.Thickness(double horizontalSize, double verticalSize) -> void
Microsoft.Maui.Thickness.Thickness(double left, double top, double right, double bottom) -> void
Microsoft.Maui.Thickness.Thickness(double uniformSize) -> void
Microsoft.Maui.Thickness.Top.get -> double
Microsoft.Maui.Thickness.Top.set -> void
Microsoft.Maui.Thickness.VerticalThickness.get -> double
Microsoft.Maui.ToolTip
Microsoft.Maui.ToolTip.Content.get -> object?
Microsoft.Maui.ToolTip.Content.set -> void
Microsoft.Maui.ToolTip.ToolTip() -> void
Microsoft.Maui.UriImageSourceService
Microsoft.Maui.UriImageSourceService.CacheImage(Foundation.NSData! imageData, string! path) -> void
Microsoft.Maui.UriImageSourceService.GetCachedImage(string! path) -> Foundation.NSData!
Microsoft.Maui.UriImageSourceService.GetImageAsync(Microsoft.Maui.IUriImageSource! imageSource, float scale = 1, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<Microsoft.Maui.IImageSourceServiceResult<UIKit.UIImage!>?>!
Microsoft.Maui.UriImageSourceService.IsImageCached(string! path) -> bool
Microsoft.Maui.UriImageSourceService.UriImageSourceService() -> void
Microsoft.Maui.UriImageSourceService.UriImageSourceService(Microsoft.Extensions.Logging.ILogger<Microsoft.Maui.UriImageSourceService!>? logger = null) -> void
Microsoft.Maui.ViewExtensions
Microsoft.Maui.Visibility
Microsoft.Maui.Visibility.Collapsed = 2 -> Microsoft.Maui.Visibility
Microsoft.Maui.Visibility.Hidden = 1 -> Microsoft.Maui.Visibility
Microsoft.Maui.Visibility.Visible = 0 -> Microsoft.Maui.Visibility
Microsoft.Maui.VisualDiagnostics
Microsoft.Maui.VisualDiagnosticsOverlay
Microsoft.Maui.VisualDiagnosticsOverlay.AddAdorner(Microsoft.Maui.IAdorner! adorner, bool scrollToView = false) -> bool
Microsoft.Maui.VisualDiagnosticsOverlay.AddAdorner(Microsoft.Maui.IVisualTreeElement! visualElement, bool scrollToView = false) -> bool
Microsoft.Maui.VisualDiagnosticsOverlay.AddScrollableElementHandler(Microsoft.Maui.IScrollView! scrollBar) -> void
Microsoft.Maui.VisualDiagnosticsOverlay.AddScrollableElementHandlers() -> void
Microsoft.Maui.VisualDiagnosticsOverlay.EnableElementSelector.get -> bool
Microsoft.Maui.VisualDiagnosticsOverlay.EnableElementSelector.set -> void
Microsoft.Maui.VisualDiagnosticsOverlay.Offset.get -> Microsoft.Maui.Graphics.Point
Microsoft.Maui.VisualDiagnosticsOverlay.RemoveAdorner(Microsoft.Maui.IAdorner! adorner) -> bool
Microsoft.Maui.VisualDiagnosticsOverlay.RemoveAdorners() -> void
Microsoft.Maui.VisualDiagnosticsOverlay.RemoveAdorners(Microsoft.Maui.IVisualTreeElement! visualElement) -> bool
Microsoft.Maui.VisualDiagnosticsOverlay.RemoveScrollableElementHandler() -> void
Microsoft.Maui.VisualDiagnosticsOverlay.ScrollToElement.get -> bool
Microsoft.Maui.VisualDiagnosticsOverlay.ScrollToElement.set -> void
Microsoft.Maui.VisualDiagnosticsOverlay.ScrollToView(Microsoft.Maui.IVisualTreeElement! element) -> void
Microsoft.Maui.VisualDiagnosticsOverlay.ScrollViews.get -> System.Collections.Generic.IReadOnlyCollection<Microsoft.Maui.IScrollView!>!
Microsoft.Maui.VisualDiagnosticsOverlay.VisualDiagnosticsOverlay(Microsoft.Maui.IWindow! window) -> void
Microsoft.Maui.VisualTreeChangeEventArgs
Microsoft.Maui.VisualTreeChangeEventArgs.ChangeType.get -> Microsoft.Maui.VisualTreeChangeType
Microsoft.Maui.VisualTreeChangeEventArgs.Child.get -> object!
Microsoft.Maui.VisualTreeChangeEventArgs.ChildIndex.get -> int
Microsoft.Maui.VisualTreeChangeEventArgs.Parent.get -> object?
Microsoft.Maui.VisualTreeChangeEventArgs.VisualTreeChangeEventArgs(object? parent, object! child, int childIndex, Microsoft.Maui.VisualTreeChangeType changeType) -> void
Microsoft.Maui.VisualTreeChangeType
Microsoft.Maui.VisualTreeChangeType.Add = 0 -> Microsoft.Maui.VisualTreeChangeType
Microsoft.Maui.VisualTreeChangeType.Remove = 1 -> Microsoft.Maui.VisualTreeChangeType
Microsoft.Maui.VisualTreeElementExtensions
Microsoft.Maui.WeakEventManager
Microsoft.Maui.WeakEventManager.AddEventHandler(System.Delegate? handler, string! eventName = "") -> void
Microsoft.Maui.WeakEventManager.AddEventHandler<TEventArgs>(System.EventHandler<TEventArgs!>! handler, string! eventName = "") -> void
Microsoft.Maui.WeakEventManager.HandleEvent(object? sender, object? args, string! eventName) -> void
Microsoft.Maui.WeakEventManager.RemoveEventHandler(System.Delegate? handler, string! eventName = "") -> void
Microsoft.Maui.WeakEventManager.RemoveEventHandler<TEventArgs>(System.EventHandler<TEventArgs!>! handler, string! eventName = "") -> void
Microsoft.Maui.WeakEventManager.WeakEventManager() -> void
Microsoft.Maui.WebNavigationEvent
Microsoft.Maui.WebNavigationEvent.Back = 1 -> Microsoft.Maui.WebNavigationEvent
Microsoft.Maui.WebNavigationEvent.Forward = 2 -> Microsoft.Maui.WebNavigationEvent
Microsoft.Maui.WebNavigationEvent.NewPage = 3 -> Microsoft.Maui.WebNavigationEvent
Microsoft.Maui.WebNavigationEvent.Refresh = 4 -> Microsoft.Maui.WebNavigationEvent
Microsoft.Maui.WebNavigationResult
Microsoft.Maui.WebNavigationResult.Cancel = 2 -> Microsoft.Maui.WebNavigationResult
Microsoft.Maui.WebNavigationResult.Failure = 4 -> Microsoft.Maui.WebNavigationResult
Microsoft.Maui.WebNavigationResult.Success = 1 -> Microsoft.Maui.WebNavigationResult
Microsoft.Maui.WebNavigationResult.Timeout = 3 -> Microsoft.Maui.WebNavigationResult
Microsoft.Maui.WindowExtensions
Microsoft.Maui.WindowOverlay
Microsoft.Maui.WindowOverlay.Density.get -> float
Microsoft.Maui.WindowOverlay.DisableUITouchEventPassthrough.get -> bool
Microsoft.Maui.WindowOverlay.DisableUITouchEventPassthrough.set -> void
Microsoft.Maui.WindowOverlay.Draw(Microsoft.Maui.Graphics.ICanvas! canvas, Microsoft.Maui.Graphics.RectF dirtyRect) -> void
Microsoft.Maui.WindowOverlay.EnableDrawableTouchHandling.get -> bool
Microsoft.Maui.WindowOverlay.EnableDrawableTouchHandling.set -> void
Microsoft.Maui.WindowOverlay.GraphicsView.get -> UIKit.UIView?
Microsoft.Maui.WindowOverlay.Invalidate() -> void
Microsoft.Maui.WindowOverlay.IsPlatformViewInitialized.get -> bool
Microsoft.Maui.WindowOverlay.IsVisible.get -> bool
Microsoft.Maui.WindowOverlay.IsVisible.set -> void
Microsoft.Maui.WindowOverlay.Tapped -> System.EventHandler<Microsoft.Maui.WindowOverlayTappedEventArgs!>?
Microsoft.Maui.WindowOverlay.Window.get -> Microsoft.Maui.IWindow!
Microsoft.Maui.WindowOverlay.WindowElements.get -> System.Collections.Generic.IReadOnlyCollection<Microsoft.Maui.IWindowOverlayElement!>!
Microsoft.Maui.WindowOverlay.WindowOverlay(Microsoft.Maui.IWindow! window) -> void
Microsoft.Maui.WindowOverlayTappedEventArgs
Microsoft.Maui.WindowOverlayTappedEventArgs.Point.get -> Microsoft.Maui.Graphics.Point
Microsoft.Maui.WindowOverlayTappedEventArgs.VisualTreeElements.get -> System.Collections.Generic.IList<Microsoft.Maui.IVisualTreeElement!>!
Microsoft.Maui.WindowOverlayTappedEventArgs.WindowOverlayElements.get -> System.Collections.Generic.IList<Microsoft.Maui.IWindowOverlayElement!>!
Microsoft.Maui.WindowOverlayTappedEventArgs.WindowOverlayTappedEventArgs(Microsoft.Maui.Graphics.Point point, System.Collections.Generic.IList<Microsoft.Maui.IVisualTreeElement!>! elements, System.Collections.Generic.IList<Microsoft.Maui.IWindowOverlayElement!>! overlayElements) -> void
override Microsoft.Maui.Animations.LerpingAnimation.Update(double percent) -> void
override Microsoft.Maui.Animations.PlatformTicker.IsRunning.get -> bool
override Microsoft.Maui.Animations.PlatformTicker.Start() -> void
override Microsoft.Maui.Animations.PlatformTicker.Stop() -> void
override Microsoft.Maui.Converters.CornerRadiusTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext? context, System.Type! sourceType) -> bool
override Microsoft.Maui.Converters.CornerRadiusTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext? context, System.Type? destinationType) -> bool
override Microsoft.Maui.Converters.CornerRadiusTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext? context, System.Globalization.CultureInfo? culture, object? value) -> object!
override Microsoft.Maui.Converters.CornerRadiusTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext? context, System.Globalization.CultureInfo? culture, object? value, System.Type! destinationType) -> object!
override Microsoft.Maui.Converters.KeyboardTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext? context, System.Type! sourceType) -> bool
override Microsoft.Maui.Converters.KeyboardTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext? context, System.Type? destinationType) -> bool
override Microsoft.Maui.Converters.KeyboardTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext? context, System.Globalization.CultureInfo? culture, object? value) -> object!
override Microsoft.Maui.Converters.KeyboardTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext? context, System.Globalization.CultureInfo? culture, object? value, System.Type! destinationType) -> object!
override Microsoft.Maui.CornerRadius.Equals(object? obj) -> bool
override Microsoft.Maui.CornerRadius.GetHashCode() -> int
override Microsoft.Maui.FileImageSourceService.GetImageAsync(Microsoft.Maui.IImageSource! imageSource, float scale = 1, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<Microsoft.Maui.IImageSourceServiceResult<UIKit.UIImage!>?>!
override Microsoft.Maui.Font.Equals(object? obj) -> bool
override Microsoft.Maui.Font.GetHashCode() -> int
override Microsoft.Maui.Font.ToString() -> string!
override Microsoft.Maui.FontImageSourceService.GetImageAsync(Microsoft.Maui.IImageSource! imageSource, float scale = 1, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<Microsoft.Maui.IImageSourceServiceResult<UIKit.UIImage!>?>!
override Microsoft.Maui.GridLength.Equals(object? obj) -> bool
override Microsoft.Maui.GridLength.GetHashCode() -> int
override Microsoft.Maui.GridLength.ToString() -> string!
override Microsoft.Maui.Handlers.ActivityIndicatorHandler.CreatePlatformView() -> Microsoft.Maui.Platform.MauiActivityIndicator!
override Microsoft.Maui.Handlers.ApplicationHandler.CreatePlatformElement() -> UIKit.IUIApplicationDelegate!
override Microsoft.Maui.Handlers.BorderHandler.ConnectHandler(Microsoft.Maui.Platform.ContentView! platformView) -> void
override Microsoft.Maui.Handlers.BorderHandler.CreatePlatformView() -> Microsoft.Maui.Platform.ContentView!
override Microsoft.Maui.Handlers.BorderHandler.DisconnectHandler(Microsoft.Maui.Platform.ContentView! platformView) -> void
override Microsoft.Maui.Handlers.BorderHandler.SetVirtualView(Microsoft.Maui.IView! view) -> void
override Microsoft.Maui.Handlers.ButtonHandler.ConnectHandler(UIKit.UIButton! platformView) -> void
override Microsoft.Maui.Handlers.ButtonHandler.CreatePlatformView() -> UIKit.UIButton!
override Microsoft.Maui.Handlers.ButtonHandler.DisconnectHandler(UIKit.UIButton! platformView) -> void
override Microsoft.Maui.Handlers.ButtonHandler.NeedsContainer.get -> bool
override Microsoft.Maui.Handlers.ButtonHandler.SetupContainer() -> void
override Microsoft.Maui.Handlers.CheckBoxHandler.ConnectHandler(Microsoft.Maui.Platform.MauiCheckBox! platformView) -> void
override Microsoft.Maui.Handlers.CheckBoxHandler.CreatePlatformView() -> Microsoft.Maui.Platform.MauiCheckBox!
override Microsoft.Maui.Handlers.CheckBoxHandler.DisconnectHandler(Microsoft.Maui.Platform.MauiCheckBox! platformView) -> void
override Microsoft.Maui.Handlers.CheckBoxHandler.GetDesiredSize(double widthConstraint, double heightConstraint) -> Microsoft.Maui.Graphics.Size
override Microsoft.Maui.Handlers.ContentViewHandler.CreatePlatformView() -> Microsoft.Maui.Platform.ContentView!
override Microsoft.Maui.Handlers.ContentViewHandler.DisconnectHandler(Microsoft.Maui.Platform.ContentView! platformView) -> void
override Microsoft.Maui.Handlers.ContentViewHandler.SetVirtualView(Microsoft.Maui.IView! view) -> void
override Microsoft.Maui.Handlers.DatePickerHandler.ConnectHandler(UIKit.UIDatePicker! platformView) -> void
override Microsoft.Maui.Handlers.DatePickerHandler.CreatePlatformView() -> UIKit.UIDatePicker!
override Microsoft.Maui.Handlers.DatePickerHandler.DisconnectHandler(UIKit.UIDatePicker! platformView) -> void
override Microsoft.Maui.Handlers.EditorHandler.ConnectHandler(Microsoft.Maui.Platform.MauiTextView! platformView) -> void
override Microsoft.Maui.Handlers.EditorHandler.CreatePlatformView() -> Microsoft.Maui.Platform.MauiTextView!
override Microsoft.Maui.Handlers.EditorHandler.DisconnectHandler(Microsoft.Maui.Platform.MauiTextView! platformView) -> void
override Microsoft.Maui.Handlers.EditorHandler.GetDesiredSize(double widthConstraint, double heightConstraint) -> Microsoft.Maui.Graphics.Size
override Microsoft.Maui.Handlers.EditorHandler.SetVirtualView(Microsoft.Maui.IView! view) -> void
override Microsoft.Maui.Handlers.EntryHandler.ConnectHandler(Microsoft.Maui.Platform.MauiTextField! platformView) -> void
override Microsoft.Maui.Handlers.EntryHandler.CreatePlatformView() -> Microsoft.Maui.Platform.MauiTextField!
override Microsoft.Maui.Handlers.EntryHandler.DisconnectHandler(Microsoft.Maui.Platform.MauiTextField! platformView) -> void
override Microsoft.Maui.Handlers.EntryHandler.SetVirtualView(Microsoft.Maui.IView! view) -> void
override Microsoft.Maui.Handlers.FlyoutViewHandler.CreatePlatformView() -> UIKit.UIView!
override Microsoft.Maui.Handlers.GraphicsViewHandler.ConnectHandler(Microsoft.Maui.Platform.PlatformTouchGraphicsView! platformView) -> void
override Microsoft.Maui.Handlers.GraphicsViewHandler.CreatePlatformView() -> Microsoft.Maui.Platform.PlatformTouchGraphicsView!
override Microsoft.Maui.Handlers.GraphicsViewHandler.DisconnectHandler(Microsoft.Maui.Platform.PlatformTouchGraphicsView! platformView) -> void
override Microsoft.Maui.Handlers.ImageButtonHandler.ConnectHandler(UIKit.UIButton! platformView) -> void
override Microsoft.Maui.Handlers.ImageButtonHandler.CreatePlatformView() -> UIKit.UIButton!
override Microsoft.Maui.Handlers.ImageButtonHandler.DisconnectHandler(UIKit.UIButton! platformView) -> void
override Microsoft.Maui.Handlers.ImageButtonHandler.NeedsContainer.get -> bool
override Microsoft.Maui.Handlers.ImageHandler.CreatePlatformView() -> UIKit.UIImageView!
override Microsoft.Maui.Handlers.ImageHandler.DisconnectHandler(UIKit.UIImageView! platformView) -> void
override Microsoft.Maui.Handlers.ImageHandler.NeedsContainer.get -> bool
override Microsoft.Maui.Handlers.IndicatorViewHandler.ConnectHandler(Microsoft.Maui.Platform.MauiPageControl! platformView) -> void
override Microsoft.Maui.Handlers.IndicatorViewHandler.CreatePlatformView() -> Microsoft.Maui.Platform.MauiPageControl!
override Microsoft.Maui.Handlers.IndicatorViewHandler.DisconnectHandler(Microsoft.Maui.Platform.MauiPageControl! platformView) -> void
override Microsoft.Maui.Handlers.LabelHandler.CreatePlatformView() -> Microsoft.Maui.Platform.MauiLabel!
override Microsoft.Maui.Handlers.LabelHandler.NeedsContainer.get -> bool
override Microsoft.Maui.Handlers.LayoutHandler.CreatePlatformView() -> Microsoft.Maui.Platform.LayoutView!
override Microsoft.Maui.Handlers.LayoutHandler.DisconnectHandler(Microsoft.Maui.Platform.LayoutView! platformView) -> void
override Microsoft.Maui.Handlers.LayoutHandler.SetVirtualView(Microsoft.Maui.IView! view) -> void
override Microsoft.Maui.Handlers.MenuBarHandler.CreatePlatformElement() -> UIKit.IUIMenuBuilder!
override Microsoft.Maui.Handlers.MenuBarHandler.SetVirtualView(Microsoft.Maui.IElement! view) -> void
override Microsoft.Maui.Handlers.MenuBarItemHandler.CreatePlatformElement() -> UIKit.UIMenu!
override Microsoft.Maui.Handlers.MenuFlyoutHandler.CreatePlatformElement() -> UIKit.UIMenu!
override Microsoft.Maui.Handlers.MenuFlyoutItemHandler.CreatePlatformElement() -> UIKit.UIMenuElement!
override Microsoft.Maui.Handlers.MenuFlyoutSeparatorHandler.CreatePlatformElement() -> UIKit.UIMenu!
override Microsoft.Maui.Handlers.MenuFlyoutSubItemHandler.CreatePlatformElement() -> UIKit.UIMenu!
override Microsoft.Maui.Handlers.NavigationViewHandler.CreatePlatformView() -> UIKit.UIView!
override Microsoft.Maui.Handlers.PageHandler.CreatePlatformView() -> Microsoft.Maui.Platform.ContentView!
override Microsoft.Maui.Handlers.PickerHandler.ConnectHandler(Microsoft.Maui.Platform.MauiPicker! platformView) -> void
override Microsoft.Maui.Handlers.PickerHandler.CreatePlatformView() -> Microsoft.Maui.Platform.MauiPicker!
override Microsoft.Maui.Handlers.PickerHandler.DisconnectHandler(Microsoft.Maui.Platform.MauiPicker! platformView) -> void
override Microsoft.Maui.Handlers.PickerSource.GetComponentCount(UIKit.UIPickerView! picker) -> nint
override Microsoft.Maui.Handlers.PickerSource.GetRowsInComponent(UIKit.UIPickerView! pickerView, nint component) -> nint
override Microsoft.Maui.Handlers.PickerSource.GetTitle(UIKit.UIPickerView! picker, nint row, nint component) -> string!
override Microsoft.Maui.Handlers.PickerSource.Selected(UIKit.UIPickerView! picker, nint row, nint component) -> void
override Microsoft.Maui.Handlers.ProgressBarHandler.CreatePlatformView() -> UIKit.UIProgressView!
override Microsoft.Maui.Handlers.RadioButtonHandler.CreatePlatformView() -> Microsoft.Maui.Platform.ContentView!
override Microsoft.Maui.Handlers.RadioButtonHandler.SetVirtualView(Microsoft.Maui.IView! view) -> void
override Microsoft.Maui.Handlers.RefreshViewHandler.ConnectHandler(Microsoft.Maui.Platform.MauiRefreshView! platformView) -> void
override Microsoft.Maui.Handlers.RefreshViewHandler.CreatePlatformView() -> Microsoft.Maui.Platform.MauiRefreshView!
override Microsoft.Maui.Handlers.RefreshViewHandler.DisconnectHandler(Microsoft.Maui.Platform.MauiRefreshView! platformView) -> void
override Microsoft.Maui.Handlers.RefreshViewHandler.SetVirtualView(Microsoft.Maui.IView! view) -> void
override Microsoft.Maui.Handlers.ScrollViewHandler.ConnectHandler(UIKit.UIScrollView! platformView) -> void
override Microsoft.Maui.Handlers.ScrollViewHandler.CreatePlatformView() -> UIKit.UIScrollView!
override Microsoft.Maui.Handlers.ScrollViewHandler.DisconnectHandler(UIKit.UIScrollView! platformView) -> void
override Microsoft.Maui.Handlers.ScrollViewHandler.GetDesiredSize(double widthConstraint, double heightConstraint) -> Microsoft.Maui.Graphics.Size
override Microsoft.Maui.Handlers.ScrollViewHandler.NeedsContainer.get -> bool
override Microsoft.Maui.Handlers.ScrollViewHandler.PlatformArrange(Microsoft.Maui.Graphics.Rect rect) -> void
override Microsoft.Maui.Handlers.SearchBarHandler.ConnectHandler(Microsoft.Maui.Platform.MauiSearchBar! platformView) -> void
override Microsoft.Maui.Handlers.SearchBarHandler.CreatePlatformView() -> Microsoft.Maui.Platform.MauiSearchBar!
override Microsoft.Maui.Handlers.SearchBarHandler.DisconnectHandler(Microsoft.Maui.Platform.MauiSearchBar! platformView) -> void
override Microsoft.Maui.Handlers.SearchBarHandler.GetDesiredSize(double widthConstraint, double heightConstraint) -> Microsoft.Maui.Graphics.Size
override Microsoft.Maui.Handlers.ShapeViewHandler.CreatePlatformView() -> Microsoft.Maui.Platform.MauiShapeView!
override Microsoft.Maui.Handlers.ShapeViewHandler.NeedsContainer.get -> bool
override Microsoft.Maui.Handlers.SliderHandler.ConnectHandler(UIKit.UISlider! platformView) -> void
override Microsoft.Maui.Handlers.SliderHandler.CreatePlatformView() -> UIKit.UISlider!
override Microsoft.Maui.Handlers.SliderHandler.DisconnectHandler(UIKit.UISlider! platformView) -> void
override Microsoft.Maui.Handlers.StepperHandler.ConnectHandler(UIKit.UIStepper! platformView) -> void
override Microsoft.Maui.Handlers.StepperHandler.CreatePlatformView() -> UIKit.UIStepper!
override Microsoft.Maui.Handlers.StepperHandler.DisconnectHandler(UIKit.UIStepper! platformView) -> void
override Microsoft.Maui.Handlers.SwipeItemButton.Frame.get -> CoreGraphics.CGRect
override Microsoft.Maui.Handlers.SwipeItemButton.Frame.set -> void
override Microsoft.Maui.Handlers.SwipeItemMenuItemHandler.ConnectHandler(UIKit.UIButton! platformView) -> void
override Microsoft.Maui.Handlers.SwipeItemMenuItemHandler.CreatePlatformElement() -> UIKit.UIButton!
override Microsoft.Maui.Handlers.SwipeItemMenuItemHandler.DisconnectHandler(UIKit.UIButton! platformView) -> void
override Microsoft.Maui.Handlers.SwipeItemViewHandler.CreatePlatformView() -> Microsoft.Maui.Platform.ContentView!
override Microsoft.Maui.Handlers.SwipeItemViewHandler.SetVirtualView(Microsoft.Maui.IView! view) -> void
override Microsoft.Maui.Handlers.SwipeViewHandler.CreatePlatformView() -> Microsoft.Maui.Platform.MauiSwipeView!
override Microsoft.Maui.Handlers.SwipeViewHandler.SetVirtualView(Microsoft.Maui.IView! view) -> void
override Microsoft.Maui.Handlers.SwitchHandler.ConnectHandler(UIKit.UISwitch! platformView) -> void
override Microsoft.Maui.Handlers.SwitchHandler.CreatePlatformView() -> UIKit.UISwitch!
override Microsoft.Maui.Handlers.SwitchHandler.DisconnectHandler(UIKit.UISwitch! platformView) -> void
override Microsoft.Maui.Handlers.SwitchHandler.NeedsContainer.get -> bool
override Microsoft.Maui.Handlers.TabbedViewHandler.CreatePlatformView() -> UIKit.UIView!
override Microsoft.Maui.Handlers.TimePickerHandler.ConnectHandler(UIKit.UIDatePicker! platformView) -> void
override Microsoft.Maui.Handlers.TimePickerHandler.CreatePlatformView() -> UIKit.UIDatePicker!
override Microsoft.Maui.Handlers.TimePickerHandler.DisconnectHandler(UIKit.UIDatePicker! platformView) -> void
override Microsoft.Maui.Handlers.ToolbarHandler.CreatePlatformElement() -> UIKit.UINavigationBar!
override Microsoft.Maui.Handlers.ViewHandler<TVirtualView, TPlatformView>.GetDesiredSize(double widthConstraint, double heightConstraint) -> Microsoft.Maui.Graphics.Size
override Microsoft.Maui.Handlers.ViewHandler<TVirtualView, TPlatformView>.PlatformArrange(Microsoft.Maui.Graphics.Rect rect) -> void
override Microsoft.Maui.Handlers.ViewHandler<TVirtualView, TPlatformView>.RemoveContainer() -> void
override Microsoft.Maui.Handlers.ViewHandler<TVirtualView, TPlatformView>.SetupContainer() -> void
override Microsoft.Maui.Handlers.WebViewHandler.CreatePlatformView() -> WebKit.WKWebView!
override Microsoft.Maui.Handlers.WebViewHandler.GetDesiredSize(double widthConstraint, double heightConstraint) -> Microsoft.Maui.Graphics.Size
override Microsoft.Maui.Handlers.WindowHandler.ConnectHandler(UIKit.UIWindow! platformView) -> void
override Microsoft.Maui.Handlers.WindowHandler.CreatePlatformElement() -> UIKit.UIWindow!
override Microsoft.Maui.Layouts.AbsoluteLayoutManager.ArrangeChildren(Microsoft.Maui.Graphics.Rect bounds) -> Microsoft.Maui.Graphics.Size
override Microsoft.Maui.Layouts.AbsoluteLayoutManager.Measure(double widthConstraint, double heightConstraint) -> Microsoft.Maui.Graphics.Size
override Microsoft.Maui.Layouts.FlexBasis.Equals(object? obj) -> bool
override Microsoft.Maui.Layouts.FlexBasis.GetHashCode() -> int
override Microsoft.Maui.Layouts.GridLayoutManager.ArrangeChildren(Microsoft.Maui.Graphics.Rect bounds) -> Microsoft.Maui.Graphics.Size
override Microsoft.Maui.Layouts.GridLayoutManager.Measure(double widthConstraint, double heightConstraint) -> Microsoft.Maui.Graphics.Size
override Microsoft.Maui.Layouts.HorizontalStackLayoutManager.ArrangeChildren(Microsoft.Maui.Graphics.Rect bounds) -> Microsoft.Maui.Graphics.Size
override Microsoft.Maui.Layouts.HorizontalStackLayoutManager.Measure(double widthConstraint, double heightConstraint) -> Microsoft.Maui.Graphics.Size
override Microsoft.Maui.Layouts.VerticalStackLayoutManager.ArrangeChildren(Microsoft.Maui.Graphics.Rect bounds) -> Microsoft.Maui.Graphics.Size
override Microsoft.Maui.Layouts.VerticalStackLayoutManager.Measure(double widthConstraint, double heightConstraint) -> Microsoft.Maui.Graphics.Size
override Microsoft.Maui.MauiUIApplicationDelegate.BuildMenu(UIKit.IUIMenuBuilder! builder) -> void
override Microsoft.Maui.MauiUIApplicationDelegate.CanPerform(ObjCRuntime.Selector! action, Foundation.NSObject? withSender) -> bool
override Microsoft.Maui.MauiUIApplicationDelegate.RespondsToSelector(ObjCRuntime.Selector? sel) -> bool
override Microsoft.Maui.Platform.ContainerViewController.LoadView() -> void
override Microsoft.Maui.Platform.ContainerViewController.ViewDidLayoutSubviews() -> void
override Microsoft.Maui.Platform.ContentView.LayoutSubviews() -> void
override Microsoft.Maui.Platform.ContentView.WillRemoveSubview(UIKit.UIView! uiview) -> void
override Microsoft.Maui.Platform.LayoutView.HitTest(CoreGraphics.CGPoint point, UIKit.UIEvent? uievent) -> UIKit.UIView?
override Microsoft.Maui.Platform.LayoutView.SubviewAdded(UIKit.UIView! uiview) -> void
override Microsoft.Maui.Platform.LayoutView.UserInteractionEnabled.get -> bool
override Microsoft.Maui.Platform.LayoutView.UserInteractionEnabled.set -> void
override Microsoft.Maui.Platform.LayoutView.WillRemoveSubview(UIKit.UIView! uiview) -> void
override Microsoft.Maui.Platform.MauiActivityIndicator.Dispose(bool disposing) -> void
override Microsoft.Maui.Platform.MauiActivityIndicator.Draw(CoreGraphics.CGRect rect) -> void
override Microsoft.Maui.Platform.MauiActivityIndicator.LayoutSubviews() -> void
override Microsoft.Maui.Platform.MauiActivityIndicator.MovedToWindow() -> void
override Microsoft.Maui.Platform.MauiBoxView.MovedToWindow() -> void
override Microsoft.Maui.Platform.MauiCALayer.DrawInContext(CoreGraphics.CGContext! ctx) -> void
override Microsoft.Maui.Platform.MauiCALayer.LayoutSublayers() -> void
override Microsoft.Maui.Platform.MauiCheckBox.AccessibilityTraits.get -> UIKit.UIAccessibilityTrait
override Microsoft.Maui.Platform.MauiCheckBox.AccessibilityTraits.set -> void
override Microsoft.Maui.Platform.MauiCheckBox.AccessibilityValue.get -> string?
override Microsoft.Maui.Platform.MauiCheckBox.AccessibilityValue.set -> void
override Microsoft.Maui.Platform.MauiCheckBox.Dispose(bool disposing) -> void
override Microsoft.Maui.Platform.MauiCheckBox.Enabled.get -> bool
override Microsoft.Maui.Platform.MauiCheckBox.Enabled.set -> void
override Microsoft.Maui.Platform.MauiCheckBox.LayoutSubviews() -> void
override Microsoft.Maui.Platform.MauiCheckBox.MovedToWindow() -> void
override Microsoft.Maui.Platform.MauiCheckBox.SizeThatFits(CoreGraphics.CGSize size) -> CoreGraphics.CGSize
override Microsoft.Maui.Platform.MauiImageView.MovedToWindow() -> void
override Microsoft.Maui.Platform.MauiLabel.DrawText(CoreGraphics.CGRect rect) -> void
override Microsoft.Maui.Platform.MauiLabel.MovedToWindow() -> void
override Microsoft.Maui.Platform.MauiLabel.SizeThatFits(CoreGraphics.CGSize size) -> CoreGraphics.CGSize
override Microsoft.Maui.Platform.MauiPageControl.Dispose(bool disposing) -> void
override Microsoft.Maui.Platform.MauiPageControl.LayoutSubviews() -> void
override Microsoft.Maui.Platform.MauiPageControl.MovedToWindow() -> void
override Microsoft.Maui.Platform.MauiPicker.CanPerform(ObjCRuntime.Selector! action, Foundation.NSObject? withSender) -> bool
override Microsoft.Maui.Platform.MauiScrollView.MovedToWindow() -> void
override Microsoft.Maui.Platform.MauiScrollView.ScrollRectToVisible(CoreGraphics.CGRect rect, bool animated) -> void
override Microsoft.Maui.Platform.MauiSearchBar.MovedToWindow() -> void
override Microsoft.Maui.Platform.MauiSearchBar.Text.get -> string?
override Microsoft.Maui.Platform.MauiSearchBar.Text.set -> void
override Microsoft.Maui.Platform.MauiSearchBar.WillMoveToWindow(UIKit.UIWindow? window) -> void
override Microsoft.Maui.Platform.MauiShapeView.MovedToWindow() -> void
override Microsoft.Maui.Platform.MauiSwipeView.HitTest(CoreGraphics.CGPoint point, UIKit.UIEvent? uievent) -> UIKit.UIView!
override Microsoft.Maui.Platform.MauiSwipeView.LayoutSubviews() -> void
override Microsoft.Maui.Platform.MauiSwipeView.TouchesCancelled(Foundation.NSSet! touches, UIKit.UIEvent? evt) -> void
override Microsoft.Maui.Platform.MauiSwipeView.TouchesEnded(Foundation.NSSet! touches, UIKit.UIEvent? evt) -> void
override Microsoft.Maui.Platform.MauiTextField.AttributedText.get -> Foundation.NSAttributedString?
override Microsoft.Maui.Platform.MauiTextField.AttributedText.set -> void
override Microsoft.Maui.Platform.MauiTextField.MovedToWindow() -> void
override Microsoft.Maui.Platform.MauiTextField.SelectedTextRange.get -> UIKit.UITextRange?
override Microsoft.Maui.Platform.MauiTextField.SelectedTextRange.set -> void
override Microsoft.Maui.Platform.MauiTextField.Text.get -> string?
override Microsoft.Maui.Platform.MauiTextField.Text.set -> void
override Microsoft.Maui.Platform.MauiTextField.WillMoveToWindow(UIKit.UIWindow? window) -> void
override Microsoft.Maui.Platform.MauiTextView.AttributedText.get -> Foundation.NSAttributedString!
override Microsoft.Maui.Platform.MauiTextView.AttributedText.set -> void
override Microsoft.Maui.Platform.MauiTextView.Font.get -> UIKit.UIFont?
override Microsoft.Maui.Platform.MauiTextView.Font.set -> void
override Microsoft.Maui.Platform.MauiTextView.LayoutSubviews() -> void
override Microsoft.Maui.Platform.MauiTextView.MovedToWindow() -> void
override Microsoft.Maui.Platform.MauiTextView.Text.get -> string?
override Microsoft.Maui.Platform.MauiTextView.Text.set -> void
override Microsoft.Maui.Platform.MauiTextView.WillMoveToWindow(UIKit.UIWindow? window) -> void
override Microsoft.Maui.Platform.MauiView.LayoutSubviews() -> void
override Microsoft.Maui.Platform.MauiView.MovedToWindow() -> void
override Microsoft.Maui.Platform.MauiView.SafeAreaInsetsDidChange() -> void
override Microsoft.Maui.Platform.MauiView.SetNeedsLayout() -> void
override Microsoft.Maui.Platform.MauiView.SizeThatFits(CoreGraphics.CGSize size) -> CoreGraphics.CGSize
override Microsoft.Maui.Platform.MauiWebViewUIDelegate.RunJavaScriptAlertPanel(WebKit.WKWebView! webView, string! message, WebKit.WKFrameInfo! frame, System.Action! completionHandler) -> void
override Microsoft.Maui.Platform.MauiWebViewUIDelegate.RunJavaScriptConfirmPanel(WebKit.WKWebView! webView, string! message, WebKit.WKFrameInfo! frame, System.Action<bool>! completionHandler) -> void
override Microsoft.Maui.Platform.MauiWebViewUIDelegate.RunJavaScriptTextInputPanel(WebKit.WKWebView! webView, string! prompt, string? defaultText, WebKit.WKFrameInfo! frame, System.Action<string!>! completionHandler) -> void
override Microsoft.Maui.Platform.MauiWebViewUIDelegate.SetContextMenuConfiguration(WebKit.WKWebView! webView, WebKit.WKContextMenuElementInfo! elementInfo, System.Action<UIKit.UIContextMenuConfiguration!>! completionHandler) -> void
override Microsoft.Maui.Platform.MauiWKWebView.MovedToWindow() -> void
override Microsoft.Maui.Platform.NoCaretField.GetCaretRectForPosition(UIKit.UITextPosition? position) -> CoreGraphics.CGRect
override Microsoft.Maui.Platform.NoCaretField.MovedToWindow() -> void
override Microsoft.Maui.Platform.PageViewController.CreatePlatformView(Microsoft.Maui.IElement! view) -> UIKit.UIView!
override Microsoft.Maui.Platform.PageViewController.PreferredStatusBarUpdateAnimation.get -> UIKit.UIStatusBarAnimation
override Microsoft.Maui.Platform.PageViewController.PrefersHomeIndicatorAutoHidden.get -> bool
override Microsoft.Maui.Platform.PageViewController.PrefersStatusBarHidden() -> bool
override Microsoft.Maui.Platform.PageViewController.TraitCollectionDidChange(UIKit.UITraitCollection? previousTraitCollection) -> void
override Microsoft.Maui.Platform.PlatformTouchGraphicsView.LayoutSubviews() -> void
override Microsoft.Maui.Platform.PlatformTouchGraphicsView.TouchesBegan(Foundation.NSSet! touches, UIKit.UIEvent? evt) -> void
override Microsoft.Maui.Platform.PlatformTouchGraphicsView.TouchesCancelled(Foundation.NSSet! touches, UIKit.UIEvent? evt) -> void
override Microsoft.Maui.Platform.PlatformTouchGraphicsView.TouchesEnded(Foundation.NSSet! touches, UIKit.UIEvent? evt) -> void
override Microsoft.Maui.Platform.PlatformTouchGraphicsView.TouchesMoved(Foundation.NSSet! touches, UIKit.UIEvent? evt) -> void
override Microsoft.Maui.Platform.WrapperView.LayoutSubviews() -> void
override Microsoft.Maui.Platform.WrapperView.MovedToWindow() -> void
override Microsoft.Maui.Platform.WrapperView.SetNeedsLayout() -> void
override Microsoft.Maui.Platform.WrapperView.SizeThatFits(CoreGraphics.CGSize size) -> CoreGraphics.CGSize
override Microsoft.Maui.RectangleGridAdorner.Draw(Microsoft.Maui.Graphics.ICanvas! canvas, Microsoft.Maui.Graphics.RectF dirtyRect) -> void
override Microsoft.Maui.Semantics.ToString() -> string!
override Microsoft.Maui.SizeRequest.Equals(object? obj) -> bool
override Microsoft.Maui.SizeRequest.GetHashCode() -> int
override Microsoft.Maui.SizeRequest.ToString() -> string!
override Microsoft.Maui.StreamImageSourceService.GetImageAsync(Microsoft.Maui.IImageSource! imageSource, float scale = 1, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<Microsoft.Maui.IImageSourceServiceResult<UIKit.UIImage!>?>!
override Microsoft.Maui.Thickness.Equals(object? obj) -> bool
override Microsoft.Maui.Thickness.GetHashCode() -> int
override Microsoft.Maui.UriImageSourceService.GetImageAsync(Microsoft.Maui.IImageSource! imageSource, float scale = 1, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<Microsoft.Maui.IImageSourceServiceResult<UIKit.UIImage!>?>!
override Microsoft.Maui.VisualDiagnosticsOverlay.AddWindowElement(Microsoft.Maui.IWindowOverlayElement! drawable) -> bool
override Microsoft.Maui.VisualDiagnosticsOverlay.Deinitialize() -> bool
override Microsoft.Maui.VisualDiagnosticsOverlay.RemoveWindowElement(Microsoft.Maui.IWindowOverlayElement! drawable) -> bool
override Microsoft.Maui.VisualDiagnosticsOverlay.RemoveWindowElements() -> void
override sealed Microsoft.Maui.Handlers.ViewHandler<TVirtualView, TPlatformView>.SetVirtualView(Microsoft.Maui.IElement! view) -> void
readonly Microsoft.Maui.LockableObservableListWrapper._list -> System.Collections.ObjectModel.ObservableCollection<string!>!
readonly Microsoft.Maui.PropertyMapper._mapper -> System.Collections.Generic.Dictionary<string!, System.Action<Microsoft.Maui.IElementHandler!, Microsoft.Maui.IElement!>!>!
static Microsoft.Maui.Animations.AnimationLerpingExtensions.GenericLerp<T>(this T start, T end, double progress, double toggleThreshold = 0.5) -> T
static Microsoft.Maui.Animations.AnimationLerpingExtensions.Lerp(this double start, double end, double progress) -> double
static Microsoft.Maui.Animations.AnimationLerpingExtensions.Lerp(this float start, float end, double progress) -> float
static Microsoft.Maui.Animations.AnimationLerpingExtensions.Lerp(this float? start, float? end, double progress) -> float?
static Microsoft.Maui.Animations.AnimationLerpingExtensions.Lerp(this Microsoft.Maui.Graphics.Color! color, Microsoft.Maui.Graphics.Color! endColor, double progress) -> Microsoft.Maui.Graphics.Color!
static Microsoft.Maui.Animations.AnimationLerpingExtensions.Lerp(this Microsoft.Maui.Graphics.Point start, Microsoft.Maui.Graphics.Point end, double progress) -> Microsoft.Maui.Graphics.Point
static Microsoft.Maui.Animations.AnimationLerpingExtensions.Lerp(this Microsoft.Maui.Graphics.PointF start, Microsoft.Maui.Graphics.PointF end, double progress) -> Microsoft.Maui.Graphics.PointF
static Microsoft.Maui.Animations.AnimationLerpingExtensions.Lerp(this Microsoft.Maui.Graphics.Rect start, Microsoft.Maui.Graphics.Rect end, double progress) -> Microsoft.Maui.Graphics.Rect
static Microsoft.Maui.Animations.AnimationLerpingExtensions.Lerp(this Microsoft.Maui.Graphics.RectF start, Microsoft.Maui.Graphics.RectF end, double progress) -> Microsoft.Maui.Graphics.RectF
static Microsoft.Maui.Animations.AnimationLerpingExtensions.Lerp(this Microsoft.Maui.Graphics.Size start, Microsoft.Maui.Graphics.Size end, double progress) -> Microsoft.Maui.Graphics.Size
static Microsoft.Maui.Animations.AnimationLerpingExtensions.Lerp(this Microsoft.Maui.Graphics.SizeF start, Microsoft.Maui.Graphics.SizeF end, double progress) -> Microsoft.Maui.Graphics.SizeF
static Microsoft.Maui.Animations.AnimationLerpingExtensions.Lerp(this Microsoft.Maui.Graphics.SolidPaint! paint, Microsoft.Maui.Graphics.SolidPaint! endPaint, double progress) -> Microsoft.Maui.Graphics.SolidPaint!
static Microsoft.Maui.Animations.AnimationLerpingExtensions.Lerp(this Microsoft.Maui.Thickness start, Microsoft.Maui.Thickness end, double progress) -> Microsoft.Maui.Thickness
static Microsoft.Maui.Animations.Lerp.GetLerp(System.Type! type) -> Microsoft.Maui.Animations.Lerp?
static Microsoft.Maui.CommandMapperExtensions.AppendToMapping<TVirtualView, TViewHandler>(this Microsoft.Maui.CommandMapper<TVirtualView, TViewHandler>! commandMapper, string! key, System.Action<TViewHandler, TVirtualView, object?>! method) -> void
static Microsoft.Maui.CommandMapperExtensions.AppendToMapping<TVirtualView, TViewHandler>(this Microsoft.Maui.ICommandMapper<Microsoft.Maui.IElement!, Microsoft.Maui.IElementHandler!>! commandMapper, string! key, System.Action<TViewHandler, TVirtualView, object?>! method) -> void
static Microsoft.Maui.CommandMapperExtensions.AppendToMapping<TVirtualView, TViewHandler>(this Microsoft.Maui.ICommandMapper<TVirtualView, TViewHandler>! commandMapper, string! key, System.Action<TViewHandler, TVirtualView, object?>! method) -> void
static Microsoft.Maui.CommandMapperExtensions.ModifyMapping<TVirtualView, TViewHandler>(this Microsoft.Maui.CommandMapper<TVirtualView, TViewHandler>! commandMapper, string! key, System.Action<TViewHandler, TVirtualView, object?, System.Action<Microsoft.Maui.IElementHandler!, Microsoft.Maui.IElement!, object?>?>! method) -> void
static Microsoft.Maui.CommandMapperExtensions.ModifyMapping<TVirtualView, TViewHandler>(this Microsoft.Maui.ICommandMapper<Microsoft.Maui.IElement!, Microsoft.Maui.IElementHandler!>! commandMapper, string! key, System.Action<TViewHandler, TVirtualView, object?, System.Action<Microsoft.Maui.IElementHandler!, Microsoft.Maui.IElement!, object?>?>! method) -> void
static Microsoft.Maui.CommandMapperExtensions.ModifyMapping<TVirtualView, TViewHandler>(this Microsoft.Maui.ICommandMapper<TVirtualView, TViewHandler>! commandMapper, string! key, System.Action<TViewHandler, TVirtualView, object?, System.Action<Microsoft.Maui.IElementHandler!, Microsoft.Maui.IElement!, object?>?>! method) -> void
static Microsoft.Maui.CommandMapperExtensions.PrependToMapping<TVirtualView, TViewHandler>(this Microsoft.Maui.CommandMapper<TVirtualView, TViewHandler>! commandMapper, string! key, System.Action<TViewHandler, TVirtualView, object?>! method) -> void
static Microsoft.Maui.CommandMapperExtensions.PrependToMapping<TVirtualView, TViewHandler>(this Microsoft.Maui.ICommandMapper<Microsoft.Maui.IElement!, Microsoft.Maui.IElementHandler!>! commandMapper, string! key, System.Action<TViewHandler, TVirtualView, object?>! method) -> void
static Microsoft.Maui.CommandMapperExtensions.PrependToMapping<TVirtualView, TViewHandler>(this Microsoft.Maui.ICommandMapper<TVirtualView, TViewHandler>! commandMapper, string! key, System.Action<TViewHandler, TVirtualView, object?>! method) -> void
static Microsoft.Maui.CommandMapperExtensions.ReplaceMapping<TVirtualView, TViewHandler>(this Microsoft.Maui.ICommandMapper<Microsoft.Maui.IElement!, Microsoft.Maui.IElementHandler!>! commandMapper, string! key, System.Action<TViewHandler, TVirtualView, object?>! method) -> void
static Microsoft.Maui.CornerRadius.implicit operator Microsoft.Maui.CornerRadius(double uniformRadius) -> Microsoft.Maui.CornerRadius
static Microsoft.Maui.CornerRadius.operator !=(Microsoft.Maui.CornerRadius left, Microsoft.Maui.CornerRadius right) -> bool
static Microsoft.Maui.CornerRadius.operator ==(Microsoft.Maui.CornerRadius left, Microsoft.Maui.CornerRadius right) -> bool
static Microsoft.Maui.Crc64.ComputeHash(byte[]! input) -> byte[]!
static Microsoft.Maui.Crc64.ComputeHash(System.IO.Stream! inputStream) -> byte[]!
static Microsoft.Maui.Crc64.ComputeHashString(string! input) -> string!
static Microsoft.Maui.Dispatching.Dispatcher.GetForCurrentThread() -> Microsoft.Maui.Dispatching.IDispatcher?
static Microsoft.Maui.Dispatching.DispatcherExtensions.DispatchAsync(this Microsoft.Maui.Dispatching.IDispatcher! dispatcher, System.Action! action) -> System.Threading.Tasks.Task!
static Microsoft.Maui.Dispatching.DispatcherExtensions.DispatchAsync(this Microsoft.Maui.Dispatching.IDispatcher! dispatcher, System.Func<System.Threading.Tasks.Task!>! funcTask) -> System.Threading.Tasks.Task!
static Microsoft.Maui.Dispatching.DispatcherExtensions.DispatchAsync<T>(this Microsoft.Maui.Dispatching.IDispatcher! dispatcher, System.Func<System.Threading.Tasks.Task<T>!>! funcTask) -> System.Threading.Tasks.Task<T>!
static Microsoft.Maui.Dispatching.DispatcherExtensions.DispatchAsync<T>(this Microsoft.Maui.Dispatching.IDispatcher! dispatcher, System.Func<T>! func) -> System.Threading.Tasks.Task<T>!
static Microsoft.Maui.Dispatching.DispatcherExtensions.GetSynchronizationContextAsync(this Microsoft.Maui.Dispatching.IDispatcher! dispatcher) -> System.Threading.Tasks.Task<System.Threading.SynchronizationContext!>!
static Microsoft.Maui.Dispatching.DispatcherExtensions.StartTimer(this Microsoft.Maui.Dispatching.IDispatcher! dispatcher, System.TimeSpan interval, System.Func<bool>! callback) -> void
static Microsoft.Maui.Dispatching.DispatcherProvider.Current.get -> Microsoft.Maui.Dispatching.IDispatcherProvider!
static Microsoft.Maui.Dispatching.DispatcherProvider.SetCurrent(Microsoft.Maui.Dispatching.IDispatcherProvider? provider) -> bool
static Microsoft.Maui.Easing.Default.get -> Microsoft.Maui.Easing!
static Microsoft.Maui.Easing.implicit operator Microsoft.Maui.Easing!(System.Func<double, double>! func) -> Microsoft.Maui.Easing!
static Microsoft.Maui.Font.Default.get -> Microsoft.Maui.Font
static Microsoft.Maui.Font.OfSize(string? name, double size, Microsoft.Maui.FontWeight weight = Microsoft.Maui.FontWeight.Regular, Microsoft.Maui.FontSlant fontSlant = Microsoft.Maui.FontSlant.Default, bool enableScaling = true) -> Microsoft.Maui.Font
static Microsoft.Maui.Font.operator !=(Microsoft.Maui.Font left, Microsoft.Maui.Font right) -> bool
static Microsoft.Maui.Font.operator ==(Microsoft.Maui.Font left, Microsoft.Maui.Font right) -> bool
static Microsoft.Maui.Font.SystemFontOfSize(double size, Microsoft.Maui.FontWeight weight = Microsoft.Maui.FontWeight.Regular, Microsoft.Maui.FontSlant fontSlant = Microsoft.Maui.FontSlant.Default, bool enableScaling = true) -> Microsoft.Maui.Font
static Microsoft.Maui.Font.SystemFontOfWeight(Microsoft.Maui.FontWeight weight, Microsoft.Maui.FontSlant fontSlant = Microsoft.Maui.FontSlant.Default, bool enableScaling = true) -> Microsoft.Maui.Font
static Microsoft.Maui.FontFile.FromString(string! input) -> Microsoft.Maui.FontFile!
static Microsoft.Maui.Graphics.PaintExtensions.CreateCALayer(this Microsoft.Maui.Graphics.GradientPaint! gradientPaint, CoreGraphics.CGRect frame = default(CoreGraphics.CGRect)) -> CoreAnimation.CALayer?
static Microsoft.Maui.Graphics.PaintExtensions.CreateCALayer(this Microsoft.Maui.Graphics.ImagePaint! imagePaint, CoreGraphics.CGRect frame = default(CoreGraphics.CGRect)) -> CoreAnimation.CALayer?
static Microsoft.Maui.Graphics.PaintExtensions.CreateCALayer(this Microsoft.Maui.Graphics.LinearGradientPaint! linearGradientPaint, CoreGraphics.CGRect frame = default(CoreGraphics.CGRect)) -> CoreAnimation.CALayer?
static Microsoft.Maui.Graphics.PaintExtensions.CreateCALayer(this Microsoft.Maui.Graphics.PatternPaint! patternPaint, CoreGraphics.CGRect frame = default(CoreGraphics.CGRect)) -> CoreAnimation.CALayer?
static Microsoft.Maui.Graphics.PaintExtensions.CreateCALayer(this Microsoft.Maui.Graphics.RadialGradientPaint! radialGradientPaint, CoreGraphics.CGRect frame = default(CoreGraphics.CGRect)) -> CoreAnimation.CALayer?
static Microsoft.Maui.Graphics.PaintExtensions.CreateCALayer(this Microsoft.Maui.Graphics.SolidPaint! solidPaint, CoreGraphics.CGRect frame = default(CoreGraphics.CGRect)) -> CoreAnimation.CALayer?
static Microsoft.Maui.Graphics.PaintExtensions.IsNullOrEmpty(this Microsoft.Maui.Graphics.Paint? paint) -> bool
static Microsoft.Maui.Graphics.PaintExtensions.ToCALayer(this Microsoft.Maui.Graphics.Paint! paint, CoreGraphics.CGRect frame = default(CoreGraphics.CGRect)) -> CoreAnimation.CALayer?
static Microsoft.Maui.Graphics.PaintExtensions.ToColor(this Microsoft.Maui.Graphics.Paint? paint) -> Microsoft.Maui.Graphics.Color?
static Microsoft.Maui.GridLength.implicit operator Microsoft.Maui.GridLength(double absoluteValue) -> Microsoft.Maui.GridLength
static Microsoft.Maui.GridLength.operator !=(Microsoft.Maui.GridLength left, Microsoft.Maui.GridLength right) -> bool
static Microsoft.Maui.GridLength.operator ==(Microsoft.Maui.GridLength left, Microsoft.Maui.GridLength right) -> bool
static Microsoft.Maui.Handlers.ActivityIndicatorHandler.CommandMapper -> Microsoft.Maui.CommandMapper<Microsoft.Maui.IActivityIndicator!, Microsoft.Maui.Handlers.IActivityIndicatorHandler!>!
static Microsoft.Maui.Handlers.ActivityIndicatorHandler.MapColor(Microsoft.Maui.Handlers.IActivityIndicatorHandler! handler, Microsoft.Maui.IActivityIndicator! activityIndicator) -> void
static Microsoft.Maui.Handlers.ActivityIndicatorHandler.MapIsRunning(Microsoft.Maui.Handlers.IActivityIndicatorHandler! handler, Microsoft.Maui.IActivityIndicator! activityIndicator) -> void
static Microsoft.Maui.Handlers.ActivityIndicatorHandler.Mapper -> Microsoft.Maui.IPropertyMapper<Microsoft.Maui.IActivityIndicator!, Microsoft.Maui.Handlers.IActivityIndicatorHandler!>!
static Microsoft.Maui.Handlers.ApplicationHandler.CommandMapper -> Microsoft.Maui.CommandMapper<Microsoft.Maui.IApplication!, Microsoft.Maui.Handlers.ApplicationHandler!>!
static Microsoft.Maui.Handlers.ApplicationHandler.MapCloseWindow(Microsoft.Maui.Handlers.ApplicationHandler! handler, Microsoft.Maui.IApplication! application, object? args) -> void
static Microsoft.Maui.Handlers.ApplicationHandler.MapOpenWindow(Microsoft.Maui.Handlers.ApplicationHandler! handler, Microsoft.Maui.IApplication! application, object? args) -> void
static Microsoft.Maui.Handlers.ApplicationHandler.Mapper -> Microsoft.Maui.IPropertyMapper<Microsoft.Maui.IApplication!, Microsoft.Maui.Handlers.ApplicationHandler!>!
static Microsoft.Maui.Handlers.ApplicationHandler.MapTerminate(Microsoft.Maui.Handlers.ApplicationHandler! handler, Microsoft.Maui.IApplication! application, object? args) -> void
static Microsoft.Maui.Handlers.BorderHandler.CommandMapper -> Microsoft.Maui.CommandMapper<Microsoft.Maui.IBorderView!, Microsoft.Maui.Handlers.BorderHandler!>!
static Microsoft.Maui.Handlers.BorderHandler.MapBackground(Microsoft.Maui.Handlers.IBorderHandler! handler, Microsoft.Maui.IBorderView! border) -> void
static Microsoft.Maui.Handlers.BorderHandler.MapContent(Microsoft.Maui.Handlers.IBorderHandler! handler, Microsoft.Maui.IBorderView! border) -> void
static Microsoft.Maui.Handlers.BorderHandler.Mapper -> Microsoft.Maui.IPropertyMapper<Microsoft.Maui.IBorderView!, Microsoft.Maui.Handlers.IBorderHandler!>!
static Microsoft.Maui.Handlers.BorderHandler.MapStroke(Microsoft.Maui.Handlers.IBorderHandler! handler, Microsoft.Maui.IBorderView! border) -> void
static Microsoft.Maui.Handlers.BorderHandler.MapStrokeDashOffset(Microsoft.Maui.Handlers.IBorderHandler! handler, Microsoft.Maui.IBorderView! border) -> void
static Microsoft.Maui.Handlers.BorderHandler.MapStrokeDashPattern(Microsoft.Maui.Handlers.IBorderHandler! handler, Microsoft.Maui.IBorderView! border) -> void
static Microsoft.Maui.Handlers.BorderHandler.MapStrokeLineCap(Microsoft.Maui.Handlers.IBorderHandler! handler, Microsoft.Maui.IBorderView! border) -> void
static Microsoft.Maui.Handlers.BorderHandler.MapStrokeLineJoin(Microsoft.Maui.Handlers.IBorderHandler! handler, Microsoft.Maui.IBorderView! border) -> void
static Microsoft.Maui.Handlers.BorderHandler.MapStrokeMiterLimit(Microsoft.Maui.Handlers.IBorderHandler! handler, Microsoft.Maui.IBorderView! border) -> void
static Microsoft.Maui.Handlers.BorderHandler.MapStrokeShape(Microsoft.Maui.Handlers.IBorderHandler! handler, Microsoft.Maui.IBorderView! border) -> void
static Microsoft.Maui.Handlers.BorderHandler.MapStrokeThickness(Microsoft.Maui.Handlers.IBorderHandler! handler, Microsoft.Maui.IBorderView! border) -> void
static Microsoft.Maui.Handlers.ButtonHandler.CommandMapper -> Microsoft.Maui.CommandMapper<Microsoft.Maui.IButton!, Microsoft.Maui.Handlers.IButtonHandler!>!
static Microsoft.Maui.Handlers.ButtonHandler.ImageButtonMapper -> Microsoft.Maui.IPropertyMapper<Microsoft.Maui.IImage!, Microsoft.Maui.Handlers.IButtonHandler!>!
static Microsoft.Maui.Handlers.ButtonHandler.MapCharacterSpacing(Microsoft.Maui.Handlers.IButtonHandler! handler, Microsoft.Maui.ITextStyle! button) -> void
static Microsoft.Maui.Handlers.ButtonHandler.MapCornerRadius(Microsoft.Maui.Handlers.IButtonHandler! handler, Microsoft.Maui.IButtonStroke! buttonStroke) -> void
static Microsoft.Maui.Handlers.ButtonHandler.MapFont(Microsoft.Maui.Handlers.IButtonHandler! handler, Microsoft.Maui.ITextStyle! button) -> void
static Microsoft.Maui.Handlers.ButtonHandler.MapFormatting(Microsoft.Maui.Handlers.IButtonHandler! handler, Microsoft.Maui.IText! button) -> void
static Microsoft.Maui.Handlers.ButtonHandler.MapImageSource(Microsoft.Maui.Handlers.IButtonHandler! handler, Microsoft.Maui.IImage! image) -> void
static Microsoft.Maui.Handlers.ButtonHandler.MapImageSourceAsync(Microsoft.Maui.Handlers.IButtonHandler! handler, Microsoft.Maui.IImage! image) -> System.Threading.Tasks.Task!
static Microsoft.Maui.Handlers.ButtonHandler.MapPadding(Microsoft.Maui.Handlers.IButtonHandler! handler, Microsoft.Maui.IButton! button) -> void
static Microsoft.Maui.Handlers.ButtonHandler.Mapper -> Microsoft.Maui.IPropertyMapper<Microsoft.Maui.IButton!, Microsoft.Maui.Handlers.IButtonHandler!>!
static Microsoft.Maui.Handlers.ButtonHandler.MapStrokeColor(Microsoft.Maui.Handlers.IButtonHandler! handler, Microsoft.Maui.IButtonStroke! buttonStroke) -> void
static Microsoft.Maui.Handlers.ButtonHandler.MapStrokeThickness(Microsoft.Maui.Handlers.IButtonHandler! handler, Microsoft.Maui.IButtonStroke! buttonStroke) -> void
static Microsoft.Maui.Handlers.ButtonHandler.MapText(Microsoft.Maui.Handlers.IButtonHandler! handler, Microsoft.Maui.IText! button) -> void
static Microsoft.Maui.Handlers.ButtonHandler.MapTextColor(Microsoft.Maui.Handlers.IButtonHandler! handler, Microsoft.Maui.ITextStyle! button) -> void
static Microsoft.Maui.Handlers.ButtonHandler.TextButtonMapper -> Microsoft.Maui.IPropertyMapper<Microsoft.Maui.ITextButton!, Microsoft.Maui.Handlers.IButtonHandler!>!
static Microsoft.Maui.Handlers.CheckBoxHandler.CommandMapper -> Microsoft.Maui.CommandMapper<Microsoft.Maui.ICheckBox!, Microsoft.Maui.Handlers.CheckBoxHandler!>!
static Microsoft.Maui.Handlers.CheckBoxHandler.MapForeground(Microsoft.Maui.Handlers.ICheckBoxHandler! handler, Microsoft.Maui.ICheckBox! check) -> void
static Microsoft.Maui.Handlers.CheckBoxHandler.MapIsChecked(Microsoft.Maui.Handlers.ICheckBoxHandler! handler, Microsoft.Maui.ICheckBox! check) -> void
static Microsoft.Maui.Handlers.CheckBoxHandler.Mapper -> Microsoft.Maui.IPropertyMapper<Microsoft.Maui.ICheckBox!, Microsoft.Maui.Handlers.ICheckBoxHandler!>!
static Microsoft.Maui.Handlers.ContentViewHandler.CommandMapper -> Microsoft.Maui.CommandMapper<Microsoft.Maui.IContentView!, Microsoft.Maui.Handlers.IContentViewHandler!>!
static Microsoft.Maui.Handlers.ContentViewHandler.MapContent(Microsoft.Maui.Handlers.IContentViewHandler! handler, Microsoft.Maui.IContentView! page) -> void
static Microsoft.Maui.Handlers.ContentViewHandler.Mapper -> Microsoft.Maui.IPropertyMapper<Microsoft.Maui.IContentView!, Microsoft.Maui.Handlers.IContentViewHandler!>!
static Microsoft.Maui.Handlers.DatePickerHandler.CommandMapper -> Microsoft.Maui.CommandMapper<Microsoft.Maui.IPicker!, Microsoft.Maui.Handlers.IDatePickerHandler!>!
static Microsoft.Maui.Handlers.DatePickerHandler.MapCharacterSpacing(Microsoft.Maui.Handlers.IDatePickerHandler! handler, Microsoft.Maui.IDatePicker! datePicker) -> void
static Microsoft.Maui.Handlers.DatePickerHandler.MapDate(Microsoft.Maui.Handlers.IDatePickerHandler! handler, Microsoft.Maui.IDatePicker! datePicker) -> void
static Microsoft.Maui.Handlers.DatePickerHandler.MapFlowDirection(Microsoft.Maui.Handlers.DatePickerHandler! handler, Microsoft.Maui.IDatePicker! datePicker) -> void
static Microsoft.Maui.Handlers.DatePickerHandler.MapFont(Microsoft.Maui.Handlers.IDatePickerHandler! handler, Microsoft.Maui.IDatePicker! datePicker) -> void
static Microsoft.Maui.Handlers.DatePickerHandler.MapFormat(Microsoft.Maui.Handlers.IDatePickerHandler! handler, Microsoft.Maui.IDatePicker! datePicker) -> void
static Microsoft.Maui.Handlers.DatePickerHandler.MapMaximumDate(Microsoft.Maui.Handlers.IDatePickerHandler! handler, Microsoft.Maui.IDatePicker! datePicker) -> void
static Microsoft.Maui.Handlers.DatePickerHandler.MapMinimumDate(Microsoft.Maui.Handlers.IDatePickerHandler! handler, Microsoft.Maui.IDatePicker! datePicker) -> void
static Microsoft.Maui.Handlers.DatePickerHandler.Mapper -> Microsoft.Maui.IPropertyMapper<Microsoft.Maui.IDatePicker!, Microsoft.Maui.Handlers.IDatePickerHandler!>!
static Microsoft.Maui.Handlers.DatePickerHandler.MapTextColor(Microsoft.Maui.Handlers.IDatePickerHandler! handler, Microsoft.Maui.IDatePicker! datePicker) -> void
static Microsoft.Maui.Handlers.EditorHandler.CommandMapper -> Microsoft.Maui.CommandMapper<Microsoft.Maui.IEditor!, Microsoft.Maui.Handlers.IEditorHandler!>!
static Microsoft.Maui.Handlers.EditorHandler.MapCharacterSpacing(Microsoft.Maui.Handlers.IEditorHandler! handler, Microsoft.Maui.IEditor! editor) -> void
static Microsoft.Maui.Handlers.EditorHandler.MapCursorPosition(Microsoft.Maui.Handlers.IEditorHandler! handler, Microsoft.Maui.IEditor! editor) -> void
static Microsoft.Maui.Handlers.EditorHandler.MapFont(Microsoft.Maui.Handlers.IEditorHandler! handler, Microsoft.Maui.IEditor! editor) -> void
static Microsoft.Maui.Handlers.EditorHandler.MapFormatting(Microsoft.Maui.Handlers.IEditorHandler! handler, Microsoft.Maui.IEditor! editor) -> void
static Microsoft.Maui.Handlers.EditorHandler.MapHorizontalTextAlignment(Microsoft.Maui.Handlers.IEditorHandler! handler, Microsoft.Maui.IEditor! editor) -> void
static Microsoft.Maui.Handlers.EditorHandler.MapIsEnabled(Microsoft.Maui.Handlers.IEditorHandler! handler, Microsoft.Maui.IEditor! editor) -> void
static Microsoft.Maui.Handlers.EditorHandler.MapIsReadOnly(Microsoft.Maui.Handlers.IEditorHandler! handler, Microsoft.Maui.IEditor! editor) -> void
static Microsoft.Maui.Handlers.EditorHandler.MapIsSpellCheckEnabled(Microsoft.Maui.Handlers.IEditorHandler! handler, Microsoft.Maui.IEditor! editor) -> void
static Microsoft.Maui.Handlers.EditorHandler.MapIsTextPredictionEnabled(Microsoft.Maui.Handlers.IEditorHandler! handler, Microsoft.Maui.IEditor! editor) -> void
static Microsoft.Maui.Handlers.EditorHandler.MapKeyboard(Microsoft.Maui.Handlers.IEditorHandler! handler, Microsoft.Maui.IEditor! editor) -> void
static Microsoft.Maui.Handlers.EditorHandler.MapMaxLength(Microsoft.Maui.Handlers.IEditorHandler! handler, Microsoft.Maui.IEditor! editor) -> void
static Microsoft.Maui.Handlers.EditorHandler.Mapper -> Microsoft.Maui.IPropertyMapper<Microsoft.Maui.IEditor!, Microsoft.Maui.Handlers.IEditorHandler!>!
static Microsoft.Maui.Handlers.EditorHandler.MapPlaceholder(Microsoft.Maui.Handlers.IEditorHandler! handler, Microsoft.Maui.IEditor! editor) -> void
static Microsoft.Maui.Handlers.EditorHandler.MapPlaceholderColor(Microsoft.Maui.Handlers.IEditorHandler! handler, Microsoft.Maui.IEditor! editor) -> void
static Microsoft.Maui.Handlers.EditorHandler.MapSelectionLength(Microsoft.Maui.Handlers.IEditorHandler! handler, Microsoft.Maui.IEditor! editor) -> void
static Microsoft.Maui.Handlers.EditorHandler.MapText(Microsoft.Maui.Handlers.IEditorHandler! handler, Microsoft.Maui.IEditor! editor) -> void
static Microsoft.Maui.Handlers.EditorHandler.MapTextColor(Microsoft.Maui.Handlers.IEditorHandler! handler, Microsoft.Maui.IEditor! editor) -> void
static Microsoft.Maui.Handlers.EditorHandler.MapVerticalTextAlignment(Microsoft.Maui.Handlers.IEditorHandler! handler, Microsoft.Maui.IEditor! editor) -> void
static Microsoft.Maui.Handlers.ElementHandler.ElementCommandMapper -> Microsoft.Maui.CommandMapper<Microsoft.Maui.IElement!, Microsoft.Maui.IElementHandler!>!
static Microsoft.Maui.Handlers.ElementHandler.ElementMapper -> Microsoft.Maui.IPropertyMapper<Microsoft.Maui.IElement!, Microsoft.Maui.IElementHandler!>!
static Microsoft.Maui.Handlers.EntryHandler.CommandMapper -> Microsoft.Maui.CommandMapper<Microsoft.Maui.IEntry!, Microsoft.Maui.Handlers.IEntryHandler!>!
static Microsoft.Maui.Handlers.EntryHandler.MapCharacterSpacing(Microsoft.Maui.Handlers.IEntryHandler! handler, Microsoft.Maui.IEntry! entry) -> void
static Microsoft.Maui.Handlers.EntryHandler.MapClearButtonVisibility(Microsoft.Maui.Handlers.IEntryHandler! handler, Microsoft.Maui.IEntry! entry) -> void
static Microsoft.Maui.Handlers.EntryHandler.MapCursorPosition(Microsoft.Maui.Handlers.IEntryHandler! handler, Microsoft.Maui.IEntry! entry) -> void
static Microsoft.Maui.Handlers.EntryHandler.MapFont(Microsoft.Maui.Handlers.IEntryHandler! handler, Microsoft.Maui.IEntry! entry) -> void
static Microsoft.Maui.Handlers.EntryHandler.MapFormatting(Microsoft.Maui.Handlers.IEntryHandler! handler, Microsoft.Maui.IEntry! entry) -> void
static Microsoft.Maui.Handlers.EntryHandler.MapHorizontalTextAlignment(Microsoft.Maui.Handlers.IEntryHandler! handler, Microsoft.Maui.IEntry! entry) -> void
static Microsoft.Maui.Handlers.EntryHandler.MapIsPassword(Microsoft.Maui.Handlers.IEntryHandler! handler, Microsoft.Maui.IEntry! entry) -> void
static Microsoft.Maui.Handlers.EntryHandler.MapIsReadOnly(Microsoft.Maui.Handlers.IEntryHandler! handler, Microsoft.Maui.IEntry! entry) -> void
static Microsoft.Maui.Handlers.EntryHandler.MapIsSpellCheckEnabled(Microsoft.Maui.Handlers.IEntryHandler! handler, Microsoft.Maui.IEntry! entry) -> void
static Microsoft.Maui.Handlers.EntryHandler.MapIsTextPredictionEnabled(Microsoft.Maui.Handlers.IEntryHandler! handler, Microsoft.Maui.IEntry! entry) -> void
static Microsoft.Maui.Handlers.EntryHandler.MapKeyboard(Microsoft.Maui.Handlers.IEntryHandler! handler, Microsoft.Maui.IEntry! entry) -> void
static Microsoft.Maui.Handlers.EntryHandler.MapMaxLength(Microsoft.Maui.Handlers.IEntryHandler! handler, Microsoft.Maui.IEntry! entry) -> void
static Microsoft.Maui.Handlers.EntryHandler.Mapper -> Microsoft.Maui.IPropertyMapper<Microsoft.Maui.IEntry!, Microsoft.Maui.Handlers.IEntryHandler!>!
static Microsoft.Maui.Handlers.EntryHandler.MapPlaceholder(Microsoft.Maui.Handlers.IEntryHandler! handler, Microsoft.Maui.IEntry! entry) -> void
static Microsoft.Maui.Handlers.EntryHandler.MapPlaceholderColor(Microsoft.Maui.Handlers.IEntryHandler! handler, Microsoft.Maui.IEntry! entry) -> void
static Microsoft.Maui.Handlers.EntryHandler.MapReturnType(Microsoft.Maui.Handlers.IEntryHandler! handler, Microsoft.Maui.IEntry! entry) -> void
static Microsoft.Maui.Handlers.EntryHandler.MapSelectionLength(Microsoft.Maui.Handlers.IEntryHandler! handler, Microsoft.Maui.IEntry! entry) -> void
static Microsoft.Maui.Handlers.EntryHandler.MapText(Microsoft.Maui.Handlers.IEntryHandler! handler, Microsoft.Maui.IEntry! entry) -> void
static Microsoft.Maui.Handlers.EntryHandler.MapTextColor(Microsoft.Maui.Handlers.IEntryHandler! handler, Microsoft.Maui.IEntry! entry) -> void
static Microsoft.Maui.Handlers.EntryHandler.MapVerticalTextAlignment(Microsoft.Maui.Handlers.IEntryHandler! handler, Microsoft.Maui.IEntry! entry) -> void
static Microsoft.Maui.Handlers.FlyoutViewHandler.CommandMapper -> Microsoft.Maui.CommandMapper<Microsoft.Maui.IFlyoutView!, Microsoft.Maui.Handlers.IFlyoutViewHandler!>!
static Microsoft.Maui.Handlers.FlyoutViewHandler.Mapper -> Microsoft.Maui.IPropertyMapper<Microsoft.Maui.IFlyoutView!, Microsoft.Maui.Handlers.IFlyoutViewHandler!>!
static Microsoft.Maui.Handlers.GraphicsViewHandler.CommandMapper -> Microsoft.Maui.CommandMapper<Microsoft.Maui.IGraphicsView!, Microsoft.Maui.Handlers.IGraphicsViewHandler!>!
static Microsoft.Maui.Handlers.GraphicsViewHandler.MapDrawable(Microsoft.Maui.Handlers.IGraphicsViewHandler! handler, Microsoft.Maui.IGraphicsView! graphicsView) -> void
static Microsoft.Maui.Handlers.GraphicsViewHandler.MapFlowDirection(Microsoft.Maui.Handlers.IGraphicsViewHandler! handler, Microsoft.Maui.IGraphicsView! graphicsView) -> void
static Microsoft.Maui.Handlers.GraphicsViewHandler.MapInvalidate(Microsoft.Maui.Handlers.IGraphicsViewHandler! handler, Microsoft.Maui.IGraphicsView! graphicsView, object? arg) -> void
static Microsoft.Maui.Handlers.GraphicsViewHandler.Mapper -> Microsoft.Maui.IPropertyMapper<Microsoft.Maui.IGraphicsView!, Microsoft.Maui.Handlers.IGraphicsViewHandler!>!
static Microsoft.Maui.Handlers.ImageButtonHandler.CommandMapper -> Microsoft.Maui.CommandMapper<Microsoft.Maui.IImageButton!, Microsoft.Maui.Handlers.IImageButtonHandler!>!
static Microsoft.Maui.Handlers.ImageButtonHandler.ImageMapper -> Microsoft.Maui.IPropertyMapper<Microsoft.Maui.IImage!, Microsoft.Maui.Handlers.IImageHandler!>!
static Microsoft.Maui.Handlers.ImageButtonHandler.MapCornerRadius(Microsoft.Maui.Handlers.IImageButtonHandler! handler, Microsoft.Maui.IButtonStroke! buttonStroke) -> void
static Microsoft.Maui.Handlers.ImageButtonHandler.MapPadding(Microsoft.Maui.Handlers.IImageButtonHandler! handler, Microsoft.Maui.IImageButton! imageButton) -> void
static Microsoft.Maui.Handlers.ImageButtonHandler.Mapper -> Microsoft.Maui.IPropertyMapper<Microsoft.Maui.IImageButton!, Microsoft.Maui.Handlers.IImageButtonHandler!>!
static Microsoft.Maui.Handlers.ImageButtonHandler.MapStrokeColor(Microsoft.Maui.Handlers.IImageButtonHandler! handler, Microsoft.Maui.IButtonStroke! buttonStroke) -> void
static Microsoft.Maui.Handlers.ImageButtonHandler.MapStrokeThickness(Microsoft.Maui.Handlers.IImageButtonHandler! handler, Microsoft.Maui.IButtonStroke! buttonStroke) -> void
static Microsoft.Maui.Handlers.ImageHandler.CommandMapper -> Microsoft.Maui.CommandMapper<Microsoft.Maui.IImage!, Microsoft.Maui.Handlers.IImageHandler!>!
static Microsoft.Maui.Handlers.ImageHandler.MapAspect(Microsoft.Maui.Handlers.IImageHandler! handler, Microsoft.Maui.IImage! image) -> void
static Microsoft.Maui.Handlers.ImageHandler.MapBackground(Microsoft.Maui.Handlers.IImageHandler! handler, Microsoft.Maui.IImage! image) -> void
static Microsoft.Maui.Handlers.ImageHandler.MapIsAnimationPlaying(Microsoft.Maui.Handlers.IImageHandler! handler, Microsoft.Maui.IImage! image) -> void
static Microsoft.Maui.Handlers.ImageHandler.Mapper -> Microsoft.Maui.IPropertyMapper<Microsoft.Maui.IImage!, Microsoft.Maui.Handlers.IImageHandler!>!
static Microsoft.Maui.Handlers.ImageHandler.MapSource(Microsoft.Maui.Handlers.IImageHandler! handler, Microsoft.Maui.IImage! image) -> void
static Microsoft.Maui.Handlers.ImageHandler.MapSourceAsync(Microsoft.Maui.Handlers.IImageHandler! handler, Microsoft.Maui.IImage! image) -> System.Threading.Tasks.Task!
static Microsoft.Maui.Handlers.IndicatorViewHandler.CommandMapper -> Microsoft.Maui.CommandMapper<Microsoft.Maui.IIndicatorView!, Microsoft.Maui.Handlers.IIndicatorViewHandler!>!
static Microsoft.Maui.Handlers.IndicatorViewHandler.MapCount(Microsoft.Maui.Handlers.IIndicatorViewHandler! handler, Microsoft.Maui.IIndicatorView! indicator) -> void
static Microsoft.Maui.Handlers.IndicatorViewHandler.MapHideSingle(Microsoft.Maui.Handlers.IIndicatorViewHandler! handler, Microsoft.Maui.IIndicatorView! indicator) -> void
static Microsoft.Maui.Handlers.IndicatorViewHandler.MapIndicatorColor(Microsoft.Maui.Handlers.IIndicatorViewHandler! handler, Microsoft.Maui.IIndicatorView! indicator) -> void
static Microsoft.Maui.Handlers.IndicatorViewHandler.MapIndicatorShape(Microsoft.Maui.Handlers.IIndicatorViewHandler! handler, Microsoft.Maui.IIndicatorView! indicator) -> void
static Microsoft.Maui.Handlers.IndicatorViewHandler.MapIndicatorSize(Microsoft.Maui.Handlers.IIndicatorViewHandler! handler, Microsoft.Maui.IIndicatorView! indicator) -> void
static Microsoft.Maui.Handlers.IndicatorViewHandler.MapMaximumVisible(Microsoft.Maui.Handlers.IIndicatorViewHandler! handler, Microsoft.Maui.IIndicatorView! indicator) -> void
static Microsoft.Maui.Handlers.IndicatorViewHandler.Mapper -> Microsoft.Maui.IPropertyMapper<Microsoft.Maui.IIndicatorView!, Microsoft.Maui.Handlers.IIndicatorViewHandler!>!
static Microsoft.Maui.Handlers.IndicatorViewHandler.MapPosition(Microsoft.Maui.Handlers.IIndicatorViewHandler! handler, Microsoft.Maui.IIndicatorView! indicator) -> void
static Microsoft.Maui.Handlers.IndicatorViewHandler.MapSelectedIndicatorColor(Microsoft.Maui.Handlers.IIndicatorViewHandler! handler, Microsoft.Maui.IIndicatorView! indicator) -> void
static Microsoft.Maui.Handlers.LabelHandler.CommandMapper -> Microsoft.Maui.CommandMapper<Microsoft.Maui.ILabel!, Microsoft.Maui.Handlers.ILabelHandler!>!
static Microsoft.Maui.Handlers.LabelHandler.MapBackground(Microsoft.Maui.Handlers.ILabelHandler! handler, Microsoft.Maui.ILabel! label) -> void
static Microsoft.Maui.Handlers.LabelHandler.MapCharacterSpacing(Microsoft.Maui.Handlers.ILabelHandler! handler, Microsoft.Maui.ILabel! label) -> void
static Microsoft.Maui.Handlers.LabelHandler.MapFont(Microsoft.Maui.Handlers.ILabelHandler! handler, Microsoft.Maui.ILabel! label) -> void
static Microsoft.Maui.Handlers.LabelHandler.MapFormatting(Microsoft.Maui.Handlers.ILabelHandler! handler, Microsoft.Maui.ILabel! label) -> void
static Microsoft.Maui.Handlers.LabelHandler.MapHorizontalTextAlignment(Microsoft.Maui.Handlers.ILabelHandler! handler, Microsoft.Maui.ILabel! label) -> void
static Microsoft.Maui.Handlers.LabelHandler.MapLineHeight(Microsoft.Maui.Handlers.ILabelHandler! handler, Microsoft.Maui.ILabel! label) -> void
static Microsoft.Maui.Handlers.LabelHandler.MapPadding(Microsoft.Maui.Handlers.ILabelHandler! handler, Microsoft.Maui.ILabel! label) -> void
static Microsoft.Maui.Handlers.LabelHandler.Mapper -> Microsoft.Maui.IPropertyMapper<Microsoft.Maui.ILabel!, Microsoft.Maui.Handlers.ILabelHandler!>!
static Microsoft.Maui.Handlers.LabelHandler.MapText(Microsoft.Maui.Handlers.ILabelHandler! handler, Microsoft.Maui.ILabel! label) -> void
static Microsoft.Maui.Handlers.LabelHandler.MapTextColor(Microsoft.Maui.Handlers.ILabelHandler! handler, Microsoft.Maui.ILabel! label) -> void
static Microsoft.Maui.Handlers.LabelHandler.MapTextDecorations(Microsoft.Maui.Handlers.ILabelHandler! handler, Microsoft.Maui.ILabel! label) -> void
static Microsoft.Maui.Handlers.LabelHandler.MapVerticalTextAlignment(Microsoft.Maui.Handlers.ILabelHandler! handler, Microsoft.Maui.ILabel! label) -> void
static Microsoft.Maui.Handlers.LayoutHandler.CommandMapper -> Microsoft.Maui.CommandMapper<Microsoft.Maui.ILayout!, Microsoft.Maui.ILayoutHandler!>!
static Microsoft.Maui.Handlers.LayoutHandler.MapAdd(Microsoft.Maui.ILayoutHandler! handler, Microsoft.Maui.ILayout! layout, object? arg) -> void
static Microsoft.Maui.Handlers.LayoutHandler.MapBackground(Microsoft.Maui.ILayoutHandler! handler, Microsoft.Maui.ILayout! layout) -> void
static Microsoft.Maui.Handlers.LayoutHandler.MapClear(Microsoft.Maui.ILayoutHandler! handler, Microsoft.Maui.ILayout! layout, object? arg) -> void
static Microsoft.Maui.Handlers.LayoutHandler.MapClipsToBounds(Microsoft.Maui.ILayoutHandler! handler, Microsoft.Maui.ILayout! layout) -> void
static Microsoft.Maui.Handlers.LayoutHandler.MapInsert(Microsoft.Maui.ILayoutHandler! handler, Microsoft.Maui.ILayout! layout, object? arg) -> void
static Microsoft.Maui.Handlers.LayoutHandler.Mapper -> Microsoft.Maui.IPropertyMapper<Microsoft.Maui.ILayout!, Microsoft.Maui.ILayoutHandler!>!
static Microsoft.Maui.Handlers.LayoutHandler.MapRemove(Microsoft.Maui.ILayoutHandler! handler, Microsoft.Maui.ILayout! layout, object? arg) -> void
static Microsoft.Maui.Handlers.MenuBarHandler.CommandMapper -> Microsoft.Maui.CommandMapper<Microsoft.Maui.IMenuBar!, Microsoft.Maui.Handlers.IMenuBarHandler!>!
static Microsoft.Maui.Handlers.MenuBarHandler.MapAdd(Microsoft.Maui.Handlers.IMenuBarHandler! handler, Microsoft.Maui.IMenuBar! layout, object? arg) -> void
static Microsoft.Maui.Handlers.MenuBarHandler.MapClear(Microsoft.Maui.Handlers.IMenuBarHandler! handler, Microsoft.Maui.IMenuBar! layout, object? arg) -> void
static Microsoft.Maui.Handlers.MenuBarHandler.MapInsert(Microsoft.Maui.Handlers.IMenuBarHandler! handler, Microsoft.Maui.IMenuBar! layout, object? arg) -> void
static Microsoft.Maui.Handlers.MenuBarHandler.Mapper -> Microsoft.Maui.IPropertyMapper<Microsoft.Maui.IMenuBar!, Microsoft.Maui.Handlers.IMenuBarHandler!>!
static Microsoft.Maui.Handlers.MenuBarHandler.MapRemove(Microsoft.Maui.Handlers.IMenuBarHandler! handler, Microsoft.Maui.IMenuBar! layout, object? arg) -> void
static Microsoft.Maui.Handlers.MenuBarItemHandler.CommandMapper -> Microsoft.Maui.CommandMapper<Microsoft.Maui.IMenuBarItem!, Microsoft.Maui.Handlers.IMenuBarItemHandler!>!
static Microsoft.Maui.Handlers.MenuBarItemHandler.MapAdd(Microsoft.Maui.Handlers.IMenuBarItemHandler! handler, Microsoft.Maui.IMenuBarItem! layout, object? arg) -> void
static Microsoft.Maui.Handlers.MenuBarItemHandler.MapClear(Microsoft.Maui.Handlers.IMenuBarItemHandler! handler, Microsoft.Maui.IMenuBarItem! layout, object? arg) -> void
static Microsoft.Maui.Handlers.MenuBarItemHandler.MapInsert(Microsoft.Maui.Handlers.IMenuBarItemHandler! handler, Microsoft.Maui.IMenuBarItem! layout, object? arg) -> void
static Microsoft.Maui.Handlers.MenuBarItemHandler.MapIsEnabled(Microsoft.Maui.Handlers.IMenuBarItemHandler! handler, Microsoft.Maui.IMenuBarItem! view) -> void
static Microsoft.Maui.Handlers.MenuBarItemHandler.Mapper -> Microsoft.Maui.IPropertyMapper<Microsoft.Maui.IMenuBarItem!, Microsoft.Maui.Handlers.IMenuBarItemHandler!>!
static Microsoft.Maui.Handlers.MenuBarItemHandler.MapRemove(Microsoft.Maui.Handlers.IMenuBarItemHandler! handler, Microsoft.Maui.IMenuBarItem! layout, object? arg) -> void
static Microsoft.Maui.Handlers.MenuFlyoutHandler.CommandMapper -> Microsoft.Maui.CommandMapper<Microsoft.Maui.IMenuFlyout!, Microsoft.Maui.Handlers.IMenuFlyoutHandler!>!
static Microsoft.Maui.Handlers.MenuFlyoutHandler.MapAdd(Microsoft.Maui.Handlers.IMenuFlyoutHandler! handler, Microsoft.Maui.IMenuFlyout! menuElement, object? arg) -> void
static Microsoft.Maui.Handlers.MenuFlyoutHandler.MapClear(Microsoft.Maui.Handlers.IMenuFlyoutHandler! handler, Microsoft.Maui.IMenuFlyout! menuElement, object? arg) -> void
static Microsoft.Maui.Handlers.MenuFlyoutHandler.MapInsert(Microsoft.Maui.Handlers.IMenuFlyoutHandler! handler, Microsoft.Maui.IMenuFlyout! menuElement, object? arg) -> void
static Microsoft.Maui.Handlers.MenuFlyoutHandler.Mapper -> Microsoft.Maui.IPropertyMapper<Microsoft.Maui.IMenuFlyout!, Microsoft.Maui.Handlers.IMenuFlyoutHandler!>!
static Microsoft.Maui.Handlers.MenuFlyoutHandler.MapRemove(Microsoft.Maui.Handlers.IMenuFlyoutHandler! handler, Microsoft.Maui.IMenuFlyout! menuElement, object? arg) -> void
static Microsoft.Maui.Handlers.MenuFlyoutItemHandler.CommandMapper -> Microsoft.Maui.CommandMapper<Microsoft.Maui.IMenuFlyoutItem!, Microsoft.Maui.Handlers.IMenuFlyoutItemHandler!>!
static Microsoft.Maui.Handlers.MenuFlyoutItemHandler.MapIsEnabled(Microsoft.Maui.Handlers.IMenuFlyoutItemHandler! handler, Microsoft.Maui.IMenuFlyoutItem! view) -> void
static Microsoft.Maui.Handlers.MenuFlyoutItemHandler.Mapper -> Microsoft.Maui.IPropertyMapper<Microsoft.Maui.IMenuFlyoutItem!, Microsoft.Maui.Handlers.IMenuFlyoutItemHandler!>!
static Microsoft.Maui.Handlers.MenuFlyoutSeparatorHandler.CommandMapper -> Microsoft.Maui.CommandMapper<Microsoft.Maui.IMenuFlyoutSeparator!, Microsoft.Maui.Handlers.IMenuFlyoutSeparatorHandler!>!
static Microsoft.Maui.Handlers.MenuFlyoutSeparatorHandler.Mapper -> Microsoft.Maui.IPropertyMapper<Microsoft.Maui.IMenuFlyoutSeparator!, Microsoft.Maui.Handlers.IMenuFlyoutSeparatorHandler!>!
static Microsoft.Maui.Handlers.MenuFlyoutSubItemHandler.CommandMapper -> Microsoft.Maui.CommandMapper<Microsoft.Maui.IMenuFlyoutSubItem!, Microsoft.Maui.Handlers.IMenuFlyoutSubItemHandler!>!
static Microsoft.Maui.Handlers.MenuFlyoutSubItemHandler.MapAdd(Microsoft.Maui.Handlers.IMenuFlyoutSubItemHandler! handler, Microsoft.Maui.IMenuElement! layout, object? arg) -> void
static Microsoft.Maui.Handlers.MenuFlyoutSubItemHandler.MapClear(Microsoft.Maui.Handlers.IMenuFlyoutSubItemHandler! handler, Microsoft.Maui.IMenuElement! layout, object? arg) -> void
static Microsoft.Maui.Handlers.MenuFlyoutSubItemHandler.MapInsert(Microsoft.Maui.Handlers.IMenuFlyoutSubItemHandler! handler, Microsoft.Maui.IMenuElement! layout, object? arg) -> void
static Microsoft.Maui.Handlers.MenuFlyoutSubItemHandler.MapIsEnabled(Microsoft.Maui.Handlers.IMenuFlyoutSubItemHandler! handler, Microsoft.Maui.IMenuFlyoutSubItem! view) -> void
static Microsoft.Maui.Handlers.MenuFlyoutSubItemHandler.Mapper -> Microsoft.Maui.IPropertyMapper<Microsoft.Maui.IMenuFlyoutSubItem!, Microsoft.Maui.Handlers.IMenuFlyoutSubItemHandler!>!
static Microsoft.Maui.Handlers.MenuFlyoutSubItemHandler.MapRemove(Microsoft.Maui.Handlers.IMenuFlyoutSubItemHandler! handler, Microsoft.Maui.IMenuElement! layout, object? arg) -> void
static Microsoft.Maui.Handlers.NavigationViewHandler.CommandMapper -> Microsoft.Maui.CommandMapper<Microsoft.Maui.IStackNavigationView!, Microsoft.Maui.Handlers.INavigationViewHandler!>!
static Microsoft.Maui.Handlers.NavigationViewHandler.Mapper -> Microsoft.Maui.IPropertyMapper<Microsoft.Maui.IStackNavigationView!, Microsoft.Maui.Handlers.INavigationViewHandler!>!
static Microsoft.Maui.Handlers.NavigationViewHandler.RequestNavigation(Microsoft.Maui.Handlers.INavigationViewHandler! arg1, Microsoft.Maui.IStackNavigation! arg2, object? arg3) -> void
static Microsoft.Maui.Handlers.PageHandler.CommandMapper -> Microsoft.Maui.CommandMapper<Microsoft.Maui.IContentView!, Microsoft.Maui.Handlers.IPageHandler!>!
static Microsoft.Maui.Handlers.PageHandler.MapBackground(Microsoft.Maui.Handlers.IPageHandler! handler, Microsoft.Maui.IContentView! page) -> void
static Microsoft.Maui.Handlers.PageHandler.Mapper -> Microsoft.Maui.IPropertyMapper<Microsoft.Maui.IContentView!, Microsoft.Maui.Handlers.IPageHandler!>!
static Microsoft.Maui.Handlers.PageHandler.MapTitle(Microsoft.Maui.Handlers.IPageHandler! handler, Microsoft.Maui.IContentView! page) -> void
static Microsoft.Maui.Handlers.PickerHandler.CommandMapper -> Microsoft.Maui.CommandMapper<Microsoft.Maui.IPicker!, Microsoft.Maui.Handlers.IPickerHandler!>!
static Microsoft.Maui.Handlers.PickerHandler.MapCharacterSpacing(Microsoft.Maui.Handlers.IPickerHandler! handler, Microsoft.Maui.IPicker! picker) -> void
static Microsoft.Maui.Handlers.PickerHandler.MapFont(Microsoft.Maui.Handlers.IPickerHandler! handler, Microsoft.Maui.IPicker! picker) -> void
static Microsoft.Maui.Handlers.PickerHandler.MapHorizontalTextAlignment(Microsoft.Maui.Handlers.IPickerHandler! handler, Microsoft.Maui.IPicker! picker) -> void
static Microsoft.Maui.Handlers.PickerHandler.Mapper -> Microsoft.Maui.IPropertyMapper<Microsoft.Maui.IPicker!, Microsoft.Maui.Handlers.IPickerHandler!>!
static Microsoft.Maui.Handlers.PickerHandler.MapReload(Microsoft.Maui.Handlers.IPickerHandler! handler, Microsoft.Maui.IPicker! picker, object? args) -> void
static Microsoft.Maui.Handlers.PickerHandler.MapSelectedIndex(Microsoft.Maui.Handlers.IPickerHandler! handler, Microsoft.Maui.IPicker! picker) -> void
static Microsoft.Maui.Handlers.PickerHandler.MapTextColor(Microsoft.Maui.Handlers.IPickerHandler! handler, Microsoft.Maui.IPicker! picker) -> void
static Microsoft.Maui.Handlers.PickerHandler.MapTitle(Microsoft.Maui.Handlers.IPickerHandler! handler, Microsoft.Maui.IPicker! picker) -> void
static Microsoft.Maui.Handlers.PickerHandler.MapTitleColor(Microsoft.Maui.Handlers.IPickerHandler! handler, Microsoft.Maui.IPicker! picker) -> void
static Microsoft.Maui.Handlers.PickerHandler.MapVerticalTextAlignment(Microsoft.Maui.Handlers.IPickerHandler! handler, Microsoft.Maui.IPicker! picker) -> void
static Microsoft.Maui.Handlers.ProgressBarHandler.CommandMapper -> Microsoft.Maui.CommandMapper<Microsoft.Maui.IProgress!, Microsoft.Maui.Handlers.IProgressBarHandler!>!
static Microsoft.Maui.Handlers.ProgressBarHandler.Mapper -> Microsoft.Maui.IPropertyMapper<Microsoft.Maui.IProgress!, Microsoft.Maui.Handlers.IProgressBarHandler!>!
static Microsoft.Maui.Handlers.ProgressBarHandler.MapProgress(Microsoft.Maui.Handlers.IProgressBarHandler! handler, Microsoft.Maui.IProgress! progress) -> void
static Microsoft.Maui.Handlers.ProgressBarHandler.MapProgressColor(Microsoft.Maui.Handlers.IProgressBarHandler! handler, Microsoft.Maui.IProgress! progress) -> void
static Microsoft.Maui.Handlers.RadioButtonHandler.CommandMapper -> Microsoft.Maui.CommandMapper<Microsoft.Maui.IRadioButton!, Microsoft.Maui.Handlers.IRadioButtonHandler!>!
static Microsoft.Maui.Handlers.RadioButtonHandler.MapCharacterSpacing(Microsoft.Maui.Handlers.IRadioButtonHandler! handler, Microsoft.Maui.ITextStyle! textStyle) -> void
static Microsoft.Maui.Handlers.RadioButtonHandler.MapContent(Microsoft.Maui.Handlers.IRadioButtonHandler! handler, Microsoft.Maui.IContentView! page) -> void
static Microsoft.Maui.Handlers.RadioButtonHandler.MapCornerRadius(Microsoft.Maui.Handlers.IRadioButtonHandler! handler, Microsoft.Maui.IRadioButton! radioButton) -> void
static Microsoft.Maui.Handlers.RadioButtonHandler.MapFont(Microsoft.Maui.Handlers.IRadioButtonHandler! handler, Microsoft.Maui.ITextStyle! textStyle) -> void
static Microsoft.Maui.Handlers.RadioButtonHandler.MapIsChecked(Microsoft.Maui.Handlers.IRadioButtonHandler! handler, Microsoft.Maui.IRadioButton! radioButton) -> void
static Microsoft.Maui.Handlers.RadioButtonHandler.Mapper -> Microsoft.Maui.IPropertyMapper<Microsoft.Maui.IRadioButton!, Microsoft.Maui.Handlers.IRadioButtonHandler!>!
static Microsoft.Maui.Handlers.RadioButtonHandler.MapStrokeColor(Microsoft.Maui.Handlers.IRadioButtonHandler! handler, Microsoft.Maui.IRadioButton! radioButton) -> void
static Microsoft.Maui.Handlers.RadioButtonHandler.MapStrokeThickness(Microsoft.Maui.Handlers.IRadioButtonHandler! handler, Microsoft.Maui.IRadioButton! radioButton) -> void
static Microsoft.Maui.Handlers.RadioButtonHandler.MapTextColor(Microsoft.Maui.Handlers.IRadioButtonHandler! handler, Microsoft.Maui.ITextStyle! textStyle) -> void
static Microsoft.Maui.Handlers.RefreshViewHandler.CommandMapper -> Microsoft.Maui.CommandMapper<Microsoft.Maui.IRefreshView!, Microsoft.Maui.Handlers.IRefreshViewHandler!>!
static Microsoft.Maui.Handlers.RefreshViewHandler.MapBackground(Microsoft.Maui.Handlers.IRefreshViewHandler! handler, Microsoft.Maui.IRefreshView! view) -> void
static Microsoft.Maui.Handlers.RefreshViewHandler.MapContent(Microsoft.Maui.Handlers.IRefreshViewHandler! handler, Microsoft.Maui.IRefreshView! refreshView) -> void
static Microsoft.Maui.Handlers.RefreshViewHandler.MapIsEnabled(Microsoft.Maui.Handlers.IRefreshViewHandler! handler, Microsoft.Maui.IRefreshView! refreshView) -> void
static Microsoft.Maui.Handlers.RefreshViewHandler.MapIsRefreshing(Microsoft.Maui.Handlers.IRefreshViewHandler! handler, Microsoft.Maui.IRefreshView! refreshView) -> void
static Microsoft.Maui.Handlers.RefreshViewHandler.Mapper -> Microsoft.Maui.IPropertyMapper<Microsoft.Maui.IRefreshView!, Microsoft.Maui.Handlers.IRefreshViewHandler!>!
static Microsoft.Maui.Handlers.RefreshViewHandler.MapRefreshColor(Microsoft.Maui.Handlers.IRefreshViewHandler! handler, Microsoft.Maui.IRefreshView! refreshView) -> void
static Microsoft.Maui.Handlers.ScrollViewHandler.CommandMapper -> Microsoft.Maui.CommandMapper<Microsoft.Maui.IScrollView!, Microsoft.Maui.Handlers.IScrollViewHandler!>!
static Microsoft.Maui.Handlers.ScrollViewHandler.MapContent(Microsoft.Maui.Handlers.IScrollViewHandler! handler, Microsoft.Maui.IScrollView! scrollView) -> void
static Microsoft.Maui.Handlers.ScrollViewHandler.MapContentSize(Microsoft.Maui.Handlers.IScrollViewHandler! handler, Microsoft.Maui.IScrollView! scrollView) -> void
static Microsoft.Maui.Handlers.ScrollViewHandler.MapHorizontalScrollBarVisibility(Microsoft.Maui.Handlers.IScrollViewHandler! handler, Microsoft.Maui.IScrollView! scrollView) -> void
static Microsoft.Maui.Handlers.ScrollViewHandler.MapIsEnabled(Microsoft.Maui.Handlers.IScrollViewHandler! handler, Microsoft.Maui.IScrollView! scrollView) -> void
static Microsoft.Maui.Handlers.ScrollViewHandler.MapOrientation(Microsoft.Maui.Handlers.IScrollViewHandler! handler, Microsoft.Maui.IScrollView! scrollView) -> void
static Microsoft.Maui.Handlers.ScrollViewHandler.Mapper -> Microsoft.Maui.IPropertyMapper<Microsoft.Maui.IScrollView!, Microsoft.Maui.Handlers.IScrollViewHandler!>!
static Microsoft.Maui.Handlers.ScrollViewHandler.MapRequestScrollTo(Microsoft.Maui.Handlers.IScrollViewHandler! handler, Microsoft.Maui.IScrollView! scrollView, object? args) -> void
static Microsoft.Maui.Handlers.ScrollViewHandler.MapVerticalScrollBarVisibility(Microsoft.Maui.Handlers.IScrollViewHandler! handler, Microsoft.Maui.IScrollView! scrollView) -> void
static Microsoft.Maui.Handlers.SearchBarHandler.CommandMapper -> Microsoft.Maui.CommandMapper<Microsoft.Maui.ISearchBar!, Microsoft.Maui.Handlers.ISearchBarHandler!>!
static Microsoft.Maui.Handlers.SearchBarHandler.MapBackground(Microsoft.Maui.Handlers.ISearchBarHandler! handler, Microsoft.Maui.ISearchBar! searchBar) -> void
static Microsoft.Maui.Handlers.SearchBarHandler.MapCancelButtonColor(Microsoft.Maui.Handlers.ISearchBarHandler! handler, Microsoft.Maui.ISearchBar! searchBar) -> void
static Microsoft.Maui.Handlers.SearchBarHandler.MapCharacterSpacing(Microsoft.Maui.Handlers.ISearchBarHandler! handler, Microsoft.Maui.ISearchBar! searchBar) -> void
static Microsoft.Maui.Handlers.SearchBarHandler.MapFont(Microsoft.Maui.Handlers.ISearchBarHandler! handler, Microsoft.Maui.ISearchBar! searchBar) -> void
static Microsoft.Maui.Handlers.SearchBarHandler.MapFormatting(Microsoft.Maui.Handlers.ISearchBarHandler! handler, Microsoft.Maui.ISearchBar! searchBar) -> void
static Microsoft.Maui.Handlers.SearchBarHandler.MapHorizontalTextAlignment(Microsoft.Maui.Handlers.ISearchBarHandler! handler, Microsoft.Maui.ISearchBar! searchBar) -> void
static Microsoft.Maui.Handlers.SearchBarHandler.MapIsEnabled(Microsoft.Maui.Handlers.ISearchBarHandler! handler, Microsoft.Maui.ISearchBar! searchBar) -> void
static Microsoft.Maui.Handlers.SearchBarHandler.MapIsReadOnly(Microsoft.Maui.Handlers.ISearchBarHandler! handler, Microsoft.Maui.ISearchBar! searchBar) -> void
static Microsoft.Maui.Handlers.SearchBarHandler.MapIsSpellCheckEnabled(Microsoft.Maui.Handlers.ISearchBarHandler! handler, Microsoft.Maui.ISearchBar! searchBar) -> void
static Microsoft.Maui.Handlers.SearchBarHandler.MapIsTextPredictionEnabled(Microsoft.Maui.Handlers.ISearchBarHandler! handler, Microsoft.Maui.ISearchBar! searchBar) -> void
static Microsoft.Maui.Handlers.SearchBarHandler.MapKeyboard(Microsoft.Maui.Handlers.ISearchBarHandler! handler, Microsoft.Maui.ISearchBar! searchBar) -> void
static Microsoft.Maui.Handlers.SearchBarHandler.MapMaxLength(Microsoft.Maui.Handlers.ISearchBarHandler! handler, Microsoft.Maui.ISearchBar! searchBar) -> void
static Microsoft.Maui.Handlers.SearchBarHandler.Mapper -> Microsoft.Maui.IPropertyMapper<Microsoft.Maui.ISearchBar!, Microsoft.Maui.Handlers.ISearchBarHandler!>!
static Microsoft.Maui.Handlers.SearchBarHandler.MapPlaceholder(Microsoft.Maui.Handlers.ISearchBarHandler! handler, Microsoft.Maui.ISearchBar! searchBar) -> void
static Microsoft.Maui.Handlers.SearchBarHandler.MapPlaceholderColor(Microsoft.Maui.Handlers.ISearchBarHandler! handler, Microsoft.Maui.ISearchBar! searchBar) -> void
static Microsoft.Maui.Handlers.SearchBarHandler.MapText(Microsoft.Maui.Handlers.ISearchBarHandler! handler, Microsoft.Maui.ISearchBar! searchBar) -> void
static Microsoft.Maui.Handlers.SearchBarHandler.MapTextColor(Microsoft.Maui.Handlers.ISearchBarHandler! handler, Microsoft.Maui.ISearchBar! searchBar) -> void
static Microsoft.Maui.Handlers.SearchBarHandler.MapVerticalTextAlignment(Microsoft.Maui.Handlers.ISearchBarHandler! handler, Microsoft.Maui.ISearchBar! searchBar) -> void
static Microsoft.Maui.Handlers.ShapeViewHandler.CommandMapper -> Microsoft.Maui.CommandMapper<Microsoft.Maui.IShapeView!, Microsoft.Maui.Handlers.IShapeViewHandler!>!
static Microsoft.Maui.Handlers.ShapeViewHandler.MapAspect(Microsoft.Maui.Handlers.IShapeViewHandler! handler, Microsoft.Maui.IShapeView! shapeView) -> void
static Microsoft.Maui.Handlers.ShapeViewHandler.MapBackground(Microsoft.Maui.Handlers.IShapeViewHandler! handler, Microsoft.Maui.IShapeView! shapeView) -> void
static Microsoft.Maui.Handlers.ShapeViewHandler.MapFill(Microsoft.Maui.Handlers.IShapeViewHandler! handler, Microsoft.Maui.IShapeView! shapeView) -> void
static Microsoft.Maui.Handlers.ShapeViewHandler.Mapper -> Microsoft.Maui.IPropertyMapper<Microsoft.Maui.IShapeView!, Microsoft.Maui.Handlers.IShapeViewHandler!>!
static Microsoft.Maui.Handlers.ShapeViewHandler.MapShape(Microsoft.Maui.Handlers.IShapeViewHandler! handler, Microsoft.Maui.IShapeView! shapeView) -> void
static Microsoft.Maui.Handlers.ShapeViewHandler.MapStroke(Microsoft.Maui.Handlers.IShapeViewHandler! handler, Microsoft.Maui.IShapeView! shapeView) -> void
static Microsoft.Maui.Handlers.ShapeViewHandler.MapStrokeDashOffset(Microsoft.Maui.Handlers.IShapeViewHandler! handler, Microsoft.Maui.IShapeView! shapeView) -> void
static Microsoft.Maui.Handlers.ShapeViewHandler.MapStrokeDashPattern(Microsoft.Maui.Handlers.IShapeViewHandler! handler, Microsoft.Maui.IShapeView! shapeView) -> void
static Microsoft.Maui.Handlers.ShapeViewHandler.MapStrokeLineCap(Microsoft.Maui.Handlers.IShapeViewHandler! handler, Microsoft.Maui.IShapeView! shapeView) -> void
static Microsoft.Maui.Handlers.ShapeViewHandler.MapStrokeLineJoin(Microsoft.Maui.Handlers.IShapeViewHandler! handler, Microsoft.Maui.IShapeView! shapeView) -> void
static Microsoft.Maui.Handlers.ShapeViewHandler.MapStrokeMiterLimit(Microsoft.Maui.Handlers.IShapeViewHandler! handler, Microsoft.Maui.IShapeView! shapeView) -> void
static Microsoft.Maui.Handlers.ShapeViewHandler.MapStrokeThickness(Microsoft.Maui.Handlers.IShapeViewHandler! handler, Microsoft.Maui.IShapeView! shapeView) -> void
static Microsoft.Maui.Handlers.SliderHandler.CommandMapper -> Microsoft.Maui.CommandMapper<Microsoft.Maui.ISlider!, Microsoft.Maui.Handlers.ISliderHandler!>!
static Microsoft.Maui.Handlers.SliderHandler.MapMaximum(Microsoft.Maui.Handlers.ISliderHandler! handler, Microsoft.Maui.ISlider! slider) -> void
static Microsoft.Maui.Handlers.SliderHandler.MapMaximumTrackColor(Microsoft.Maui.Handlers.ISliderHandler! handler, Microsoft.Maui.ISlider! slider) -> void
static Microsoft.Maui.Handlers.SliderHandler.MapMinimum(Microsoft.Maui.Handlers.ISliderHandler! handler, Microsoft.Maui.ISlider! slider) -> void
static Microsoft.Maui.Handlers.SliderHandler.MapMinimumTrackColor(Microsoft.Maui.Handlers.ISliderHandler! handler, Microsoft.Maui.ISlider! slider) -> void
static Microsoft.Maui.Handlers.SliderHandler.Mapper -> Microsoft.Maui.IPropertyMapper<Microsoft.Maui.ISlider!, Microsoft.Maui.Handlers.ISliderHandler!>!
static Microsoft.Maui.Handlers.SliderHandler.MapThumbColor(Microsoft.Maui.Handlers.ISliderHandler! handler, Microsoft.Maui.ISlider! slider) -> void
static Microsoft.Maui.Handlers.SliderHandler.MapThumbImageSource(Microsoft.Maui.Handlers.ISliderHandler! handler, Microsoft.Maui.ISlider! slider) -> void
static Microsoft.Maui.Handlers.SliderHandler.MapValue(Microsoft.Maui.Handlers.ISliderHandler! handler, Microsoft.Maui.ISlider! slider) -> void
static Microsoft.Maui.Handlers.StepperHandler.CommandMapper -> Microsoft.Maui.CommandMapper<Microsoft.Maui.IStepper!, Microsoft.Maui.Handlers.IStepperHandler!>!
static Microsoft.Maui.Handlers.StepperHandler.MapIncrement(Microsoft.Maui.Handlers.IStepperHandler! handler, Microsoft.Maui.IStepper! stepper) -> void
static Microsoft.Maui.Handlers.StepperHandler.MapMaximum(Microsoft.Maui.Handlers.IStepperHandler! handler, Microsoft.Maui.IStepper! stepper) -> void
static Microsoft.Maui.Handlers.StepperHandler.MapMinimum(Microsoft.Maui.Handlers.IStepperHandler! handler, Microsoft.Maui.IStepper! stepper) -> void
static Microsoft.Maui.Handlers.StepperHandler.Mapper -> Microsoft.Maui.IPropertyMapper<Microsoft.Maui.IStepper!, Microsoft.Maui.Handlers.IStepperHandler!>!
static Microsoft.Maui.Handlers.StepperHandler.MapValue(Microsoft.Maui.Handlers.IStepperHandler! handler, Microsoft.Maui.IStepper! stepper) -> void
static Microsoft.Maui.Handlers.SwipeItemMenuItemHandler.CommandMapper -> Microsoft.Maui.CommandMapper<Microsoft.Maui.ISwipeItemMenuItem!, Microsoft.Maui.Handlers.ISwipeItemMenuItemHandler!>!
static Microsoft.Maui.Handlers.SwipeItemMenuItemHandler.MapBackground(Microsoft.Maui.Handlers.ISwipeItemMenuItemHandler! handler, Microsoft.Maui.ISwipeItemMenuItem! view) -> void
static Microsoft.Maui.Handlers.SwipeItemMenuItemHandler.MapCharacterSpacing(Microsoft.Maui.Handlers.ISwipeItemMenuItemHandler! handler, Microsoft.Maui.ITextStyle! view) -> void
static Microsoft.Maui.Handlers.SwipeItemMenuItemHandler.MapFont(Microsoft.Maui.Handlers.ISwipeItemMenuItemHandler! handler, Microsoft.Maui.ITextStyle! view) -> void
static Microsoft.Maui.Handlers.SwipeItemMenuItemHandler.Mapper -> Microsoft.Maui.IPropertyMapper<Microsoft.Maui.ISwipeItemMenuItem!, Microsoft.Maui.Handlers.ISwipeItemMenuItemHandler!>!
static Microsoft.Maui.Handlers.SwipeItemMenuItemHandler.MapSource(Microsoft.Maui.Handlers.ISwipeItemMenuItemHandler! handler, Microsoft.Maui.ISwipeItemMenuItem! image) -> void
static Microsoft.Maui.Handlers.SwipeItemMenuItemHandler.MapSourceAsync(Microsoft.Maui.Handlers.ISwipeItemMenuItemHandler! handler, Microsoft.Maui.ISwipeItemMenuItem! image) -> System.Threading.Tasks.Task!
static Microsoft.Maui.Handlers.SwipeItemMenuItemHandler.MapText(Microsoft.Maui.Handlers.ISwipeItemMenuItemHandler! handler, Microsoft.Maui.ISwipeItemMenuItem! view) -> void
static Microsoft.Maui.Handlers.SwipeItemMenuItemHandler.MapTextColor(Microsoft.Maui.Handlers.ISwipeItemMenuItemHandler! handler, Microsoft.Maui.ISwipeItemMenuItem! view) -> void
static Microsoft.Maui.Handlers.SwipeItemMenuItemHandler.MapVisibility(Microsoft.Maui.Handlers.ISwipeItemMenuItemHandler! handler, Microsoft.Maui.ISwipeItemMenuItem! view) -> void
static Microsoft.Maui.Handlers.SwipeItemViewHandler.CommandMapper -> Microsoft.Maui.CommandMapper<Microsoft.Maui.ISwipeItemView!, Microsoft.Maui.Handlers.ISwipeItemViewHandler!>!
static Microsoft.Maui.Handlers.SwipeItemViewHandler.MapContent(Microsoft.Maui.Handlers.ISwipeItemViewHandler! handler, Microsoft.Maui.ISwipeItemView! page) -> void
static Microsoft.Maui.Handlers.SwipeItemViewHandler.Mapper -> Microsoft.Maui.IPropertyMapper<Microsoft.Maui.ISwipeItemView!, Microsoft.Maui.Handlers.ISwipeItemViewHandler!>!
static Microsoft.Maui.Handlers.SwipeItemViewHandler.MapVisibility(Microsoft.Maui.Handlers.ISwipeItemViewHandler! handler, Microsoft.Maui.ISwipeItemView! view) -> void
static Microsoft.Maui.Handlers.SwipeViewHandler.CommandMapper -> Microsoft.Maui.CommandMapper<Microsoft.Maui.ISwipeView!, Microsoft.Maui.Handlers.ISwipeViewHandler!>!
static Microsoft.Maui.Handlers.SwipeViewHandler.MapBottomItems(Microsoft.Maui.Handlers.ISwipeViewHandler! handler, Microsoft.Maui.ISwipeView! view) -> void
static Microsoft.Maui.Handlers.SwipeViewHandler.MapContent(Microsoft.Maui.Handlers.ISwipeViewHandler! handler, Microsoft.Maui.ISwipeView! view) -> void
static Microsoft.Maui.Handlers.SwipeViewHandler.MapIsEnabled(Microsoft.Maui.Handlers.ISwipeViewHandler! handler, Microsoft.Maui.ISwipeView! swipeView) -> void
static Microsoft.Maui.Handlers.SwipeViewHandler.MapLeftItems(Microsoft.Maui.Handlers.ISwipeViewHandler! handler, Microsoft.Maui.ISwipeView! view) -> void
static Microsoft.Maui.Handlers.SwipeViewHandler.Mapper -> Microsoft.Maui.IPropertyMapper<Microsoft.Maui.ISwipeView!, Microsoft.Maui.Handlers.ISwipeViewHandler!>!
static Microsoft.Maui.Handlers.SwipeViewHandler.MapRequestClose(Microsoft.Maui.Handlers.ISwipeViewHandler! handler, Microsoft.Maui.ISwipeView! swipeView, object? args) -> void
static Microsoft.Maui.Handlers.SwipeViewHandler.MapRequestOpen(Microsoft.Maui.Handlers.ISwipeViewHandler! handler, Microsoft.Maui.ISwipeView! swipeView, object? args) -> void
static Microsoft.Maui.Handlers.SwipeViewHandler.MapRightItems(Microsoft.Maui.Handlers.ISwipeViewHandler! handler, Microsoft.Maui.ISwipeView! view) -> void
static Microsoft.Maui.Handlers.SwipeViewHandler.MapSwipeTransitionMode(Microsoft.Maui.Handlers.ISwipeViewHandler! handler, Microsoft.Maui.ISwipeView! swipeView) -> void
static Microsoft.Maui.Handlers.SwipeViewHandler.MapTopItems(Microsoft.Maui.Handlers.ISwipeViewHandler! handler, Microsoft.Maui.ISwipeView! view) -> void
static Microsoft.Maui.Handlers.SwitchHandler.CommandMapper -> Microsoft.Maui.CommandMapper<Microsoft.Maui.ISwitch!, Microsoft.Maui.Handlers.ISwitchHandler!>!
static Microsoft.Maui.Handlers.SwitchHandler.MapIsOn(Microsoft.Maui.Handlers.ISwitchHandler! handler, Microsoft.Maui.ISwitch! view) -> void
static Microsoft.Maui.Handlers.SwitchHandler.Mapper -> Microsoft.Maui.IPropertyMapper<Microsoft.Maui.ISwitch!, Microsoft.Maui.Handlers.ISwitchHandler!>!
static Microsoft.Maui.Handlers.SwitchHandler.MapThumbColor(Microsoft.Maui.Handlers.ISwitchHandler! handler, Microsoft.Maui.ISwitch! view) -> void
static Microsoft.Maui.Handlers.SwitchHandler.MapTrackColor(Microsoft.Maui.Handlers.ISwitchHandler! handler, Microsoft.Maui.ISwitch! view) -> void
static Microsoft.Maui.Handlers.TabbedViewHandler.CommandMapper -> Microsoft.Maui.CommandMapper<Microsoft.Maui.ITabbedView!, Microsoft.Maui.Handlers.ITabbedViewHandler!>!
static Microsoft.Maui.Handlers.TabbedViewHandler.Mapper -> Microsoft.Maui.IPropertyMapper<Microsoft.Maui.ITabbedView!, Microsoft.Maui.Handlers.ITabbedViewHandler!>!
static Microsoft.Maui.Handlers.TimePickerHandler.CommandMapper -> Microsoft.Maui.CommandMapper<Microsoft.Maui.ITimePicker!, Microsoft.Maui.Handlers.ITimePickerHandler!>!
static Microsoft.Maui.Handlers.TimePickerHandler.MapCharacterSpacing(Microsoft.Maui.Handlers.ITimePickerHandler! handler, Microsoft.Maui.ITimePicker! timePicker) -> void
static Microsoft.Maui.Handlers.TimePickerHandler.MapFlowDirection(Microsoft.Maui.Handlers.TimePickerHandler! handler, Microsoft.Maui.ITimePicker! timePicker) -> void
static Microsoft.Maui.Handlers.TimePickerHandler.MapFont(Microsoft.Maui.Handlers.ITimePickerHandler! handler, Microsoft.Maui.ITimePicker! timePicker) -> void
static Microsoft.Maui.Handlers.TimePickerHandler.MapFormat(Microsoft.Maui.Handlers.ITimePickerHandler! handler, Microsoft.Maui.ITimePicker! timePicker) -> void
static Microsoft.Maui.Handlers.TimePickerHandler.Mapper -> Microsoft.Maui.IPropertyMapper<Microsoft.Maui.ITimePicker!, Microsoft.Maui.Handlers.ITimePickerHandler!>!
static Microsoft.Maui.Handlers.TimePickerHandler.MapTextColor(Microsoft.Maui.Handlers.ITimePickerHandler! handler, Microsoft.Maui.ITimePicker! timePicker) -> void
static Microsoft.Maui.Handlers.TimePickerHandler.MapTime(Microsoft.Maui.Handlers.ITimePickerHandler! handler, Microsoft.Maui.ITimePicker! timePicker) -> void
static Microsoft.Maui.Handlers.ToolbarHandler.CommandMapper -> Microsoft.Maui.CommandMapper<Microsoft.Maui.IToolbar!, Microsoft.Maui.Handlers.IToolbarHandler!>!
static Microsoft.Maui.Handlers.ToolbarHandler.Mapper -> Microsoft.Maui.IPropertyMapper<Microsoft.Maui.IToolbar!, Microsoft.Maui.Handlers.IToolbarHandler!>!
static Microsoft.Maui.Handlers.ToolbarHandler.MapTitle(Microsoft.Maui.Handlers.IToolbarHandler! arg1, Microsoft.Maui.IToolbar! arg2) -> void
static Microsoft.Maui.Handlers.ViewHandler.MapAnchorX(Microsoft.Maui.IViewHandler! handler, Microsoft.Maui.IView! view) -> void
static Microsoft.Maui.Handlers.ViewHandler.MapAnchorY(Microsoft.Maui.IViewHandler! handler, Microsoft.Maui.IView! view) -> void
static Microsoft.Maui.Handlers.ViewHandler.MapAutomationId(Microsoft.Maui.IViewHandler! handler, Microsoft.Maui.IView! view) -> void
static Microsoft.Maui.Handlers.ViewHandler.MapBackground(Microsoft.Maui.IViewHandler! handler, Microsoft.Maui.IView! view) -> void
static Microsoft.Maui.Handlers.ViewHandler.MapBorderView(Microsoft.Maui.IViewHandler! handler, Microsoft.Maui.IView! view) -> void
static Microsoft.Maui.Handlers.ViewHandler.MapClip(Microsoft.Maui.IViewHandler! handler, Microsoft.Maui.IView! view) -> void
static Microsoft.Maui.Handlers.ViewHandler.MapContainerView(Microsoft.Maui.IViewHandler! handler, Microsoft.Maui.IView! view) -> void
static Microsoft.Maui.Handlers.ViewHandler.MapContextFlyout(Microsoft.Maui.IViewHandler! handler, Microsoft.Maui.IView! view) -> void
static Microsoft.Maui.Handlers.ViewHandler.MapFlowDirection(Microsoft.Maui.IViewHandler! handler, Microsoft.Maui.IView! view) -> void
static Microsoft.Maui.Handlers.ViewHandler.MapFocus(Microsoft.Maui.IViewHandler! handler, Microsoft.Maui.IView! view, object? args) -> void
static Microsoft.Maui.Handlers.ViewHandler.MapFrame(Microsoft.Maui.IViewHandler! handler, Microsoft.Maui.IView! view, object? args) -> void
static Microsoft.Maui.Handlers.ViewHandler.MapHeight(Microsoft.Maui.IViewHandler! handler, Microsoft.Maui.IView! view) -> void
static Microsoft.Maui.Handlers.ViewHandler.MapInputTransparent(Microsoft.Maui.IViewHandler! handler, Microsoft.Maui.IView! view) -> void
static Microsoft.Maui.Handlers.ViewHandler.MapInvalidateMeasure(Microsoft.Maui.IViewHandler! handler, Microsoft.Maui.IView! view, object? args) -> void
static Microsoft.Maui.Handlers.ViewHandler.MapIsEnabled(Microsoft.Maui.IViewHandler! handler, Microsoft.Maui.IView! view) -> void
static Microsoft.Maui.Handlers.ViewHandler.MapMaximumHeight(Microsoft.Maui.IViewHandler! handler, Microsoft.Maui.IView! view) -> void
static Microsoft.Maui.Handlers.ViewHandler.MapMaximumWidth(Microsoft.Maui.IViewHandler! handler, Microsoft.Maui.IView! view) -> void
static Microsoft.Maui.Handlers.ViewHandler.MapMinimumHeight(Microsoft.Maui.IViewHandler! handler, Microsoft.Maui.IView! view) -> void
static Microsoft.Maui.Handlers.ViewHandler.MapMinimumWidth(Microsoft.Maui.IViewHandler! handler, Microsoft.Maui.IView! view) -> void
static Microsoft.Maui.Handlers.ViewHandler.MapOpacity(Microsoft.Maui.IViewHandler! handler, Microsoft.Maui.IView! view) -> void
static Microsoft.Maui.Handlers.ViewHandler.MapRotation(Microsoft.Maui.IViewHandler! handler, Microsoft.Maui.IView! view) -> void
static Microsoft.Maui.Handlers.ViewHandler.MapRotationX(Microsoft.Maui.IViewHandler! handler, Microsoft.Maui.IView! view) -> void
static Microsoft.Maui.Handlers.ViewHandler.MapRotationY(Microsoft.Maui.IViewHandler! handler, Microsoft.Maui.IView! view) -> void
static Microsoft.Maui.Handlers.ViewHandler.MapScale(Microsoft.Maui.IViewHandler! handler, Microsoft.Maui.IView! view) -> void
static Microsoft.Maui.Handlers.ViewHandler.MapScaleX(Microsoft.Maui.IViewHandler! handler, Microsoft.Maui.IView! view) -> void
static Microsoft.Maui.Handlers.ViewHandler.MapScaleY(Microsoft.Maui.IViewHandler! handler, Microsoft.Maui.IView! view) -> void
static Microsoft.Maui.Handlers.ViewHandler.MapSemantics(Microsoft.Maui.IViewHandler! handler, Microsoft.Maui.IView! view) -> void
static Microsoft.Maui.Handlers.ViewHandler.MapShadow(Microsoft.Maui.IViewHandler! handler, Microsoft.Maui.IView! view) -> void
static Microsoft.Maui.Handlers.ViewHandler.MapToolTip(Microsoft.Maui.IViewHandler! handler, Microsoft.Maui.IView! view) -> void
static Microsoft.Maui.Handlers.ViewHandler.MapTranslationX(Microsoft.Maui.IViewHandler! handler, Microsoft.Maui.IView! view) -> void
static Microsoft.Maui.Handlers.ViewHandler.MapTranslationY(Microsoft.Maui.IViewHandler! handler, Microsoft.Maui.IView! view) -> void
static Microsoft.Maui.Handlers.ViewHandler.MapUnfocus(Microsoft.Maui.IViewHandler! handler, Microsoft.Maui.IView! view, object? args) -> void
static Microsoft.Maui.Handlers.ViewHandler.MapVisibility(Microsoft.Maui.IViewHandler! handler, Microsoft.Maui.IView! view) -> void
static Microsoft.Maui.Handlers.ViewHandler.MapWidth(Microsoft.Maui.IViewHandler! handler, Microsoft.Maui.IView! view) -> void
static Microsoft.Maui.Handlers.ViewHandler.MapZIndex(Microsoft.Maui.IViewHandler! handler, Microsoft.Maui.IView! view, object? args) -> void
static Microsoft.Maui.Handlers.ViewHandler.ViewCommandMapper -> Microsoft.Maui.CommandMapper<Microsoft.Maui.IView!, Microsoft.Maui.IViewHandler!>!
static Microsoft.Maui.Handlers.ViewHandler.ViewMapper -> Microsoft.Maui.IPropertyMapper<Microsoft.Maui.IView!, Microsoft.Maui.IViewHandler!>!
static Microsoft.Maui.Handlers.ViewHandler<TVirtualView, TPlatformView>.PlatformViewFactory.get -> System.Func<Microsoft.Maui.Handlers.ViewHandler<TVirtualView!, TPlatformView!>!, TPlatformView!>?
static Microsoft.Maui.Handlers.ViewHandler<TVirtualView, TPlatformView>.PlatformViewFactory.set -> void
static Microsoft.Maui.Handlers.WebViewHandler.CommandMapper -> Microsoft.Maui.CommandMapper<Microsoft.Maui.IWebView!, Microsoft.Maui.Handlers.IWebViewHandler!>!
static Microsoft.Maui.Handlers.WebViewHandler.MapEval(Microsoft.Maui.Handlers.IWebViewHandler! handler, Microsoft.Maui.IWebView! webView, object? arg) -> void
static Microsoft.Maui.Handlers.WebViewHandler.MapEvaluateJavaScriptAsync(Microsoft.Maui.Handlers.IWebViewHandler! handler, Microsoft.Maui.IWebView! webView, object? arg) -> void
static Microsoft.Maui.Handlers.WebViewHandler.MapGoBack(Microsoft.Maui.Handlers.IWebViewHandler! handler, Microsoft.Maui.IWebView! webView, object? arg) -> void
static Microsoft.Maui.Handlers.WebViewHandler.MapGoForward(Microsoft.Maui.Handlers.IWebViewHandler! handler, Microsoft.Maui.IWebView! webView, object? arg) -> void
static Microsoft.Maui.Handlers.WebViewHandler.Mapper -> Microsoft.Maui.IPropertyMapper<Microsoft.Maui.IWebView!, Microsoft.Maui.Handlers.IWebViewHandler!>!
static Microsoft.Maui.Handlers.WebViewHandler.MapReload(Microsoft.Maui.Handlers.IWebViewHandler! handler, Microsoft.Maui.IWebView! webView, object? arg) -> void
static Microsoft.Maui.Handlers.WebViewHandler.MapSource(Microsoft.Maui.Handlers.IWebViewHandler! handler, Microsoft.Maui.IWebView! webView) -> void
static Microsoft.Maui.Handlers.WebViewHandler.MapUserAgent(Microsoft.Maui.Handlers.IWebViewHandler! handler, Microsoft.Maui.IWebView! webView) -> void
static Microsoft.Maui.Handlers.WebViewHandler.MapWKUIDelegate(Microsoft.Maui.Handlers.IWebViewHandler! handler, Microsoft.Maui.IWebView! webView) -> void
static Microsoft.Maui.Handlers.WindowHandler.CommandMapper -> Microsoft.Maui.CommandMapper<Microsoft.Maui.IWindow!, Microsoft.Maui.Handlers.IWindowHandler!>!
static Microsoft.Maui.Handlers.WindowHandler.MapContent(Microsoft.Maui.Handlers.IWindowHandler! handler, Microsoft.Maui.IWindow! window) -> void
static Microsoft.Maui.Handlers.WindowHandler.MapHeight(Microsoft.Maui.Handlers.IWindowHandler! handler, Microsoft.Maui.IWindow! view) -> void
static Microsoft.Maui.Handlers.WindowHandler.MapMaximumHeight(Microsoft.Maui.Handlers.IWindowHandler! handler, Microsoft.Maui.IWindow! view) -> void
static Microsoft.Maui.Handlers.WindowHandler.MapMaximumWidth(Microsoft.Maui.Handlers.IWindowHandler! handler, Microsoft.Maui.IWindow! view) -> void
static Microsoft.Maui.Handlers.WindowHandler.MapMenuBar(Microsoft.Maui.Handlers.IWindowHandler! handler, Microsoft.Maui.IWindow! view) -> void
static Microsoft.Maui.Handlers.WindowHandler.MapMinimumHeight(Microsoft.Maui.Handlers.IWindowHandler! handler, Microsoft.Maui.IWindow! view) -> void
static Microsoft.Maui.Handlers.WindowHandler.MapMinimumWidth(Microsoft.Maui.Handlers.IWindowHandler! handler, Microsoft.Maui.IWindow! view) -> void
static Microsoft.Maui.Handlers.WindowHandler.Mapper -> Microsoft.Maui.IPropertyMapper<Microsoft.Maui.IWindow!, Microsoft.Maui.Handlers.IWindowHandler!>!
static Microsoft.Maui.Handlers.WindowHandler.MapRequestDisplayDensity(Microsoft.Maui.Handlers.IWindowHandler! handler, Microsoft.Maui.IWindow! window, object? args) -> void
static Microsoft.Maui.Handlers.WindowHandler.MapTitle(Microsoft.Maui.Handlers.IWindowHandler! handler, Microsoft.Maui.IWindow! window) -> void
static Microsoft.Maui.Handlers.WindowHandler.MapWidth(Microsoft.Maui.Handlers.IWindowHandler! handler, Microsoft.Maui.IWindow! view) -> void
static Microsoft.Maui.Handlers.WindowHandler.MapX(Microsoft.Maui.Handlers.IWindowHandler! handler, Microsoft.Maui.IWindow! view) -> void
static Microsoft.Maui.Handlers.WindowHandler.MapY(Microsoft.Maui.Handlers.IWindowHandler! handler, Microsoft.Maui.IWindow! view) -> void
static Microsoft.Maui.Hosting.AppHostBuilderExtensions.ConfigureAnimations(this Microsoft.Maui.Hosting.MauiAppBuilder! builder) -> Microsoft.Maui.Hosting.MauiAppBuilder!
static Microsoft.Maui.Hosting.AppHostBuilderExtensions.ConfigureDispatching(this Microsoft.Maui.Hosting.MauiAppBuilder! builder) -> Microsoft.Maui.Hosting.MauiAppBuilder!
static Microsoft.Maui.Hosting.EssentialsExtensions.AddAppAction(this Microsoft.Maui.Hosting.IEssentialsBuilder! essentials, string! id, string! title, string? subtitle = null, string? icon = null) -> Microsoft.Maui.Hosting.IEssentialsBuilder!
static Microsoft.Maui.Hosting.EssentialsExtensions.ConfigureEssentials(this Microsoft.Maui.Hosting.MauiAppBuilder! builder, System.Action<Microsoft.Maui.Hosting.IEssentialsBuilder!>? configureDelegate = null) -> Microsoft.Maui.Hosting.MauiAppBuilder!
static Microsoft.Maui.Hosting.FontCollectionExtensions.AddEmbeddedResourceFont(this Microsoft.Maui.Hosting.IFontCollection! fontCollection, System.Reflection.Assembly! assembly, string! filename, string? alias = null) -> Microsoft.Maui.Hosting.IFontCollection!
static Microsoft.Maui.Hosting.FontCollectionExtensions.AddFont(this Microsoft.Maui.Hosting.IFontCollection! fontCollection, string! filename, string? alias = null) -> Microsoft.Maui.Hosting.IFontCollection!
static Microsoft.Maui.Hosting.FontsMauiAppBuilderExtensions.ConfigureFonts(this Microsoft.Maui.Hosting.MauiAppBuilder! builder, System.Action<Microsoft.Maui.Hosting.IFontCollection!>? configureDelegate) -> Microsoft.Maui.Hosting.MauiAppBuilder!
static Microsoft.Maui.Hosting.FontsMauiAppBuilderExtensions.ConfigureFonts(this Microsoft.Maui.Hosting.MauiAppBuilder! builder) -> Microsoft.Maui.Hosting.MauiAppBuilder!
static Microsoft.Maui.Hosting.HandlerMauiAppBuilderExtensions.ConfigureMauiHandlers(this Microsoft.Extensions.DependencyInjection.IServiceCollection! services, System.Action<Microsoft.Maui.Hosting.IMauiHandlersCollection!>? configureDelegate) -> Microsoft.Extensions.DependencyInjection.IServiceCollection!
static Microsoft.Maui.Hosting.HandlerMauiAppBuilderExtensions.ConfigureMauiHandlers(this Microsoft.Maui.Hosting.MauiAppBuilder! builder, System.Action<Microsoft.Maui.Hosting.IMauiHandlersCollection!>? configureDelegate) -> Microsoft.Maui.Hosting.MauiAppBuilder!
static Microsoft.Maui.Hosting.ImageSourceServiceCollectionExtensions.AddService<TImageSource, TImageSourceService>(this Microsoft.Maui.Hosting.IImageSourceServiceCollection! services) -> Microsoft.Maui.Hosting.IImageSourceServiceCollection!
static Microsoft.Maui.Hosting.ImageSourceServiceCollectionExtensions.AddService<TImageSource>(this Microsoft.Maui.Hosting.IImageSourceServiceCollection! services, System.Func<System.IServiceProvider!, Microsoft.Maui.IImageSourceService<TImageSource>!>! implementationFactory) -> Microsoft.Maui.Hosting.IImageSourceServiceCollection!
static Microsoft.Maui.Hosting.ImageSourcesMauiAppBuilderExtensions.ConfigureImageSources(this Microsoft.Maui.Hosting.MauiAppBuilder! builder, System.Action<Microsoft.Maui.Hosting.IImageSourceServiceCollection!>? configureDelegate) -> Microsoft.Maui.Hosting.MauiAppBuilder!
static Microsoft.Maui.Hosting.ImageSourcesMauiAppBuilderExtensions.ConfigureImageSources(this Microsoft.Maui.Hosting.MauiAppBuilder! builder) -> Microsoft.Maui.Hosting.MauiAppBuilder!
static Microsoft.Maui.Hosting.MauiApp.CreateBuilder(bool useDefaults = true) -> Microsoft.Maui.Hosting.MauiAppBuilder!
static Microsoft.Maui.Hosting.MauiHandlersCollectionExtensions.AddHandler(this Microsoft.Maui.Hosting.IMauiHandlersCollection! handlersCollection, System.Type! viewType, System.Type! handlerType) -> Microsoft.Maui.Hosting.IMauiHandlersCollection!
static Microsoft.Maui.Hosting.MauiHandlersCollectionExtensions.AddHandler<TType, TTypeRender>(this Microsoft.Maui.Hosting.IMauiHandlersCollection! handlersCollection) -> Microsoft.Maui.Hosting.IMauiHandlersCollection!
static Microsoft.Maui.Hosting.MauiHandlersCollectionExtensions.AddHandler<TType>(this Microsoft.Maui.Hosting.IMauiHandlersCollection! handlersCollection, System.Func<System.IServiceProvider!, Microsoft.Maui.IElementHandler!>! handlerImplementationFactory) -> Microsoft.Maui.Hosting.IMauiHandlersCollection!
static Microsoft.Maui.Hosting.MauiHandlersCollectionExtensions.TryAddHandler(this Microsoft.Maui.Hosting.IMauiHandlersCollection! handlersCollection, System.Type! viewType, System.Type! handlerType) -> Microsoft.Maui.Hosting.IMauiHandlersCollection!
static Microsoft.Maui.Hosting.MauiHandlersCollectionExtensions.TryAddHandler<TType, TTypeRender>(this Microsoft.Maui.Hosting.IMauiHandlersCollection! handlersCollection) -> Microsoft.Maui.Hosting.IMauiHandlersCollection!
static Microsoft.Maui.Hosting.MauiHandlersCollectionExtensions.TryAddHandler<TType>(this Microsoft.Maui.Hosting.IMauiHandlersCollection! handlersCollection, System.Func<System.IServiceProvider!, Microsoft.Maui.IElementHandler!>! handlerImplementationFactory) -> Microsoft.Maui.Hosting.IMauiHandlersCollection!
static Microsoft.Maui.HotReload.HotReloadExtensions.CheckHandlers(this Microsoft.Maui.IView? view) -> void
static Microsoft.Maui.HotReload.HotReloadExtensions.GetOnHotReloadMethods(this System.Type! type) -> System.Collections.Generic.List<System.Reflection.MethodInfo!>!
static Microsoft.Maui.HotReload.MauiHotReloadHelper.AddActiveView(Microsoft.Maui.HotReload.IHotReloadableView! view) -> void
static Microsoft.Maui.HotReload.MauiHotReloadHelper.ClearCache(System.Type![]! types) -> void
static Microsoft.Maui.HotReload.MauiHotReloadHelper.GetReplacedView(Microsoft.Maui.HotReload.IHotReloadableView! view) -> Microsoft.Maui.IView!
static Microsoft.Maui.HotReload.MauiHotReloadHelper.IsEnabled.get -> bool
static Microsoft.Maui.HotReload.MauiHotReloadHelper.IsEnabled.set -> void
static Microsoft.Maui.HotReload.MauiHotReloadHelper.IsReplacedView(Microsoft.Maui.HotReload.IHotReloadableView! view, Microsoft.Maui.IView! newView) -> bool
static Microsoft.Maui.HotReload.MauiHotReloadHelper.Register(Microsoft.Maui.HotReload.IHotReloadableView! view, params object![]! parameters) -> void
static Microsoft.Maui.HotReload.MauiHotReloadHelper.RegisterHandlers(Microsoft.Maui.Hosting.IMauiHandlersCollection! handlerService) -> void
static Microsoft.Maui.HotReload.MauiHotReloadHelper.RegisterReplacedView(string! oldViewType, System.Type! newViewType) -> void
static Microsoft.Maui.HotReload.MauiHotReloadHelper.Reset() -> void
static Microsoft.Maui.HotReload.MauiHotReloadHelper.TriggerReload() -> void
static Microsoft.Maui.HotReload.MauiHotReloadHelper.UnRegister(Microsoft.Maui.HotReload.IHotReloadableView! view) -> void
static Microsoft.Maui.HotReload.MauiHotReloadHelper.UpdateApplication(System.Type![]! types) -> void
static Microsoft.Maui.ImageSourceExtensions.GetPlatformImageAsync(this Microsoft.Maui.IImageSource? imageSource, Microsoft.Maui.IMauiContext! mauiContext) -> System.Threading.Tasks.Task<Microsoft.Maui.IImageSourceServiceResult<UIKit.UIImage!>?>!
static Microsoft.Maui.ImageSourceExtensions.GetPlatformImageAsync(this Microsoft.Maui.IImageSourceService! imageSourceService, Microsoft.Maui.IImageSource? imageSource, Microsoft.Maui.IMauiContext! mauiContext) -> System.Threading.Tasks.Task<Microsoft.Maui.IImageSourceServiceResult<UIKit.UIImage!>?>!
static Microsoft.Maui.ImageSourceExtensions.LoadImage(this Microsoft.Maui.IImageSource? source, Microsoft.Maui.IMauiContext! mauiContext, System.Action<Microsoft.Maui.IImageSourceServiceResult<UIKit.UIImage!>?>? finished = null) -> void
static Microsoft.Maui.ImageSourceServiceProviderExtensions.GetImageSourceService(this Microsoft.Maui.IImageSourceServiceProvider! provider, Microsoft.Maui.IImageSource! imageSource) -> Microsoft.Maui.IImageSourceService?
static Microsoft.Maui.ImageSourceServiceProviderExtensions.GetImageSourceService<T>(this Microsoft.Maui.IImageSourceServiceProvider! provider) -> Microsoft.Maui.IImageSourceService?
static Microsoft.Maui.ImageSourceServiceProviderExtensions.GetRequiredImageSourceService(this Microsoft.Maui.IImageSourceServiceProvider! provider, Microsoft.Maui.IImageSource! imageSource) -> Microsoft.Maui.IImageSourceService!
static Microsoft.Maui.ImageSourceServiceProviderExtensions.GetRequiredImageSourceService(this Microsoft.Maui.IImageSourceServiceProvider! provider, System.Type! imageSourceType) -> Microsoft.Maui.IImageSourceService!
static Microsoft.Maui.ImageSourceServiceProviderExtensions.GetRequiredImageSourceService<T>(this Microsoft.Maui.IImageSourceServiceProvider! provider) -> Microsoft.Maui.IImageSourceService!
static Microsoft.Maui.IPickerExtension.GetItemsAsArray(this Microsoft.Maui.IPicker! picker) -> string![]!
static Microsoft.Maui.IPickerExtension.GetItemsAsList(this Microsoft.Maui.IPicker! picker) -> System.Collections.Generic.List<string!>!
static Microsoft.Maui.ITextInputExtensions.TextWithinMaxLength(this Microsoft.Maui.ITextInput! textInput, string? text, Foundation.NSRange range, string! replacementString) -> bool
static Microsoft.Maui.ITextInputExtensions.UpdateText(this Microsoft.Maui.ITextInput! textInput, string? text) -> void
static Microsoft.Maui.Keyboard.Chat.get -> Microsoft.Maui.Keyboard!
static Microsoft.Maui.Keyboard.Create(Microsoft.Maui.KeyboardFlags flags) -> Microsoft.Maui.Keyboard!
static Microsoft.Maui.Keyboard.Default.get -> Microsoft.Maui.Keyboard!
static Microsoft.Maui.Keyboard.Email.get -> Microsoft.Maui.Keyboard!
static Microsoft.Maui.Keyboard.Numeric.get -> Microsoft.Maui.Keyboard!
static Microsoft.Maui.Keyboard.Plain.get -> Microsoft.Maui.Keyboard!
static Microsoft.Maui.Keyboard.Telephone.get -> Microsoft.Maui.Keyboard!
static Microsoft.Maui.Keyboard.Text.get -> Microsoft.Maui.Keyboard!
static Microsoft.Maui.Keyboard.Url.get -> Microsoft.Maui.Keyboard!
static Microsoft.Maui.Layouts.FlexBasis.implicit operator Microsoft.Maui.Layouts.FlexBasis(float length) -> Microsoft.Maui.Layouts.FlexBasis
static Microsoft.Maui.Layouts.FlexBasis.operator !=(Microsoft.Maui.Layouts.FlexBasis left, Microsoft.Maui.Layouts.FlexBasis right) -> bool
static Microsoft.Maui.Layouts.FlexBasis.operator ==(Microsoft.Maui.Layouts.FlexBasis left, Microsoft.Maui.Layouts.FlexBasis right) -> bool
static Microsoft.Maui.Layouts.LayoutExtensions.AdjustForFill(this Microsoft.Maui.Graphics.Size size, Microsoft.Maui.Graphics.Rect bounds, Microsoft.Maui.IView! view) -> Microsoft.Maui.Graphics.Size
static Microsoft.Maui.Layouts.LayoutExtensions.ArrangeContent(this Microsoft.Maui.IContentView! contentView, Microsoft.Maui.Graphics.Rect bounds) -> void
static Microsoft.Maui.Layouts.LayoutExtensions.ArrangeContentUnbounded(this Microsoft.Maui.IContentView! contentView, Microsoft.Maui.Graphics.Rect bounds) -> Microsoft.Maui.Graphics.Size
static Microsoft.Maui.Layouts.LayoutExtensions.ComputeDesiredSize(this Microsoft.Maui.IView! view, double widthConstraint, double heightConstraint) -> Microsoft.Maui.Graphics.Size
static Microsoft.Maui.Layouts.LayoutExtensions.ComputeFrame(this Microsoft.Maui.IView! view, Microsoft.Maui.Graphics.Rect bounds) -> Microsoft.Maui.Graphics.Rect
static Microsoft.Maui.Layouts.LayoutExtensions.MeasureContent(this Microsoft.Maui.IContentView! contentView, double widthConstraint, double heightConstraint) -> Microsoft.Maui.Graphics.Size
static Microsoft.Maui.Layouts.LayoutExtensions.MeasureContent(this Microsoft.Maui.IContentView! contentView, Microsoft.Maui.Thickness inset, double widthConstraint, double heightConstraint) -> Microsoft.Maui.Graphics.Size
static Microsoft.Maui.Layouts.LayoutManager.ResolveConstraints(double externalConstraint, double explicitLength, double measuredLength, double min = 0, double max = Infinity) -> double
static Microsoft.Maui.Layouts.StackLayoutManager.MeasureSpacing(double spacing, int childCount) -> double
static Microsoft.Maui.LifecycleEvents.iOSLifecycleBuilderExtensions.ApplicationSignificantTimeChange(this Microsoft.Maui.LifecycleEvents.IiOSLifecycleBuilder! lifecycle, Microsoft.Maui.LifecycleEvents.iOSLifecycle.ApplicationSignificantTimeChange! del) -> Microsoft.Maui.LifecycleEvents.IiOSLifecycleBuilder!
static Microsoft.Maui.LifecycleEvents.iOSLifecycleBuilderExtensions.ContinueUserActivity(this Microsoft.Maui.LifecycleEvents.IiOSLifecycleBuilder! lifecycle, Microsoft.Maui.LifecycleEvents.iOSLifecycle.ContinueUserActivity! del) -> Microsoft.Maui.LifecycleEvents.IiOSLifecycleBuilder!
static Microsoft.Maui.LifecycleEvents.iOSLifecycleBuilderExtensions.DidEnterBackground(this Microsoft.Maui.LifecycleEvents.IiOSLifecycleBuilder! lifecycle, Microsoft.Maui.LifecycleEvents.iOSLifecycle.DidEnterBackground! del) -> Microsoft.Maui.LifecycleEvents.IiOSLifecycleBuilder!
static Microsoft.Maui.LifecycleEvents.iOSLifecycleBuilderExtensions.FinishedLaunching(this Microsoft.Maui.LifecycleEvents.IiOSLifecycleBuilder! lifecycle, Microsoft.Maui.LifecycleEvents.iOSLifecycle.FinishedLaunching! del) -> Microsoft.Maui.LifecycleEvents.IiOSLifecycleBuilder!
static Microsoft.Maui.LifecycleEvents.iOSLifecycleBuilderExtensions.OnActivated(this Microsoft.Maui.LifecycleEvents.IiOSLifecycleBuilder! lifecycle, Microsoft.Maui.LifecycleEvents.iOSLifecycle.OnActivated! del) -> Microsoft.Maui.LifecycleEvents.IiOSLifecycleBuilder!
static Microsoft.Maui.LifecycleEvents.iOSLifecycleBuilderExtensions.OnResignActivation(this Microsoft.Maui.LifecycleEvents.IiOSLifecycleBuilder! lifecycle, Microsoft.Maui.LifecycleEvents.iOSLifecycle.OnResignActivation! del) -> Microsoft.Maui.LifecycleEvents.IiOSLifecycleBuilder!
static Microsoft.Maui.LifecycleEvents.iOSLifecycleBuilderExtensions.OpenUrl(this Microsoft.Maui.LifecycleEvents.IiOSLifecycleBuilder! lifecycle, Microsoft.Maui.LifecycleEvents.iOSLifecycle.OpenUrl! del) -> Microsoft.Maui.LifecycleEvents.IiOSLifecycleBuilder!
static Microsoft.Maui.LifecycleEvents.iOSLifecycleBuilderExtensions.PerformActionForShortcutItem(this Microsoft.Maui.LifecycleEvents.IiOSLifecycleBuilder! lifecycle, Microsoft.Maui.LifecycleEvents.iOSLifecycle.PerformActionForShortcutItem! del) -> Microsoft.Maui.LifecycleEvents.IiOSLifecycleBuilder!
static Microsoft.Maui.LifecycleEvents.iOSLifecycleBuilderExtensions.SceneContinueUserActivity(this Microsoft.Maui.LifecycleEvents.IiOSLifecycleBuilder! lifecycle, Microsoft.Maui.LifecycleEvents.iOSLifecycle.SceneContinueUserActivity! del) -> Microsoft.Maui.LifecycleEvents.IiOSLifecycleBuilder!
static Microsoft.Maui.LifecycleEvents.iOSLifecycleBuilderExtensions.SceneDidDisconnect(this Microsoft.Maui.LifecycleEvents.IiOSLifecycleBuilder! lifecycle, Microsoft.Maui.LifecycleEvents.iOSLifecycle.SceneDidDisconnect! del) -> Microsoft.Maui.LifecycleEvents.IiOSLifecycleBuilder!
static Microsoft.Maui.LifecycleEvents.iOSLifecycleBuilderExtensions.SceneDidEnterBackground(this Microsoft.Maui.LifecycleEvents.IiOSLifecycleBuilder! lifecycle, Microsoft.Maui.LifecycleEvents.iOSLifecycle.SceneDidEnterBackground! del) -> Microsoft.Maui.LifecycleEvents.IiOSLifecycleBuilder!
static Microsoft.Maui.LifecycleEvents.iOSLifecycleBuilderExtensions.SceneDidFailToContinueUserActivity(this Microsoft.Maui.LifecycleEvents.IiOSLifecycleBuilder! lifecycle, Microsoft.Maui.LifecycleEvents.iOSLifecycle.SceneDidFailToContinueUserActivity! del) -> Microsoft.Maui.LifecycleEvents.IiOSLifecycleBuilder!
static Microsoft.Maui.LifecycleEvents.iOSLifecycleBuilderExtensions.SceneDidUpdateUserActivity(this Microsoft.Maui.LifecycleEvents.IiOSLifecycleBuilder! lifecycle, Microsoft.Maui.LifecycleEvents.iOSLifecycle.SceneDidUpdateUserActivity! del) -> Microsoft.Maui.LifecycleEvents.IiOSLifecycleBuilder!
static Microsoft.Maui.LifecycleEvents.iOSLifecycleBuilderExtensions.SceneOnActivated(this Microsoft.Maui.LifecycleEvents.IiOSLifecycleBuilder! lifecycle, Microsoft.Maui.LifecycleEvents.iOSLifecycle.SceneOnActivated! del) -> Microsoft.Maui.LifecycleEvents.IiOSLifecycleBuilder!
static Microsoft.Maui.LifecycleEvents.iOSLifecycleBuilderExtensions.SceneOnResignActivation(this Microsoft.Maui.LifecycleEvents.IiOSLifecycleBuilder! lifecycle, Microsoft.Maui.LifecycleEvents.iOSLifecycle.SceneOnResignActivation! del) -> Microsoft.Maui.LifecycleEvents.IiOSLifecycleBuilder!
static Microsoft.Maui.LifecycleEvents.iOSLifecycleBuilderExtensions.SceneOpenUrl(this Microsoft.Maui.LifecycleEvents.IiOSLifecycleBuilder! lifecycle, Microsoft.Maui.LifecycleEvents.iOSLifecycle.SceneOpenUrl! del) -> Microsoft.Maui.LifecycleEvents.IiOSLifecycleBuilder!
static Microsoft.Maui.LifecycleEvents.iOSLifecycleBuilderExtensions.SceneRestoreInteractionState(this Microsoft.Maui.LifecycleEvents.IiOSLifecycleBuilder! lifecycle, Microsoft.Maui.LifecycleEvents.iOSLifecycle.SceneRestoreInteractionState! del) -> Microsoft.Maui.LifecycleEvents.IiOSLifecycleBuilder!
static Microsoft.Maui.LifecycleEvents.iOSLifecycleBuilderExtensions.SceneWillConnect(this Microsoft.Maui.LifecycleEvents.IiOSLifecycleBuilder! lifecycle, Microsoft.Maui.LifecycleEvents.iOSLifecycle.SceneWillConnect! del) -> Microsoft.Maui.LifecycleEvents.IiOSLifecycleBuilder!
static Microsoft.Maui.LifecycleEvents.iOSLifecycleBuilderExtensions.SceneWillContinueUserActivity(this Microsoft.Maui.LifecycleEvents.IiOSLifecycleBuilder! lifecycle, Microsoft.Maui.LifecycleEvents.iOSLifecycle.SceneWillContinueUserActivity! del) -> Microsoft.Maui.LifecycleEvents.IiOSLifecycleBuilder!
static Microsoft.Maui.LifecycleEvents.iOSLifecycleBuilderExtensions.SceneWillEnterForeground(this Microsoft.Maui.LifecycleEvents.IiOSLifecycleBuilder! lifecycle, Microsoft.Maui.LifecycleEvents.iOSLifecycle.SceneWillEnterForeground! del) -> Microsoft.Maui.LifecycleEvents.IiOSLifecycleBuilder!
static Microsoft.Maui.LifecycleEvents.iOSLifecycleBuilderExtensions.WillEnterForeground(this Microsoft.Maui.LifecycleEvents.IiOSLifecycleBuilder! lifecycle, Microsoft.Maui.LifecycleEvents.iOSLifecycle.WillEnterForeground! del) -> Microsoft.Maui.LifecycleEvents.IiOSLifecycleBuilder!
static Microsoft.Maui.LifecycleEvents.iOSLifecycleBuilderExtensions.WillFinishLaunching(this Microsoft.Maui.LifecycleEvents.IiOSLifecycleBuilder! lifecycle, Microsoft.Maui.LifecycleEvents.iOSLifecycle.WillFinishLaunching! del) -> Microsoft.Maui.LifecycleEvents.IiOSLifecycleBuilder!
static Microsoft.Maui.LifecycleEvents.iOSLifecycleBuilderExtensions.WillTerminate(this Microsoft.Maui.LifecycleEvents.IiOSLifecycleBuilder! lifecycle, Microsoft.Maui.LifecycleEvents.iOSLifecycle.WillTerminate! del) -> Microsoft.Maui.LifecycleEvents.IiOSLifecycleBuilder!
static Microsoft.Maui.LifecycleEvents.iOSLifecycleBuilderExtensions.WindowSceneDidUpdateCoordinateSpace(this Microsoft.Maui.LifecycleEvents.IiOSLifecycleBuilder! lifecycle, Microsoft.Maui.LifecycleEvents.iOSLifecycle.WindowSceneDidUpdateCoordinateSpace! del) -> Microsoft.Maui.LifecycleEvents.IiOSLifecycleBuilder!
static Microsoft.Maui.LifecycleEvents.iOSLifecycleExtensions.AddiOS(this Microsoft.Maui.LifecycleEvents.ILifecycleBuilder! builder, System.Action<Microsoft.Maui.LifecycleEvents.IiOSLifecycleBuilder!>! configureDelegate) -> Microsoft.Maui.LifecycleEvents.ILifecycleBuilder!
static Microsoft.Maui.LifecycleEvents.LifecycleBuilderExtensions.AddEvent(this Microsoft.Maui.LifecycleEvents.ILifecycleBuilder! builder, string! eventName, System.Action! action) -> Microsoft.Maui.LifecycleEvents.ILifecycleBuilder!
static Microsoft.Maui.LifecycleEvents.LifecycleBuilderExtensions.AddEvent<TDelegate>(this Microsoft.Maui.LifecycleEvents.ILifecycleBuilder! builder, string! eventName, TDelegate! action) -> Microsoft.Maui.LifecycleEvents.ILifecycleBuilder!
static Microsoft.Maui.LifecycleEvents.LifecycleEventServiceExtensions.InvokeEvents(this Microsoft.Maui.LifecycleEvents.ILifecycleEventService! lifecycleService, string! eventName) -> void
static Microsoft.Maui.LifecycleEvents.LifecycleEventServiceExtensions.InvokeEvents<TDelegate>(this Microsoft.Maui.LifecycleEvents.ILifecycleEventService! lifecycleService, string! eventName, System.Action<TDelegate!>! action) -> void
static Microsoft.Maui.LifecycleEvents.MauiAppHostBuilderExtensions.ConfigureLifecycleEvents(this Microsoft.Maui.Hosting.MauiAppBuilder! builder, System.Action<Microsoft.Maui.LifecycleEvents.ILifecycleBuilder!>? configureDelegate) -> Microsoft.Maui.Hosting.MauiAppBuilder!
static Microsoft.Maui.MauiUIApplicationDelegate.Current.get -> Microsoft.Maui.MauiUIApplicationDelegate!
static Microsoft.Maui.Platform.ActivityIndicatorExtensions.UpdateColor(this UIKit.UIActivityIndicatorView! activityIndicatorView, Microsoft.Maui.IActivityIndicator! activityIndicator) -> void
static Microsoft.Maui.Platform.ActivityIndicatorExtensions.UpdateIsRunning(this UIKit.UIActivityIndicatorView! activityIndicatorView, Microsoft.Maui.IActivityIndicator! activityIndicator) -> void
static Microsoft.Maui.Platform.ApplicationExtensions.CreatePlatformWindow(this UIKit.IUIApplicationDelegate! platformApplication, Microsoft.Maui.IApplication! application, UIKit.UIApplication! uiApplication, Foundation.NSDictionary! launchOptions) -> void
static Microsoft.Maui.Platform.ApplicationExtensions.CreatePlatformWindow(this UIKit.IUIWindowSceneDelegate! sceneDelegate, Microsoft.Maui.IApplication! application, UIKit.UIScene! scene, UIKit.UISceneSession! session, UIKit.UISceneConnectionOptions! connectionOptions) -> void
static Microsoft.Maui.Platform.ApplicationExtensions.RequestNewWindow(this UIKit.IUIApplicationDelegate! platformApplication, Microsoft.Maui.IApplication! application, Microsoft.Maui.Handlers.OpenWindowRequest? args) -> void
static Microsoft.Maui.Platform.ApplicationExtensions.ToUserActivity(this Microsoft.Maui.IPersistedState? state, string! userActivityType) -> Foundation.NSUserActivity!
static Microsoft.Maui.Platform.ApplicationExtensions.UpdateUserInterfaceStyle(this Microsoft.Maui.IApplication! application) -> void
static Microsoft.Maui.Platform.AspectExtensions.ToUIViewContentMode(this Microsoft.Maui.Aspect aspect) -> UIKit.UIViewContentMode
static Microsoft.Maui.Platform.AttributedStringExtensions.TrimToMaxLength(this Foundation.NSAttributedString? attributedString, int maxLength) -> Foundation.NSAttributedString?
static Microsoft.Maui.Platform.AttributedStringExtensions.WithCharacterSpacing(this Foundation.NSAttributedString! attributedString, double characterSpacing) -> Foundation.NSMutableAttributedString?
static Microsoft.Maui.Platform.AttributedStringExtensions.WithDecorations(this Foundation.NSAttributedString! attributedString, Microsoft.Maui.TextDecorations decorations) -> Foundation.NSMutableAttributedString?
static Microsoft.Maui.Platform.AttributedStringExtensions.WithLineHeight(this Foundation.NSAttributedString! attributedString, double lineHeight) -> Foundation.NSMutableAttributedString?
static Microsoft.Maui.Platform.ButtonExtensions.UpdateCharacterSpacing(this UIKit.UIButton! platformButton, Microsoft.Maui.ITextStyle! textStyle) -> void
static Microsoft.Maui.Platform.ButtonExtensions.UpdateCornerRadius(this UIKit.UIButton! platformButton, Microsoft.Maui.IButtonStroke! buttonStroke) -> void
static Microsoft.Maui.Platform.ButtonExtensions.UpdateFont(this UIKit.UIButton! platformButton, Microsoft.Maui.ITextStyle! textStyle, Microsoft.Maui.IFontManager! fontManager) -> void
static Microsoft.Maui.Platform.ButtonExtensions.UpdatePadding(this UIKit.UIButton! platformButton, Microsoft.Maui.IButton! button, Microsoft.Maui.Thickness? defaultPadding = null) -> void
static Microsoft.Maui.Platform.ButtonExtensions.UpdatePadding(this UIKit.UIButton! platformButton, Microsoft.Maui.Thickness padding, Microsoft.Maui.Thickness? defaultPadding = null) -> void
static Microsoft.Maui.Platform.ButtonExtensions.UpdateStrokeColor(this UIKit.UIButton! platformButton, Microsoft.Maui.IButtonStroke! buttonStroke) -> void
static Microsoft.Maui.Platform.ButtonExtensions.UpdateStrokeThickness(this UIKit.UIButton! platformButton, Microsoft.Maui.IButtonStroke! buttonStroke) -> void
static Microsoft.Maui.Platform.ButtonExtensions.UpdateText(this UIKit.UIButton! platformButton, Microsoft.Maui.IText! button) -> void
static Microsoft.Maui.Platform.ButtonExtensions.UpdateTextColor(this UIKit.UIButton! platformButton, Microsoft.Maui.ITextStyle! button) -> void
static Microsoft.Maui.Platform.CheckBoxExtensions.UpdateForeground(this Microsoft.Maui.Platform.MauiCheckBox! platformCheckBox, Microsoft.Maui.ICheckBox! check) -> void
static Microsoft.Maui.Platform.CheckBoxExtensions.UpdateIsChecked(this Microsoft.Maui.Platform.MauiCheckBox! platformCheckBox, Microsoft.Maui.ICheckBox! check) -> void
static Microsoft.Maui.Platform.CollectionViewExtensions.UpdateHorizontalScrollBarVisibility(this UIKit.UICollectionView! collectionView, Microsoft.Maui.ScrollBarVisibility scrollBarVisibility) -> void
static Microsoft.Maui.Platform.CollectionViewExtensions.UpdateVerticalScrollBarVisibility(this UIKit.UICollectionView! collectionView, Microsoft.Maui.ScrollBarVisibility scrollBarVisibility) -> void
static Microsoft.Maui.Platform.ColorExtensions.FromPatternImageFromBundle(string! bgImage) -> UIKit.UIColor!
static Microsoft.Maui.Platform.ColorExtensions.ToCGColor(this Microsoft.Maui.Graphics.Color! color) -> CoreGraphics.CGColor!
static Microsoft.Maui.Platform.ColorExtensions.ToColor(this UIKit.UIColor! color) -> Microsoft.Maui.Graphics.Color?
static Microsoft.Maui.Platform.ColorExtensions.ToPlatform(this Microsoft.Maui.Graphics.Color! color) -> UIKit.UIColor!
static Microsoft.Maui.Platform.ColorExtensions.ToPlatform(this Microsoft.Maui.Graphics.Color? color, Microsoft.Maui.Graphics.Color? defaultColor) -> UIKit.UIColor?
static Microsoft.Maui.Platform.ColorExtensions.ToPlatform(this Microsoft.Maui.Graphics.Color? color, UIKit.UIColor! defaultColor) -> UIKit.UIColor!
static Microsoft.Maui.Platform.CoreGraphicsExtensions.IsCloseTo(this CoreGraphics.CGSize size0, CoreGraphics.CGSize size1, System.Runtime.InteropServices.NFloat tolerance) -> bool
static Microsoft.Maui.Platform.CoreGraphicsExtensions.ToCGRect(this Microsoft.Maui.Graphics.Rect rect) -> CoreGraphics.CGRect
static Microsoft.Maui.Platform.CoreGraphicsExtensions.ToCGSize(this Microsoft.Maui.Graphics.Size size) -> CoreGraphics.CGSize
static Microsoft.Maui.Platform.CoreGraphicsExtensions.ToPoint(this CoreGraphics.CGPoint size) -> Microsoft.Maui.Graphics.Point
static Microsoft.Maui.Platform.CoreGraphicsExtensions.ToRectangle(this CoreGraphics.CGRect rect) -> Microsoft.Maui.Graphics.Rect
static Microsoft.Maui.Platform.CoreGraphicsExtensions.ToSize(this CoreGraphics.CGSize size) -> Microsoft.Maui.Graphics.Size
static Microsoft.Maui.Platform.Culture.CurrentCulture.get -> System.Globalization.CultureInfo!
static Microsoft.Maui.Platform.DateExtensions.ToDateTime(this Foundation.NSDate! date) -> System.DateTime
static Microsoft.Maui.Platform.DateExtensions.ToNSDate(this System.DateTime date) -> Foundation.NSDate!
static Microsoft.Maui.Platform.DatePickerExtensions.UpdateDate(this Microsoft.Maui.Platform.MauiDatePicker! platformDatePicker, Microsoft.Maui.IDatePicker! datePicker, UIKit.UIDatePicker? picker) -> void
static Microsoft.Maui.Platform.DatePickerExtensions.UpdateDate(this Microsoft.Maui.Platform.MauiDatePicker! platformDatePicker, Microsoft.Maui.IDatePicker! datePicker) -> void
static Microsoft.Maui.Platform.DatePickerExtensions.UpdateDate(this UIKit.UIDatePicker! picker, Microsoft.Maui.IDatePicker! datePicker) -> void
static Microsoft.Maui.Platform.DatePickerExtensions.UpdateFormat(this Microsoft.Maui.Platform.MauiDatePicker! platformDatePicker, Microsoft.Maui.IDatePicker! datePicker, UIKit.UIDatePicker? picker) -> void
static Microsoft.Maui.Platform.DatePickerExtensions.UpdateFormat(this Microsoft.Maui.Platform.MauiDatePicker! platformDatePicker, Microsoft.Maui.IDatePicker! datePicker) -> void
static Microsoft.Maui.Platform.DatePickerExtensions.UpdateFormat(this UIKit.UIDatePicker! picker, Microsoft.Maui.IDatePicker! datePicker) -> void
static Microsoft.Maui.Platform.DatePickerExtensions.UpdateMaximumDate(this Microsoft.Maui.Platform.MauiDatePicker! platformDatePicker, Microsoft.Maui.IDatePicker! datePicker, UIKit.UIDatePicker? picker) -> void
static Microsoft.Maui.Platform.DatePickerExtensions.UpdateMaximumDate(this Microsoft.Maui.Platform.MauiDatePicker! platformDatePicker, Microsoft.Maui.IDatePicker! datePicker) -> void
static Microsoft.Maui.Platform.DatePickerExtensions.UpdateMaximumDate(this UIKit.UIDatePicker! platformDatePicker, Microsoft.Maui.IDatePicker! datePicker) -> void
static Microsoft.Maui.Platform.DatePickerExtensions.UpdateMinimumDate(this Microsoft.Maui.Platform.MauiDatePicker! platformDatePicker, Microsoft.Maui.IDatePicker! datePicker, UIKit.UIDatePicker? picker) -> void
static Microsoft.Maui.Platform.DatePickerExtensions.UpdateMinimumDate(this Microsoft.Maui.Platform.MauiDatePicker! platformDatePicker, Microsoft.Maui.IDatePicker! datePicker) -> void
static Microsoft.Maui.Platform.DatePickerExtensions.UpdateMinimumDate(this UIKit.UIDatePicker! platformDatePicker, Microsoft.Maui.IDatePicker! datePicker) -> void
static Microsoft.Maui.Platform.DatePickerExtensions.UpdateTextAlignment(this Microsoft.Maui.Platform.MauiDatePicker! nativeDatePicker, Microsoft.Maui.IDatePicker! datePicker) -> void
static Microsoft.Maui.Platform.DatePickerExtensions.UpdateTextColor(this Microsoft.Maui.Platform.MauiDatePicker! platformDatePicker, Microsoft.Maui.IDatePicker! datePicker, UIKit.UIColor? defaultTextColor) -> void
static Microsoft.Maui.Platform.DatePickerExtensions.UpdateTextColor(this Microsoft.Maui.Platform.MauiDatePicker! platformDatePicker, Microsoft.Maui.IDatePicker! datePicker) -> void
static Microsoft.Maui.Platform.ElementExtensions.HasSceneManifest(this UIKit.IUIApplicationDelegate! platformApplication) -> bool
static Microsoft.Maui.Platform.ElementExtensions.SetApplicationHandler(this UIKit.IUIApplicationDelegate! platformApplication, Microsoft.Maui.IApplication! application, Microsoft.Maui.IMauiContext! context) -> void
static Microsoft.Maui.Platform.ElementExtensions.SetWindowHandler(this UIKit.UIWindow! platformWindow, Microsoft.Maui.IWindow! window, Microsoft.Maui.IMauiContext! context) -> void
static Microsoft.Maui.Platform.ElementExtensions.ToHandler(this Microsoft.Maui.IElement! view, Microsoft.Maui.IMauiContext! context) -> Microsoft.Maui.IElementHandler!
static Microsoft.Maui.Platform.ElementExtensions.ToPlatform(this Microsoft.Maui.IElement! view, Microsoft.Maui.IMauiContext! context) -> UIKit.UIView!
static Microsoft.Maui.Platform.ElementExtensions.ToUIViewController(this Microsoft.Maui.IElement! view, Microsoft.Maui.IMauiContext! context) -> UIKit.UIViewController!
static Microsoft.Maui.Platform.FlowDirectionExtensions.ToFlowDirection(this UIKit.UIUserInterfaceLayoutDirection direction) -> Microsoft.Maui.FlowDirection
static Microsoft.Maui.Platform.GraphicsViewExtensions.UpdateDrawable(this Microsoft.Maui.Graphics.Platform.PlatformGraphicsView! PlatformGraphicsView, Microsoft.Maui.IGraphicsView! graphicsView) -> void
static Microsoft.Maui.Platform.ImageViewExtensions.Clear(this UIKit.UIImageView! imageView) -> void
static Microsoft.Maui.Platform.ImageViewExtensions.UpdateAspect(this UIKit.UIImageView! imageView, Microsoft.Maui.IImage! image) -> void
static Microsoft.Maui.Platform.ImageViewExtensions.UpdateIsAnimationPlaying(this UIKit.UIImageView! imageView, Microsoft.Maui.IImageSourcePart! image) -> void
static Microsoft.Maui.Platform.ImageViewExtensions.UpdateSource(this UIKit.UIImageView! imageView, UIKit.UIImage? uIImage, Microsoft.Maui.IImageSourcePart! image) -> void
static Microsoft.Maui.Platform.ImageViewExtensions.UpdateSourceAsync(this UIKit.UIImageView! imageView, Microsoft.Maui.IImageSourcePart! image, Microsoft.Maui.IImageSourceServiceProvider! services, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<Microsoft.Maui.IImageSourceServiceResult<UIKit.UIImage!>?>!
static Microsoft.Maui.Platform.KeyboardAutoManagerScroll.Connect() -> void
static Microsoft.Maui.Platform.KeyboardAutoManagerScroll.Disconnect() -> void
static Microsoft.Maui.Platform.KeyboardExtensions.ApplyKeyboard(this UIKit.IUITextInput! textInput, Microsoft.Maui.Keyboard! keyboard) -> void
static Microsoft.Maui.Platform.KeyboardExtensions.ApplyKeyboard(this UIKit.IUITextInputTraits! textInput, Microsoft.Maui.Keyboard! keyboard) -> void
static Microsoft.Maui.Platform.KeyboardExtensions.ToUIReturnKeyType(this Microsoft.Maui.ReturnType returnType) -> UIKit.UIReturnKeyType
static Microsoft.Maui.Platform.LabelExtensions.UpdateCharacterSpacing(this UIKit.UILabel! platformLabel, Microsoft.Maui.ITextStyle! textStyle) -> void
static Microsoft.Maui.Platform.LabelExtensions.UpdateFont(this UIKit.UILabel! platformLabel, Microsoft.Maui.ITextStyle! textStyle, Microsoft.Maui.IFontManager! fontManager, double defaultSize) -> void
static Microsoft.Maui.Platform.LabelExtensions.UpdateFont(this UIKit.UILabel! platformLabel, Microsoft.Maui.ITextStyle! textStyle, Microsoft.Maui.IFontManager! fontManager) -> void
static Microsoft.Maui.Platform.LabelExtensions.UpdateHorizontalTextAlignment(this UIKit.UILabel! platformLabel, Microsoft.Maui.ILabel! label) -> void
static Microsoft.Maui.Platform.LabelExtensions.UpdateLineHeight(this UIKit.UILabel! platformLabel, Microsoft.Maui.ILabel! label) -> void
static Microsoft.Maui.Platform.LabelExtensions.UpdatePadding(this Microsoft.Maui.Platform.MauiLabel! platformLabel, Microsoft.Maui.ILabel! label) -> void
static Microsoft.Maui.Platform.LabelExtensions.UpdateTextColor(this UIKit.UILabel! platformLabel, Microsoft.Maui.ITextStyle! textStyle, UIKit.UIColor? defaultColor = null) -> void
static Microsoft.Maui.Platform.LabelExtensions.UpdateTextDecorations(this UIKit.UILabel! platformLabel, Microsoft.Maui.ILabel! label) -> void
static Microsoft.Maui.Platform.LabelExtensions.UpdateVerticalTextAlignment(this UIKit.UILabel! platformLabel, Microsoft.Maui.ILabel! label) -> void
static Microsoft.Maui.Platform.LayerExtensions.InsertBackgroundLayer(this UIKit.UIView! control, CoreAnimation.CALayer! backgroundLayer, int index = -1) -> void
static Microsoft.Maui.Platform.LayerExtensions.RemoveBackgroundLayer(this UIKit.UIView! control) -> void
static Microsoft.Maui.Platform.LayoutViewExtensions.UpdateClipsToBounds(this Microsoft.Maui.Platform.LayoutView! layoutView, Microsoft.Maui.ILayout! layout) -> void
static Microsoft.Maui.Platform.MauiWKWebView.CreateConfiguration() -> WebKit.WKWebViewConfiguration!
static Microsoft.Maui.Platform.MenuExtensions.SendClicked(this UIKit.UICommand! uICommand) -> void
static Microsoft.Maui.Platform.PickerExtensions.UpdateSelectedIndex(this Microsoft.Maui.Platform.MauiPicker! platformPicker, Microsoft.Maui.IPicker! picker) -> void
static Microsoft.Maui.Platform.PickerExtensions.UpdateTextColor(this Microsoft.Maui.Platform.MauiPicker! platformPicker, Microsoft.Maui.IPicker! picker) -> void
static Microsoft.Maui.Platform.PickerExtensions.UpdateTitle(this Microsoft.Maui.Platform.MauiPicker! platformPicker, Microsoft.Maui.IPicker! picker) -> void
static Microsoft.Maui.Platform.PickerExtensions.UpdateTitleColor(this Microsoft.Maui.Platform.MauiPicker! platformPicker, Microsoft.Maui.IPicker! picker) -> void
static Microsoft.Maui.Platform.ProgressBarExtensions.UpdateProgress(this UIKit.UIProgressView! platformProgressBar, Microsoft.Maui.IProgress! progress) -> void
static Microsoft.Maui.Platform.ProgressBarExtensions.UpdateProgressColor(this UIKit.UIProgressView! platformProgressBar, Microsoft.Maui.IProgress! progress) -> void
static Microsoft.Maui.Platform.ReturnTypeExtensions.ToPlatform(this Microsoft.Maui.ReturnType returnType) -> UIKit.UIReturnKeyType
static Microsoft.Maui.Platform.ScrollViewExtensions.UpdateContent(this UIKit.UIScrollView! scrollView, Microsoft.Maui.IView? content, Microsoft.Maui.IMauiContext! context) -> void
static Microsoft.Maui.Platform.ScrollViewExtensions.UpdateContentSize(this UIKit.UIScrollView! scrollView, Microsoft.Maui.Graphics.Size contentSize) -> void
static Microsoft.Maui.Platform.ScrollViewExtensions.UpdateHorizontalScrollBarVisibility(this UIKit.UIScrollView! scrollView, Microsoft.Maui.ScrollBarVisibility scrollBarVisibility) -> void
static Microsoft.Maui.Platform.ScrollViewExtensions.UpdateIsEnabled(this UIKit.UIScrollView! nativeScrollView, Microsoft.Maui.IScrollView! scrollView) -> void
static Microsoft.Maui.Platform.ScrollViewExtensions.UpdateVerticalScrollBarVisibility(this UIKit.UIScrollView! scrollView, Microsoft.Maui.ScrollBarVisibility scrollBarVisibility) -> void
static Microsoft.Maui.Platform.SearchBarExtensions.UpdateCancelButton(this UIKit.UISearchBar! uiSearchBar, Microsoft.Maui.ISearchBar! searchBar) -> void
static Microsoft.Maui.Platform.SearchBarExtensions.UpdateFont(this UIKit.UISearchBar! uiSearchBar, Microsoft.Maui.ITextStyle! textStyle, Microsoft.Maui.IFontManager! fontManager, UIKit.UITextField? textField) -> void
static Microsoft.Maui.Platform.SearchBarExtensions.UpdateFont(this UIKit.UISearchBar! uiSearchBar, Microsoft.Maui.ITextStyle! textStyle, Microsoft.Maui.IFontManager! fontManager) -> void
static Microsoft.Maui.Platform.SearchBarExtensions.UpdateIsEnabled(this UIKit.UISearchBar! uiSearchBar, Microsoft.Maui.ISearchBar! searchBar) -> void
static Microsoft.Maui.Platform.SearchBarExtensions.UpdateIsReadOnly(this UIKit.UISearchBar! uiSearchBar, Microsoft.Maui.ISearchBar! searchBar) -> void
static Microsoft.Maui.Platform.SearchBarExtensions.UpdateIsSpellCheckEnabled(this UIKit.UISearchBar! uiSearchBar, Microsoft.Maui.ISearchBar! searchBar, UIKit.UITextField? textField = null) -> void
static Microsoft.Maui.Platform.SearchBarExtensions.UpdateIsTextPredictionEnabled(this UIKit.UISearchBar! uiSearchBar, Microsoft.Maui.ISearchBar! searchBar, UIKit.UITextField? textField = null) -> void
static Microsoft.Maui.Platform.SearchBarExtensions.UpdateKeyboard(this UIKit.UISearchBar! uiSearchBar, Microsoft.Maui.ISearchBar! searchBar) -> void
static Microsoft.Maui.Platform.SearchBarExtensions.UpdateMaxLength(this UIKit.UISearchBar! uiSearchBar, Microsoft.Maui.ISearchBar! searchBar) -> void
static Microsoft.Maui.Platform.SearchBarExtensions.UpdatePlaceholder(this UIKit.UISearchBar! uiSearchBar, Microsoft.Maui.ISearchBar! searchBar, UIKit.UITextField? textField) -> void
static Microsoft.Maui.Platform.SearchBarExtensions.UpdateText(this UIKit.UISearchBar! uiSearchBar, Microsoft.Maui.ISearchBar! searchBar) -> void
static Microsoft.Maui.Platform.SearchBarExtensions.UpdateVerticalTextAlignment(this UIKit.UISearchBar! uiSearchBar, Microsoft.Maui.ISearchBar! searchBar, UIKit.UITextField? textField) -> void
static Microsoft.Maui.Platform.SearchBarExtensions.UpdateVerticalTextAlignment(this UIKit.UISearchBar! uiSearchBar, Microsoft.Maui.ISearchBar! searchBar) -> void
static Microsoft.Maui.Platform.SemanticExtensions.UpdateSemantics(this UIKit.UIView! platformView, Microsoft.Maui.IView! view) -> void
static Microsoft.Maui.Platform.ShapeViewExtensions.InvalidateShape(this Microsoft.Maui.Graphics.Platform.PlatformGraphicsView! platformView, Microsoft.Maui.IShapeView! shapeView) -> void
static Microsoft.Maui.Platform.ShapeViewExtensions.UpdateShape(this Microsoft.Maui.Graphics.Platform.PlatformGraphicsView! platformView, Microsoft.Maui.IShapeView! shapeView) -> void
static Microsoft.Maui.Platform.SliderExtensions.UpdateMaximum(this UIKit.UISlider! uiSlider, Microsoft.Maui.ISlider! slider) -> void
static Microsoft.Maui.Platform.SliderExtensions.UpdateMaximumTrackColor(this UIKit.UISlider! uiSlider, Microsoft.Maui.ISlider! slider) -> void
static Microsoft.Maui.Platform.SliderExtensions.UpdateMinimum(this UIKit.UISlider! uiSlider, Microsoft.Maui.ISlider! slider) -> void
static Microsoft.Maui.Platform.SliderExtensions.UpdateMinimumTrackColor(this UIKit.UISlider! uiSlider, Microsoft.Maui.ISlider! slider) -> void
static Microsoft.Maui.Platform.SliderExtensions.UpdateThumbColor(this UIKit.UISlider! uiSlider, Microsoft.Maui.ISlider! slider) -> void
static Microsoft.Maui.Platform.SliderExtensions.UpdateThumbImageSourceAsync(this UIKit.UISlider! uiSlider, Microsoft.Maui.ISlider! slider, Microsoft.Maui.IImageSourceServiceProvider! provider) -> System.Threading.Tasks.Task!
static Microsoft.Maui.Platform.SliderExtensions.UpdateValue(this UIKit.UISlider! uiSlider, Microsoft.Maui.ISlider! slider) -> void
static Microsoft.Maui.Platform.StepperExtensions.UpdateIncrement(this UIKit.UIStepper! platformStepper, Microsoft.Maui.IStepper! stepper) -> void
static Microsoft.Maui.Platform.StepperExtensions.UpdateMaximum(this UIKit.UIStepper! platformStepper, Microsoft.Maui.IStepper! stepper) -> void
static Microsoft.Maui.Platform.StepperExtensions.UpdateMinimum(this UIKit.UIStepper! platformStepper, Microsoft.Maui.IStepper! stepper) -> void
static Microsoft.Maui.Platform.StepperExtensions.UpdateValue(this UIKit.UIStepper! platformStepper, Microsoft.Maui.IStepper! stepper) -> void
static Microsoft.Maui.Platform.StrokeExtensions.UpdateStroke(this UIKit.UIView! platformView, Microsoft.Maui.IBorderStroke! border) -> void
static Microsoft.Maui.Platform.StrokeExtensions.UpdateStrokeDashOffset(this UIKit.UIView! platformView, Microsoft.Maui.IBorderStroke! border) -> void
static Microsoft.Maui.Platform.StrokeExtensions.UpdateStrokeDashPattern(this UIKit.UIView! platformView, Microsoft.Maui.IBorderStroke! border) -> void
static Microsoft.Maui.Platform.StrokeExtensions.UpdateStrokeLineCap(this UIKit.UIView! platformView, Microsoft.Maui.IBorderStroke! border) -> void
static Microsoft.Maui.Platform.StrokeExtensions.UpdateStrokeLineJoin(this UIKit.UIView! platformView, Microsoft.Maui.IBorderStroke! border) -> void
static Microsoft.Maui.Platform.StrokeExtensions.UpdateStrokeMiterLimit(this UIKit.UIView! platformView, Microsoft.Maui.IBorderStroke! border) -> void
static Microsoft.Maui.Platform.StrokeExtensions.UpdateStrokeShape(this UIKit.UIView! platformView, Microsoft.Maui.IBorderStroke! border) -> void
static Microsoft.Maui.Platform.StrokeExtensions.UpdateStrokeThickness(this UIKit.UIView! platformView, Microsoft.Maui.IBorderStroke! border) -> void
static Microsoft.Maui.Platform.SwipeViewExtensions.GetTextColor(this Microsoft.Maui.ISwipeItemMenuItem! swipeItemMenuItem) -> Microsoft.Maui.Graphics.Color?
static Microsoft.Maui.Platform.SwitchExtensions.UpdateIsOn(this UIKit.UISwitch! uiSwitch, Microsoft.Maui.ISwitch! view) -> void
static Microsoft.Maui.Platform.SwitchExtensions.UpdateThumbColor(this UIKit.UISwitch! uiSwitch, Microsoft.Maui.ISwitch! view) -> void
static Microsoft.Maui.Platform.SwitchExtensions.UpdateTrackColor(this UIKit.UISwitch! uiSwitch, Microsoft.Maui.ISwitch! view) -> void
static Microsoft.Maui.Platform.TextAlignmentExtensions.ToPlatformHorizontal(this Microsoft.Maui.TextAlignment alignment, Microsoft.Maui.IView! view) -> UIKit.UITextAlignment
static Microsoft.Maui.Platform.TextAlignmentExtensions.ToPlatformHorizontal(this Microsoft.Maui.TextAlignment alignment) -> UIKit.UITextAlignment
static Microsoft.Maui.Platform.TextAlignmentExtensions.ToPlatformVertical(this Microsoft.Maui.TextAlignment alignment) -> UIKit.UIControlContentVerticalAlignment
static Microsoft.Maui.Platform.TextFieldExtensions.UpdateCharacterSpacing(this UIKit.UITextField! textField, Microsoft.Maui.ITextStyle! textStyle) -> void
static Microsoft.Maui.Platform.TextFieldExtensions.UpdateClearButtonVisibility(this UIKit.UITextField! textField, Microsoft.Maui.IEntry! entry) -> void
static Microsoft.Maui.Platform.TextFieldExtensions.UpdateCursorPosition(this UIKit.UITextField! textField, Microsoft.Maui.IEntry! entry) -> void
static Microsoft.Maui.Platform.TextFieldExtensions.UpdateFont(this UIKit.UITextField! textField, Microsoft.Maui.ITextStyle! textStyle, Microsoft.Maui.IFontManager! fontManager) -> void
static Microsoft.Maui.Platform.TextFieldExtensions.UpdateHorizontalTextAlignment(this UIKit.UITextField! textField, Microsoft.Maui.ITextAlignment! textAlignment) -> void
static Microsoft.Maui.Platform.TextFieldExtensions.UpdateIsPassword(this UIKit.UITextField! textField, Microsoft.Maui.IEntry! entry) -> void
static Microsoft.Maui.Platform.TextFieldExtensions.UpdateIsReadOnly(this UIKit.UITextField! textField, Microsoft.Maui.IEntry! entry) -> void
static Microsoft.Maui.Platform.TextFieldExtensions.UpdateIsSpellCheckEnabled(this UIKit.UITextField! textField, Microsoft.Maui.IEntry! entry) -> void
static Microsoft.Maui.Platform.TextFieldExtensions.UpdateIsTextPredictionEnabled(this UIKit.UITextField! textField, Microsoft.Maui.IEntry! entry) -> void
static Microsoft.Maui.Platform.TextFieldExtensions.UpdateKeyboard(this UIKit.UITextField! textField, Microsoft.Maui.IEntry! entry) -> void
static Microsoft.Maui.Platform.TextFieldExtensions.UpdateMaxLength(this UIKit.UITextField! textField, Microsoft.Maui.IEntry! entry) -> void
static Microsoft.Maui.Platform.TextFieldExtensions.UpdatePlaceholder(this UIKit.UITextField! textField, Microsoft.Maui.IEntry! entry, Microsoft.Maui.Graphics.Color? defaultPlaceholderColor = null) -> void
static Microsoft.Maui.Platform.TextFieldExtensions.UpdateReturnType(this UIKit.UITextField! textField, Microsoft.Maui.IEntry! entry) -> void
static Microsoft.Maui.Platform.TextFieldExtensions.UpdateSelectionLength(this UIKit.UITextField! textField, Microsoft.Maui.IEntry! entry) -> void
static Microsoft.Maui.Platform.TextFieldExtensions.UpdateText(this UIKit.UITextField! textField, Microsoft.Maui.IEntry! entry) -> void
static Microsoft.Maui.Platform.TextFieldExtensions.UpdateTextColor(this UIKit.UITextField! textField, Microsoft.Maui.ITextStyle! textStyle) -> void
static Microsoft.Maui.Platform.TextFieldExtensions.UpdateVerticalTextAlignment(this UIKit.UITextField! textField, Microsoft.Maui.ITextAlignment! textAlignment) -> void
static Microsoft.Maui.Platform.TextViewExtensions.UpdateCharacterSpacing(this UIKit.UITextView! textView, Microsoft.Maui.ITextStyle! textStyle) -> void
static Microsoft.Maui.Platform.TextViewExtensions.UpdateCursorPosition(this UIKit.UITextView! textView, Microsoft.Maui.IEditor! editor) -> void
static Microsoft.Maui.Platform.TextViewExtensions.UpdateFont(this UIKit.UITextView! textView, Microsoft.Maui.ITextStyle! textStyle, Microsoft.Maui.IFontManager! fontManager) -> void
static Microsoft.Maui.Platform.TextViewExtensions.UpdateHorizontalTextAlignment(this UIKit.UITextView! textView, Microsoft.Maui.IEditor! editor) -> void
static Microsoft.Maui.Platform.TextViewExtensions.UpdateIsEnabled(this UIKit.UITextView! textView, Microsoft.Maui.IEditor! editor) -> void
static Microsoft.Maui.Platform.TextViewExtensions.UpdateIsReadOnly(this UIKit.UITextView! textView, Microsoft.Maui.IEditor! editor) -> void
static Microsoft.Maui.Platform.TextViewExtensions.UpdateIsSpellCheckEnabled(this UIKit.UITextView! textView, Microsoft.Maui.IEditor! editor) -> void
static Microsoft.Maui.Platform.TextViewExtensions.UpdateIsTextPredictionEnabled(this UIKit.UITextView! textView, Microsoft.Maui.IEditor! editor) -> void
static Microsoft.Maui.Platform.TextViewExtensions.UpdateKeyboard(this UIKit.UITextView! textView, Microsoft.Maui.IEditor! editor) -> void
static Microsoft.Maui.Platform.TextViewExtensions.UpdateMaxLength(this UIKit.UITextView! textView, Microsoft.Maui.IEditor! editor) -> void
static Microsoft.Maui.Platform.TextViewExtensions.UpdatePlaceholder(this Microsoft.Maui.Platform.MauiTextView! textView, Microsoft.Maui.IEditor! editor) -> void
static Microsoft.Maui.Platform.TextViewExtensions.UpdatePlaceholderColor(this Microsoft.Maui.Platform.MauiTextView! textView, Microsoft.Maui.IEditor! editor) -> void
static Microsoft.Maui.Platform.TextViewExtensions.UpdateSelectionLength(this UIKit.UITextView! textView, Microsoft.Maui.IEditor! editor) -> void
static Microsoft.Maui.Platform.TextViewExtensions.UpdateText(this UIKit.UITextView! textView, Microsoft.Maui.IEditor! editor) -> void
static Microsoft.Maui.Platform.TextViewExtensions.UpdateTextColor(this UIKit.UITextView! textView, Microsoft.Maui.IEditor! editor) -> void
static Microsoft.Maui.Platform.TextViewExtensions.UpdateVerticalTextAlignment(this Microsoft.Maui.Platform.MauiTextView! textView, Microsoft.Maui.IEditor! editor) -> void
static Microsoft.Maui.Platform.TimeExtensions.ToFormattedString(this Microsoft.Maui.ITimePicker! timePicker) -> string!
static Microsoft.Maui.Platform.TimeExtensions.ToFormattedString(this System.TimeSpan time, string! format, System.Globalization.CultureInfo? cultureInfo = null) -> string!
static Microsoft.Maui.Platform.TimePickerExtensions.UpdateFormat(this Microsoft.Maui.Platform.MauiTimePicker! mauiTimePicker, Microsoft.Maui.ITimePicker! timePicker, UIKit.UIDatePicker? picker) -> void
static Microsoft.Maui.Platform.TimePickerExtensions.UpdateFormat(this Microsoft.Maui.Platform.MauiTimePicker! mauiTimePicker, Microsoft.Maui.ITimePicker! timePicker) -> void
static Microsoft.Maui.Platform.TimePickerExtensions.UpdateFormat(this UIKit.UIDatePicker! picker, Microsoft.Maui.ITimePicker! timePicker) -> void
static Microsoft.Maui.Platform.TimePickerExtensions.UpdateTextAlignment(this Microsoft.Maui.Platform.MauiTimePicker! textField, Microsoft.Maui.ITimePicker! timePicker) -> void
static Microsoft.Maui.Platform.TimePickerExtensions.UpdateTime(this Microsoft.Maui.Platform.MauiTimePicker! mauiTimePicker, Microsoft.Maui.ITimePicker! timePicker, UIKit.UIDatePicker? picker) -> void
static Microsoft.Maui.Platform.TimePickerExtensions.UpdateTime(this Microsoft.Maui.Platform.MauiTimePicker! mauiTimePicker, Microsoft.Maui.ITimePicker! timePicker) -> void
static Microsoft.Maui.Platform.TimePickerExtensions.UpdateTime(this UIKit.UIDatePicker! picker, Microsoft.Maui.ITimePicker! timePicker) -> void
static Microsoft.Maui.Platform.TransformationExtensions.UpdateTransformation(this UIKit.UIView! platformView, Microsoft.Maui.IView? view, CoreAnimation.CALayer? layer, CoreGraphics.CGPoint? originalAnchor) -> void
static Microsoft.Maui.Platform.TransformationExtensions.UpdateTransformation(this UIKit.UIView! platformView, Microsoft.Maui.IView? view) -> void
static Microsoft.Maui.Platform.UIEdgeInsetsExtensions.ToThickness(this UIKit.UIEdgeInsets insets) -> Microsoft.Maui.Thickness
static Microsoft.Maui.Platform.UIPageControlExtensions.UpdateCurrentPage(this UIKit.UIPageControl! pageControl, int currentPage) -> void
static Microsoft.Maui.Platform.UIPageControlExtensions.UpdateCurrentPagesIndicatorTintColor(this UIKit.UIPageControl! pageControl, Microsoft.Maui.IIndicatorView! indicatorView) -> void
static Microsoft.Maui.Platform.UIPageControlExtensions.UpdateHideSingle(this UIKit.UIPageControl! pageControl, Microsoft.Maui.IIndicatorView! indicatorView) -> void
static Microsoft.Maui.Platform.UIPageControlExtensions.UpdateIndicatorShape(this Microsoft.Maui.Platform.MauiPageControl! pageControl, Microsoft.Maui.IIndicatorView! indicatorView) -> void
static Microsoft.Maui.Platform.UIPageControlExtensions.UpdateIndicatorSize(this Microsoft.Maui.Platform.MauiPageControl! pageControl, Microsoft.Maui.IIndicatorView! indicatorView) -> void
static Microsoft.Maui.Platform.UIPageControlExtensions.UpdatePages(this UIKit.UIPageControl! pageControl, int pageCount) -> void
static Microsoft.Maui.Platform.UIPageControlExtensions.UpdatePagesIndicatorTintColor(this UIKit.UIPageControl! pageControl, Microsoft.Maui.IIndicatorView! indicatorView) -> void
static Microsoft.Maui.Platform.ViewExtensions.ClearSubviews(this UIKit.UIView! view) -> void
static Microsoft.Maui.Platform.ViewExtensions.ConvertToImage(this UIKit.UIView! view) -> UIKit.UIImage?
static Microsoft.Maui.Platform.ViewExtensions.FindDescendantView<T>(this UIKit.UIView! view) -> T?
static Microsoft.Maui.Platform.ViewExtensions.Focus(this UIKit.UIView! platformView, Microsoft.Maui.FocusRequest! request) -> void
static Microsoft.Maui.Platform.ViewExtensions.GetNavigationController(this UIKit.UIView! view) -> UIKit.UINavigationController?
static Microsoft.Maui.Platform.ViewExtensions.IndexOfSubview(this UIKit.UIView! platformView, UIKit.UIView! subview) -> int
static Microsoft.Maui.Platform.ViewExtensions.InvalidateMeasure(this UIKit.UIView! platformView, Microsoft.Maui.IView! view) -> void
static Microsoft.Maui.Platform.ViewExtensions.ToHandler(this Microsoft.Maui.IView! view, Microsoft.Maui.IMauiContext! context) -> Microsoft.Maui.IPlatformViewHandler!
static Microsoft.Maui.Platform.ViewExtensions.Unfocus(this UIKit.UIView! platformView, Microsoft.Maui.IView! view) -> void
static Microsoft.Maui.Platform.ViewExtensions.UpdateAutomationId(this UIKit.UIView! platformView, Microsoft.Maui.IView! view) -> void
static Microsoft.Maui.Platform.ViewExtensions.UpdateBackground(this Microsoft.Maui.Platform.ContentView! platformView, Microsoft.Maui.IBorderStroke! border) -> void
static Microsoft.Maui.Platform.ViewExtensions.UpdateBackground(this UIKit.UIView! platformView, Microsoft.Maui.Graphics.Paint? paint, Microsoft.Maui.IButtonStroke? stroke = null) -> void
static Microsoft.Maui.Platform.ViewExtensions.UpdateBackground(this UIKit.UIView! platformView, Microsoft.Maui.IView! view) -> void
static Microsoft.Maui.Platform.ViewExtensions.UpdateBackgroundImageSourceAsync(this UIKit.UIView! platformView, Microsoft.Maui.IImageSource? imageSource, Microsoft.Maui.IImageSourceServiceProvider? provider) -> System.Threading.Tasks.Task!
static Microsoft.Maui.Platform.ViewExtensions.UpdateBackgroundLayerFrame(this UIKit.UIView! view) -> void
static Microsoft.Maui.Platform.ViewExtensions.UpdateBorder(this UIKit.UIView! platformView, Microsoft.Maui.IView! view) -> void
static Microsoft.Maui.Platform.ViewExtensions.UpdateClip(this UIKit.UIView! platformView, Microsoft.Maui.IView! view) -> void
static Microsoft.Maui.Platform.ViewExtensions.UpdateFlowDirection(this UIKit.UIView! platformView, Microsoft.Maui.IView! view) -> void
static Microsoft.Maui.Platform.ViewExtensions.UpdateFrame(UIKit.UIView! platformView, Microsoft.Maui.IView! view) -> void
static Microsoft.Maui.Platform.ViewExtensions.UpdateHeight(this UIKit.UIView! platformView, Microsoft.Maui.IView! view) -> void
static Microsoft.Maui.Platform.ViewExtensions.UpdateInputTransparent(this UIKit.UIView! platformView, bool isReadOnly, bool inputTransparent) -> void
static Microsoft.Maui.Platform.ViewExtensions.UpdateInputTransparent(this UIKit.UIView! platformView, Microsoft.Maui.IViewHandler! handler, Microsoft.Maui.IView! view) -> void
static Microsoft.Maui.Platform.ViewExtensions.UpdateIsEnabled(this UIKit.UIView! platformView, Microsoft.Maui.IView! view) -> void
static Microsoft.Maui.Platform.ViewExtensions.UpdateMaximumHeight(this UIKit.UIView! platformView, Microsoft.Maui.IView! view) -> void
static Microsoft.Maui.Platform.ViewExtensions.UpdateMaximumWidth(this UIKit.UIView! platformView, Microsoft.Maui.IView! view) -> void
static Microsoft.Maui.Platform.ViewExtensions.UpdateMinimumHeight(this UIKit.UIView! platformView, Microsoft.Maui.IView! view) -> void
static Microsoft.Maui.Platform.ViewExtensions.UpdateMinimumWidth(this UIKit.UIView! platformView, Microsoft.Maui.IView! view) -> void
static Microsoft.Maui.Platform.ViewExtensions.UpdateOpacity(this UIKit.UIView! platformView, Microsoft.Maui.IView! view) -> void
static Microsoft.Maui.Platform.ViewExtensions.UpdateShadow(this UIKit.UIView! platformView, Microsoft.Maui.IView! view) -> void
static Microsoft.Maui.Platform.ViewExtensions.UpdateToolTip(this UIKit.UIView! platformView, Microsoft.Maui.ToolTip? tooltip) -> void
static Microsoft.Maui.Platform.ViewExtensions.UpdateVisibility(this UIKit.UIView! platformView, Microsoft.Maui.IView! view) -> void
static Microsoft.Maui.Platform.ViewExtensions.UpdateVisibility(this UIKit.UIView! platformView, Microsoft.Maui.Visibility visibility) -> void
static Microsoft.Maui.Platform.ViewExtensions.UpdateWidth(this UIKit.UIView! platformView, Microsoft.Maui.IView! view) -> void
static Microsoft.Maui.Platform.WebViewExtensions.Eval(this WebKit.WKWebView! platformWebView, Microsoft.Maui.IWebView! webView, string! script) -> void
static Microsoft.Maui.Platform.WebViewExtensions.EvaluateJavaScript(this WebKit.WKWebView! webView, Microsoft.Maui.EvaluateJavaScriptAsyncRequest! request) -> void
static Microsoft.Maui.Platform.WebViewExtensions.UpdateGoBack(this WebKit.WKWebView! platformWebView, Microsoft.Maui.IWebView! webView) -> void
static Microsoft.Maui.Platform.WebViewExtensions.UpdateGoForward(this WebKit.WKWebView! platformWebView, Microsoft.Maui.IWebView! webView) -> void
static Microsoft.Maui.Platform.WebViewExtensions.UpdateReload(this WebKit.WKWebView! platformWebView, Microsoft.Maui.IWebView! webView) -> void
static Microsoft.Maui.Platform.WebViewExtensions.UpdateSource(this WebKit.WKWebView! platformWebView, Microsoft.Maui.IWebView! webView, Microsoft.Maui.IWebViewDelegate? webViewDelegate) -> void
static Microsoft.Maui.Platform.WebViewExtensions.UpdateSource(this WebKit.WKWebView! platformWebView, Microsoft.Maui.IWebView! webView) -> void
static Microsoft.Maui.Platform.WebViewExtensions.UpdateUserAgent(this WebKit.WKWebView! platformWebView, Microsoft.Maui.IWebView! webView) -> void
static Microsoft.Maui.Platform.WindowExtensions.GetDisplayDensity(this UIKit.UIWindow! uiWindow) -> float
static Microsoft.Maui.Platform.WindowExtensions.UpdateMaximumHeight(this UIKit.UIWindow! platformWindow, Microsoft.Maui.IWindow! window) -> void
static Microsoft.Maui.Platform.WindowExtensions.UpdateMaximumSize(this UIKit.UIWindow! platformWindow, Microsoft.Maui.IWindow! window) -> void
static Microsoft.Maui.Platform.WindowExtensions.UpdateMaximumWidth(this UIKit.UIWindow! platformWindow, Microsoft.Maui.IWindow! window) -> void
static Microsoft.Maui.Platform.WindowExtensions.UpdateMinimumHeight(this UIKit.UIWindow! platformWindow, Microsoft.Maui.IWindow! window) -> void
static Microsoft.Maui.Platform.WindowExtensions.UpdateMinimumSize(this UIKit.UIWindow! platformWindow, Microsoft.Maui.IWindow! window) -> void
static Microsoft.Maui.Platform.WindowExtensions.UpdateMinimumWidth(this UIKit.UIWindow! platformWindow, Microsoft.Maui.IWindow! window) -> void
static Microsoft.Maui.Primitives.Dimension.IsExplicitSet(double value) -> bool
static Microsoft.Maui.Primitives.Dimension.IsMaximumSet(double value) -> bool
static Microsoft.Maui.Primitives.Dimension.IsMinimumSet(double value) -> bool
static Microsoft.Maui.Primitives.Dimension.ResolveMinimum(double value) -> double
static Microsoft.Maui.PropertyMapperExtensions.AppendToMapping<TVirtualView, TViewHandler>(this Microsoft.Maui.IPropertyMapper<Microsoft.Maui.IElement!, Microsoft.Maui.IElementHandler!>! propertyMapper, string! key, System.Action<TViewHandler, TVirtualView>! method) -> void
static Microsoft.Maui.PropertyMapperExtensions.AppendToMapping<TVirtualView, TViewHandler>(this Microsoft.Maui.IPropertyMapper<TVirtualView, TViewHandler>! propertyMapper, string! key, System.Action<TViewHandler, TVirtualView>! method) -> void
static Microsoft.Maui.PropertyMapperExtensions.ModifyMapping<TVirtualView, TViewHandler>(this Microsoft.Maui.IPropertyMapper<Microsoft.Maui.IElement!, Microsoft.Maui.IElementHandler!>! propertyMapper, string! key, System.Action<TViewHandler, TVirtualView, System.Action<Microsoft.Maui.IElementHandler!, Microsoft.Maui.IElement!>?>! method) -> void
static Microsoft.Maui.PropertyMapperExtensions.ModifyMapping<TVirtualView, TViewHandler>(this Microsoft.Maui.IPropertyMapper<TVirtualView, TViewHandler>! propertyMapper, string! key, System.Action<TViewHandler, TVirtualView, System.Action<Microsoft.Maui.IElementHandler!, Microsoft.Maui.IElement!>?>! method) -> void
static Microsoft.Maui.PropertyMapperExtensions.PrependToMapping<TVirtualView, TViewHandler>(this Microsoft.Maui.IPropertyMapper<Microsoft.Maui.IElement!, Microsoft.Maui.IElementHandler!>! propertyMapper, string! key, System.Action<TViewHandler, TVirtualView>! method) -> void
static Microsoft.Maui.PropertyMapperExtensions.PrependToMapping<TVirtualView, TViewHandler>(this Microsoft.Maui.IPropertyMapper<TVirtualView, TViewHandler>! propertyMapper, string! key, System.Action<TViewHandler, TVirtualView>! method) -> void
static Microsoft.Maui.PropertyMapperExtensions.ReplaceMapping<TVirtualView, TViewHandler>(this Microsoft.Maui.IPropertyMapper<Microsoft.Maui.IElement!, Microsoft.Maui.IElementHandler!>! propertyMapper, string! key, System.Action<TViewHandler, TVirtualView>! method) -> void
static Microsoft.Maui.SemanticExtensions.SetSemanticFocus(this Microsoft.Maui.IView! element) -> void
static Microsoft.Maui.SizeRequest.implicit operator Microsoft.Maui.Graphics.Size(Microsoft.Maui.SizeRequest size) -> Microsoft.Maui.Graphics.Size
static Microsoft.Maui.SizeRequest.implicit operator Microsoft.Maui.SizeRequest(Microsoft.Maui.Graphics.Size size) -> Microsoft.Maui.SizeRequest
static Microsoft.Maui.SizeRequest.operator !=(Microsoft.Maui.SizeRequest left, Microsoft.Maui.SizeRequest right) -> bool
static Microsoft.Maui.SizeRequest.operator ==(Microsoft.Maui.SizeRequest left, Microsoft.Maui.SizeRequest right) -> bool
static Microsoft.Maui.SoftInputExtensions.HideSoftInputAsync(this Microsoft.Maui.ITextInput! targetView, System.Threading.CancellationToken token) -> System.Threading.Tasks.Task<bool>!
static Microsoft.Maui.SoftInputExtensions.IsSoftInputShowing(this Microsoft.Maui.ITextInput! targetView) -> bool
static Microsoft.Maui.SoftInputExtensions.ShowSoftInputAsync(this Microsoft.Maui.ITextInput! targetView, System.Threading.CancellationToken token) -> System.Threading.Tasks.Task<bool>!
static Microsoft.Maui.Thickness.implicit operator Microsoft.Maui.Thickness(double uniformSize) -> Microsoft.Maui.Thickness
static Microsoft.Maui.Thickness.implicit operator Microsoft.Maui.Thickness(Microsoft.Maui.Graphics.Size size) -> Microsoft.Maui.Thickness
static Microsoft.Maui.Thickness.operator -(Microsoft.Maui.Thickness left, double addend) -> Microsoft.Maui.Thickness
static Microsoft.Maui.Thickness.operator !=(Microsoft.Maui.Thickness left, Microsoft.Maui.Thickness right) -> bool
static Microsoft.Maui.Thickness.operator +(Microsoft.Maui.Thickness left, double addend) -> Microsoft.Maui.Thickness
static Microsoft.Maui.Thickness.operator +(Microsoft.Maui.Thickness left, Microsoft.Maui.Thickness right) -> Microsoft.Maui.Thickness
static Microsoft.Maui.Thickness.operator ==(Microsoft.Maui.Thickness left, Microsoft.Maui.Thickness right) -> bool
static Microsoft.Maui.Thickness.Zero -> Microsoft.Maui.Thickness
static Microsoft.Maui.ViewExtensions.CaptureAsync(this Microsoft.Maui.IView! view) -> System.Threading.Tasks.Task<Microsoft.Maui.Media.IScreenshotResult?>!
static Microsoft.Maui.VisualDiagnostics.CaptureAsJpegAsync(Microsoft.Maui.IView! view, int quality = 80) -> System.Threading.Tasks.Task<byte[]?>!
static Microsoft.Maui.VisualDiagnostics.CaptureAsJpegAsync(Microsoft.Maui.IWindow! window, int quality = 80) -> System.Threading.Tasks.Task<byte[]?>!
static Microsoft.Maui.VisualDiagnostics.CaptureAsPngAsync(Microsoft.Maui.IView! view) -> System.Threading.Tasks.Task<byte[]?>!
static Microsoft.Maui.VisualDiagnostics.CaptureAsPngAsync(Microsoft.Maui.IWindow! window) -> System.Threading.Tasks.Task<byte[]?>!
static Microsoft.Maui.VisualDiagnostics.GetSourceInfo(object! obj) -> Microsoft.Maui.SourceInfo?
static Microsoft.Maui.VisualDiagnostics.OnChildAdded(Microsoft.Maui.IVisualTreeElement! parent, Microsoft.Maui.IVisualTreeElement! child) -> void
static Microsoft.Maui.VisualDiagnostics.OnChildAdded(Microsoft.Maui.IVisualTreeElement? parent, Microsoft.Maui.IVisualTreeElement! child, int newLogicalIndex) -> void
static Microsoft.Maui.VisualDiagnostics.OnChildRemoved(Microsoft.Maui.IVisualTreeElement! parent, Microsoft.Maui.IVisualTreeElement! child, int oldLogicalIndex) -> void
static Microsoft.Maui.VisualDiagnostics.RegisterSourceInfo(object! target, System.Uri! uri, int lineNumber, int linePosition) -> void
static Microsoft.Maui.VisualDiagnostics.VisualTreeChanged -> System.EventHandler<Microsoft.Maui.VisualTreeChangeEventArgs!>?
static Microsoft.Maui.VisualTreeElementExtensions.GetVisualElementWindow(this Microsoft.Maui.IVisualTreeElement! element) -> Microsoft.Maui.IWindow?
static Microsoft.Maui.VisualTreeElementExtensions.GetVisualTreeDescendants(this Microsoft.Maui.IVisualTreeElement! visualElement) -> System.Collections.Generic.IReadOnlyList<Microsoft.Maui.IVisualTreeElement!>!
static Microsoft.Maui.VisualTreeElementExtensions.GetVisualTreeElements(this Microsoft.Maui.IVisualTreeElement! visualElement, double x, double y) -> System.Collections.Generic.IReadOnlyList<Microsoft.Maui.IVisualTreeElement!>!
static Microsoft.Maui.VisualTreeElementExtensions.GetVisualTreeElements(this Microsoft.Maui.IVisualTreeElement! visualElement, double x1, double y1, double x2, double y2) -> System.Collections.Generic.IReadOnlyList<Microsoft.Maui.IVisualTreeElement!>!
static Microsoft.Maui.VisualTreeElementExtensions.GetVisualTreeElements(this Microsoft.Maui.IVisualTreeElement! visualElement, Microsoft.Maui.Graphics.Point point) -> System.Collections.Generic.IReadOnlyList<Microsoft.Maui.IVisualTreeElement!>!
static Microsoft.Maui.VisualTreeElementExtensions.GetVisualTreeElements(this Microsoft.Maui.IVisualTreeElement! visualElement, Microsoft.Maui.Graphics.Rect rectangle) -> System.Collections.Generic.IReadOnlyList<Microsoft.Maui.IVisualTreeElement!>!
static Microsoft.Maui.WindowExtensions.CaptureAsync(this Microsoft.Maui.IWindow! window) -> System.Threading.Tasks.Task<Microsoft.Maui.Media.IScreenshotResult?>!
static readonly Microsoft.Maui.Animations.Lerp.Lerps -> System.Collections.Generic.Dictionary<System.Type!, Microsoft.Maui.Animations.Lerp!>!
static readonly Microsoft.Maui.Easing.BounceIn -> Microsoft.Maui.Easing!
static readonly Microsoft.Maui.Easing.BounceOut -> Microsoft.Maui.Easing!
static readonly Microsoft.Maui.Easing.CubicIn -> Microsoft.Maui.Easing!
static readonly Microsoft.Maui.Easing.CubicInOut -> Microsoft.Maui.Easing!
static readonly Microsoft.Maui.Easing.CubicOut -> Microsoft.Maui.Easing!
static readonly Microsoft.Maui.Easing.Linear -> Microsoft.Maui.Easing!
static readonly Microsoft.Maui.Easing.SinIn -> Microsoft.Maui.Easing!
static readonly Microsoft.Maui.Easing.SinInOut -> Microsoft.Maui.Easing!
static readonly Microsoft.Maui.Easing.SinOut -> Microsoft.Maui.Easing!
static readonly Microsoft.Maui.Easing.SpringIn -> Microsoft.Maui.Easing!
static readonly Microsoft.Maui.Easing.SpringOut -> Microsoft.Maui.Easing!
static readonly Microsoft.Maui.FontFile.Extensions -> string![]!
static readonly Microsoft.Maui.GridLength.Auto -> Microsoft.Maui.GridLength
static readonly Microsoft.Maui.GridLength.Star -> Microsoft.Maui.GridLength
static readonly Microsoft.Maui.Handlers.ButtonHandler.DefaultPadding -> Microsoft.Maui.Thickness
static readonly Microsoft.Maui.Layouts.FlexBasis.Auto -> Microsoft.Maui.Layouts.FlexBasis
virtual Microsoft.Maui.Animations.Animation.CreateReverse() -> Microsoft.Maui.Animations.Animation!
virtual Microsoft.Maui.Animations.Animation.Dispose(bool disposing) -> void
virtual Microsoft.Maui.Animations.Animation.OnTick(double millisecondsSinceLastUpdate) -> void
virtual Microsoft.Maui.Animations.Animation.Reset() -> void
virtual Microsoft.Maui.Animations.Animation.Update(double percent) -> void
virtual Microsoft.Maui.Animations.AnimationManager.Dispose(bool disposing) -> void
virtual Microsoft.Maui.Animations.Ticker.IsRunning.get -> bool
virtual Microsoft.Maui.Animations.Ticker.MaxFps.get -> int
virtual Microsoft.Maui.Animations.Ticker.MaxFps.set -> void
virtual Microsoft.Maui.Animations.Ticker.OnSystemEnabledChanged() -> void
virtual Microsoft.Maui.Animations.Ticker.Start() -> void
virtual Microsoft.Maui.Animations.Ticker.Stop() -> void
virtual Microsoft.Maui.Animations.Ticker.SystemEnabled.get -> bool
virtual Microsoft.Maui.Animations.Ticker.SystemEnabled.set -> void
virtual Microsoft.Maui.CommandMapper.GetCommand(string! key) -> System.Action<Microsoft.Maui.IElementHandler!, Microsoft.Maui.IElement!, object?>?
virtual Microsoft.Maui.Handlers.ButtonHandler.ImageSourceLoader.get -> Microsoft.Maui.Platform.ImageSourcePartLoader!
virtual Microsoft.Maui.Handlers.CheckBoxHandler.MinimumSize.get -> float
virtual Microsoft.Maui.Handlers.ElementHandler.Invoke(string! command, object? args) -> void
virtual Microsoft.Maui.Handlers.ElementHandler.SetMauiContext(Microsoft.Maui.IMauiContext! mauiContext) -> void
virtual Microsoft.Maui.Handlers.ElementHandler.SetVirtualView(Microsoft.Maui.IElement! view) -> void
virtual Microsoft.Maui.Handlers.ElementHandler.UpdateValue(string! property) -> void
virtual Microsoft.Maui.Handlers.ElementHandler<TVirtualView, TPlatformView>.ConnectHandler(TPlatformView! platformView) -> void
virtual Microsoft.Maui.Handlers.ElementHandler<TVirtualView, TPlatformView>.DisconnectHandler(TPlatformView! platformView) -> void
virtual Microsoft.Maui.Handlers.EntryHandler.OnShouldReturn(UIKit.UITextField! view) -> bool
virtual Microsoft.Maui.Handlers.ImageButtonHandler.SourceLoader.get -> Microsoft.Maui.Platform.ImageSourcePartLoader!
virtual Microsoft.Maui.Handlers.ImageHandler.SourceLoader.get -> Microsoft.Maui.Platform.ImageSourcePartLoader!
virtual Microsoft.Maui.Handlers.SwipeItemMenuItemHandler.SourceLoader.get -> Microsoft.Maui.Platform.ImageSourcePartLoader!
virtual Microsoft.Maui.Handlers.ViewHandler.NeedsContainer.get -> bool
virtual Microsoft.Maui.Handlers.ViewHandler<TVirtualView, TPlatformView>.ConnectHandler(TPlatformView! platformView) -> void
virtual Microsoft.Maui.Handlers.ViewHandler<TVirtualView, TPlatformView>.DisconnectHandler(TPlatformView! platformView) -> void
virtual Microsoft.Maui.Handlers.ViewHandler<TVirtualView, TPlatformView>.SetVirtualView(Microsoft.Maui.IView! view) -> void
virtual Microsoft.Maui.Handlers.WebViewHandler.MinimumSize.get -> float
virtual Microsoft.Maui.MauiUIApplicationDelegate.ApplicationSignificantTimeChange(UIKit.UIApplication! application) -> void
virtual Microsoft.Maui.MauiUIApplicationDelegate.ContinueUserActivity(UIKit.UIApplication! application, Foundation.NSUserActivity! userActivity, UIKit.UIApplicationRestorationHandler! completionHandler) -> bool
virtual Microsoft.Maui.MauiUIApplicationDelegate.DidEnterBackground(UIKit.UIApplication! application) -> void
virtual Microsoft.Maui.MauiUIApplicationDelegate.FinishedLaunching(UIKit.UIApplication! application, Foundation.NSDictionary! launchOptions) -> bool
virtual Microsoft.Maui.MauiUIApplicationDelegate.GetConfiguration(UIKit.UIApplication! application, UIKit.UISceneSession! connectingSceneSession, UIKit.UISceneConnectionOptions! options) -> UIKit.UISceneConfiguration!
virtual Microsoft.Maui.MauiUIApplicationDelegate.OnActivated(UIKit.UIApplication! application) -> void
virtual Microsoft.Maui.MauiUIApplicationDelegate.OnResignActivation(UIKit.UIApplication! application) -> void
virtual Microsoft.Maui.MauiUIApplicationDelegate.OpenUrl(UIKit.UIApplication! application, Foundation.NSUrl! url, Foundation.NSDictionary! options) -> bool
virtual Microsoft.Maui.MauiUIApplicationDelegate.PerformActionForShortcutItem(UIKit.UIApplication! application, UIKit.UIApplicationShortcutItem! shortcutItem, UIKit.UIOperationHandler! completionHandler) -> void
virtual Microsoft.Maui.MauiUIApplicationDelegate.PerformFetch(UIKit.UIApplication! application, System.Action<UIKit.UIBackgroundFetchResult>! completionHandler) -> void
virtual Microsoft.Maui.MauiUIApplicationDelegate.WillEnterForeground(UIKit.UIApplication! application) -> void
virtual Microsoft.Maui.MauiUIApplicationDelegate.WillFinishLaunching(UIKit.UIApplication! application, Foundation.NSDictionary! launchOptions) -> bool
virtual Microsoft.Maui.MauiUIApplicationDelegate.WillTerminate(UIKit.UIApplication! application) -> void
virtual Microsoft.Maui.MauiUIApplicationDelegate.Window.get -> UIKit.UIWindow?
virtual Microsoft.Maui.MauiUIApplicationDelegate.Window.set -> void
virtual Microsoft.Maui.MauiUISceneDelegate.ContinueUserActivity(UIKit.UIScene! scene, Foundation.NSUserActivity! userActivity) -> bool
virtual Microsoft.Maui.MauiUISceneDelegate.DidDisconnect(UIKit.UIScene! scene) -> void
virtual Microsoft.Maui.MauiUISceneDelegate.DidEnterBackground(UIKit.UIScene! scene) -> void
virtual Microsoft.Maui.MauiUISceneDelegate.DidFailToContinueUserActivity(UIKit.UIScene! scene, string! userActivityType, Foundation.NSError! error) -> void
virtual Microsoft.Maui.MauiUISceneDelegate.DidUpdateCoordinateSpace(UIKit.UIWindowScene! windowScene, UIKit.IUICoordinateSpace! previousCoordinateSpace, UIKit.UIInterfaceOrientation previousInterfaceOrientation, UIKit.UITraitCollection! previousTraitCollection) -> void
virtual Microsoft.Maui.MauiUISceneDelegate.DidUpdateUserActivity(UIKit.UIScene! scene, Foundation.NSUserActivity! userActivity) -> void
virtual Microsoft.Maui.MauiUISceneDelegate.GetStateRestorationActivity(UIKit.UIScene! scene) -> Foundation.NSUserActivity?
virtual Microsoft.Maui.MauiUISceneDelegate.OnActivated(UIKit.UIScene! scene) -> void
virtual Microsoft.Maui.MauiUISceneDelegate.OnResignActivation(UIKit.UIScene! scene) -> void
virtual Microsoft.Maui.MauiUISceneDelegate.OpenUrl(UIKit.UIScene! scene, Foundation.NSSet<UIKit.UIOpenUrlContext!>! urlContexts) -> bool
virtual Microsoft.Maui.MauiUISceneDelegate.RestoreInteractionState(UIKit.UIScene! scene, Foundation.NSUserActivity! stateRestorationActivity) -> void
virtual Microsoft.Maui.MauiUISceneDelegate.WillConnect(UIKit.UIScene! scene, UIKit.UISceneSession! session, UIKit.UISceneConnectionOptions! connectionOptions) -> void
virtual Microsoft.Maui.MauiUISceneDelegate.WillContinueUserActivity(UIKit.UIScene! scene, string! userActivityType) -> void
virtual Microsoft.Maui.MauiUISceneDelegate.WillEnterForeground(UIKit.UIScene! scene) -> void
virtual Microsoft.Maui.MauiUISceneDelegate.Window.get -> UIKit.UIWindow?
virtual Microsoft.Maui.MauiUISceneDelegate.Window.set -> void
virtual Microsoft.Maui.Platform.ContainerViewController.CreatePlatformView(Microsoft.Maui.IElement! view) -> UIKit.UIView!
virtual Microsoft.Maui.Platform.MauiCheckBox.GetCheckBoxImage() -> UIKit.UIImage!
virtual Microsoft.Maui.PropertyMapper.ClearKeyCache() -> void
virtual Microsoft.Maui.PropertyMapper.GetKeys() -> System.Collections.Generic.IEnumerable<string!>!
virtual Microsoft.Maui.PropertyMapper.GetProperty(string! key) -> System.Action<Microsoft.Maui.IElementHandler!, Microsoft.Maui.IElement!>?
virtual Microsoft.Maui.PropertyMapper.SetPropertyCore(string! key, System.Action<Microsoft.Maui.IElementHandler!, Microsoft.Maui.IElement!>! action) -> void
virtual Microsoft.Maui.PropertyMapper.UpdateKeys.get -> System.Collections.Generic.IReadOnlyCollection<string!>!
virtual Microsoft.Maui.PropertyMapper.UpdatePropertyCore(string! key, Microsoft.Maui.IElementHandler! viewHandler, Microsoft.Maui.IElement! virtualView) -> void
virtual Microsoft.Maui.RectangleAdorner.Contains(Microsoft.Maui.Graphics.Point point) -> bool
virtual Microsoft.Maui.RectangleAdorner.Draw(Microsoft.Maui.Graphics.ICanvas! canvas, Microsoft.Maui.Graphics.RectF dirtyRect) -> void
virtual Microsoft.Maui.WindowOverlay.AddWindowElement(Microsoft.Maui.IWindowOverlayElement! drawable) -> bool
virtual Microsoft.Maui.WindowOverlay.Deinitialize() -> bool
virtual Microsoft.Maui.WindowOverlay.HandleUIChange() -> void
virtual Microsoft.Maui.WindowOverlay.Initialize() -> bool
virtual Microsoft.Maui.WindowOverlay.RemoveWindowElement(Microsoft.Maui.IWindowOverlayElement! drawable) -> bool
virtual Microsoft.Maui.WindowOverlay.RemoveWindowElements() -> void
