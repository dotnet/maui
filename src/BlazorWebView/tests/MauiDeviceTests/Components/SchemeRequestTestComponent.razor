@page "/scheme-request-test"
@inject IJSRuntime JSRuntime

<div id="result">Loading...</div>
<button id="testButton" @onclick="TestSchemeRequest">Test Scheme Request</button>

@code {
    [Parameter] public string UriBase { get; set; }
    [Parameter] public string TestType { get; set; }

    private async Task TestSchemeRequest()
    {
        try
        {
            var url = $"{UriBase}get?param1=test1&param2=test2";
            var script = $@"
                fetch('{url}', {{
                    headers: {{ 'X-Test-Header': 'TestValue' }}
                }})
                .then(response => response.json())
                .then(data => {{
                    document.getElementById('result').innerText = data.message;
                }})
                .catch(error => {{
                    document.getElementById('result').innerText = 'Error: ' + error;
                }});
            ";
            
            await JSRuntime.InvokeVoidAsync("eval", script);
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("document.getElementById('result').innerText = 'Error: ' + arguments[0]", ex.Message);
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await TestSchemeRequest();
        }
    }
}
