@page "/async-request-test"
@inject IJSRuntime JSRuntime

<div id="result">Loading...</div>
<button id="testButton" @onclick="TestAsyncRequest">Test Async Request</button>

@code {
    private async Task TestAsyncRequest()
    {
        try
        {
            var script = @"
                fetch('/api/async-test?param1=async1&param2=async2')
                .then(response => response.json())
                .then(data => {
                    document.getElementById('result').innerText = data.message;
                })
                .catch(error => {
                    document.getElementById('result').innerText = 'Error: ' + error;
                });
            ";
            
            await JSRuntime.InvokeVoidAsync("eval", script);
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("document.getElementById('result').innerText = 'Error: ' + arguments[0]", ex.Message);
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await TestAsyncRequest();
        }
    }
}
