@page "/error-codes-test"
@inject IJSRuntime JSRuntime

<div id="result">Testing error codes...</div>
<button id="testButton" @onclick="TestErrorCodes">Test Error Codes</button>

@code {
    private async Task TestErrorCodes()
    {
        try
        {
            var script = @"
                async function testErrorCodes() {
                    const results = [];
                    
                    try {
                        const response404 = await fetch('/api/notfound');
                        results.push('404: ' + response404.status);
                    } catch (e) {
                        results.push('404: network error');
                    }
                    
                    try {
                        const response500 = await fetch('/api/servererror');
                        results.push('500: ' + response500.status);
                    } catch (e) {
                        results.push('500: network error');
                    }
                    
                    document.getElementById('result').innerText = results.join(', ');
                }
                
                testErrorCodes();
            ";
            
            await JSRuntime.InvokeVoidAsync("eval", script);
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("document.getElementById('result').innerText = 'Error: ' + arguments[0]", ex.Message);
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await TestErrorCodes();
        }
    }
}
