<Project>

  <PropertyGroup>
    <MauiWorkloadVersion>@VERSION@</MauiWorkloadVersion>
    <MauiWorkloadTargetFramework>@TFM@</MauiWorkloadTargetFramework>
    <MauiWorkloadTargetFrameworkVersion>@MAUI_DOTNET_VERSION@</MauiWorkloadTargetFrameworkVersion>
    <MauiVersion Condition=" '$(MauiVersion)' == '' ">$(MauiWorkloadVersion)</MauiVersion>

    <!--
      Indicates that the Microsoft.Maui.Controls.Compatibility package should be implicitly
      referenced.  This will eventually switch to false by default and become opt, in,
      however Visual Studio currently depends on this assembly being loaded for Live Visual Tree.
    -->
    <UseMauiCompat Condition=" '$(UseMauiCompat)' == '' and '$(UseMaui)' == 'true' ">false</UseMauiCompat>

    <!--
      If opted into NuGet Central Package Management, $(DisableMauiImplicitPackageReferences) defaults to true
      https://learn.microsoft.com/nuget/consume-packages/Central-Package-Management
    -->
    <DisableMauiImplicitPackageReferences Condition=" '$(ManagePackageVersionsCentrally)' == 'true' and '$(DisableMauiImplicitPackageReferences)' == '' ">true</DisableMauiImplicitPackageReferences>
  </PropertyGroup>

  <!-- .NET MAUI version for telemetry: this is the installed workload in use, not the final version in the app -->
  <ItemGroup>
    <ProjectCapability Include="Microsoft.Maui.Workload.Version.@VERSION@" />
  </ItemGroup>

  <!--
    These implicit <PackageReference/> pull dependencies from NuGet transitively.
    They are first added to the <_MauiImplicitPackageReference/> item group to list the the desired
    packages. Then the packages that were specified by the user are removed from the list. Finally,
    the remaining implicit packages are added into the project.

    This logic only installs packages if and only if $(DisableMauiImplicitPackageReferences) is not
    true. This property allows the user to totally override all the default nugets installed. This
    should not be needed as the $(MauiVersion) should be sufficient. However, there may be a case
    to test various CI builds of .NET MAUI.

    One thing to note: the old and unsupported $(UseMauiNuGets) property is the same as the new
    $(DisableMauiImplicitPackageReferences) property and is just kept for compatibility. It should
    not be used any any project, but there are some existing projects that have used them.
  -->
  <ItemGroup Condition=" '$(DisableMauiImplicitPackageReferences)' != 'true' and '$(UseMauiNuGets)' != 'true' ">
    <_MauiImplicitPackageReference Include="Microsoft.Maui.Resizetizer" Version="$(MauiVersion)" PrivateAssets="all" Condition=" '$(UseMauiAssets)' == 'true' " />
    <_MauiImplicitPackageReference Include="Microsoft.Maui.Essentials" Version="$(MauiVersion)" Condition=" '$(UseMauiEssentials)' == 'true' ">
      <PrivateAssets Condition=" '$(OutputType)' == 'Library' and '$(AndroidApplication)' != 'true' and '$(IsAppExtension)' != 'true'">all</PrivateAssets>
    </_MauiImplicitPackageReference>
    <_MauiImplicitPackageReference Include="Microsoft.Maui.Core" Version="$(MauiVersion)" Condition=" '$(UseMauiCore)' == 'true' ">
      <PrivateAssets Condition=" '$(OutputType)' == 'Library' and '$(AndroidApplication)' != 'true'  and '$(IsAppExtension)' != 'true'">all</PrivateAssets>
    </_MauiImplicitPackageReference>
    <_MauiImplicitPackageReference Include="Microsoft.Maui.Controls" Version="$(MauiVersion)" Condition=" '$(UseMaui)' == 'true' ">
      <PrivateAssets Condition=" '$(OutputType)' == 'Library' and '$(AndroidApplication)' != 'true'  and '$(IsAppExtension)' != 'true'">all</PrivateAssets>
    </_MauiImplicitPackageReference>
    <_MauiImplicitPackageReference Include="Microsoft.Maui.Controls.Compatibility" Version="$(MauiVersion)" IsMauiImplicitOptionalPackageReference="true" Condition=" '$(UseMaui)' == 'true' and '$(UseMauiCompat)' == 'true' ">
      <PrivateAssets Condition=" '$(OutputType)' == 'Library' and '$(AndroidApplication)' != 'true'  and '$(IsAppExtension)' != 'true'">all</PrivateAssets>
    </_MauiImplicitPackageReference>
    <_MauiImplicitPackageReference Include="Microsoft.AspNetCore.Components.WebView.Maui" Version="$(MauiVersion)" Condition=" '$(UseMaui)' == 'true' and '$(UsingMicrosoftNETSdkRazor)' == 'true' ">
      <PrivateAssets Condition=" '$(OutputType)' == 'Library' and '$(AndroidApplication)' != 'true'  and '$(IsAppExtension)' != 'true'">all</PrivateAssets>
    </_MauiImplicitPackageReference>
  </ItemGroup>
  <!-- Install the nuget packages if we are allowed to -->
  <ItemGroup Condition=" '$(DisableMauiImplicitPackageReferences)' != 'true' and '$(UseMauiNuGets)' != 'true' ">
    <_MauiImplicitPackageReference Remove="@(PackageReference)" />
    <PackageReference Include="@(_MauiImplicitPackageReference)" IsMauiImplicitPackageReference="true" />
    <_MauiImplicitRequiredPackageReference Include="@(_MauiImplicitPackageReference->WithMetadataValue('IsMauiImplicitOptionalPackageReference',''))" />
  </ItemGroup>

  <Target
    Name="ValidateMauiImplicitPackageReferences"
    AfterTargets="CollectPackageReferences"
    Condition="
      ('$(SkipValidateMauiImplicitPackageReferences)' != 'true') and
      ('$(DisableMauiImplicitPackageReferences)' != 'true' and '$(UseMauiNuGets)' != 'true') and
      ('$(UseMaui)' == 'true' or '$(UseMauiCore)' == 'true' or '$(UseMauiEssentials)' == 'true' or '$(UseMauiAssets)' == 'true') and
      ('@(_MauiImplicitRequiredPackageReference->Count())' != '0') ">

    <PropertyGroup>
      <_MauiValidateRefsPrefix>Starting with .NET 8, setting </_MauiValidateRefsPrefix>
      <!-- &lt;UseMaui&gt;true&lt;/UseMaui&gt; -->
      <_MauiValidateRefsInfix> does not automatically include NuGet package references in your project.  Update your project by including this item:  &lt;PackageReference Include=&quot;</_MauiValidateRefsInfix>
      <!-- Microsoft.Maui.Controls -->
      <_MauiValidateRefsSuffix>&quot; Version=&quot;$(MauiVersion)&quot; /&gt;.  You can skip this warning by setting  &lt;SkipValidateMauiImplicitPackageReferences&gt;true&lt;/SkipValidateMauiImplicitPackageReferences&gt;  in your project file.</_MauiValidateRefsSuffix>
    </PropertyGroup>

    <Warning
      Code="MA002"
      Condition="'$(UseMaui)' == 'true'"
      Text="$(_MauiValidateRefsPrefix) &lt;UseMaui&gt;true&lt;/UseMaui&gt; $(_MauiValidateRefsInfix)Microsoft.Maui.Controls$(_MauiValidateRefsSuffix)" />

    <Warning
      Code="MA002"
      Condition="'$(UseMaui)' == 'true' and '$(UsingMicrosoftNETSdkRazor)' == 'true'"
      Text="$(_MauiValidateRefsPrefix) &lt;UseMaui&gt;true&lt;/UseMaui&gt; $(_MauiValidateRefsInfix)Microsoft.AspNetCore.Components.WebView.Maui$(_MauiValidateRefsSuffix)" />

    <Warning
      Code="MA002"
      Condition="'$(UseMauiCore)' == 'true'"
      Text="$(_MauiValidateRefsPrefix) &lt;UseMauiCore&gt;true&lt;/UseMauiCore&gt; $(_MauiValidateRefsInfix)Microsoft.Maui.Core$(_MauiValidateRefsSuffix)" />

    <Warning
      Code="MA002"
      Condition="'$(UseMauiAssets)' == 'true'"
      Text="$(_MauiValidateRefsPrefix) &lt;UseMauiAssets&gt;true&lt;/UseMauiAssets&gt; $(_MauiValidateRefsInfix)Microsoft.Maui.Resizetizer$(_MauiValidateRefsSuffix)" />

    <Warning
      Code="MA002"
      Condition="'$(UseMauiEssentials)' == 'true'"
      Text="$(_MauiValidateRefsPrefix) &lt;UseMauiEssentials&gt;true&lt;/UseMauiEssentials&gt; $(_MauiValidateRefsInfix)Microsoft.Maui.Essentials$(_MauiValidateRefsSuffix)" />

  </Target>

</Project>