<Project DefaultTargets="Restore;Build">
  <Import Sdk="Microsoft.NET.Sdk" Project="Sdk.props" />

  <PropertyGroup>
    <TargetFramework>net8.0</TargetFramework>
    <GenerateAssemblyInfo>false</GenerateAssemblyInfo>
    <IncludeBuildOutput>false</IncludeBuildOutput>

    <AppendTargetFrameworkToOutputPath>false</AppendTargetFrameworkToOutputPath>
    <_RootDir Condition=" '$(BUILD_STAGINGDIRECTORY)' != '' ">$([MSBuild]::EnsureTrailingSlash($(BUILD_STAGINGDIRECTORY)))</_RootDir>
    <_RootDir Condition=" '$(_RootDir)' == '' ">$(MauiRootDirectory)</_RootDir>
    <OutputPath>$(_RootDir)\artifacts\</OutputPath>
    <ManifestOutputPath>$(OutputPath)manifests</ManifestOutputPath>
    <PreviewManifestOutputPath>$(OutputPath)manifests-pre</PreviewManifestOutputPath>
    <PackManifestOutputPath>$(OutputPath)manifests-packs</PackManifestOutputPath>
    <MsiNuGetOutputPath>$(ArtifactsShippingPackagesDir)</MsiNuGetOutputPath>
    <NuGetPackagePath Condition=" '$(NuGetPackagePath)' == '' ">$(ArtifactsShippingPackagesDir)</NuGetPackagePath>
    <WorkloadMsiGenProps Condition=" '$(WorkloadMsiGenProps)' == '' ">$(ArtifactsShippingPackagesDir)/vs-workload.props</WorkloadMsiGenProps>
    <DropBuildNumber Condition=" '$(DropBuildNumber)' == '' ">$(BUILD_BUILDID)</DropBuildNumber>
    <DropBuildNumber Condition=" '$(BUILD_SOURCEVERSIONSHORT)' != '' ">$(BUILD_SOURCEVERSIONSHORT)/$(DropBuildNumber)</DropBuildNumber>
  </PropertyGroup>

  <PropertyGroup>
    <WixToolsetPath>$(PkgMicrosoft_Signed_Wix)\tools</WixToolsetPath>
    <SwixPluginPath>$(PkgMicroBuild_Plugins_SwixBuild_Dotnet)</SwixPluginPath>
    <SwixBuildTargets>$(SwixPluginPath)\build\MicroBuild.Plugins.SwixBuild.targets</SwixBuildTargets>
    <SwixTargetsPath>$(PkgMicroBuild_Plugins_SwixBuild_Dotnet)\build\MicroBuild.Plugins.SwixBuild.targets</SwixTargetsPath>
  </PropertyGroup>

  <Import Project="$(WorkloadMsiGenProps)" />

    <!-- Provide default values for properties that can be set in vs-workload.props -->
  <PropertyGroup>
    <!-- The following properties can be set to true to opt in to workload pack group MSIs -->
    <CreateWorkloadPackGroups Condition=" '$(CreateWorkloadPackGroups)' == '' ">false</CreateWorkloadPackGroups>
    <UseWorkloadPackGroupsForVS Condition=" '$(UseWorkloadPackGroupsForVS)' == '' ">false</UseWorkloadPackGroupsForVS>
    <SkipRedundantMsiCreation Condition=" '$(SkipRedundantMsiCreation)' == '' ">false</SkipRedundantMsiCreation>
    <!-- This property should be set to true when producing the last build that will be supported by a major workload version
          https://devblogs.microsoft.com/visualstudio/removing-out-of-support-components-from-your-visual-studio-installations
      -->
    <IsOutOfSupportInVisualStudio Condition=" '$(IsOutOfSupportInVisualStudio)' == '' ">false</IsOutOfSupportInVisualStudio>

    <!-- This property should be set to true to opt in to simplified workload versioning, only valid for .NET 8+
          https://github.com/dotnet/designs/pull/294
      -->
    <EnableSideBySideManifests Condition=" '$(EnableSideBySideManifests)' == '' ">false</EnableSideBySideManifests>
  </PropertyGroup>

  <ItemGroup>
    <PackageReference Include="Microsoft.DotNet.Build.Tasks.Workloads" GeneratePathProperty="true" />
    <PackageReference Include="Microsoft.Signed.WiX" GeneratePathProperty="true" />
    <PackageReference Include="MicroBuild.Plugins.SwixBuild.Dotnet" GeneratePathProperty="true" />
    <PackageReference Include="Microsoft.DotNet.Build.Tasks.Installers" GeneratePathProperty="true" />
    <PackageReference Include="Microsoft.VisualStudioEng.MicroBuild.Core" Version="1.0.0" PrivateAssets="all" />
  </ItemGroup>

    <Target Name="_SetMsiVersionFromNuGetVersion" >
    <!-- If %(MsiVersion) is not already set, and the manifest package is for a stable SDK band, use the NuGet package version as the MSI version -->
    <!-- If %(UseNuGetVersionAsMsiVersion) is set to 'true', use the NuGet package version as the MSI version -->
    <ItemGroup>
      <WorkloadPackages Condition="'%(WorkloadPackages.Identity)' == '%(Identity)' and '%(WorkloadPackages.MsiVersion)' == ''" >
        <SdkBandPreviewMatch>$([System.Text.RegularExpressions.Regex]::Match(%(WorkloadPackages.Identity), `\-(preview|rc|ci.+).\d+`))</SdkBandPreviewMatch>
        <NupkgVersion>$([System.Version]::Parse('%(WorkloadPackages.Version)').Major).$([System.Version]::Parse('%(WorkloadPackages.Version)').Minor).$([System.Version]::Parse('%(WorkloadPackages.Version)').Build)</NupkgVersion>
          <!-- Do not attempt to use NuGet package version for already released 6.0.4xx packages -->
        <IsNet6Manifest>$([System.String]::Copy('%(WorkloadPackages.Identity)').Contains('Manifest-6.0.4'))</IsNet6Manifest>
      </WorkloadPackages>
      <WorkloadPackages Condition="'%(WorkloadPackages.Identity)' == '%(Identity)' and '%(WorkloadPackages.MsiVersion)' == ''" >
        <MsiVersion Condition="'%(WorkloadPackages.IsNet6Manifest)' != 'true' and ('%(WorkloadPackages.SdkBandPreviewMatch)' == '' or '%(WorkloadPackages.UseNuGetVersionAsMsiVersion)' == 'true')">%(WorkloadPackages.NupkgVersion)</MsiVersion>
      </WorkloadPackages>
    </ItemGroup>
  </Target>

  <Target Name="_CreateManifestMsiVersionsWithDateTime"
      Outputs="%(WorkloadPackages.Identity)" >
    <PropertyGroup>
      <VersionPadding Condition="'$(VersionPadding)'==''">5</VersionPadding>
      <!-- Using the following default comparison date will produce versions that align with our internal build system. -->
      <VersionComparisonDate Condition="'$(VersionComparisonDate)'==''">1996-04-01</VersionComparisonDate>
    </PropertyGroup>
    <!-- Official dotnet builds use a version schema of yyyyMMdd.revision, for example 20220415.54 -->
    <GenerateCurrentVersion
        SeedDate="$([System.DateTime]::UtcNow.ToString(yyyy-MM-dd))"
        OfficialBuildId="$([System.DateTime]::UtcNow.ToString(yyyyMMdd)).$([System.Version]::Parse('%(WorkloadPackages.Version)').Revision)"
        ComparisonDate="$(VersionComparisonDate)"
        Padding="$(VersionPadding)">
      <Output TaskParameter="GeneratedVersion" PropertyName="BuildNumberMajor" />
      <Output TaskParameter="GeneratedRevision" PropertyName="BuildNumberMinor" />
    </GenerateCurrentVersion>
    <GenerateMsiVersion
        Major="$([System.Version]::Parse('%(WorkloadPackages.Version)').Major)"
        Minor="$([System.Version]::Parse('%(WorkloadPackages.Version)').Minor)"
        Patch="$([System.Version]::Parse('%(WorkloadPackages.Version)').Build)"
        BuildNumberMajor="$(BuildNumberMajor)"
        BuildNumberMinor="$(BuildNumberMinor)" >
      <Output TaskParameter="MsiVersion" PropertyName="ConvertedVersion" />
    </GenerateMsiVersion>
    <!-- Assign %(WorkloadPackages.MsiVersion) to task output. -->
    <ItemGroup>
      <WorkloadPackages Condition="'%(WorkloadPackages.Identity)' == '%(Identity)' and '%(WorkloadPackages.MsiVersion)' == ''" >
        <MsiVersion>$(ConvertedVersion)</MsiVersion>
      </WorkloadPackages>
    </ItemGroup>
    <!-- Clear task output property. -->
    <PropertyGroup>
      <ConvertedVersion></ConvertedVersion>
    </PropertyGroup>
    <Message Text="Generated MSI version: %(WorkloadPackages.Filename) - %(WorkloadPackages.MsiVersion)" Importance="High" />
  </Target>

  <Target Name="_GenerateAndSignMsis"
      DependsOnTargets="_SetMsiVersionFromNuGetVersion;_CreateManifestMsiVersionsWithDateTime"
      BeforeTargets="SignFiles" >
    <CreateVisualStudioWorkload
        AllowMissingPacks="true"
        BaseIntermediateOutputPath="$(IntermediateOutputPath)"
        BaseOutputPath="$(OutputPath)"
        ComponentResources="@(ComponentResources)"
        CreateWorkloadPackGroups="$(CreateWorkloadPackGroups)"
        EnableSideBySideManifests="$(EnableSideBySideManifests)"
        IsOutOfSupportInVisualStudio="$(IsOutOfSupportInVisualStudio)"
        PackageSource="$(NuGetPackagePath)"
        ShortNames="@(ShortNames)"
        SkipRedundantMsiCreation="$(SkipRedundantMsiCreation)"
        UseWorkloadPackGroupsForVS="$(UseWorkloadPackGroupsForVS)"
        WixToolsetPath="$(WixToolsetPath)"
        WorkloadManifestPackageFiles="@(WorkloadPackages)" >
      <Output TaskParameter="Msis" ItemName="VSWorkloadMsis" />
      <Output TaskParameter="SwixProjects" ItemName="SwixProjects" />
    </CreateVisualStudioWorkload>
    <ItemGroup>
      <FilesToSign Include="$(OutputPath)**\*.msi">
        <Authenticode>Microsoft400</Authenticode>
      </FilesToSign>
    </ItemGroup>
  </Target>

  <Target Name="_GenerateManifestsAndMsiNuGets"
        AfterTargets="SignFiles" >
    <!-- Create NUPKGs containing MSIs -->
    <MSBuild
        Projects="%(VSWorkloadMsis.PackageProject)"
        Targets="Restore;Pack"
        Properties="OutputPath=$(MsiNuGetOutputPath)"
    />

    <!-- Split swix projects into "components", "components.pre", and "packs" groups to create drops based on %(SwixProjects.PackageType) and %(SwixProjects.IsPreview) -->
    <ItemGroup>
      <PacksSwixProjects Include="@(SwixProjects)" Condition=" '%(PackageType)' == 'msi-pack' " />
      <ComponentsSwixProjects Include="@(SwixProjects)" Condition=" '%(PackageType)' == 'msi-manifest' or '%(PackageType)' == 'manifest-package-group' or ('%(PackageType)' == 'component' and '%(IsPreview)' != 'true') " />
      <ComponentsSwixProjectsPreview Include="@(SwixProjects)" Condition=" '%(PackageType)' == 'msi-manifest' or '%(PackageType)' == 'manifest-package-group' or ('%(PackageType)' == 'component' and '%(IsPreview)' == 'true') " />
    </ItemGroup>

    <!-- Create "components" VS manifests -->
    <MSBuild
        Projects="%(ComponentsSwixProjects.Identity)"
        Properties="SwixBuildTargets=$(SwixTargetsPath);ManifestOutputPath=$(ManifestOutputPath)"
    />
    <MSBuild
        Projects="$(MSBuildThisFileDirectory)\maui.vsmanproj"
        Targets="Restore;GenerateSetupManifest"
        Properties="SwixBuildTargets=$(SwixTargetsPath);WorkloadMsiGenProps=$(WorkloadMsiGenProps);ManifestOutputPath=$(ManifestOutputPath);TargetName=$(TargetName).components;ManifestBuildNumber=$(DropBuildNumber)/vs-components"
    />

    <!-- Create and copy "components.pre" VS manifests to the "components" manifest output path so any build can use preview manifests if requested -->
    <MSBuild
        Projects="%(ComponentsSwixProjectsPreview.Identity)"
        Properties="SwixBuildTargets=$(SwixTargetsPath);ManifestOutputPath=$(PreviewManifestOutputPath)"
    />
    <MSBuild
        Projects="$(MSBuildThisFileDirectory)\maui.vsmanproj"
        Targets="Restore;GenerateSetupManifest"
        Properties="SwixBuildTargets=$(SwixTargetsPath);WorkloadMsiGenProps=$(WorkloadMsiGenProps);ManifestOutputPath=$(PreviewManifestOutputPath);TargetName=$(TargetName).components.pre;ManifestBuildNumber=$(DropBuildNumber)/vs-components"
    />
    <ItemGroup>
      <PreviewManifests Include="$(PreviewManifestOutputPath)\*" />
    </ItemGroup>
    <Copy
        SourceFiles="@(PreviewManifests)"
        DestinationFolder="$(ManifestOutputPath)"
    />

    <!-- Create "packs" VS manifests that can be referenced by different "components" to support building alternate target framework versions -->
    <MSBuild
        Projects="%(PacksSwixProjects.Identity)"
        Properties="SwixBuildTargets=$(SwixTargetsPath);ManifestOutputPath=$(PackManifestOutputPath)"
    />
    <MSBuild
        Projects="$(MSBuildThisFileDirectory)\maui.vsmanproj"
        Targets="Restore;GenerateSetupManifest"
        Properties="SwixBuildTargets=$(SwixTargetsPath);WorkloadMsiGenProps=$(WorkloadMsiGenProps);ManifestOutputPath=$(PackManifestOutputPath);TargetName=$(TargetName).packs;ManifestBuildNumber=$(DropBuildNumber)/vs-packs"
    />
  </Target>

  <Import Sdk="Microsoft.NET.Sdk" Project="Sdk.targets" />

  <PropertyGroup>
    <BuildDependsOn>
      _GenerateAndSignMsis;
      AfterBuild;
    </BuildDependsOn>
  </PropertyGroup>
</Project>