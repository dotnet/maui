name: 'Flexible Triage Labels Action'

description: 'Process issues and apply labels using AI inference, supporting multiple triage modes.'

inputs:
  issue:
    description: 'The issue number to triage'
    required: false
    default: ''
  token:
    description: 'GitHub token to use for authentication'
    required: true
  label-prefix:
    description: 'Prefix for label search (e.g., platform/, area-, etc.)'
    required: false
    default: ''
  label:
    description: 'The label to apply to an issue'
    required: false
    default: ''
  mode:
    description: 'Triage mode: multi-label, single-label, regression'
    required: true
    default: 'multi-label'

outputs:
  labels-file:
    description: 'The file that contains the labels to apply to the issue'
    value: ${{ steps.move-response.outputs.ai-response }}

runs:
  using: 'composite'
  steps:

    - name: Generate a unique work ID
      id: gen-guid
      shell: pwsh
      run: |
        "Generate a unique work ID"
        echo "::group::Generate a unique work ID"
        $guid = [guid]::NewGuid().ToString()
        $workDir = "${{ runner.temp }}/triage-labels-${{ steps.gen-guid.outputs.triage-work-id }}";
        "triage-work-id=$guid" >> $env:GITHUB_OUTPUT
        "triage-work-dir=$workDir" >> $env:GITHUB_OUTPUT
        echo "::endgroup::"

    - name: Fetch issue data
      id: issue-data
      uses: actions/github-script@v7
      with:
        script: |
          const issueNumber = '${{ inputs.issue }}' || github.event.issue.number;
          const issue = await github.rest.issues.get({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: issueNumber
          });

          const data = issue.data;
          const json = JSON.stringify(data, null, 2);

          const fs = require('fs');
          fs.writeFileSync("${{ steps.gen-guid.outputs.triage-work-dir }}/issue.json", json);

          return data;

    - name: Select system prompt template
      id: select-system-prompt
      shell: pwsh
      run: |
        "Select system prompt template"
        echo "::group::Select system prompt template"
        $mode = "${{ inputs.mode }}"
        switch ($mode) {
          "multi-label"   { $template = "${{ github.action_path }}/system-prompt-multilabel.md" }
          "single-label"  { $template = "${{ github.action_path }}/system-prompt-singlelabel.md" }
          "regression"    { $template = "${{ github.action_path }}/system-prompt-regression.md" }
          default         { throw "Unknown mode: $mode" }
        }
        "Using system prompt template: $template"
        "system-prompt-template=$template" >> $env:GITHUB_OUTPUT
        echo "::endgroup::"

    - name: Setup working directory
      shell: pwsh
      env:
        GH_TOKEN: ${{ inputs.token }}
      run: |
        "Setup working directory"
        echo "::group::Setup working directory"
        cd "${{ steps.gen-guid.outputs.triage-work-dir }}"
        git init
        git remote add origin ${{ github.repositoryUrl }}
        gh repo set-default ${{ github.repository }}
        echo "::endgroup::"

    - name: Create User prompt file
      id: create-user-prompt
      shell: pwsh
      env:
        GH_TOKEN: ${{ inputs.token }}
      run: |
        "Create User prompt file"
        echo "::group::Create User prompt file"
        $prompt = "${{ steps.gen-guid.outputs.triage-work-dir }}/user-prompt.md"
        ${{ github.action_path }}/process-prompt-template.ps1 `
          -LabelPrefix "${{ inputs.label-prefix }}" `
          -Label "${{ inputs.label }}" `
          -Template "${{ github.action_path }}/user-prompt.md" `
          -Output $prompt
        "user-prompt=$prompt" >> $env:GITHUB_OUTPUT
        echo "::endgroup::"

    - name: Create System prompt file
      id: create-system-prompt
      shell: pwsh
      env:
        GH_TOKEN: ${{ inputs.token }}
      run: |
        "Create System prompt file"
        echo "::group::Create System prompt file"
        $prompt = "${{ steps.gen-guid.outputs.triage-work-dir }}/system-prompt.md"
        ${{ github.action_path }}/process-prompt-template.ps1 `
          -LabelPrefix "${{ inputs.label-prefix }}" `
          -Label "${{ inputs.label }}" `
          -Template "${{ steps.select-system-prompt.outputs.system-prompt-template }}" `
          -Output $prompt
        "system-prompt=$prompt" >> $env:GITHUB_OUTPUT
        echo "::endgroup::"

    - name: Print prompt files
      shell: pwsh
      run: |
        "Print prompt files"
        echo "::group::System Prompt"
        cat "${{ steps.create-system-prompt.outputs.system-prompt }}"
        echo "::endgroup::"
        echo "::group::User Prompt"
        cat "${{ steps.create-user-prompt.outputs.user-prompt }}"
        echo "::endgroup::"

    - name: Run AI inference
      id: inference
      uses: actions/ai-inference@main
      with:
        prompt-file: "${{ steps.create-system-prompt.outputs.system-prompt }}"
        system-prompt-file: "${{ steps.create-user-prompt.outputs.user-prompt }}"
      env:
        GITHUB_TOKEN: ${{ inputs.token }}

    - name: Move AI response to work folder
      id: move-response
      shell: pwsh
      run: |
        "Move AI response to work folder"
        echo "::group::Move AI response to work folder"
        $src = "${{ steps.inference.outputs.response-file }}"
        $dst = "${{ steps.gen-guid.outputs.triage-work-dir }}/ai-response.json"
        Move-Item -Path $src -Destination $dst -Force
        "ai-response=$dst" >> $env:GITHUB_OUTPUT
        echo "::endgroup::"

    - name: Print AI response
      shell: pwsh
      run: |
        "Print AI response"
        echo "::group::AI Response"
        cat "${{ steps.move-response.outputs.ai-response }}"
        echo "::endgroup::"
