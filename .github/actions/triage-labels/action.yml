name: 'Triage Labels Action'

description: 'Process issues and apply labels using AI inference'

inputs:
  issue:
    description: 'The issue number to triage'
    required: false
    default: ''
  token:
    description: 'GitHub token to use for authentication'
    required: true
  label-prefix:
    description: 'Prefix for label search (e.g., platform/, area/, etc.)'
    required: true

outputs:
  labels-file:
    description: 'The file taht contains the labels to apply to the issue'
    value: ${{ steps.move-response.outputs.ai-response }}

runs:
  using: 'composite'
  steps:
    - name: Generate a unique work ID
      id: gen-guid
      shell: pwsh
      run: |
        "Generate a unique work ID"
        echo "::group::Generate a unique work ID"
        $guid = [guid]::NewGuid().ToString()
        "workid=$guid" >> $env:GITHUB_OUTPUT
        echo "::endgroup::"

    - name: Fetch issue data
      id: issue-data
      uses: actions/github-script@v7
      with:
        script: |
          const issueNumber = '${{ inputs.issue }}' || github.event.issue.number;
          const issue = await github.rest.issues.get({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: issueNumber
          });

          const data = issue.data;
          const json = JSON.stringify(data, null, 2);

          const fs = require('fs');
          io.mkdirP('${{ runner.temp }}/apply-label-${{ steps.gen-guid.outputs.workid }}');
          fs.writeFileSync('${{ runner.temp }}/apply-label-${{ steps.gen-guid.outputs.workid }}/issue.json', json);

          return data;

    - name: Setup working directory
      shell: pwsh
      env:
        GH_TOKEN: ${{ inputs.token }}
      run: |
        "Setup working directory"
        echo "::group::Setup working directory"
        cd ${{ runner.temp }}/apply-label-${{ steps.gen-guid.outputs.workid }}
        git init
        git remote add origin ${{ github.repositoryUrl }}
        gh repo set-default ${{ github.repository }}
        echo "::endgroup::"

    - name: Create User prompt file
      id: create-user-prompt
      shell: pwsh
      env:
        GH_TOKEN: ${{ inputs.token }}
      run: |
        "Create User prompt file"
        echo "::group::Create User prompt file"
        ${{ github.action_path }}/process-prompt-template.ps1 `
          -LabelPrefix "${{ inputs.label-prefix }}" `
          -Template "${{ github.action_path }}/user-prompt-template.md" `
          -Output "${{ runner.temp }}/apply-label-${{ steps.gen-guid.outputs.workid }}/user-prompt.md"
        echo "::endgroup::"

    - name: Create System prompt file
      id: create-system-prompt
      shell: pwsh
      env:
        GH_TOKEN: ${{ inputs.token }}
      run: |
        "Create System prompt file"
        echo "::group::Create System prompt file"
        ${{ github.action_path }}/process-prompt-template.ps1 `
          -LabelPrefix "${{ inputs.label-prefix }}" `
          -Template "${{ github.action_path }}/system-prompt-template.md" `
          -Output "${{ runner.temp }}/apply-label-${{ steps.gen-guid.outputs.workid }}/system-prompt.md"
        echo "::endgroup::"

    - name: Print prompt files
      shell: pwsh
      run: |
        "Print prompt files"
        echo "::group::System Prompt"
        cat ${{ runner.temp }}/apply-label-${{ steps.gen-guid.outputs.workid }}/system-prompt.md
        echo "::endgroup::"
        echo "::group::User Prompt"
        cat ${{ runner.temp }}/apply-label-${{ steps.gen-guid.outputs.workid }}/user-prompt.md
        echo "::endgroup::"

    - name: Run AI inference
      id: inference
      uses: actions/ai-inference@main
      with:
        prompt-file: "${{ runner.temp }}/apply-label-${{ steps.gen-guid.outputs.workid }}/user-prompt.md"
        system-prompt-file: "${{ runner.temp }}/apply-label-${{ steps.gen-guid.outputs.workid }}/system-prompt.md"
      env:
        GITHUB_TOKEN: ${{ inputs.token }}

    - name: Move AI response to work folder
      id: move-response
      shell: pwsh
      run: |
        "Move AI response to work folder"
        echo "::group::Move AI response to work folder"
        $src = "${{ steps.inference.outputs.response-file }}"
        $dst = "${{ runner.temp }}/apply-label-${{ steps.gen-guid.outputs.workid }}/ai-response.json"
        Move-Item -Path $src -Destination $dst -Force
        "ai-response=$dst" >> $env:GITHUB_OUTPUT
        echo "::endgroup::"

    - name: Print AI response
      shell: pwsh
      run: |
        "Print AI response"
        cat "${{ steps.move-response.outputs.ai-response }}"
