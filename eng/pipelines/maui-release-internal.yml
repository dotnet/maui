trigger:
  branches:
    include:
    - main
    - net9.0
    - release/*
  tags:
    include:
    - '*'
  paths:
    include:
    - '*'
    exclude:
    - .github/*
    - docs/*
    - CODE-OF-CONDUCT.md
    - CONTRIBUTING.md
    - LICENSE.TXT
    - PATENTS.TXT
    - README.md
    - SECURITY.md
    - THIRD-PARTY-NOTICES.TXT

schedules:
- cron: "0 5 * * *"
  displayName: Run daily at 5:00 UTC
  branches:
    include:
    - main
    - net9.0
    
variables:
  - template: /eng/pipelines/common/variables.yml@self
  - group: DotNetBuilds storage account read tokens
  - group: AzureDevOps-Artifact-Feeds-Pats
  - name: _InternalRuntimeDownloadArgs
    value: /p:DotNetRuntimeSourceFeed=https://dotnetbuilds.blob.core.windows.net/internal
           /p:DotNetRuntimeSourceFeedKey=$(dotnetbuilds-internal-container-read-token-base64)
  # needed for darc (dependency flow) publishing
  - name: _BuildConfig
    value: Release
  - name: Build.Arcade.ArtifactsPath
    value: $(Build.SourcesDirectory)/artifacts/
  - name: Build.Arcade.LogsPath
    value: $(Build.Arcade.ArtifactsPath)log/$(_BuildConfig)/
  - name: Build.Arcade.TestResultsPath
    value: $(Build.Arcade.ArtifactsPath)TestResults/$(_BuildConfig)/
  - name: _PublishArgs
    value: >-
          /p:DotNetPublishUsingPipelines=true
  - name: _OfficialBuildIdArgs
    value: /p:OfficialBuildId=$(BUILD.BUILDNUMBER)
  # needed for signing
  - name: _TeamName
    value: $(TeamName)
  - name: _SignType
    value: real
  - name: _SignArgs
    value: /p:DotNetSignType=$(_SignType) /p:TeamName=$(_TeamName) /p:Sign=$(_Sign)
  - name: _Sign
    value: true
  - template: /eng/common/templates-official/variables/pool-providers.yml@self

parameters:
  - name: pushMauiPackagesToMaestro
    default: true

  - name: provisionatorChannel
    displayName: 'Provisionator channel'
    type: string
    default: 'latest'           # Support for launching a build against a Provisionator PR (e.g., pr/[github-account-name]/[pr-number]) as a means to test in-progress Provisionator changes

  - name: VM_IMAGE_HOST
    type: object
    default:
      name: NetCore1ESPool-Internal
      image: 1es-windows-2022
      os: windows

  - name: PackPlatform
    type: object
    default:
      name: Windows
      artifact: nuget
      binariesArtifact: pack-binaries
      metadataArtifact: metadata
      logsArtifact: logs
      docsArtifact: xml-docs
      artifactsPath: '$(Build.ArtifactStagingDirectory)'

  - name: Skip1ESComplianceTasks
    default: false

resources:
  repositories:
    - repository: 1ESPipelineTemplates
      type: git
      name: 1ESPipelineTemplates/1ESPipelineTemplates
      ref: refs/tags/release

extends:
  template: v1/1ES.Official.PipelineTemplate.yml@1ESPipelineTemplates
  parameters:
    pool: ${{ parameters.VM_IMAGE_HOST }}
    sdl:
      ${{ if eq('${{ parameters.Skip1ESComplianceTasks }}', 'true') }}:
        enableAllTools: false
      binskim:
        scanOutputDirectoryOnly: true
      codeql:
        runSourceLanguagesInSourceAnalysis: true
      policheck:
        enabled: true
      spotBugs:
        enabled: false
        justification: 'Failing with "Could not successfully find the java tool launcher"'
      sourceRepositoriesToScan:
        exclude:
        - repository: yaml-templates
      suppression:
        suppressionFile: $(Build.SourcesDirectory)\eng\automation\guardian\source.gdnsuppress
    stages:
    - stage: Pack
      displayName: Pack .NET MAUI
      dependsOn: []
      jobs:
      - template: /eng/common/templates-official/jobs/jobs.yml@self
        parameters:
          enableMicrobuild: true
          helixRepo: dotnet/maui
          pool: ${{ parameters.VM_IMAGE_HOST }}
          enablePublishUsingPipelines: true
          enablePublishBuildAssets: true
          enableTelemetry: true
          enableSourceBuild: false
          enableSourceIndex: false
          publishAssetsImmediately: true
           # Publish build logs
          enablePublishBuildArtifacts: true
          # Publish test logs
          enablePublishTestResults: true
          workspace:
            clean: all
          jobs:
          - job: pack_net_${{ parameters.PackPlatform.name }}
            displayName: ${{ parameters.PackPlatform.name }}
            
            
            timeoutInMinutes: 240

            pool:
              name: NetCore1ESPool-Internal
              image: windows.vs2022preview.amd64
              os: windows
           
            templateContext:
               outputs:
                - output: pipelineArtifact
                  displayName: 'Publish the ${{ parameters.PackPlatform.artifact }} artifacts'
                  artifactName: ${{ parameters.PackPlatform.artifact }}
                  targetPath: '${{ parameters.PackPlatform.artifactsPath }}/nuget'
                
                - output: pipelineArtifact
                  displayName: 'Publish the ${{ parameters.PackPlatform.binariesArtifact }} artifacts'
                  artifactName: ${{ parameters.PackPlatform.binariesArtifact }}
                  targetPath: '$(System.DefaultWorkingDirectory)/artifacts/binaries'

                - output: pipelineArtifact
                  displayName: 'Publish the ${{ parameters.PackPlatform.docsArtifact }} artifacts'
                  artifactName: ${{ parameters.PackPlatform.docsArtifact }}
                  targetPath: '$(System.DefaultWorkingDirectory)/artifacts/docs-packs'

                - output: pipelineArtifact
                  displayName: 'Publish the ${{ parameters.PackPlatform.metadataArtifact }} artifacts'
                  artifactName: ${{ parameters.PackPlatform.metadataArtifact }}
                  targetPath: '${{ parameters.PackPlatform.artifactsPath }}/metadata'

                - output: pipelineArtifact
                  displayName: 'Publish the ${{ parameters.PackPlatform.logsArtifact }} artifacts'
                  artifactName: ${{ parameters.PackPlatform.logsArtifact }}
                  targetPath: '${{ parameters.PackPlatform.artifactsPath }}/logs'
        
            variables:
              - name: _buildScript
                value: $(Build.SourcesDirectory)/build.cmd -ci
              - name: _BuildConfig
                value: Release
              - name: _BuildOfficalId
                value: $[ format('{0}.{1}', format('{0:yyyyMMdd}', pipeline.startTime), counter(format('{0:yyyyMMdd}', pipeline.startTime), 1) )]
                
            preSteps:
              - checkout: self
                fetchDepth: 1
                clean: true

            steps:
              - template: /eng/pipelines/templates/buildandtest.yml
                parameters:
                  dotnetScript: $(Build.SourcesDirectory)/build.cmd
                  buildScript: $(_buildScript)
                  buildConfig: $(_BuildConfig)
                  repoArtifactsPath: $(Build.Arcade.ArtifactsPath)
                  repoLogPath: $(Build.Arcade.LogsPath)
                  repoTestResultsPath: $(Build.Arcade.TestResultsPath)
                  isWindows: true
              # - pwsh: |
              #     if ($env:JAVA_HOME_11_X64) {
              #       $env:JAVA_HOME = $env:JAVA_HOME_11_X64
              #     } else {
              #       $path = (Get-ChildItem $env:ProgramFiles\Microsoft\jdk-11.*\bin\java.exe) | Select-Object -First 1
              #       if ($path -and (Test-Path $path)) {
              #         $env:JAVA_HOME = $path.Directory.Parent.FullName
              #       }
              #     }
              #     if ($env:JAVA_HOME) {
              #       echo "##vso[task.setvariable variable=JAVA_HOME]$env:JAVA_HOME"
              #       echo "JAVA_HOME set to '$env:JAVA_HOME'"
              #     } else {
              #       echo "Unable to set JAVA_HOME"
              #     }
              #   displayName: Set JAVA_HOME

              # - script: $(_buildScript) -configuration $(_BuildConfig) $(_SignArgs) $(_PublishArgs) $(_OfficialBuildIdArgs) -warnAsError 0
              #   displayName: Build Test and Pack
              # - template: /eng/pipelines/common/pack.yml@self
              #   parameters:
              #     publishArtifacts: false
              #     platform: ${{ parameters.PackPlatform.name }}
              #     provisionatorChannel: ${{ parameters.provisionatorChannel }}
              #     artifact: ${{ parameters.PackPlatform.artifact }}
              #     artifactBinaries: ${{ parameters.PackPlatform.binariesArtifact }}
              #     artifactsPath: ${{ parameters.PackPlatform.artifactsPath }}
              #     buildConfiguration: $(_BuildConfig)
              #     dotnetScript: $(Build.SourcesDirectory)/dotnet.cmd
              #     buildScript: $(_buildScript)
              #     repoArtifactsPath: $(Build.Arcade.ArtifactsPath)
              #     repoLogPath: $(Build.Arcade.LogsPath)
              #     repoTestResultsPath: $(Build.Arcade.TestResultsPath)
              #     officialBuildId: $(_BuildOfficalId)
                  # prepareSteps:
                  #   - template: /eng/pipelines/common/provision.yml@self
                  #     parameters:
                  #       checkoutDirectory: '$(System.DefaultWorkingDirectory)'
                  #       provisionatorChannel: ${{ parameters.provisionatorChannel }}
                  #       gitHubToken: $(github--pat--vs-mobiletools-engineering-service2)
                  #       skipAndroidImages: true

              # - task: DotNetCoreCLI@2
              #   displayName: Generate and publish BAR manifest
              #   inputs:
              #     projects: $(Build.SourcesDirectory)\src\Workload\Microsoft.Maui.Sdk\Microsoft.Maui.Sdk.csproj
              #     arguments: >-
              #       -t:PushManifestToBuildAssetRegistry
              #       -p:BuildAssetRegistryToken=$(MaestroAccessToken)
              #       -p:OutputPath=$(Build.StagingDirectory)\nuget\
              #       -v:n -bl:$(Build.StagingDirectory)\binlogs\push-bar-manifest.binlog
              #   condition: and(succeeded(), eq('${{ parameters.pushMauiPackagesToMaestro }}', 'true'))
              
              # - powershell: |
              #     $versionEndpoint = 'https://maestro-prod.westus2.cloudapp.azure.com/api/assets/darc-version?api-version=2019-01-16'
              #     $darcVersion = $(Invoke-WebRequest -Uri $versionEndpoint -UseBasicParsing).Content
              #     $arcadeServicesSource = 'https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-eng/nuget/v3/index.json'
              #     & dotnet tool update microsoft.dotnet.darc --version "$darcVersion" --add-source "$arcadeServicesSource" --tool-path $(Agent.ToolsDirectory)\darc -v n
              #     & $(Agent.ToolsDirectory)\darc\darc add-build-to-channel --default-channels --id $(BARBuildId) --publishing-infra-version 3 --skip-assets-publishing --password $(MaestroAccessToken) --azdev-pat $(publishing-dnceng-devdiv-code-r-build-re)

    # - stage: PublishAssetRegistry
    #   displayName: Publish to Build Asset Registry
    #   dependsOn: pack_net
    #   variables:
    #   - template: /eng/common/templates-official/variables/pool-providers.yml@self
    #   jobs:
    #   # Publish to Build Asset Registry in order to generate the ReleaseConfigs artifact.
    #   - template: /eng/common/templates-official/job/publish-build-assets.yml@self
    #     parameters:
    #       publishUsingPipelines: true
    #       pool:
    #         name: $(DncEngInternalBuildPool)
    #         demands: ImageOverride -equals windows.vs2022preview.amd64

      # Publish and validation steps. Only run in official builds
    - template: /eng/common/templates-official/post-build/post-build.yml@self
      parameters:
        publishingInfraVersion: 3
        enableSymbolValidation: true
        enableSigningValidation: true
        # It's a private repo in github so this won't pass until we create an internal mirror
        enableSourceLinkValidation: false
        validateDependsOn:
        - Pack
        publishDependsOn:
        - Validate
        enableSourceLinkValidation: true
        # This is to enable SDL runs part of Post-Build Validation Stage
        SDLValidationParameters:
          enable: false