parameters:
      CeapexPat: $(dn-bot-ceapex-package-r) # PAT for the loc AzDO instance https://dev.azure.com/ceapex
      GithubPat: $(BotAccount-dotnet-bot-repo-PAT)

stages:
  - stage: localization_handback
    displayName: Localization Handback
    dependsOn: []
    condition: and(succeeded(), eq(variables.isLocBranch, true))

    jobs:
      - job : generate_resx
        displayName: 'Process incoming translations'
        pool:  $(HostedWinVS2019)

        variables:
          - group: OneLocBuildVariables # Contains the CeapexPat and GithubPat

        steps:
          - checkout: self
            persistCredentials: true
            clean: true

          - powershell: |
              $srcBranch = "$(Build.SourceBranch)"
              Write-Host "Extracting branch name from $srcBranch..."
              if ($srcBranch -eq "refs/heads/loc") {
                $baseBranchName = "main"
                $locBranchName = "loc"
              } elseif ($srcBranch.StartsWith("refs/heads/loc-")) {
                $baseBranchName = $srcBranch.SubString("refs/heads/loc-".Length)
                $locBranchName = "loc-$baseBranchName"
              } else {
                throw "Invalid branch name $srcBranch."
              }
              Write-Host "Using base branch: $baseBranchName"
              Write-Host "Using loc branch: $locBranchName"
              Write-Host "##vso[task.setvariable variable=LOC_BASE_BRANCH_NAME;]$baseBranchName"
              Write-Host "##vso[task.setvariable variable=LOC_BRANCH_NAME;]$locBranchName"
            displayName: 'Extract branch name variables'

          - powershell: |
              #-- Import Invoke-Git Module function
              Import-Module $(Build.SourcesDirectory)\eng\automation\scripts\Invoke-Git.psm1 -Force -DisableNameChecking
              git config user.email "vs-mobiletools-engineering-service2@microsoft.com"
              git config user.name "VS Mobile Engineering Serice Account"
              Invoke-Git checkout $(LOC_BASE_BRANCH_NAME)
              Invoke-Git merge origin/$(LOC_BRANCH_NAME) --no-commit
            displayName: 'Merge loc Branch'

          - task: OneLocBuild@2
            displayName: 'Localization Build'
            env:
              SYSTEM_ACCESSTOKEN: $(System.AccessToken) 
            inputs:
              locProj: 'eng/automation/LocProject.json'
              outDir: '$(Build.ArtifactStagingDirectory)'
              packageSourceAuth: patAuth
              patVariable: ${{ parameters.CeapexPat }}
              isCreatePrSelected: false
              repoType: gitHub
              prSourceBranchPrefix: $(LocBranchPrefix)
              gitHubPatVariable: "${{ parameters.GithubPat }}"
              gitHubPrMergeMethod: merge

          - powershell: |
              #-- Import Invoke-Git Module function
              Import-Module $(Build.SourcesDirectory)\eng\automation\scripts\Invoke-Git.psm1 -Force -DisableNameChecking
              #--Clear Stage
              Invoke-Git reset HEAD -- .
              #-- Create new branch
              $branchName = "$(LocBranchPrefix)/$(LOC_BASE_BRANCH_NAME)_$(new-guid)"
              Invoke-Git checkout -B ${branchName}
              Write-Host ("##vso[task.setvariable variable=HANDBACK_BRANCH_NAME;]$branchName")
              #-- Stage Build Changes
              Invoke-Git add src
              #-- Only commit/push if there are changed files.
              $changedFiles = $(git status --porcelain | Measure-Object | Select-Object -expand Count)
              if ($changedFiles -gt 0)
              {
                #-- Commit Changes locally
                Invoke-Git commit -m "[LOC_HB] string translations" --no-verify
                #-- Push changes to VSTS
                Invoke-Git push origin HEAD:${branchName}
              }
            displayName: 'Commit updates'

          - powershell: |
              $payload=@{
                title = "[LOC_HB] checkin of localized string files"
                head = "$(HANDBACK_BRANCH_NAME)"
                base = "$(LOC_BASE_BRANCH_NAME)"
                maintainer_can_modify = $true
              }

              $headers = @{ Authorization = "token $(GitHub.Token)" }

              # let it throw
              $response = Invoke-WebRequest -UseBasicParsing -Method POST -Headers $headers -Uri "https://api.github.com/repos/dotnet/maui/pulls" -Body ($payload | ConvertTo-json)
              $newPr =  $response.Content | ConvertFrom-Json

              Write-Host "Response is $newPr"      
            displayName: Open Pull Request

          - task: PublishBuildArtifacts@1
            inputs:
              PathtoPublish: '$(Build.ArtifactStagingDirectory)'
              ArtifactName: 'drop'
              publishLocation: 'Container'
