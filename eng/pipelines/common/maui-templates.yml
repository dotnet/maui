parameters:
  - name: condition
    default: true

  - name: conditionMacTemplates
    default: true
  
  - name: skipProvisioning
    default: true

  - name: artifactName
    type: string
    default: nuget

  - name: artifactItemPattern
    type: string
    default: '**/*.nupkg'

  - name: uploadPrefix
    type: string
    default: ''

  - name: checkoutDirectory
    type: string
    default: $(System.DefaultWorkingDirectory)

  - name: MacBuildPool
    type: object

  - name: BuildPlatforms
    type: object

  - name: BuildCategoriesMac
    type: object
    default:
    - macOSTemplates
    - AOT

  - name: BuildCategories
    type: object
    default:
    - WindowsTemplates
    - Build
    - Blazor
    - MultiProject

  - name: RunPlatforms
    type: object

  - name: prepareSteps
    type: stepList
    default: []

jobs:
- ${{ each category in parameters.BuildCategoriesMac }}:
  - job: build_maui_templates_${{ category }}
    workspace:
      clean: all
    displayName: 'Build ${{ category }}: macOS' 
    timeoutInMinutes: 240
    condition: ${{ parameters.conditionMacTemplates }}
    pool: ${{ parameters.MacBuildPool }}
    steps:
      - template: maui-templates-steps.yml
        parameters:
          condition: ${{ parameters.condition }}
          artifactName: ${{ parameters.artifactName }}
          artifactItemPattern: ${{ parameters.artifactItemPattern }}
          checkoutDirectory: ${{ parameters.checkoutDirectory }}
          prepareSteps: ${{ parameters.prepareSteps }}
          category: ${{ category }}


- ${{ each category in parameters.BuildCategories }}:
  - job: build_maui_templates_${{ category }}
    workspace:
      clean: all
    displayName: 'Build ${{ category }}: '
    timeoutInMinutes: 240
    condition: ${{ parameters.condition}}
    strategy:
      matrix:
        ${{ each BuildPlatform in parameters.BuildPlatforms }}:
          ${{ BuildPlatform.name }}:
            POOL_NAME: ${{ BuildPlatform.poolName }}
            POOL_VIMAGE: ${{ BuildPlatform.vmImage }}
            PLATFORM_NAME: ${{ lower(BuildPlatform.name) }}

    pool:
      name: $(POOL_NAME)
      vmImage: $(POOL_VIMAGE)
      demands:
        - macOS.Name -equals Sonoma
        - macOS.Architecture -equals arm64
    steps:
      - template: maui-templates-steps.yml
        parameters:
          condition: ${{ parameters.condition }}
          artifactName: ${{ parameters.artifactName }}
          artifactItemPattern: ${{ parameters.artifactItemPattern }}
          checkoutDirectory: ${{ parameters.checkoutDirectory }}
          prepareSteps: ${{ parameters.prepareSteps }}
          category: ${{ category }}

- ${{ each RunPlatform in parameters.RunPlatforms }}:
  - job: run_${{ RunPlatform.testName }}
    workspace:
      clean: all
    displayName: ${{ RunPlatform.testName }}
    timeoutInMinutes: 240
    condition: ${{ parameters.condition}}
    pool: ${{ RunPlatform }}
    steps:

    - ${{ each step in parameters.prepareSteps }}:
      - ${{ each pair in step }}:
          ${{ pair.key }}: ${{ pair.value }}

    # - ${{ if eq(RunPlatform.testName, 'RunOniOS') }}:
    #   - bash: |
    #       chmod +x $(System.DefaultWorkingDirectory)/eng/scripts/clean-bot.sh
    #       chmod +x $(System.DefaultWorkingDirectory)/eng/scripts/clean-simulator-runtime.sh
    #       $(System.DefaultWorkingDirectory)/eng/scripts/clean-bot.sh
    #     displayName: 'Clean bot'
    #     continueOnError: true
    #     timeoutInMinutes: 60

    - task: DownloadBuildArtifacts@0
      displayName: 'Download Packages'
      inputs:
        artifactName: ${{ parameters.artifactName }}
        itemPattern: ${{ parameters.artifactItemPattern }}
        downloadPath: $(System.DefaultWorkingDirectory)/artifacts

    - pwsh: Move-Item -Path artifacts\${{ parameters.artifactName }}\*.nupkg -Destination artifacts -Force
      displayName: Move the downloaded artifacts

    - pwsh: |
        Get-ChildItem artifacts -Filter 'Microsoft.Maui.Controls.*.nupkg' |  Where-Object { $_.Name -match '^Microsoft\.Maui\.Controls\.([\d\.]+.*)\.nupkg$' }
        $version = $Matches.1
        if (!$version) {
            Write-Error "Failed to extract the version from the nupkgs"
            exit 1
        }
        Write-Host "Found .NET MAUI version (MAUI_PACKAGE_VERSION): $version"
        Write-Host "##vso[task.setvariable variable=MAUI_PACKAGE_VERSION]$version"
      displayName: Read the .NET MAUI version from the nugets

    - pwsh: ./build.ps1 --target=dotnet-local-workloads --verbosity=diagnostic
      displayName: 'Install .NET (Local Workloads)'
      retryCountOnTaskFailure: 3
      workingDirectory: ${{ parameters.checkoutDirectory }}
      env:
        DOTNET_TOKEN: $(dotnetbuilds-internal-container-read-token)
        PRIVATE_BUILD: $(PrivateBuild)

    # - script: dotnet tool update Microsoft.DotNet.XHarness.CLI --add-source https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-eng/nuget/v3/index.json --version "9.0.0-prerelease*" -g
    #   displayName: install xharness

    - ${{ if eq(RunPlatform.testName, 'RunOniOS') }}:
      - pwsh: ./build.ps1 -Script eng/devices/ios.cake --target=Cleanup --verbosity=diagnostic
        displayName: Reset iOS simulators
        # TODO: pass properly device type/version from top-level yml
        env:
          IOS_TEST_DEVICE: ios-simulator-64_17.2

    - pwsh: ./build.ps1 --target=dotnet-integration-test --filter="Category=${{ RunPlatform.testName }}" --resultsfilename="integration-run-${{ RunPlatform.testName }}" --verbosity=diagnostic
      displayName: Run ${{ RunPlatform.testName }} templates run tests
      continueOnError: true
      # TODO: pass properly device type/version from top-level yml
      ${{ if eq(RunPlatform.testName, 'RunOniOS') }}:
        env:
            IOS_TEST_DEVICE: ios-simulator-64_17.2

    - ${{ if eq(RunPlatform.testName, 'RunOniOS') }}:
      - pwsh: ./build.ps1 --target=Cleanup -Script eng/devices/ios.cake ---results="$(TestResultsDirectory)" ${{ parameters.cakeArgs }}
        displayName: Cleanup and Create Simulator Logs if Test Run Failed To
        condition: always()
        continueOnError: true

    - task: PublishTestResults@2
      displayName: Publish the ${{ RunPlatform.testName }} templates run tests
      condition: always()
      inputs:
        testRunner: VSTest
        testResultsFiles: '$(build.artifactstagingdirectory)/**/*.trx'
        testRunTitle: ${{ RunPlatform.testName }} templates run tests

    - pwsh: |
        Write-Host "Current job status is: $env:AGENT_JOBSTATUS"
        if ($env:AGENT_JOBSTATUS -eq "SucceededWithIssues") {
            Write-Host "##vso[task.complete result=Failed;]DONE"
        }
      displayName: Fail if any issues occurred
