parameters:
  poolName: ''
  clearCaches: true
  skipXcode: false
  skipProvisionator: true
  skipAndroidSdks: false
  skipAndroidImages: false
  installDefaultAndroidApi: false
  checkoutDirectory: $(System.DefaultWorkingDirectory)
  provisionatorPath: $(provisionator.path)
  provisionatorXCodePath: $(provisionator.xcode)
  provisionatorChannel: 'latest'
  provisionatorExtraArguments: $(provisionator.extraArguments)
  gitHubToken: $(github--pat--vs-mobiletools-engineering-service2)
  certPass: $(pass--components-mac-ios-certificate-p12)
  federatedServiceConnection: 'dotnetbuilds-internal-read'
  outputVariableName: 'dotnetbuilds-internal-container-read-token'
  expiryInHours: 1
  base64Encode: false

steps:
  # Prepare macOS
  - ${{ if or(eq(variables['System.TeamProject'], 'devdiv'), ne(parameters.poolName, 'Azure Pipelines')) }}:
    - template: agent-cleanser/v1.yml@yaml-templates
      parameters:
        condition: and(succeeded(), eq(variables['Agent.OS'], 'Darwin'))
        UninstallMono: false
        UninstallXamarinMac: false
        CleanseAgentToolsDotNet: true
        SelfHealPowerShell: false
        AUTH_TOKEN_GITHUB_COM: $(github--pat--vs-mobiletools-engineering-service2)
  # Provision Xcode
  - ${{ if ne(parameters.skipXcode, 'true') }}:
    - ${{ if eq(variables['System.TeamProject'], 'devdiv') }}:
      - task: xamops.azdevex.provisionator-task.provisionator@2
        condition: and(succeeded(), eq(variables['Agent.OS'], 'Darwin'))
        displayName: 'Provision Xcode'
        inputs:
          provisioning_script: ${{ parameters.checkoutDirectory }}/${{ parameters.provisionatorXCodePath }}
          provisioning_extra_args: ${{ parameters.provisionatorExtraArguments }}
          github_token: ${{ parameters.gitHubToken }}
        env:
          PROVISIONATOR_CHANNEL: ${{ parameters.provisionatorChannel }}
          AUTH_TOKEN_COMPONENTS_MAC_IOS_CERTIFICATE_P12: ${{ parameters.certPass }}

    - script: |
        echo Remove old Xamarin Settings
        rm -f ~/Library/Preferences/Xamarin/Settings.plist
        echo Mac OS version:
        sw_vers -productVersion
        echo
        echo Installed Xcode versions:
        ls /Applications | grep 'Xcode'
        echo
        echo currently selected xcode:
        xcrun xcode-select --print-path
        echo
        echo selecting latest xcode...
        sudo xcode-select -s /Applications/Xcode_$(REQUIRED_XCODE).app
        xcrun xcode-select --print-path
        xcodebuild -version
        sudo xcodebuild -license accept
        sudo xcodebuild -downloadAllPlatforms
        sudo xcodebuild -runFirstLaunch
      displayName: Select Xcode Version
      condition: and(succeeded(), eq(variables['Agent.OS'], 'Darwin'))
      timeoutInMinutes: 30

  # Provision Additional Software
  - ${{ if ne(parameters.skipProvisionator, true) }}:
    # Prepare macOS
    - task: xamops.azdevex.provisionator-task.provisionator@2
      displayName: 'Provision Additional Software'
      condition: and(succeeded(), eq(variables['Agent.OS'], 'Darwin'))
      continueOnError: true
      inputs:
        provisioning_script: ${{ parameters.checkoutDirectory }}/${{ parameters.provisionatorPath }}
        provisioning_extra_args: ${{ parameters.provisionatorExtraArguments }}
        github_token: ${{ parameters.gitHubToken }}
      env:
        PROVISIONATOR_CHANNEL: ${{ parameters.provisionatorChannel }}
        AUTH_TOKEN_COMPONENTS_MAC_IOS_CERTIFICATE_P12: ${{ parameters.certPass }}
        ${{ if eq(parameters.skipAndroidSdks, true) }}:
          SKIP_ANDROID_API_SDKS: 'true'
        ${{ if eq(parameters.skipAndroidImages, true) }}:
          SKIP_ANDROID_API_IMAGES: 'true'
        ${{ if eq(parameters.installDefaultAndroidApi, true) }}:
          INSTALL_DEFAULT_ANDROID_API: 'true'
 
    # Prepare Windows
    - task: xamops.azdevex.provisionator-task.provisionator@2
      displayName: 'Provision Additional Software'
      condition: and(succeeded(), eq(variables['Agent.OS'], 'Windows_NT'))
      inputs:
        provisioning_script: ${{ parameters.checkoutDirectory }}/${{ parameters.provisionatorPath }}
        provisioning_extra_args: ${{ parameters.provisionatorExtraArguments }}
        github_token: ${{ parameters.gitHubToken }}
      env:
        PROVISIONATOR_CHANNEL: ${{ parameters.provisionatorChannel }}
        ${{ if eq(parameters.skipAndroidSdks, true) }}:
          SKIP_ANDROID_API_SDKS: 'true'
        ${{ if eq(parameters.skipAndroidImages, true) }}:
          SKIP_ANDROID_API_IMAGES: 'true'
        ${{ if eq(parameters.installDefaultAndroidApi, true) }}:
          INSTALL_DEFAULT_ANDROID_API: 'true'

  # Prepare Both
  # Setup JDK Paths (gradle needs it)
  - bash: |
      echo "##vso[task.setvariable variable=JI_JAVA_HOME]$(JAVA_HOME_17_X64)"
      echo "##vso[task.setvariable variable=JAVA_HOME]$(JAVA_HOME_17_X64)"
    #  brew install --cask microsoft-openjdk@17
    displayName: 'Setup JDK Paths'
    condition: and(succeeded(), eq(variables['Agent.OS'], 'Darwin'))  

  - pwsh: |
      if ($env:JAVA_HOME_17_X64) {
        $env:JAVA_HOME = $env:JAVA_HOME_17_X64
      } else {
        $path = (Get-ChildItem $env:ProgramFiles\Microsoft\jdk-17.*\bin\java.exe) | Select-Object -First 1
        if ($path -and (Test-Path $path)) {
          $env:JAVA_HOME = $path.Directory.Parent.FullName
        }
      }
      if ($env:JAVA_HOME) {
        echo "##vso[task.setvariable variable=JAVA_HOME]$env:JAVA_HOME"
        echo "JAVA_HOME set to '$env:JAVA_HOME'"
      } else {
        echo "Unable to set JAVA_HOME"
      }
    displayName: 'Setup JDK Paths'
    condition: and(succeeded(), eq(variables['Agent.OS'], 'Windows_NT'))

  - task: UseDotNet@2
    displayName: 'Use .NET SDK $(DOTNET_VERSION)'
    inputs:
      packageType: sdk
      version: $(DOTNET_VERSION)
      includePreviewVersions: true

  - ${{ if eq(parameters.clearCaches, 'true') }}:
    - pwsh: dotnet nuget locals all --clear
      displayName: 'Clear all NuGet caches'

  - ${{ if eq(variables['System.TeamProject'], 'devdiv') }}:
    - template: ../../common/templates-official/steps/enable-internal-sources.yml

    - template: ../../common/templates-official/steps/enable-internal-runtimes.yml
      parameters:
        federatedServiceConnection: ${{ parameters.federatedServiceConnection }}
        outputVariableName: ${{ parameters.outputVariableName }}
        expiryInHours: ${{ parameters.expiryInHours }}
        base64Encode: ${{ parameters.base64Encode }}
