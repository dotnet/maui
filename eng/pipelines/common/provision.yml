parameters:
  poolName: ''
  clearCaches: true
  skipXcode: false
  skipProvisioning: true
  skipJdk: false
  skipAgentCleanser: false
  skipAndroidCommonSdks: false
  onlyAndroidPlatformDefaultApis: false
  skipAndroidPlatformApis: false
  skipAndroidEmulatorImages: true # For most builds we won't need these
  skipAndroidCreateAvds: true # For most builds we won't need these
  apiversion: ''
  checkoutDirectory: $(System.DefaultWorkingDirectory)
  provisionatorPath: $(provisionator.path)
  provisionatorXCodePath: $(provisionator.xcode)
  provisionatorChannel: 'latest'
  provisionatorExtraArguments: $(provisionator.extraArguments)
  gitHubToken: $(github--pat--vs-mobiletools-engineering-service2)
  certPass: $(pass--components-mac-ios-certificate-p12)
  federatedServiceConnection: 'dotnetbuilds-internal-read'
  outputVariableName: 'dotnetbuilds-internal-container-read-token'
  expiryInHours: 1
  base64Encode: false

steps:
  - ${{ if ne(parameters.skipAgentCleanser, 'true') }}:
    # Prepare macOS
    - template: agent-cleanser/v1.yml@yaml-templates
      parameters:
        UninstallMono: false
        UninstallXamarinMac: true
        CleanseAgentToolsDotNet: true
        SelfHealPowerShell: false
          
  # Provision Xcode
  - ${{ if ne(parameters.skipXcode, 'true') }}:
    - ${{ if ne(parameters.skipProvisionator, true) }}:
      - task: xamops.azdevex.provisionator-task.provisionator@3
        condition: and(succeeded(), eq(variables['Agent.OS'], 'Darwin'))
        displayName: 'Provision Xcode'
        inputs:
          provisioning_script: ${{ parameters.checkoutDirectory }}/${{ parameters.provisionatorXCodePath }}
          provisioning_extra_args: ${{ parameters.provisionatorExtraArguments }}
          github_token: ${{ parameters.gitHubToken }}
        env:
          PROVISIONATOR_CHANNEL: ${{ parameters.provisionatorChannel }}
          AUTH_TOKEN_COMPONENTS_MAC_IOS_CERTIFICATE_P12: ${{ parameters.certPass }}

    - script: |
        echo Remove old Xamarin Settings
        rm -f ~/Library/Preferences/Xamarin/Settings.plist
        echo Mac OS version:
        sw_vers -productVersion
        echo
        echo Installed Xcode versions:
        ls /Applications | grep 'Xcode'
        echo
        echo currently selected xcode:
        xcrun xcode-select --print-path
        echo
        echo selecting latest xcode...
        sudo xcode-select -s /Applications/Xcode_$(REQUIRED_XCODE).app
        xcrun xcode-select --print-path
        xcodebuild -version
        sudo xcodebuild -license accept
        sudo xcodebuild -downloadPlatform iOS
        sudo xcodebuild -runFirstLaunch
      displayName: Select Xcode Version
      condition: and(succeeded(), eq(variables['Agent.OS'], 'Darwin'))
      timeoutInMinutes: 30

  # Prepare Both
  - task: UseDotNet@2
    displayName: 'Use .NET SDK $(DOTNET_VERSION)'
    inputs:
      packageType: sdk
      version: $(DOTNET_VERSION)
      includePreviewVersions: true

  - ${{ if eq(parameters.clearCaches, 'true') }}:
    - pwsh: dotnet nuget locals all --clear
      displayName: 'Clear all NuGet caches'

  - pwsh: |
      dotnet tool restore
    displayName: 'Restore .NET Tools'

  # Provision JDK
  - ${{ if ne(parameters.skipJdk, 'true') }}:
    - pwsh: |
        echo "Running provisioning step..."
        dotnet build -t:ProvisionJdk -bl:"$(LogDirectory)/provision-jdk.binlog" ./src/Provisioning/Provisioning.csproj
        echo ""
        echo "Listing installed JDKs..."
        dotnet android jdk list
        echo ""
        echo "Setting JAVA_HOME..."
        $jsonOutput = & dotnet android jdk list --format=Json | ConvertFrom-Json
        $preferredJdk = $jsonOutput | Where-Object { $_.DotNetPreferred -eq $true } | Select-Object -First 1
        if (-not $preferredJdk) {
          Write-Error "No JDK found."
          exit 1
        }
        echo "##vso[task.setvariable variable=JAVA_HOME]$preferredJdk"
        echo "JAVA_HOME set to '$preferredJdk'"
      displayName: 'Provision JDK'
      condition: succeeded()

  # Provision Android SDK Common Packages (eg: cmdline-tools, emulator, platform-tools, build-tools)
  - ${{ if ne(parameters.skipAndroidCommonSdks, 'true') }}:
    - pwsh: |
        echo "Running provisioning step..."
        dotnet build -t:ProvisionAndroidSdkCommonPackages -bl:"$(LogDirectory)/provision-androidsdk-common.binlog" ./src/Provisioning/Provisioning.csproj
        echo ""
        echo "Listing installed packages..."
        dotnet android sdk list --installed
        echo ""
        echo "Setting ANDROID_SDK_ROOT and ANDROID_HOME..."
        $jsonOutput = & dotnet android sdk info --format=Json | ConvertFrom-Json
        $preferredSdk = $jsonOutput.SdkInfo.Path
        echo "##vso[task.setvariable variable=ANDROID_SDK_ROOT]$preferredSdk"
        echo "ANDROID_SDK_ROOT set to '$preferredSdk'"
        echo "##vso[task.setvariable variable=ANDROID_HOME]$preferredSdk"
        echo "ANDROID_HOME set to '$preferredSdk'"
      displayName: 'Provision Android SDK - Common Packages'
      condition: succeeded()

  # Provision Android SDK Platform APIs (eg: platforms;android-29, platforms;android-30)
  - ${{ if ne(parameters.skipAndroidPlatformApis, 'true') }}:
    - pwsh: |
        echo "Running provisioning step..."
        dotnet build -t:ProvisionAndroidSdkPlatformApiPackages -p:AndroidSdkProvisionDefaultApiLevelsOnly="$Env:AndroidSdkProvisionDefaultApiLevelsOnly" -bl:"$(LogDirectory)/provision-androidsdk-platform-apis.binlog" ./src/Provisioning/Provisioning.csproj
        echo ""
        echo "Listing installed packages..."
        dotnet android sdk list --installed
      displayName: 'Provision Android SDK - Platform APIs'
      condition: succeeded()
      env:
        AndroidSdkProvisionDefaultApiLevelsOnly: ${{ parameters.onlyAndroidPlatformDefaultApis }}

  # Provision Android SDK Emulator Images (eg: system-images;android-34;google_apis;aarch64)
  - ${{ if ne(parameters.skipAndroidEmulatorImages, 'true') }}:
    - pwsh: |
        echo "Running provisioning step..."
        dotnet build -t:ProvisionAndroidSdkEmulatorImagePackages -p:AndroidSdkProvisionApiLevel="$Env:AndroidSdkProvisionApiLevel" -bl:"$(LogDirectory)/provision-androidsdk-emulator-images.binlog" ./src/Provisioning/Provisioning.csproj
        echo ""
        echo "Listing installed packages..."
        dotnet android sdk list --installed
      displayName: 'Provision Android SDK - Emulator Images'
      condition: succeeded()
      env:
        AndroidSdkProvisionApiLevel: ${{ parameters.apiversion }}

  # Create Android AVDs (Create actual Emulator Virtual Devices)
  - ${{ if ne(parameters.skipAndroidCreateAvds, 'true') }}:
    - pwsh: |
        echo "Running provisioning step..."
        dotnet build -t:ProvisionAndroidSdkAvdCreateAvds -p:AndroidSdkProvisionApiLevel="$Env:AndroidSdkProvisionApiLevel" -bl:"$(LogDirectory)/provision-androidsdk-create-avds.binlog" ./src/Provisioning/Provisioning.csproj
        echo ""
        echo "Listing available AVDs..."
        dotnet android avd list
      displayName: 'Provision Android SDK - Create AVDs'
      condition: succeeded()
      env:
        AndroidSdkProvisionApiLevel: ${{ parameters.apiversion }}

  - ${{ if eq(variables['System.TeamProject'], 'devdiv') }}:
    - template: ../../common/templates-official/steps/enable-internal-sources.yml

    - template: ../../common/templates-official/steps/enable-internal-runtimes.yml
      parameters:
        federatedServiceConnection: ${{ parameters.federatedServiceConnection }}
        outputVariableName: ${{ parameters.outputVariableName }}
        expiryInHours: ${{ parameters.expiryInHours }}
        base64Encode: ${{ parameters.base64Encode }}
