parameters:
- name: platform
  type: string
  default: ''

- name: provisionatorChannel
  type: string
  default: 'latest'

- name: artifact
  type: string
  default: 'nuget'

- name: artifactMetadata
  type: string
  default: 'metadata'

- name: artifactLogs
  type: string
  default: 'logs'

- name: artifactBinaries
  type: string
  default: 'pack-binaries'

- name: artifactsPath
  type: string
  default: $(Build.ArtifactStagingDirectory)

- name: nugetFolder
  type: string
  default: 'artifacts'
  
- name: prepareSteps
  type: stepList
  default: []

- name: postSteps
  type: stepList
  default: []

- name: gitHubToken
  type: string
  default: $(github--pat--vs-mobiletools-engineering-service2)

- name: checkoutDirectory
  type: string
  default: $(System.DefaultWorkingDirectory)

- name: additionalArtifacts
  type: object
  default: []

- name: publishArtifacts
  type: boolean
  default: true

- name: buildConfiguration
  type: string
  default: 
  
- name: runAsPublic
  type: boolean
  default: false

- name: buildScript
  type: string

- name: dotnetScript
  type: string

- name: repoArtifactsPath
  type: string

- name: repoLogPath
  type: string

- name: repoTestResultsPath
  type: string

- name: officialBuildId
  type: string
  default: $(BUILD.BUILDNUMBER)

steps:

  - ${{ each step in parameters.prepareSteps }}:
    - ${{ each pair in step }}:
        ${{ pair.key }}: ${{ pair.value }}

  - pwsh: ./build.ps1 --target=dotnet --configuration="${{ parameters.buildConfiguration }}" --verbosity=diagnostic --nugetsource="${{ parameters.nugetFolder }}"
    displayName: 'Install .NET'
    retryCountOnTaskFailure: 3
    workingDirectory: ${{ parameters.checkoutDirectory }}
    env:
      DOTNET_TOKEN: $(dotnetbuilds-internal-container-read-token)
      PRIVATE_BUILD: $(PrivateBuild)

  - pwsh: ./build.ps1 --target=dotnet-pack --configuration="${{ parameters.buildConfiguration }}" --verbosity=diagnostic --nugetsource="${{ parameters.nugetFolder }}" --officialbuildid="${{ parameters.officialBuildId }}"
    displayName: 'Pack .NET Maui'
    name: PackMaui
    workingDirectory: ${{ parameters.checkoutDirectory }}
    env:
      DOTNET_TOKEN: $(dotnetbuilds-internal-container-read-token)
      PRIVATE_BUILD: $(PrivateBuild)

  - ${{ if eq(parameters.platform, 'Windows') }}:
    - pwsh: ./build.ps1 --target=dotnet-diff --configuration="${{ parameters.buildConfiguration }}" --verbosity=diagnostic
      displayName: 'Diff .NET Maui artifacts with NuGet'
      workingDirectory: ${{ parameters.checkoutDirectory }}

      # binaries for compliance scanning
    - task: CopyFiles@2
      displayName: 'Copy Binaries Files'
      condition: succeeded()
      inputs:
        Contents: |
          ${{ parameters.checkoutDirectory }}/artifacts/bin/Controls.Nuget/${{ parameters.buildConfiguration }}/**/Microsoft.Maui*.dll
        TargetFolder: ${{ parameters.checkoutDirectory }}/artifacts/binaries
        flattenFolders: false

  # artifacts
  - task: CopyFiles@2
    condition: always()
    displayName: 'Copy files to staging'
    inputs:
      Contents: |
        ${{ parameters.checkoutDirectory }}/artifacts/**/*.*nupkg
        ${{ parameters.checkoutDirectory }}/artifacts/**/*.zip
        ${{ parameters.checkoutDirectory }}/artifacts/**/vs-workload.props
        ${{ parameters.checkoutDirectory }}/eng/automation/SignList.xml
        ${{ parameters.checkoutDirectory }}/eng/automation/SignVerifyIgnore.txt
        ${{ parameters.checkoutDirectory }}/eng/automation/guardian/**
        !${{ parameters.checkoutDirectory}}/artifacts/docs-packs/**
        !${{ parameters.checkoutDirectory}}/artifacts/binaries/**
        !${{ parameters.checkoutDirectory}}/artifacts/**/res.zip
        !${{ parameters.checkoutDirectory}}/artifacts/**/annotations.zip
      TargetFolder: ${{ parameters.artifactsPath }}/nuget
      flattenFolders: true

  - task: CopyFiles@2
    condition: always()
    displayName: 'Copy metadata to staging'
    inputs:
      SourceFolder: ${{ parameters.checkoutDirectory }}/artifacts
      Contents: |
        **/metadata/**
        **/api-diff/**
      TargetFolder: ${{ parameters.artifactsPath }}/metadata

  - task: CopyFiles@2
    displayName: 'Copy Log Files'
    condition: always()
    inputs:
      Contents: |
        ${{ parameters.checkoutDirectory }}/artifacts/log/**
        ${{ parameters.checkoutDirectory }}/artifacts/logs/**/*
        ${{ parameters.checkoutDirectory }}/artifacts/logs/*.*
      TargetFolder: ${{ parameters.artifactsPath }}/logs
      flattenFolders: true
  
  - ${{ if eq(parameters.publishArtifacts, 'true') }}:
    - task: PublishBuildArtifacts@1
      condition: always()
      displayName: publish artifacts
      inputs:
        ArtifactName: ${{ parameters.artifact }}
        PathToPublish: ${{ parameters.artifactsPath }}/nuget

    - task: PublishBuildArtifacts@1
      condition: always()
      displayName: publish artifacts
      inputs:
        ArtifactName: ${{ parameters.artifactMetadata }}
        PathToPublish: ${{ parameters.artifactsPath }}/metadata

    - task: PublishBuildArtifacts@1
      condition: always()
      displayName: publish artifacts
      inputs:
        ArtifactName: ${{ parameters.artifactLogs }}
        PathToPublish: ${{ parameters.artifactsPath }}/logs
  
    
    # xml-docs
    - ${{ if eq(parameters.platform, 'Windows') }}:
      - task: PublishBuildArtifacts@1
        condition: always()
        displayName: publish docs artifacts
        inputs:
          PathToPublish: ${{ parameters.checkoutDirectory }}/artifacts/docs-packs
          ArtifactName: xml-docs

      - task: PublishBuildArtifacts@1
        condition: succeeded()
        displayName: publish binaries artifacts
        inputs:
          PathToPublish: ${{ parameters.checkoutDirectory }}/artifacts/binaries
          ArtifactName: ${{ parameters.artifactBinaries }}

  - ${{ each step in parameters.postSteps }}:
    - ${{ each pair in step }}:
        ${{ pair.key }}: ${{ pair.value }}