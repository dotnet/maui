
parameters:
  - name: runAsPublic
    type: boolean
    default: false
  - name: buildScript
    type: string
  - name: buildConfig
    type: string
  - name: repoArtifactsPath
    type: string
  - name: repoLogPath
    type: string
  - name: repoTestResultsPath
    type: string
  - name: isWindows
    type: string
    default: false    
  - name: dotnetScript
    type: string
  - name: runHelixTests
    type: boolean
    default: false

steps:

  # - task: UseDotNet@2
  #   inputs: 
  #     useGlobalJson: true

  - pwsh: |
      if ($env:JAVA_HOME_17_X64) {
        $env:JAVA_HOME = $env:JAVA_HOME_17_X64
      } else {
        $path = (Get-ChildItem $env:ProgramFiles\Microsoft\jdk-17.*\bin\java.exe) | Select-Object -First 1
        if ($path -and (Test-Path $path)) {
          $env:JAVA_HOME = $path.Directory.Parent.FullName
        }
      }
      if ($env:JAVA_HOME) {
        echo "##vso[task.setvariable variable=JAVA_HOME]$env:JAVA_HOME"
        echo "JAVA_HOME set to '$env:JAVA_HOME'"
      } else {
        echo "Unable to set JAVA_HOME"
      }
    displayName: Set JAVA_HOME


  - ${{ if ne(parameters.isWindows, 'true') }}:
    - script: ${{ parameters.buildScript }}
              -restore -build
              -configuration ${{ parameters.buildConfig }}
              /p:ArchiveTests=true
              /bl:${{ parameters.repoLogPath }}build.binlog
              $(_OfficialBuildIdArgs)
              -p:Platform=`uname -m`
      displayName: üõ†Ô∏è Build
  
  - ${{ if eq(parameters.isWindows, 'true') }}:
    - script: ${{ parameters.buildScript }}
              -restore -build
              -configuration ${{ parameters.buildConfig }}
              /p:ArchiveTests=true
              /p:TreatWarningsAsErrors=false
              /bl:${{ parameters.repoLogPath }}build.binlog
              $(_OfficialBuildIdArgs)
      displayName: üõ†Ô∏è Build

  # - ${{ if or(ne(parameters.runAsPublic, 'true'), ne(parameters.runHelixTests, 'true')) }}:
  #   - ${{ if ne(parameters.isWindows, 'true') }}:
  #     - script: mkdir ${{ parameters.repoArtifactsPath }}/devcert-scripts &&
  #               cd ${{ parameters.repoArtifactsPath }}/devcert-scripts &&
  #               wget https://raw.githubusercontent.com/BorisWilhelms/create-dotnet-devcert/main/scripts/ubuntu-create-dotnet-devcert.sh &&
  #               wget https://raw.githubusercontent.com/BorisWilhelms/create-dotnet-devcert/main/scripts/common.sh &&
  #               chmod +x ubuntu-create-dotnet-devcert.sh &&
  #               ./ubuntu-create-dotnet-devcert.sh
  #       displayName: Install devcerts

  #   - ${{ if eq(parameters.isWindows, 'true') }}:
  #     - script: dotnet dev-certs https
  #       displayName: Install dev-certs

  #   - ${{ if ne(parameters.isWindows, 'true') }}:
  #     - script: ${{ parameters.dotnetScript }} dotnet-coverage collect
  #               --settings $(Build.SourcesDirectory)/eng/CodeCoverage.config
  #               --output ${{ parameters.repoTestResultsPath }}/NonHelix.cobertura.xml
  #               "${{ parameters.buildScript }} -testnobuild -test -configuration ${{ parameters.buildConfig }} /bl:${{ parameters.repoLogPath }}tests.binlog $(_OfficialBuildIdArgs) -p:Platform=`uname -m`"
  #       displayName: Run non-helix tests

  # - ${{ if eq(parameters.runHelixTests, 'true') }}:
  #   - task: CopyFiles@2
  #     inputs:
  #       Contents: '${{ parameters.repoArtifactsPath }}/helixresults/**/*.trx'
  #       TargetFolder: '${{ parameters.repoArtifactsPath }}/log/$(_BuildConfig)/TestResults'
  #       flattenFolders: true
  #       OverWrite: true
  #     displayName: Gather helix trx files
  #     continueOnError: true
  #     condition: always()

  # - task: CopyFiles@2
  #   inputs:
  #     Contents: '${{ parameters.repoArtifactsPath }}/**/*.cobertura.xml'
  #     TargetFolder: '${{ parameters.repoArtifactsPath }}/CodeCoverage'
  #     flattenFolders: true
  #   displayName: Gather code coverage results

  # - ${{ if eq(parameters.runAsPublic, 'true') }}:
  #   - task: PublishPipelineArtifact@1
  #     displayName: Publish coverage results (cobertura.xml)
  #     inputs:
  #       targetPath: '${{ parameters.repoArtifactsPath }}/CodeCoverage'
  #       artifactName: '$(Agent.JobName)_CodeCoverageResults'
  #       publishLocation: 'pipeline'

  # - ${{ if ne(parameters.runAsPublic, 'true') }}:
  #   - task: 1ES.PublishPipelineArtifact@1
  #     displayName: Publish code coverage results
  #     inputs:
  #       targetPath: '${{ parameters.repoArtifactsPath }}/CodeCoverage'
  #       artifactName: '$(Agent.JobName)_CodeCoverageResults'

  # Run on windows, for internal pipeline, or public+non-helix-tests job
  - ${{ if and(eq(parameters.isWindows, 'true'), or(ne(parameters.runAsPublic, 'true'), ne(parameters.runHelixTests, 'true'))) }}:

    - script: ${{ parameters.buildScript }}
              -pack 
              -sign $(_SignArgs)
              -publish $(_PublishArgs)
              -configuration $(_BuildConfig)
              /bl:${{ parameters.repoLogPath }}/pack.binlog
              $(_OfficialBuildIdArgs)
      displayName: Pack, Sign & Publish
    
    # - script: ${{ parameters.buildScript }}
    #     -restore -build
    #     -sign $(_SignArgs)
    #     -publish $(_PublishArgs)
    #     -configuration $(_BuildConfig)
    #     /bl:${{ parameters.repoLogPath }}/build-workloads.binlog
    #     -projects src/Workload/workloads.csproj
    #     $(_OfficialBuildIdArgs)
    #   displayName: Build Workloads

    # - ${{ if eq(parameters.runAsPublic, 'true') }}:
    #   - task: PublishPipelineArtifact@1
    #     displayName: Publish VSDrop MSIs
    #     inputs:
    #       targetPath: '$(Build.SourcesDirectory)/artifacts/VSSetup/$(_BuildConfig)'
    #       artifactName: VSDropInsertion
    #       publishLocation: 'pipeline'

    # - ${{ if ne(parameters.runAsPublic, 'true') }}:
    #   - task: 1ES.PublishPipelineArtifact@1
    #     displayName: Publish VSDrop MSIs
    #     inputs:
    #       targetPath: '$(Build.SourcesDirectory)/artifacts/VSSetup/$(_BuildConfig)'
    #       artifactName: VSDropInsertion