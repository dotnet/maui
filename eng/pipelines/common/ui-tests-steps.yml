parameters:
  platform: '' # [ android, ios, windows, catalyst ]
  path: '' # path to csproj
  device: '' # the xharness device to use
  cakeArgs: '' # additional cake args
  app: '' #path to app to test
  version: '' #the iOS version'
  provisionatorChannel: 'latest'
  agentPoolAccessToken: ''
  configuration : "Release"
  runtimeVariant : "Mono"
  testFilter: ''
  testConfigurationArgs: ''
  skipProvisioning: true

steps:
  - task: DownloadPipelineArtifact@2
    condition: and(ne('${{ parameters.platform }}' , 'windows'), eq('${{ parameters.runtimeVariant }}' , 'Mono'))
    inputs:
      artifact: ui-tests-samples
  
  - task: DownloadPipelineArtifact@2
    condition: and(ne('${{ parameters.platform }}' , 'windows'), eq('${{ parameters.runtimeVariant }}' , 'NativeAOT'))
    inputs:
      artifact: ui-tests-samples-nativeaot

  - task: DownloadPipelineArtifact@2
    condition: eq('${{ parameters.platform }}' , 'windows')
    inputs:
      artifact: ui-tests-samples-windows
  
  - ${{ if eq(parameters.platform, 'ios')}}:
    - bash: |
        chmod +x $(System.DefaultWorkingDirectory)/eng/scripts/clean-bot.sh
        $(System.DefaultWorkingDirectory)/eng/scripts/clean-bot.sh
      displayName: 'Clean bot'
      continueOnError: true
      timeoutInMinutes: 60

  - template: provision.yml
    parameters:
      skipAndroidSdks: ${{ ne(parameters.platform, 'android') }}
      skipXcode: ${{ or(eq(parameters.platform, 'android'), eq(parameters.platform, 'windows')) }}
      provisionatorChannel: ${{ parameters.provisionatorChannel }}
      ${{ if parameters.skipProvisioning }}:
        skipProvisionator: true
      ${{ else }}:  
        skipProvisionator: false
        gitHubToken: $(github--pat--vs-mobiletools-engineering-service2)

  - task: PowerShell@2
    condition: ne('${{ parameters.platform }}' , 'windows')
    inputs:
      targetType: 'inline'
      script: |
        defaults write -g NSAutomaticCapitalizationEnabled -bool false
        defaults write -g NSAutomaticTextCompletionEnabled -bool false
        defaults write -g NSAutomaticSpellingCorrectionEnabled -bool false
    displayName: "Modify defaults"
    continueOnError: true
  
  - pwsh: ./build.ps1 --target=dotnet --configuration="${{ parameters.configuration }}" --verbosity=diagnostic
    displayName: 'Install .NET'
    retryCountOnTaskFailure: 2
    env:
      DOTNET_TOKEN: $(dotnetbuilds-internal-container-read-token)
      PRIVATE_BUILD: $(PrivateBuild)

  - pwsh: echo "##vso[task.prependpath]$(DotNet.Dir)"
    displayName: 'Add .NET to PATH'

  # AzDO hosted agents default to 1024x768; set something bigger for Windows UI tests
  - task: ScreenResolutionUtility@1
    condition: eq('${{ parameters.platform }}' , 'windows')
    inputs:
      displaySettings: 'specific'
      width: '1920'
      height: '1080'
    displayName: "Set screen resolution"

  - task: UseNode@1
    inputs:
      version: "20.3.1"
    displayName: "Install node"

  - pwsh: |
      $fullLogsDir = Join-Path "$(LogDirectory)" "npm"
      ./eng/scripts/appium-install.ps1 -logsDir "$fullLogsDir"
      Dir -Recurse $(APPIUM_HOME) | Get-Childitem | Select Fullname
    displayName: "Install Appium (Drivers)"
    continueOnError: false
    retryCountOnTaskFailure: 1
    timeoutInMinutes: 10
    env:
      APPIUM_HOME: $(APPIUM_HOME)

  - pwsh: |
      $command = "./build.ps1 -Script eng/devices/${{ parameters.platform }}.cake --target=uitest --project=""${{ parameters.path }}"""
      $command += " --appproject=""${{ parameters.app }}"" --device=""${{ parameters.device }}"" --apiversion=""${{ parameters.version }}"" --configuration=""${{ parameters.configuration }}"""
      $command += " --runtimevariant=""${{ parameters.runtimeVariant }}"""
      $command += " --results=""$(TestResultsDirectory)"" --binlog=""$(LogDirectory)"" ${{ parameters.cakeArgs }} --verbosity=diagnostic"
      
      $testFilter = ""
      $testConfigrationArgs = "${{ parameters.testConfigurationArgs }}"

      "${{ parameters.testFilter }}".Split(",") | ForEach {
        $testFilter += "TestCategory=" + $_ + "|"
      }

      $testFilter = $testFilter.TrimEnd("|")

      # Cake does not allow empty parameters, so check if our filter is empty before adding it
      if ($testConfigrationArgs) {
        $command += " --TEST_CONFIGURATION_ARGS=""$testConfigrationArgs"""
      }
      if ($testFilter) {
        $command += " --test-filter ""$testFilter"""
      }

      Invoke-Expression $command  
    displayName: $(Agent.JobName)
    ${{ if ne(parameters.platform, 'android')}}:
      retryCountOnTaskFailure: 1
    env:
      APPIUM_HOME: $(APPIUM_HOME)

  - bash: |
      pwsh ./build.ps1 --target=Cleanup -Script eng/devices/${{ parameters.platform }}.cake ---results="$(TestResultsDirectory)" ${{ parameters.cakeArgs }}
    displayName: Cleanup and Create Simulator Logs if Test Run Failed To
    condition: ${{ eq(parameters.platform, 'ios') }}
    continueOnError: true

  - task: PublishTestResults@2
    displayName: Publish the $(System.PhaseName) test results
    condition: always()
    inputs:
      testResultsFormat: VSTest
      testResultsFiles: '$(TestResultsDirectory)/*.trx'
      testRunTitle: '$(System.PhaseName)'
      failTaskOnFailedTests: true

  - task: PublishBuildArtifacts@1
    condition: always()
    displayName: publish artifacts

  - ${{ if and(eq(parameters.platform, 'ios'), ne(parameters.poolName, 'Azure Pipelines'), eq(variables['System.TeamProject'], 'devdiv') ) }}:
      # This must always be placed as the last step in the job
      - template: agent-rebooter/mac.v1.yml@yaml-templates
        parameters:
          AgentPoolAccessToken: ${{ parameters.agentPoolAccessToken }}