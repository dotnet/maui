parameters:
  mauiSourcePath: $(Build.SourcesDirectory)
  buildConfig: Debug
  repoLogPath: $(Build.Arcade.LogsPath)
  installPackageArtifacts: true
  buildMSBuildTasks: false
  androidSdkRoot: $(ANDROID_SDK_ROOT)

steps:
- checkout: self
  fetchDepth: 1
  clean: true

- template: /eng/pipelines/common/provision.yml@self
  parameters:
    checkoutDirectory: '$(System.DefaultWorkingDirectory)'
    skipJdk: false
    skipAndroidCommonSdks: false
    skipAndroidPlatformApis: false
    onlyAndroidPlatformDefaultApis: true
    skipAndroidEmulatorImages: true
    skipAndroidCreateAvds: true
    skipProvisioning: true
    skipXcode: true

- script: |
    echo Remove old Xamarin Settings
    rm -f ~/Library/Preferences/Xamarin/Settings.plist
    rm -f ~/Library/Preferences/maui/Settings.plist
    echo Mac OS version:
    sw_vers -productVersion
    echo
    echo Installed Xcode versions:
    ls /Applications | grep 'Xcode'
    echo
    echo currently selected xcode:
    xcrun xcode-select --print-path
    echo
    echo selecting latest xcode...
    sudo xcode-select -s /Applications/Xcode_$(REQUIRED_XCODE).app
    xcrun xcode-select --print-path
    xcodebuild -version
    sudo xcodebuild -license accept
    # if we're using Xcode 26.0[.?], then explicitly install the iOS 26.0 simulator (the iOS 26.0.1 simulator doesn't work for us)
    # also install the universal simulator version, so that this bot can run x64 apps in the simulator.
    if [[ "$(REQUIRED_XCODE)" =~ ^26[.]0.*$ ]]; then
      if ! sudo xcodebuild -downloadPlatform iOS -architectureVariant universal -buildVersion 26.0; then
        echo "Failed to install simulator runtime, deleting all simulator runtimes and trying again..."
        sudo xcrun simctl runtime delete all
        # simulator runtimes are deleted asynchronously, so wait until they're all gone (but max 60 seconds)
        for i in $(seq 1 60); do
          sleep 1
          C=$(xcrun simctl runtime list -j | jq '. | length')
          if [[ $C == 0 ]]; then
            echo "    still $C simulators left..."
            break
          fi
        done
        echo "Re-trying simulator runtime installation"
        sudo xcodebuild -downloadPlatform iOS -architectureVariant universal -buildVersion 26.0
      fi
    else
      sudo xcodebuild -downloadPlatform iOS -architectureVariant universal
    fi
    sudo xcodebuild -runFirstLaunch
  displayName: Select Xcode Version
  condition: and(succeeded(), eq(variables['Agent.OS'], 'Darwin'))
  timeoutInMinutes: 30

- task: UseDotNet@2
  displayName: 'Use .NET SDK $(DOTNET_VERSION)'
  inputs:
    packageType: sdk
    version: $(DOTNET_VERSION)
    includePreviewVersions: true

- ${{ if eq(parameters.installPackageArtifacts, true) }}:
  - task: DownloadPipelineArtifact@2
    displayName: Download PackageArtifacts
    inputs:
      artifactName: PackageArtifacts
      itemPattern: '**/*.nupkg'
      targetPath: ${{ parameters.mauiSourcePath }}/artifacts

  - task: DotNetCoreCLI@2
    displayName: Install dotnet preview without workloads
    inputs:
      projects: ${{ parameters.mauiSourcePath }}/src/DotNet/DotNet.csproj
      arguments: '-p:InstallWorkloadPacks=false -c ${{ parameters.buildConfig }} -bl:${{ parameters.repoLogPath }}/install-dotnet.binlog'

  - template: /eng/pipelines/common/run-dotnet-preview.yml
    parameters:
      displayName: Install dotnet preview workloads from PackageArtifacts
      mauiSourcePath: ${{ parameters.mauiSourcePath }}
      project: ${{ parameters.mauiSourcePath }}/src/DotNet/DotNet.csproj
      arguments: '-t:Install -c ${{ parameters.buildConfig }} -bl:${{ parameters.repoLogPath }}/install-dotnet-workload.binlog'

  - pwsh: |
      Get-ChildItem artifacts -Filter 'Microsoft.Maui.Controls.*.nupkg' |  Where-Object { $_.Name -match '^Microsoft\.Maui\.Controls\.([\d\.]+.*)\.nupkg$' }
      $version = $Matches.1
      if (!$version) {
          Write-Error "Failed to extract the version from the nupkgs"
          exit 1
      }
      Write-Host "Found .NET MAUI version (MAUI_PACKAGE_VERSION): $version"
      Write-Host "##vso[task.setvariable variable=MAUI_PACKAGE_VERSION]$version"
    displayName: Read the .NET MAUI version from the nugets

- ${{ else }}:
  - task: DotNetCoreCLI@2
    displayName: Install dotnet preview
    inputs:
      projects: ${{ parameters.mauiSourcePath }}/src/DotNet/DotNet.csproj
      arguments: '-c ${{ parameters.buildConfig }} -bl:${{ parameters.repoLogPath }}/install-dotnet.binlog'

- template: /eng/pipelines/common/setup-android-dependencies.yml
  parameters:
    mauiSourcePath: ${{ parameters.mauiSourcePath }}
    repoLogPath: ${{ parameters.repoLogPath }}
    androidSdkRoot: ${{ parameters.androidSdkRoot }}

- ${{ if eq(parameters.buildMSBuildTasks, true) }}:
  - template: /eng/pipelines/common/run-dotnet-preview.yml
    parameters:
      displayName: Build MSBuild Tasks
      mauiSourcePath: ${{ parameters.mauiSourcePath }}
      project: ${{ parameters.mauiSourcePath }}/Microsoft.Maui.BuildTasks.slnf
      arguments: '-c ${{ parameters.buildConfig }} -bl:${{ parameters.repoLogPath }}/Microsoft.Maui.BuildTasks.binlog'

- template: /eng/pipelines/common/run-dotnet-preview.yml
  parameters:
    displayName: Restore dotnet preview tools
    mauiSourcePath: ${{ parameters.mauiSourcePath }}
    command: tool
    arguments: restore
