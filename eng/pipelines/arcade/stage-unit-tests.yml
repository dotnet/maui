parameters:
  jobMatrix: []  # Should define jobMatrix.name, jobMatrix.displayName, jobMatrix.pool, jobMatrix.timeout, jobMatrix.testOS
  mauiSourcePath: $(Build.SourcesDirectory)
  buildConfig: Debug
  repoLogPath: $(Build.Arcade.LogsPath)
  publishTaskPrefix: '1ES.'

stages:
- stage: UnitTests
  displayName: Run Unit Tests
  dependsOn: []
  jobs:
  - ${{ each job in parameters.jobMatrix }}:
    - job: ${{ job.name }}
      displayName: ${{ job.displayName }}
      pool: ${{ job.pool }}
      timeoutInMinutes: ${{ job.timeout }}
      steps:
      - template: /eng/pipelines/arcade/setup-test-env.yml
        parameters:
          mauiSourcePath: ${{ parameters.mauiSourcePath }}
          buildConfig: ${{ parameters.buildConfig }}
          repoLogPath: ${{ parameters.repoLogPath }}
          installPackageArtifacts: false
          buildMSBuildTasks: true

      - template: /eng/pipelines/common/run-dotnet-preview.yml
        parameters:
          displayName: Run Controls.Core.UnitTests - ${{ job.testOS }}
          mauiSourcePath: ${{ parameters.mauiSourcePath }}
          command: test
          project: ${{ parameters.mauiSourcePath }}/src/Controls/tests/Core.UnitTests/Controls.Core.UnitTests.csproj
          arguments: '-c ${{ parameters.buildConfig }} --logger trx --results-directory $(Agent.TempDirectory)/Controls.Core.UnitTests /p:_SkipUpdateBuildNumber=true'
          useExitCodeForErrors: true

      - task: PublishTestResults@2
        inputs:
          testResultsFormat: VSTest
          testResultsFiles: $(Agent.TempDirectory)/Controls.Core.UnitTests/*.trx
          testRunTitle: Controls.Core.UnitTests - ${{ job.testOS }}

      - template: /eng/pipelines/common/run-dotnet-preview.yml
        parameters:
          displayName: Run Controls.Xaml.UnitTests - ${{ job.testOS }}
          mauiSourcePath: ${{ parameters.mauiSourcePath }}
          command: test
          project: ${{ parameters.mauiSourcePath }}/src/Controls/tests/Xaml.UnitTests/Controls.Xaml.UnitTests.csproj
          arguments: '-c ${{ parameters.buildConfig }} --logger trx --results-directory $(Agent.TempDirectory)/Controls.Xaml.UnitTests /p:_SkipUpdateBuildNumber=true'
          useExitCodeForErrors: true

      - task: PublishTestResults@2
        inputs:
          testResultsFormat: VSTest
          testResultsFiles: $(Agent.TempDirectory)/Controls.Xaml.UnitTests/*.trx
          testRunTitle: Controls.Xaml.UnitTests - ${{ job.testOS }}

      - template: /eng/pipelines/common/run-dotnet-preview.yml
        parameters:
          displayName: Run SourceGen.UnitTests - ${{ job.testOS }}
          mauiSourcePath: ${{ parameters.mauiSourcePath }}
          command: test
          project: ${{ parameters.mauiSourcePath }}/src/Controls/tests/SourceGen.UnitTests/SourceGen.UnitTests.csproj
          arguments: '-c ${{ parameters.buildConfig }} --logger trx --results-directory $(Agent.TempDirectory)/SourceGen.UnitTests /p:_SkipUpdateBuildNumber=true'
          useExitCodeForErrors: true

      - task: PublishTestResults@2
        inputs:
          testResultsFormat: VSTest
          testResultsFiles: $(Agent.TempDirectory)/SourceGen.UnitTests/*.trx
          testRunTitle: SourceGen.UnitTests - ${{ job.testOS }}

      - template: /eng/pipelines/common/run-dotnet-preview.yml
        parameters:
          displayName: Run Controls.BindingSourceGen.UnitTests - ${{ job.testOS }}
          mauiSourcePath: ${{ parameters.mauiSourcePath }}
          command: test
          project: ${{ parameters.mauiSourcePath }}/src/Controls/tests/BindingSourceGen.UnitTests/Controls.BindingSourceGen.UnitTests.csproj
          arguments: '-c ${{ parameters.buildConfig }} --logger trx --results-directory $(Agent.TempDirectory)/Controls.BindingSourceGen.UnitTests /p:_SkipUpdateBuildNumber=true'
          useExitCodeForErrors: true

      - task: PublishTestResults@2
        inputs:
          testResultsFormat: VSTest
          testResultsFiles: $(Agent.TempDirectory)/Controls.BindingSourceGen.UnitTests/*.trx
          testRunTitle: Controls.BindingSourceGen.UnitTests - ${{ job.testOS }}

      - template: /eng/pipelines/common/run-dotnet-preview.yml
        parameters:
          displayName: Run Core.UnitTests - ${{ job.testOS }}
          mauiSourcePath: ${{ parameters.mauiSourcePath }}
          command: test
          project: ${{ parameters.mauiSourcePath }}/src/Core/tests/UnitTests/Core.UnitTests.csproj
          arguments: '-c ${{ parameters.buildConfig }} --logger trx --results-directory $(Agent.TempDirectory)/Core.UnitTests /p:_SkipUpdateBuildNumber=true'
          useExitCodeForErrors: true

      - task: PublishTestResults@2
        inputs:
          testResultsFormat: VSTest
          testResultsFiles: $(Agent.TempDirectory)/Core.UnitTests/*.trx
          testRunTitle: Core.UnitTests - ${{ job.testOS }}

      - template: /eng/pipelines/common/run-dotnet-preview.yml
        parameters:
          displayName: Run Essentials.UnitTests - ${{ job.testOS }}
          mauiSourcePath: ${{ parameters.mauiSourcePath }}
          command: test
          project: ${{ parameters.mauiSourcePath }}/src/Essentials/test/UnitTests/Essentials.UnitTests.csproj
          arguments: '-c ${{ parameters.buildConfig }} --logger trx --results-directory $(Agent.TempDirectory)/Essentials.UnitTests /p:_SkipUpdateBuildNumber=true'
          useExitCodeForErrors: true

      - task: PublishTestResults@2
        inputs:
          testResultsFormat: VSTest
          testResultsFiles: $(Agent.TempDirectory)/Essentials.UnitTests/*.trx
          testRunTitle: Essentials.UnitTests - ${{ job.testOS }}

      - template: /eng/pipelines/common/run-dotnet-preview.yml
        parameters:
          displayName: Run Resizetizer.UnitTests - ${{ job.testOS }}
          mauiSourcePath: ${{ parameters.mauiSourcePath }}
          command: test
          project: ${{ parameters.mauiSourcePath }}/src/SingleProject/Resizetizer/test/UnitTests/Resizetizer.UnitTests.csproj
          arguments: '-c ${{ parameters.buildConfig }} --logger trx --results-directory $(Agent.TempDirectory)/Resizetizer.UnitTests /p:_SkipUpdateBuildNumber=true'
          useExitCodeForErrors: true

      - task: PublishTestResults@2
        inputs:
          testResultsFormat: VSTest
          testResultsFiles: $(Agent.TempDirectory)/Resizetizer.UnitTests/*.trx
          testRunTitle: Resizetizer.UnitTests - ${{ job.testOS }}

      - template: /eng/pipelines/common/run-dotnet-preview.yml
        parameters:
          displayName: Run Graphics.Tests - ${{ job.testOS }}
          mauiSourcePath: ${{ parameters.mauiSourcePath }}
          command: test
          project: ${{ parameters.mauiSourcePath }}/src/Graphics/tests/Graphics.Tests/Graphics.Tests.csproj
          arguments: '-c ${{ parameters.buildConfig }} --logger trx --results-directory $(Agent.TempDirectory)/Graphics.Tests /p:_SkipUpdateBuildNumber=true'
          useExitCodeForErrors: true

      - task: PublishTestResults@2
        inputs:
          testResultsFormat: VSTest
          testResultsFiles: $(Agent.TempDirectory)/Graphics.Tests/*.trx
          testRunTitle: Graphics.Tests - ${{ job.testOS }}

      - template: /eng/pipelines/common/run-dotnet-preview.yml
        parameters:
          displayName: Run Compatibility.Core.UnitTests - ${{ job.testOS }}
          mauiSourcePath: ${{ parameters.mauiSourcePath }}
          command: test
          project: ${{ parameters.mauiSourcePath }}/src/Compatibility/Core/tests/Compatibility.UnitTests/Compatibility.Core.UnitTests.csproj
          arguments: '-c ${{ parameters.buildConfig }} --logger trx --results-directory $(Agent.TempDirectory)/Compatibility.Core.UnitTests /p:_SkipUpdateBuildNumber=true'
          useExitCodeForErrors: true

      - task: PublishTestResults@2
        inputs:
          testResultsFormat: VSTest
          testResultsFiles: $(Agent.TempDirectory)/Compatibility.Core.UnitTests/*.trx
          testRunTitle: Compatibility.Core.UnitTests - ${{ job.testOS }}

      # TODO: Controls.Core.Design.UnitTests.csproj

      - task: ${{ parameters.publishTaskPrefix }}PublishPipelineArtifact@1
        displayName: Publish Logs
        inputs:
          targetPath: ${{ parameters.repoLogPath }}
          artifact: Logs - Unit Tests ${{ job.testOS }} $(System.JobAttempt)
        condition: always()

      - template: /eng/pipelines/common/fail-on-issue.yml
