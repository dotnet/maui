<Project Sdk="Microsoft.DotNet.Helix.Sdk" DefaultTargets="Test">
    <PropertyGroup>
        <ScenariosDir>$(BUILD_SOURCESDIRECTORY)/artifacts/bin/</ScenariosDir>
        <TargetsAppleMobile>true</TargetsAppleMobile>
    </PropertyGroup>

    <PropertyGroup>
        <HelixType>test/product/</HelixType>
        <HelixBuild>$(BUILD_BUILDNUMBER)</HelixBuild>
        <HelixTargetQueues>OSX.15.ARM64.Open</HelixTargetQueues>
        <Creator Condition="'$(HelixAccessToken)' == ''">maui</Creator>

        <IncludeDotNetCli>true</IncludeDotNetCli>
        <DotNetCliPackageType>sdk</DotNetCliPackageType>

        <EnableAzurePipelinesReporter>true</EnableAzurePipelinesReporter>
        <FailOnTestFailure>true</FailOnTestFailure>
    </PropertyGroup>

    <PropertyGroup>
        <IncludeXHarnessCli>true</IncludeXHarnessCli>
        <!-- Optional: Specific version of Xcode to use. If omitted, xcode-select is used to
        determine the version -->
        <!-- <XHarnessXcodeVersion>16.3</XHarnessXcodeVersion> -->
    </PropertyGroup>

    <PropertyGroup>
        <!-- Set Helix build to build number if available -->
        <HelixBuild Condition="'$(HelixBuild)' == ''">$(BUILD_BUILDNUMBER)</HelixBuild>
        <HelixBuild Condition="'$(HelixBuild)' == ''">default</HelixBuild>

        <HelixTargetQueues>OSX.15.ARM64.Open</HelixTargetQueues>

        <IncludeDotNetCli>true</IncludeDotNetCli>
        <DotNetCliPackageType>sdk</DotNetCliPackageType>

        <EnableAzurePipelinesReporter>true</EnableAzurePipelinesReporter>
        <FailOnTestFailure>true</FailOnTestFailure>
    </PropertyGroup>

    <PropertyGroup Condition="'$(HelixType)' == ''">
        <!-- For PRs we want HelixType to be the same for all frameworks except package testing-->
        <TestScope Condition="'$(TestScope)' == ''">innerloop</TestScope>
        <HelixType>test/functional/cli/$(TestScope)/</HelixType>
    </PropertyGroup>

    <ItemGroup Condition="'$(TargetsAppleMobile)' == 'true'">
        <HelixPreCommand Include="export XHARNESS_DISABLE_COLORED_OUTPUT=true" />
        <HelixPreCommand Include="export XHARNESS_LOG_WITH_TIMESTAMPS=true" />
    </ItemGroup>

    <ItemGroup>
        <TestScenario Include="Controls">
            <DisplayName>Controls DeviceTests</DisplayName>
            <DirectoryName>Controls.DeviceTests</DirectoryName>
        </TestScenario>
        <TestScenario Include="Core">
            <DisplayName>Core DeviceTests</DisplayName>
            <DirectoryName>Core.DeviceTests</DirectoryName>
        </TestScenario>
        <TestScenario Include="MauiBlazorWebView">
            <DisplayName>MauiBlazorWebView DeviceTests</DisplayName>
            <DirectoryName>MauiBlazorWebView.DeviceTests</DirectoryName>
        </TestScenario>
        <TestScenario Include="Essentials">
            <DisplayName>Essentials DeviceTests</DisplayName>
            <DirectoryName>Essentials.DeviceTests</DirectoryName>
        </TestScenario>
        <TestScenario Include="Graphics">
            <DisplayName>Graphics DeviceTests</DisplayName>
            <DirectoryName>Graphics.DeviceTests</DirectoryName>
        </TestScenario>

        <MAUIiOSScenario Include="%(TestScenario.DisplayName)">
            <ScenarioDirectoryName>%(TestScenario.DirectoryName)</ScenarioDirectoryName>
            <PayloadDirectory>$(ScenariosDir)%(ScenarioDirectoryName)</PayloadDirectory>
            <IPAName>Microsoft.Maui.%(TestScenario.Identity).DeviceTests</IPAName>
            <PackageName>com.microsoft.maui.%(TestScenario.Identity.ToLower()).devicetests</PackageName>
        </MAUIiOSScenario>
    </ItemGroup>

    <!-- Process each scenario individually to avoid metadata evaluation issues -->
    <Target Name="DiscoverTestBundles" BeforeTargets="Test">
        <!-- iOS App Bundles -->
        <ItemGroup>
            <_ScenarioPaths Include="@(MAUIiOSScenario)">
                <Path>$(ScenariosDir)/%(ScenarioDirectoryName)/Debug/net*-ios</Path>
                <PackageName>%(PackageName)</PackageName>
            </_ScenarioPaths>
            
            <_AppBundleDirs Include="@(_ScenarioPaths->'$([System.IO.Directory]::GetDirectories(%(Path), *.app, System.IO.SearchOption.AllDirectories))')">
                <PackageName>%(_ScenarioPaths.PackageName)</PackageName>
            </_AppBundleDirs>
            
            <XHarnessAppBundleToTest Include="@(_AppBundleDirs)">
                <TestTarget>ios-simulator-64</TestTarget>
                <WorkItemTimeout>02:00:00</WorkItemTimeout>
                <TestTimeout>01:00:00</TestTimeout>
                <WorkItemPrefix>%(PackageName)</WorkItemPrefix>
            </XHarnessAppBundleToTest>
        </ItemGroup>

        <!-- Android APKs -->
        <ItemGroup>
            <_ScenarioPathsAndroid Include="@(MAUIiOSScenario)">
                <Path>$(ScenariosDir)/%(ScenarioDirectoryName)/Debug/net*-android</Path>
                <PackageName>%(PackageName)</PackageName>
            </_ScenarioPathsAndroid>
            
            <_ApkDirs Include="@(_ScenarioPathsAndroid->'$([System.IO.Directory]::GetDirectories(%(Path), *.apk, System.IO.SearchOption.AllDirectories))')">
                <PackageName>%(_ScenarioPathsAndroid.PackageName)</PackageName>
            </_ApkDirs>
            
            <XHarnessApkToTest Include="@(_ApkDirs)">
                <WorkItemTimeout>02:00:00</WorkItemTimeout>
                <TestTimeout>01:00:00</TestTimeout>
                <AndroidPackageName>%(PackageName)</AndroidPackageName>
            </XHarnessApkToTest>
        </ItemGroup>

        <!-- Output discovered paths for debugging -->
        <Message Text="Discovered iOS app bundles: @(XHarnessAppBundleToTest)" Importance="high" />
        <Message Text="Discovered Android APKs: @(XHarnessApkToTest)" Importance="high" />
    </Target>


</Project>