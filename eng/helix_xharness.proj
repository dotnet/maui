<Project Sdk="Microsoft.DotNet.Helix.Sdk" DefaultTargets="Test">
    <PropertyGroup>
        <ScenariosDir>$(BUILD_SOURCESDIRECTORY)/artifacts/bin/</ScenariosDir>
        <TargetsAppleMobile Condition="'$(TargetOS)' == 'ios'">true</TargetsAppleMobile>
    </PropertyGroup>

    <PropertyGroup>
        <HelixType>test/devices/</HelixType>
        <HelixBuild Condition="'$(HelixBuild)' == ''">$(BUILD_BUILDNUMBER)</HelixBuild>
        <HelixBuild Condition="'$(HelixBuild)' == ''">default</HelixBuild>
        <HelixTargetQueues>OSX.15.ARM64.Open</HelixTargetQueues>
        <Creator Condition="'$(HelixAccessToken)' == ''">maui</Creator>

        <IncludeDotNetCli>true</IncludeDotNetCli>
        <DotNetCliPackageType>sdk</DotNetCliPackageType>

        <EnableAzurePipelinesReporter>true</EnableAzurePipelinesReporter>
        <FailOnTestFailure>true</FailOnTestFailure>
    </PropertyGroup>

    <PropertyGroup Condition="'$(SYSTEM_ACCESSTOKEN)' == ''">
         <ScenariosDir>$(RepoRoot)artifacts/bin/</ScenariosDir>
        <!-- Local build outside of Azure Pipeline -->
        <HelixTargetQueues Condition="'$(HelixTargetQueues)' == ''">
            Windows.10.Amd64.Open;OSX.1200.Amd64.Open;OSX.1200.ARM64.Open;Ubuntu.2204.Amd64.Open@mcr.microsoft.com/dotnet-buildtools/prereqs:ubuntu-20.04-helix-sqlserver-amd64</HelixTargetQueues>
        <EnableAzurePipelinesReporter>false</EnableAzurePipelinesReporter>
        <HelixSource>maui/localbuild/</HelixSource>
        <HelixBuild>t001</HelixBuild>
    </PropertyGroup>

    <PropertyGroup>
        <IncludeXHarnessCli>true</IncludeXHarnessCli>
        <!-- Optional: Specific version of Xcode to use. If omitted, xcode-select is used to
        determine the version -->
        <!-- <XHarnessXcodeVersion>16.3</XHarnessXcodeVersion> -->
    </PropertyGroup>

    <ItemGroup Condition="'$(TargetsAppleMobile)' == 'true'">
        <HelixPreCommand Include="export XHARNESS_DISABLE_COLORED_OUTPUT=true" />
        <HelixPreCommand Include="export XHARNESS_LOG_WITH_TIMESTAMPS=true" />
    </ItemGroup>

    <ItemGroup>
     
        <MAUIiOSScenario Include="Controls">
            <ScenarioDirectoryName>Controls.DeviceTests</ScenarioDirectoryName>
            <PayloadDirectory>$(ScenariosDir)Controls.DeviceTests</PayloadDirectory>
            <IPAName>Microsoft.Maui.Controls.DeviceTests</IPAName>
            <PackageName>com.microsoft.maui.controls.devicetests</PackageName>
        </MAUIiOSScenario>
        
        <MAUIiOSScenario Include="Core">
            <ScenarioDirectoryName>Core.DeviceTests</ScenarioDirectoryName>
            <PayloadDirectory>$(ScenariosDir)Core.DeviceTests</PayloadDirectory>
            <IPAName>Microsoft.Maui.Core.DeviceTests</IPAName>
            <PackageName>com.microsoft.maui.core.devicetests</PackageName>
        </MAUIiOSScenario>
        
        <MAUIiOSScenario Include="Graphics">
            <ScenarioDirectoryName>Graphics.DeviceTests</ScenarioDirectoryName>
            <PayloadDirectory>$(ScenariosDir)Graphics.DeviceTests</PayloadDirectory>
            <IPAName>Microsoft.Maui.Graphics.DeviceTests</IPAName>
            <PackageName>com.microsoft.maui.graphics.devicetests</PackageName>
        </MAUIiOSScenario>
    </ItemGroup>

    <!-- Process each test scenario individually using direct path construction -->
    <Target Name="DiscoverTestBundles" BeforeTargets="Build">
        <!-- iOS App Bundles -->
        <PropertyGroup Condition="'$(TargetOS)' == 'ios'">
            <_PlatformName>ios</_PlatformName>
        </PropertyGroup>

        <!-- Android APKs -->
        <PropertyGroup Condition="'$(TargetOS)' == 'android'">
            <_PlatformName>android</_PlatformName>
        </PropertyGroup>

        <!-- Print all MAUIiOSScenario -->
        <Message Text="Discovered MAUIiOSScenarios:" Importance="high" />
        <Message Text="Count: @(MAUIiOSScenario->Count())" Importance="high" />
    
        <!-- iOS: Find app bundles directly using MAUIiOSScenario PayloadDirectory -->
        <ItemGroup Condition="'$(TargetOS)' == 'ios'">
            <!-- Create a special batching task to find app bundles by scenario -->
            <_MAUIScenarioSearch Include="@(MAUIiOSScenario)" />
        </ItemGroup>
        
        <!-- Print available PayloadDirectory paths -->
        <Message Condition="'$(TargetOS)' == 'ios'" Text="Looking for .app bundles in PayloadDirectory paths:" Importance="high" />
        <Message Condition="'$(TargetOS)' == 'ios'" Text="  - %(MAUIiOSScenario.PayloadDirectory)" Importance="high" />
    

        <!-- Add the discovered items to the appropriate Helix test collection -->
        <ItemGroup Condition="'$(TargetOS)' == 'ios'">
            <XHarnessAppBundleToTest Include="$([System.IO.Directory]::GetDirectories('%(_MAUIScenarioSearch.PayloadDirectory)/Debug/net9.0-ios/', '*.app', System.IO.SearchOption.AllDirectories))" >
                <TestTarget>ios-simulator-64</TestTarget>
                <WorkItemTimeout>02:00:00</WorkItemTimeout>
                <TestTimeout>01:00:00</TestTimeout>
                <WorkItemPrefix>%(_TestItem.PackageName)</WorkItemPrefix>
            </XHarnessAppBundleToTest>
        </ItemGroup>

        <!-- <ItemGroup Condition="'$(TargetOS)' == 'android'">
            <XHarnessApkToTest Include="@(_TestItem)">
                <WorkItemTimeout>02:00:00</WorkItemTimeout>
                <TestTimeout>01:00:00</TestTimeout>
                <AndroidPackageName>%(_TestItem.PackageName)</AndroidPackageName>
            </XHarnessApkToTest>
        </ItemGroup> -->
    </Target>


</Project>